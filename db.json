{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/README.MDOWN","path":"README.MDOWN","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/file/react.txt","path":"file/react.txt","modified":1,"renderable":0},{"_id":"source/img/fuck.jpg","path":"img/fuck.jpg","modified":1,"renderable":0},{"_id":"source/img/prototype.jpg","path":"img/prototype.jpg","modified":1,"renderable":0},{"_id":"source/img/scss.jpg","path":"img/scss.jpg","modified":1,"renderable":0},{"_id":"source/file/react-native环境搭建.txt","path":"file/react-native环境搭建.txt","modified":1,"renderable":0},{"_id":"themes/next/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/head.gif","path":"images/head.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/uploads/zfb.jpg","path":"uploads/zfb.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/uploads/head.gif","path":"uploads/head.gif","modified":1,"renderable":1},{"_id":"themes/next/source/uploads/wx.jpg","path":"uploads/wx.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"source/img/react.ppt","path":"img/react.ppt","modified":1,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1498892751928},{"_id":"source/README.MDOWN","hash":"b603c180a8ee23eb44a629ea4aa1579cc165c278","modified":1498906113149},{"_id":"themes/next/.javascript_ignore","hash":"de73037693881ad2626e2962e8c5ab243f7b24d0","modified":1478434472566},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1474644223762},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1474644223762},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1474644223746},{"_id":"themes/next/gulpfile.coffee","hash":"4e8c1082fa82e383494ff5b5963b7936d9c7bb2e","modified":1474644223777},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1474644223777},{"_id":"themes/next/_config.yml","hash":"700831b62597a1de96ea62a97f0bd10a50fec9a3","modified":1478437957285},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1474644223777},{"_id":"source/favicon.ico","hash":"696540c09858a334ebb6d190eb1fc9b1cde4524a","modified":1474696788772},{"_id":"themes/next/bower.json","hash":"023b5b945bc45c205129a18e26d304fb9caa15c7","modified":1478434544048},{"_id":"themes/next/package.json","hash":"95eaba1607544965e432d56406bae391dd11bcbb","modified":1474644223996},{"_id":"source/_posts/Django.md","hash":"59c1eec3fb1159b41c8cab8e7b82a7d554872e45","modified":1492857141560},{"_id":"source/_posts/TypeScript.md","hash":"6b5c389036263db91b3caeed1976979da87e5257","modified":1502863148717},{"_id":"source/_posts/Jquery-ready函数的实现.md","hash":"af5bb267614cb88502d72d131adf0792869a76be","modified":1512699160860},{"_id":"source/_posts/dom.md","hash":"f92ff34e0255183b3347a0d2a37fc838e458bc2b","modified":1488292780033},{"_id":"source/_posts/MVC的理解.md","hash":"ed62be569512e962730a7d09703bc33cd1eda645","modified":1492856421521},{"_id":"source/_posts/URL到展现页面的全过程.md","hash":"5ba6efab494e9091c480ca76244d3bf624f17e21","modified":1488292780031},{"_id":"source/_posts/hexo常用命令.md","hash":"5e0381afe87bef4c560522aa5c496910c2666d2a","modified":1512697630983},{"_id":"source/_posts/apply-call-bind用法.md","hash":"1fb83d17d30332a1dd658d21061b8d8cac17a4eb","modified":1478351807188},{"_id":"source/_posts/javascript内存泄漏.md","hash":"f7b454d4f3a55ca7af427ea574beabd64141d978","modified":1505812385491},{"_id":"source/_posts/es6-async解析.md","hash":"c480895f75f9a1e0f586c8ce782a7acc6ded3d8f","modified":1501742557156},{"_id":"source/_posts/module-exports和exports的区别.md","hash":"f99cbde5efdb6eed54dc4c20b2c2b09acbc0d5fd","modified":1478352765731},{"_id":"source/_posts/nodeJS开发指南.md","hash":"f4a33247745dc259a50c04833ba2f8df163cb070","modified":1512974634334},{"_id":"source/_posts/hexo部署出现404找不到js的解决方案.md","hash":"eb464afe92858b75f2cd85226ff4fc804278542a","modified":1478437060307},{"_id":"source/_posts/javascript排序.md","hash":"d6368996b0e924bccefe7a45de183aff14ac633c","modified":1492855293021},{"_id":"source/_posts/javascript数组遍历之间的区别.md","hash":"7c331321d58f51085e4a96317689bc507d5ca93b","modified":1502866637674},{"_id":"source/_posts/js高程-第三版-兼容问题和注意事项.md","hash":"0eb019d02d782aab328376ccbc26519d241601c5","modified":1505812577777},{"_id":"source/_posts/sass中的规则.md","hash":"1c8ecfe92e2197e6288c7cb7663aa940d6adea04","modified":1498904259171},{"_id":"source/_posts/react总结.md","hash":"8b5d7337ea6e34dcca5780274ed5ed9f8c850061","modified":1503277603360},{"_id":"source/_posts/mysql.md","hash":"3698a5ec954feb926820decd4f66695ba991cb4e","modified":1492856108706},{"_id":"source/_posts/sass函数.md","hash":"fe5ca4a0e54882d3b06b808ec7b8d2df8766d2dc","modified":1498904673285},{"_id":"source/_posts/ubuntu中的命令.md","hash":"873108dd11480da0ad520a7056e569f047f1f770","modified":1478351994939},{"_id":"source/_posts/sass基本用法.md","hash":"1c97043bf8096b41880307d53863f727a05c7bcc","modified":1498902999456},{"_id":"source/_posts/sass控制命令.md","hash":"0c2ed12d36643b77a065a1e4de82c8042e7f265f","modified":1498904460578},{"_id":"source/_posts/正则表达式.md","hash":"5343eb955f09e5511910b6fa22aebce2e2457eec","modified":1488292780035},{"_id":"source/file/react.txt","hash":"9a9f9699d4ff6329142517af42043f466d21b4fb","modified":1497406008143},{"_id":"source/categories/index.md","hash":"84909c28d402bc61bfab39a8ab3004b1d959eb81","modified":1474729529265},{"_id":"source/_posts/跨域.md","hash":"d47f7c8165abf7d45f9189992c0291daa19301ab","modified":1488292780043},{"_id":"source/_posts/sass中的Map.md","hash":"7f80b55020ba1cefd019ab0e737ae85816fbf337","modified":1498904725391},{"_id":"source/tags/index.md","hash":"7ed6416ceee3d256892f2ede0973dbead5cc6779","modified":1474735715538},{"_id":"source/about/index.md","hash":"be3fb358a340b542f917b39c4842b7e60258b1ea","modified":1474789784605},{"_id":"source/img/fuck.jpg","hash":"d8d376a616d3061bd495c9e4f4b69c94249d5c69","modified":1478436121730},{"_id":"source/img/prototype.jpg","hash":"bb5fddec630c7286c5e849d351e31270c246d245","modified":1503568307244},{"_id":"source/img/scss.jpg","hash":"90f0fea8d94ff642844ff8368246069dc03c2b8f","modified":1498895202946},{"_id":"themes/next/languages/default.yml","hash":"d2f6784b9c6567b64e58736e36025dbf96d863d4","modified":1474644223793},{"_id":"themes/next/languages/de.yml","hash":"4c3ffeb0d214c807a226dd98214958cb5483df1c","modified":1474644223793},{"_id":"themes/next/languages/fr-FR.yml","hash":"d8a40fe025fad6f42df0cf16d4be2d513769b062","modified":1474644223793},{"_id":"themes/next/languages/id.yml","hash":"19537c8bae42c4c2e7d06a64537e8dfd503b7e19","modified":1474644223793},{"_id":"themes/next/languages/en.yml","hash":"df81ab6b1cf3c88ed053d3766381cd12eb659fe3","modified":1474644223793},{"_id":"themes/next/languages/ko.yml","hash":"feed5fdb677f87fbb9ba2b6e4413e7011180708e","modified":1474644223809},{"_id":"themes/next/languages/pt-BR.yml","hash":"81498b783372f11b2149bd2b1731e78432760a0e","modified":1474644223809},{"_id":"themes/next/languages/ja.yml","hash":"e594aa42a33c489e4a65065659a01bb76c3c0cb5","modified":1474644223793},{"_id":"source/file/react-native环境搭建.txt","hash":"bbc854a8581ece7e86f52cdaadeb2600342b1094","modified":1500696215501},{"_id":"themes/next/languages/pt.yml","hash":"4c64594f477905d5d2d9ca2422f03175b7b0c617","modified":1474644223809},{"_id":"themes/next/languages/zh-Hans.yml","hash":"32c67bcc32c62670e3065c5a10441825643f3678","modified":1474731458028},{"_id":"themes/next/languages/zh-hk.yml","hash":"88e603eb0f3fd25c35bb37bd30372fd77bba7c46","modified":1474644223824},{"_id":"themes/next/languages/zh-tw.yml","hash":"04479b419c72b71fd34046f3fc33ebda4fe8de84","modified":1474644223824},{"_id":"themes/next/languages/ru.yml","hash":"c3aedb94decf05a301662afc3398ab563dd9995a","modified":1474644223809},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1474644223988},{"_id":"themes/next/layout/_layout.swig","hash":"1138b849e1240249480849cc2b6c6d09b28207a5","modified":1474644223824},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1474644223993},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1474644223996},{"_id":"themes/next/source/404.html","hash":"2b2e5bd645efb48649c620f98c8dfe018d50661f","modified":1474693271224},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1474644223983},{"_id":"themes/next/layout/page.swig","hash":"a91e3fd7aef26e8a02e339e3372801c517f400cf","modified":1474644223991},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1474644224606},{"_id":"themes/next/layout/category.swig","hash":"1012fd00db68d994199cfba9e42a15b05c6a059d","modified":1474789947753},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1474644224277},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1474644224606},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1474644224606},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"b87a5122dbff1d5fccf8f3d09d1640bd4b01c4a0","modified":1474644223824},{"_id":"themes/next/layout/_macro/post.swig","hash":"f0862e443e1c7b9ef4a6b619b51ba6038a99a567","modified":1474644223824},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1474644223840},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1474644223840},{"_id":"themes/next/layout/tag.swig","hash":"4d58969362b0eb0f78eaec91bd03d76698da4d7f","modified":1474733982426},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1474644223840},{"_id":"themes/next/layout/_partials/head.swig","hash":"881abebed3a7fa71827365b0ba0e84ec525eeb7f","modified":1474644223855},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1474644223855},{"_id":"themes/next/layout/_partials/search.swig","hash":"95b55fe35f2d2c22f2cc055d4379b5435314c7ec","modified":1474644223855},{"_id":"themes/next/layout/_partials/comments.swig","hash":"d04a53cb1bb8a5f462b05107e9c566c2dfbf4c7d","modified":1474644223840},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c5db707b46eac6a5df1d2a77f8556945a66fd181","modified":1474644223887},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1474644223887},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1474644223887},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"8aa5212d803670179222dbc80e73eadd7328d8e5","modified":1474644223840},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1474644223996},{"_id":"themes/next/scripts/tags/full-image.js","hash":"86194a05a8c6499de0b2aaa525d6de135778c0ae","modified":1474644223996},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1474644224012},{"_id":"themes/next/layout/_partials/header.swig","hash":"c0697644817f1570093de9f17ea096295da8c5f1","modified":1474644223855},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1474644224293},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c9d45628330ce8bf5fbe71c9f131c7d75334c1c4","modified":1474644223980},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1474644224308},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1474644224293},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1474644224308},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1474644224308},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1474644224308},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1474644224324},{"_id":"themes/next/layout/_partials/footer.swig","hash":"a079081444f119d54d73f45f0e0ad3ad20024574","modified":1474722778408},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1474644224325},{"_id":"themes/next/source/images/head.gif","hash":"2aa0d9e497c2585c3c6d64efa6aeefe57cbea37e","modified":1474647767897},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1474644224325},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1474644224308},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1474644224325},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1474644224325},{"_id":"themes/next/source/css/main.styl","hash":"350bed7d000fadbd028be0e9520955df2b84f72e","modified":1474723658096},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1474644223902},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1474644223902},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1474644224184},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1474644224184},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1474644224199},{"_id":"themes/next/source/uploads/zfb.jpg","hash":"759d6cf3c4a6ba0b67e8f3bd0c8ec79618df583e","modified":1474695476293},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1474644224262},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1474644224277},{"_id":"themes/next/source/uploads/head.gif","hash":"66accb46e7671093813816a6a232dc9bbb3914f4","modified":1474735001483},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1474644223855},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1474644223871},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1474644223871},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1474644223871},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"bf8e9223a40748b2e3ef77d753a8e1dbbce8095e","modified":1474644223871},{"_id":"themes/next/source/uploads/wx.jpg","hash":"9d86934b7e840f4a3938fae1f89070e30f1f5c55","modified":1474695084889},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1474644223887},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1474644223902},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"91c5353fcb94cc3b3f265b06ad2341734bc4c826","modified":1474644223902},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"8ba01f1ac07fbca62a4b00f5a0a3a506122c1530","modified":1474644223933},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1474644223887},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1474644224308},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1474644223969},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1474644223977},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1474644223902},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1474644224184},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1474644224184},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"f6b46096208512b4d8680c024fcb68f03ceab008","modified":1474644223972},{"_id":"themes/next/source/css/_style/style.styl","hash":"540a32f8920fe789c0cf91cb9da085e9bee6e4e5","modified":1474723648345},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"4a5c6df1579a4ca72ed17f7dbd6d16a509aa7dc8","modified":1474644223974},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1474644224262},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"3fdde03f45a80f7a85097a40b40358adde618fc7","modified":1474644223871},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1474644224184},{"_id":"themes/next/source/css/_variables/base.styl","hash":"a7ae72e846393493385275d934eaa78534d9834c","modified":1474644224277},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"b8e3663996b39590509d843f674360872b0242ac","modified":1474644224262},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1474644224341},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1474644224341},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1474644224341},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1474644224341},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1474644224356},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1474644224356},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1474644224419},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1474644224341},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1474644224356},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1474644224434},{"_id":"themes/next/source/js/src/utils.js","hash":"418d09eb4df5dcc5e8d13d7f6245b1888200b51c","modified":1474644224356},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1474644224434},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1474644224450},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1474644224450},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1474644224450},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1474644224543},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1474644224419},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"bb093f2ac1f1305069d873a7941324c8e0de3135","modified":1474644224434},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1474644224419},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1474644224575},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1474644224575},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1474644224559},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1474644224575},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1474644224575},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1474644224590},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1474644224575},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1474644224590},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1474644224590},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1474644224543},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1474644223918},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"a576c23d426ab236eb3dcd0bfe1b3f0b0c54ad1a","modified":1474644223918},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1474644223918},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1474644223918},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1474644223933},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1474644224590},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1474644224590},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1474644224021},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"f8b6a3017ab79057ce99f1ccb512193d67f4a35f","modified":1474644223960},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1474644224027},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1474644224028},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1474644223918},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1474644224121},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"0a2f48971d86ea72e1a8fd1d8bbf2b7d423666b2","modified":1474644223966},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1474644224024},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1474644224152},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1474644224168},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1474644224168},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1474644224168},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1474644224199},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1474644224074},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1474644224199},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1474644224199},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1474644224215},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1474644224215},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1474644224215},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"124b540f059fd1ed13514362007cfc70355278c6","modified":1474644224230},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1474644224230},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"13af2fb21fabfc4df4b577ce5363e13d03daff71","modified":1474644224230},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1474644224230},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1474644224230},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c9875c010bebd77b4f59d459a10455fceb0a66a1","modified":1474644224246},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1474644224246},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1474644224215},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1474644224168},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1474644224262},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1474644224262},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1474644224168},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"2182a6da3434a6fd4d03ab1592c645d3d3c88500","modified":1474644224246},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1474644224246},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"983c0723e8cfd84b67c2e66da0c26425a8db06e0","modified":1474644224262},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"a9d064d600ee35acd66508167e1ac8c6cfdbdcd8","modified":1474644224356},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1474644224356},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1474644224387},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1474644224387},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1474644224403},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1474644224372},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1474644224419},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1474644224387},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1474644224419},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1474644224434},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1474644224450},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"811432ad1e2d6c1f6da9a63fd919bf2a02b71dd9","modified":1474644224450},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1474644224434},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"4c2c5f5f6cc86d775a44b944661e038b7be98149","modified":1474644224450},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1474644224372},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1474644224575},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1474644224543},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1474644224575},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1474644224497},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1474644224481},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1474644224590},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1474644224528},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1474644224028},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1474644224028},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1474644224028},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1474644224043},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1474644224043},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1474644224059},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1474644224059},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"b8f9c95702e87fd0b170ab586c82c9718a245f8a","modified":1474644224059},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"70ec8d38d2b3ee1906793d1dcb68032adfa65f03","modified":1474644224043},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1474644224059},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1474644224074},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"12e366f04497e3f44388fd40111a03e02f7c26af","modified":1474644224043},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1474644224074},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1474644224074},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1474644224090},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"929fac3a505bacbce6ba63009fd15851e2a8669d","modified":1474644224090},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1474644224074},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1474644224090},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ca20affaeaf33c0904cb6356864fc6b78e95f447","modified":1474644224074},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1474644224090},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1474644224090},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1474644224106},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1474644224090},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1474644224106},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1474644224106},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1474644224043},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"681b7c8ce4dc47130a0ca67c1ec62be7c96e4c4f","modified":1474644224106},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1474644224121},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1474644224121},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1474644224121},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1474644224121},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1474644224137},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1474644224137},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"a83f493e494f5c73fab8f6f5b686ef1670490095","modified":1474644224137},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1474644224137},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1474644224137},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1474644224106},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1474644224152},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1474644224106},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"7bd182d918f3117335a5ee87a1b544e6d2b54d7d","modified":1474644224152},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1474644224215},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1474644224215},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1474644224246},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1474644224152},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"dcb4548d07cbb38b645b1753cf3ee7157e16921a","modified":1474644224152},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1474644224152},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1474644224403},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1474644224403},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1474644224403},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1474644224512},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1474644224403},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1474644224403},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1474644224387},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1474644224497},{"_id":"source/img/react.ppt","hash":"1b25c05555656adcde2f818f284fb376d35007df","modified":1498554167406}],"Category":[{"name":"Python","_id":"cjb1u1p5g00040sq9z6szrsmy"},{"name":"TypeScript","_id":"cjb1u1p6g000a0sq9z1tmhyy4"},{"name":"Javascript","_id":"cjb1u1p6t000g0sq94xtjq5gt"},{"name":"MVC","_id":"cjb1u1p7s000t0sq9qrigtdn7"},{"name":"hexo","_id":"cjb1u1p8600130sq9ii0xjw5f"},{"name":"ES6","_id":"cjb1u1p90001k0sq9sf59qspp"},{"name":"Sass","_id":"cjb1u1pa700200sq90gandnt3"},{"name":"Mysql","_id":"cjb1u1pam00270sq9zanhuha4"},{"name":"ubuntu","_id":"cjb1u1pb1002m0sq9ku6ulof8"}],"Data":[],"Page":[{"title":"分类","date":"2016-09-24T06:10:59.000Z","type":"categories","comments":0,"_content":"\n","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2016-09-24 14:10:59\ntype: \"categories\"\ncomments: false\n---\n\n","updated":"2016-09-24T15:05:29.265Z","path":"categories/index.html","layout":"page","_id":"cjb1u1p5600010sq9wrnpje7i","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-09-24T16:47:48.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-09-25 00:47:48\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-09-24T16:48:35.538Z","path":"tags/index.html","layout":"page","_id":"cjb1u1p5b00030sq91ss947f3","content":"","excerpt":"","more":""},{"title":"about","type":"about","comments":0,"date":"2016-09-24T06:11:50.000Z","_content":"## 博客简介\n---\n> * 整理知识，学习笔记\n> * 所见所想\n\n## 个人简介\n---\n> * 昵称：菜菜\n> * 故乡：山西吕梁\n> * 居住地：北京朝阳\n\n## 联系方式\n---\n> * Q Q：835750871\n> * 邮箱：835750871@qq.com","source":"about/index.md","raw":"---\ntitle: about\ntype: \"about\"\ncomments: false\ndate: 2016-09-24 14:11:50\n---\n## 博客简介\n---\n> * 整理知识，学习笔记\n> * 所见所想\n\n## 个人简介\n---\n> * 昵称：菜菜\n> * 故乡：山西吕梁\n> * 居住地：北京朝阳\n\n## 联系方式\n---\n> * Q Q：835750871\n> * 邮箱：835750871@qq.com","updated":"2016-09-25T07:49:44.605Z","path":"about/index.html","layout":"page","_id":"cjb1u1p5v00070sq9liksh00e","content":"<h2 id=\"博客简介\"><a href=\"#博客简介\" class=\"headerlink\" title=\"博客简介\"></a>博客简介</h2><hr>\n<blockquote>\n<ul>\n<li>整理知识，学习笔记</li>\n<li>所见所想</li>\n</ul>\n</blockquote>\n<h2 id=\"个人简介\"><a href=\"#个人简介\" class=\"headerlink\" title=\"个人简介\"></a>个人简介</h2><hr>\n<blockquote>\n<ul>\n<li>昵称：菜菜</li>\n<li>故乡：山西吕梁</li>\n<li>居住地：北京朝阳</li>\n</ul>\n</blockquote>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><hr>\n<blockquote>\n<ul>\n<li>Q Q：835750871</li>\n<li>邮箱：835750871@qq.com</li>\n</ul>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"博客简介\"><a href=\"#博客简介\" class=\"headerlink\" title=\"博客简介\"></a>博客简介</h2><hr>\n<blockquote>\n<ul>\n<li>整理知识，学习笔记</li>\n<li>所见所想</li>\n</ul>\n</blockquote>\n<h2 id=\"个人简介\"><a href=\"#个人简介\" class=\"headerlink\" title=\"个人简介\"></a>个人简介</h2><hr>\n<blockquote>\n<ul>\n<li>昵称：菜菜</li>\n<li>故乡：山西吕梁</li>\n<li>居住地：北京朝阳</li>\n</ul>\n</blockquote>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><hr>\n<blockquote>\n<ul>\n<li>Q Q：835750871</li>\n<li>邮箱：835750871@qq.com</li>\n</ul>\n</blockquote>\n"}],"Post":[{"title":"Django","date":"2017-04-13T12:50:33.000Z","_content":"\n# Django 学习\n练习项目：[python django mysql 个人博客](https://github.com/caicaibrid/django_blog_test)\n## django 基本命令\n\n> 1.新建一个django project\n    django-admin.py startproject project-name //project-name项目名称\n\n>2.新建app (模块)\n   python manage.py startapp app-name //一般一个项目有多个app, 当然通用的app也可以在多个项目中使用。\n\n把 app-name 加入到 settings.INSTALLED_APPS中\ndjango就会默认去寻找该模块下面的templates文件夹，可以通过render(request,'templates里的html')直接返回\n\n## django 模板\n\n```\nfrom django.shortcuts import render //返回模板render()\n{% block title%} {% endblock %}\n\n{% extends 'base.html'%}\n\n{% include \"header.html\" %}\n\n{% url \"add2\" 4 5 %} //add2 为路由指定的name 4 5 为参数\n\n模板上得到视图的网址 {% url 'add2' 4 5 %}\n<br>\n获取当前的地址 {{ request.path }}\n<br>\n获取当前的GET参数 {{ request.GET.urlencode }}\n<br>\n获取当前的用户 {{ request.user }}\n\n```\n## django models\n\n```\npython manage.py startapp modelStudy //创建一个模块modelStudy\n然后在该模块下面编辑models.py添加一个Peopele类\n\nclass People(models.Model):\n    name = models.CharField(max_length=30)\n    age = models.IntegerField()\n    def __unicode__(self):\n        return self.name\n\n同步一下数据库（我们使用默认的数据库 SQLite3，无需配置）\npython manage.py syncdb # 进入 manage.py 所在的那个文件夹下输入这个命令\n注意：Django 1.7 及以上的版本需要用以下命令\npython manage.py makemigrations\npython manage.py migrate\n\n上面命令Django生成了一系列的表，也生成了我们新建的modelStudy_people这个表\n\nDjango提供了丰富的API, 下面演示如何使用它。\n$ python manage.py shell\n>>> from people.models import Person\n>>> Person.objects.create(name=\"WeizhongTu\", age=24)\n<Person: Person object>\n\n新建一个对象的方法有以下几种：\n\n1.People.objects.create(name=name,age=age)\n2.p = People(name=\"WZ\", age=23)\n  p.save()\n3.p = People(name=\"TWZ\")\n  p.age = 23\n  p.save()\n4.People.objects.get_or_create(name=\"WZT\", age=23)\n\n这种方法是防止重复很好的方法，但是速度要相对慢些，返回一个元组，第一个为People对象，第二个为True或False, 新建时返回的是True, 已经存在时返回False.\n\n### 获取对象有以下方法：\n\nPerson.objects.all()\n\nPerson.objects.all()[:10] 切片操作，获取10个人，不支持负索引，切片可以节约内存\n\nPerson.objects.get(name=name)\n\nget是用来获取一个对象的，如果需要获取满足条件的一些人，就要用到filter\n\nPerson.objects.filter(name=\"abc\") # 等于Person.objects.filter(name__exact=\"abc\") 名称严格等于 \"abc\" 的人\n\nPerson.objects.filter(name__iexact=\"abc\") # 名称为 abc 但是不区分大小写，可以找到 ABC, Abc, aBC，这些都符合条件\n\nPerson.objects.filter(name__contains=\"abc\") # 名称中包含 \"abc\"的人\n\nPerson.objects.filter(name__icontains=\"abc\") #名称中包含 \"abc\"，且abc不区分大小写\n\nPerson.objects.filter(name__regex=\"^abc\") # 正则表达式查询\n\nPerson.objects.filter(name__iregex=\"^abc\")# 正则表达式不区分大小写\n\nfilter是找出满足条件的，当然也有排除符合某条件的\n\nPerson.objects.exclude(name__contains=\"WZ\") # 排除包含 WZ 的Person对象\n\nPerson.objects.filter(name__contains=\"abc\").exclude(age=23) # 找出名称含有abc, 但是排除年龄是23岁的\n```\n\n# django 模板过滤器\n\n```\n一、形式：小写：  {{ name | lower }}\n\n二、串联：先转义文本到HTML，再转换每行到 <p> 标签： {{ my_text|escape|linebreaks }}\n\n三、过滤器的参数\n\n显示前30个字：{{ bio | truncatewords:\"30\" }}\n\n格式化：{{ pub_date | date:\"F j, Y\" }}\n\n过滤器列表：{{ 123|add:\"5\" }} 给value加上一个数值\n\n{{ \"AB'CD\"|addslashes }}： 单引号加上转义号，一般用于输出到javascript中\n\n{{ \"abcd\"|capfirst }}： 第一个字母大写\n\n{{ \"abcd\"|center:\"50\" }}： 输出指定长度的字符串，并把值对中\n\n{{ \"123spam456spam789\"|cut:\"spam\" }}： 查找删除指定字符串\n\n{{ value|date:\"F j, Y\" }}： 格式化日期\n\n{{ value|default:\"(N/A)\" }}： 值不存在，使用指定值\n\n{{ value|default_if_none:\"(N/A)\" }}： 值是None，使用指定值\n\n{{ 列表变量|dictsort:\"数字\" }} ：排序从小到大\n\n{{ 列表变量|dictsortreversed:\"数字\" }} ：排序从大到小\n\n{% if 92|divisibleby:\"2\" %} ：判断是否整除指定数字\n\n{{ string|escape }} ：转换为html实体\n\n{{ 21984124|filesizeformat }} ：以1024为基数，计算最大值，保留1位小数，增加可读性\n\n{{ list|first }} ：返回列表第一个元素\n\n{{ \"ik23hr&jqwh\"|fix_ampersands }}： &转为&amp;\n\n{{ 13.414121241|floatformat }} ：保留1位小数，可为负数，几种形式\n\n{{ 13.414121241|floatformat:\"2\" }}： 保留2位小数\n\n{{ 23456 |get_digit:\"1\" }} ：从个位数开始截取指定位置的1个数字\n\n{{ list|join:\", \" }} ：用指定分隔符连接列表\n\n{{ list|length }} ：返回列表个数\n\n{% if 列表|length_is:\"3\" %} ：列表个数是否指定数值\n\n{{ \"ABCD\"|linebreaks }}： 用新行用<p> 、 <br /> 标记包裹\n\n{{ \"ABCD\"|linebreaksbr }}： 用新行用<br /> 标记包裹\n\n{{ 变量|linenumbers }}： 为变量中每一行加上行号\n\n{{ \"abcd\"|ljust:\"50\" }}： 把字符串在指定宽度中对左，其它用空格填充\n\n{{ \"ABCD\"|lower }}： 小写\n\n{% for i in \"1abc1\"|make_list %}ABCDE,{% endfor %}： 把字符串或数字的字符个数作为一个列表\n\n{{ \"abcdefghijklmnopqrstuvwxyz\"|phone2numeric }}： 把字符转为可以对应的数字？？\n\n{{ 列表或数字|pluralize }}： 单词的复数形式，如列表字符串个数大于1，返回s，否则返回空串\n\n{{ 列表或数字|pluralize:\"es\" }}： 指定es\n\n{{ 列表或数字|pluralize:\"y,ies\" }}： 指定ies替换为y\n\n{{ object|pprint }}： 显示一个对象的值\n\n{{ 列表|random }}： 返回列表的随机一项\n\n{{ string|removetags:\"br p div\" }}： 删除字符串中指定html标记\n\n{{ string|rjust:\"50\" }}： 把字符串在指定宽度中对右，其它用空格填充\n\n{{ 列表|slice:\":2\" }}： 切片\n\n{{ string|slugify }}： 字符串中留下减号和下划线，其它符号删除，空格用减号替换\n\n{{ 3|stringformat:\"02i\" }}： 字符串格式，使用Python的字符串格式语法\n\n{{ \"E<A>A</A>B<C>C</C>D\"|striptags }}： 剥去[X]HTML语法标记\n\n{{ 时间变量|time:\"P\" }}： 日期的时间部分格式\n\n{{ datetime|timesince }}： 给定日期到现在过去了多少时间\n\n{{ datetime|timesince:\"other_datetime\" }}： 两日期间过去了多少时间\n\n{{ datetime|timeuntil }}： 给定日期到现在过去了多少时间，与上面的区别在于2日期的前后位置。\n\n{{ datetime|timeuntil:\"other_datetime\" }}： 两日期间过去了多少时间\n\n{{ \"abdsadf\"|title }}： 首字母大写\n\n{{ \"A B C D E F\"|truncatewords:\"3\" }}： 截取指定个数的单词\n\n{{ \"<a>1<a>1<a>1</a></a></a>22<a>1</a>\"|truncatewords_html:\"2\" }}： 截取指定个数的html标记，并补完整\n\n{{ list|unordered_list }}：//ul 多重嵌套列表展现为html的无序列表\n\n{{ string|upper }} ：全部大写\n\n<a href=\"{{ link|urlencode }}\">linkage</a>： url编码\n\n{{ string|urlize }}： 将URLs由纯文本变为可点击的链接。（没有实验成功）\n\n{{ string|urlizetrunc:\"30\" }}： 同上，多个截取字符数。（同样没有实验成功）\n\n{{ \"B C D E F\"|wordcount }}： 单词数\n\n{{ \"a b c d e f g h i j k\"|wordwrap:\"5\" }}： 每指定数量的字符就插入回车符\n\n{{ boolean|yesno:\"Yes,No,Perhaps\" }}： 对三种值的返回字符串，对应是 非空,空,None\n\n加法\n{{value|add:10}}\nnote:value=5,则结果返回15\n\n减法\n{{value|add:-10}}\nnote:value=5,则结果返回-5，加一个负数就是减法了\n\n乘法\n{% widthratio 5 1 100%}\nnote:等同于：(5 / 1) * 100 ，结果返回500，withratio需要三个参数，它会使用参数1/参数2*参数3的方式进行运算，进行乘法运算，使「参数2」=1\n\n除法\n{% widthratio 5 100 1%}\nnote:等同于：(5 / 100) * 1,则结果返回0.05,和乘法一样，使「参数3」= 1就是除法了。\n\n### 关闭自动转义\n{% autoescape off %}\n    {{ ele.content |truncatewords_html:\"2\" }}\n{% endautoescape %}\n```","source":"_posts/Django.md","raw":"---\ntitle: Django\ndate: 2017-04-13 20:50:33\ncategories: Python\ntags:\n     - Django\n---\n\n# Django 学习\n练习项目：[python django mysql 个人博客](https://github.com/caicaibrid/django_blog_test)\n## django 基本命令\n\n> 1.新建一个django project\n    django-admin.py startproject project-name //project-name项目名称\n\n>2.新建app (模块)\n   python manage.py startapp app-name //一般一个项目有多个app, 当然通用的app也可以在多个项目中使用。\n\n把 app-name 加入到 settings.INSTALLED_APPS中\ndjango就会默认去寻找该模块下面的templates文件夹，可以通过render(request,'templates里的html')直接返回\n\n## django 模板\n\n```\nfrom django.shortcuts import render //返回模板render()\n{% block title%} {% endblock %}\n\n{% extends 'base.html'%}\n\n{% include \"header.html\" %}\n\n{% url \"add2\" 4 5 %} //add2 为路由指定的name 4 5 为参数\n\n模板上得到视图的网址 {% url 'add2' 4 5 %}\n<br>\n获取当前的地址 {{ request.path }}\n<br>\n获取当前的GET参数 {{ request.GET.urlencode }}\n<br>\n获取当前的用户 {{ request.user }}\n\n```\n## django models\n\n```\npython manage.py startapp modelStudy //创建一个模块modelStudy\n然后在该模块下面编辑models.py添加一个Peopele类\n\nclass People(models.Model):\n    name = models.CharField(max_length=30)\n    age = models.IntegerField()\n    def __unicode__(self):\n        return self.name\n\n同步一下数据库（我们使用默认的数据库 SQLite3，无需配置）\npython manage.py syncdb # 进入 manage.py 所在的那个文件夹下输入这个命令\n注意：Django 1.7 及以上的版本需要用以下命令\npython manage.py makemigrations\npython manage.py migrate\n\n上面命令Django生成了一系列的表，也生成了我们新建的modelStudy_people这个表\n\nDjango提供了丰富的API, 下面演示如何使用它。\n$ python manage.py shell\n>>> from people.models import Person\n>>> Person.objects.create(name=\"WeizhongTu\", age=24)\n<Person: Person object>\n\n新建一个对象的方法有以下几种：\n\n1.People.objects.create(name=name,age=age)\n2.p = People(name=\"WZ\", age=23)\n  p.save()\n3.p = People(name=\"TWZ\")\n  p.age = 23\n  p.save()\n4.People.objects.get_or_create(name=\"WZT\", age=23)\n\n这种方法是防止重复很好的方法，但是速度要相对慢些，返回一个元组，第一个为People对象，第二个为True或False, 新建时返回的是True, 已经存在时返回False.\n\n### 获取对象有以下方法：\n\nPerson.objects.all()\n\nPerson.objects.all()[:10] 切片操作，获取10个人，不支持负索引，切片可以节约内存\n\nPerson.objects.get(name=name)\n\nget是用来获取一个对象的，如果需要获取满足条件的一些人，就要用到filter\n\nPerson.objects.filter(name=\"abc\") # 等于Person.objects.filter(name__exact=\"abc\") 名称严格等于 \"abc\" 的人\n\nPerson.objects.filter(name__iexact=\"abc\") # 名称为 abc 但是不区分大小写，可以找到 ABC, Abc, aBC，这些都符合条件\n\nPerson.objects.filter(name__contains=\"abc\") # 名称中包含 \"abc\"的人\n\nPerson.objects.filter(name__icontains=\"abc\") #名称中包含 \"abc\"，且abc不区分大小写\n\nPerson.objects.filter(name__regex=\"^abc\") # 正则表达式查询\n\nPerson.objects.filter(name__iregex=\"^abc\")# 正则表达式不区分大小写\n\nfilter是找出满足条件的，当然也有排除符合某条件的\n\nPerson.objects.exclude(name__contains=\"WZ\") # 排除包含 WZ 的Person对象\n\nPerson.objects.filter(name__contains=\"abc\").exclude(age=23) # 找出名称含有abc, 但是排除年龄是23岁的\n```\n\n# django 模板过滤器\n\n```\n一、形式：小写：  {{ name | lower }}\n\n二、串联：先转义文本到HTML，再转换每行到 <p> 标签： {{ my_text|escape|linebreaks }}\n\n三、过滤器的参数\n\n显示前30个字：{{ bio | truncatewords:\"30\" }}\n\n格式化：{{ pub_date | date:\"F j, Y\" }}\n\n过滤器列表：{{ 123|add:\"5\" }} 给value加上一个数值\n\n{{ \"AB'CD\"|addslashes }}： 单引号加上转义号，一般用于输出到javascript中\n\n{{ \"abcd\"|capfirst }}： 第一个字母大写\n\n{{ \"abcd\"|center:\"50\" }}： 输出指定长度的字符串，并把值对中\n\n{{ \"123spam456spam789\"|cut:\"spam\" }}： 查找删除指定字符串\n\n{{ value|date:\"F j, Y\" }}： 格式化日期\n\n{{ value|default:\"(N/A)\" }}： 值不存在，使用指定值\n\n{{ value|default_if_none:\"(N/A)\" }}： 值是None，使用指定值\n\n{{ 列表变量|dictsort:\"数字\" }} ：排序从小到大\n\n{{ 列表变量|dictsortreversed:\"数字\" }} ：排序从大到小\n\n{% if 92|divisibleby:\"2\" %} ：判断是否整除指定数字\n\n{{ string|escape }} ：转换为html实体\n\n{{ 21984124|filesizeformat }} ：以1024为基数，计算最大值，保留1位小数，增加可读性\n\n{{ list|first }} ：返回列表第一个元素\n\n{{ \"ik23hr&jqwh\"|fix_ampersands }}： &转为&amp;\n\n{{ 13.414121241|floatformat }} ：保留1位小数，可为负数，几种形式\n\n{{ 13.414121241|floatformat:\"2\" }}： 保留2位小数\n\n{{ 23456 |get_digit:\"1\" }} ：从个位数开始截取指定位置的1个数字\n\n{{ list|join:\", \" }} ：用指定分隔符连接列表\n\n{{ list|length }} ：返回列表个数\n\n{% if 列表|length_is:\"3\" %} ：列表个数是否指定数值\n\n{{ \"ABCD\"|linebreaks }}： 用新行用<p> 、 <br /> 标记包裹\n\n{{ \"ABCD\"|linebreaksbr }}： 用新行用<br /> 标记包裹\n\n{{ 变量|linenumbers }}： 为变量中每一行加上行号\n\n{{ \"abcd\"|ljust:\"50\" }}： 把字符串在指定宽度中对左，其它用空格填充\n\n{{ \"ABCD\"|lower }}： 小写\n\n{% for i in \"1abc1\"|make_list %}ABCDE,{% endfor %}： 把字符串或数字的字符个数作为一个列表\n\n{{ \"abcdefghijklmnopqrstuvwxyz\"|phone2numeric }}： 把字符转为可以对应的数字？？\n\n{{ 列表或数字|pluralize }}： 单词的复数形式，如列表字符串个数大于1，返回s，否则返回空串\n\n{{ 列表或数字|pluralize:\"es\" }}： 指定es\n\n{{ 列表或数字|pluralize:\"y,ies\" }}： 指定ies替换为y\n\n{{ object|pprint }}： 显示一个对象的值\n\n{{ 列表|random }}： 返回列表的随机一项\n\n{{ string|removetags:\"br p div\" }}： 删除字符串中指定html标记\n\n{{ string|rjust:\"50\" }}： 把字符串在指定宽度中对右，其它用空格填充\n\n{{ 列表|slice:\":2\" }}： 切片\n\n{{ string|slugify }}： 字符串中留下减号和下划线，其它符号删除，空格用减号替换\n\n{{ 3|stringformat:\"02i\" }}： 字符串格式，使用Python的字符串格式语法\n\n{{ \"E<A>A</A>B<C>C</C>D\"|striptags }}： 剥去[X]HTML语法标记\n\n{{ 时间变量|time:\"P\" }}： 日期的时间部分格式\n\n{{ datetime|timesince }}： 给定日期到现在过去了多少时间\n\n{{ datetime|timesince:\"other_datetime\" }}： 两日期间过去了多少时间\n\n{{ datetime|timeuntil }}： 给定日期到现在过去了多少时间，与上面的区别在于2日期的前后位置。\n\n{{ datetime|timeuntil:\"other_datetime\" }}： 两日期间过去了多少时间\n\n{{ \"abdsadf\"|title }}： 首字母大写\n\n{{ \"A B C D E F\"|truncatewords:\"3\" }}： 截取指定个数的单词\n\n{{ \"<a>1<a>1<a>1</a></a></a>22<a>1</a>\"|truncatewords_html:\"2\" }}： 截取指定个数的html标记，并补完整\n\n{{ list|unordered_list }}：//ul 多重嵌套列表展现为html的无序列表\n\n{{ string|upper }} ：全部大写\n\n<a href=\"{{ link|urlencode }}\">linkage</a>： url编码\n\n{{ string|urlize }}： 将URLs由纯文本变为可点击的链接。（没有实验成功）\n\n{{ string|urlizetrunc:\"30\" }}： 同上，多个截取字符数。（同样没有实验成功）\n\n{{ \"B C D E F\"|wordcount }}： 单词数\n\n{{ \"a b c d e f g h i j k\"|wordwrap:\"5\" }}： 每指定数量的字符就插入回车符\n\n{{ boolean|yesno:\"Yes,No,Perhaps\" }}： 对三种值的返回字符串，对应是 非空,空,None\n\n加法\n{{value|add:10}}\nnote:value=5,则结果返回15\n\n减法\n{{value|add:-10}}\nnote:value=5,则结果返回-5，加一个负数就是减法了\n\n乘法\n{% widthratio 5 1 100%}\nnote:等同于：(5 / 1) * 100 ，结果返回500，withratio需要三个参数，它会使用参数1/参数2*参数3的方式进行运算，进行乘法运算，使「参数2」=1\n\n除法\n{% widthratio 5 100 1%}\nnote:等同于：(5 / 100) * 1,则结果返回0.05,和乘法一样，使「参数3」= 1就是除法了。\n\n### 关闭自动转义\n{% autoescape off %}\n    {{ ele.content |truncatewords_html:\"2\" }}\n{% endautoescape %}\n```","slug":"Django","published":1,"updated":"2017-04-22T10:32:21.560Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb1u1p4w00000sq9o4tj9fuz","content":"<h1 id=\"Django-学习\"><a href=\"#Django-学习\" class=\"headerlink\" title=\"Django 学习\"></a>Django 学习</h1><p>练习项目：<a href=\"https://github.com/caicaibrid/django_blog_test\" target=\"_blank\" rel=\"external\">python django mysql 个人博客</a></p>\n<h2 id=\"django-基本命令\"><a href=\"#django-基本命令\" class=\"headerlink\" title=\"django 基本命令\"></a>django 基本命令</h2><blockquote>\n<p>1.新建一个django project<br>    django-admin.py startproject project-name //project-name项目名称</p>\n<p>2.新建app (模块)<br>   python manage.py startapp app-name //一般一个项目有多个app, 当然通用的app也可以在多个项目中使用。</p>\n</blockquote>\n<p>把 app-name 加入到 settings.INSTALLED_APPS中<br>django就会默认去寻找该模块下面的templates文件夹，可以通过render(request,’templates里的html’)直接返回</p>\n<h2 id=\"django-模板\"><a href=\"#django-模板\" class=\"headerlink\" title=\"django 模板\"></a>django 模板</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">from django.shortcuts import render //返回模板render()</div><div class=\"line\">&#123;% block title%&#125; &#123;% endblock %&#125;</div><div class=\"line\"></div><div class=\"line\">&#123;% extends &apos;base.html&apos;%&#125;</div><div class=\"line\"></div><div class=\"line\">&#123;% include &quot;header.html&quot; %&#125;</div><div class=\"line\"></div><div class=\"line\">&#123;% url &quot;add2&quot; 4 5 %&#125; //add2 为路由指定的name 4 5 为参数</div><div class=\"line\"></div><div class=\"line\">模板上得到视图的网址 &#123;% url &apos;add2&apos; 4 5 %&#125;</div><div class=\"line\">&lt;br&gt;</div><div class=\"line\">获取当前的地址 &#123;&#123; request.path &#125;&#125;</div><div class=\"line\">&lt;br&gt;</div><div class=\"line\">获取当前的GET参数 &#123;&#123; request.GET.urlencode &#125;&#125;</div><div class=\"line\">&lt;br&gt;</div><div class=\"line\">获取当前的用户 &#123;&#123; request.user &#125;&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"django-models\"><a href=\"#django-models\" class=\"headerlink\" title=\"django models\"></a>django models</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\">python manage.py startapp modelStudy //创建一个模块modelStudy</div><div class=\"line\">然后在该模块下面编辑models.py添加一个Peopele类</div><div class=\"line\"></div><div class=\"line\">class People(models.Model):</div><div class=\"line\">    name = models.CharField(max_length=30)</div><div class=\"line\">    age = models.IntegerField()</div><div class=\"line\">    def __unicode__(self):</div><div class=\"line\">        return self.name</div><div class=\"line\"></div><div class=\"line\">同步一下数据库（我们使用默认的数据库 SQLite3，无需配置）</div><div class=\"line\">python manage.py syncdb # 进入 manage.py 所在的那个文件夹下输入这个命令</div><div class=\"line\">注意：Django 1.7 及以上的版本需要用以下命令</div><div class=\"line\">python manage.py makemigrations</div><div class=\"line\">python manage.py migrate</div><div class=\"line\"></div><div class=\"line\">上面命令Django生成了一系列的表，也生成了我们新建的modelStudy_people这个表</div><div class=\"line\"></div><div class=\"line\">Django提供了丰富的API, 下面演示如何使用它。</div><div class=\"line\">$ python manage.py shell</div><div class=\"line\">&gt;&gt;&gt; from people.models import Person</div><div class=\"line\">&gt;&gt;&gt; Person.objects.create(name=&quot;WeizhongTu&quot;, age=24)</div><div class=\"line\">&lt;Person: Person object&gt;</div><div class=\"line\"></div><div class=\"line\">新建一个对象的方法有以下几种：</div><div class=\"line\"></div><div class=\"line\">1.People.objects.create(name=name,age=age)</div><div class=\"line\">2.p = People(name=&quot;WZ&quot;, age=23)</div><div class=\"line\">  p.save()</div><div class=\"line\">3.p = People(name=&quot;TWZ&quot;)</div><div class=\"line\">  p.age = 23</div><div class=\"line\">  p.save()</div><div class=\"line\">4.People.objects.get_or_create(name=&quot;WZT&quot;, age=23)</div><div class=\"line\"></div><div class=\"line\">这种方法是防止重复很好的方法，但是速度要相对慢些，返回一个元组，第一个为People对象，第二个为True或False, 新建时返回的是True, 已经存在时返回False.</div><div class=\"line\"></div><div class=\"line\">### 获取对象有以下方法：</div><div class=\"line\"></div><div class=\"line\">Person.objects.all()</div><div class=\"line\"></div><div class=\"line\">Person.objects.all()[:10] 切片操作，获取10个人，不支持负索引，切片可以节约内存</div><div class=\"line\"></div><div class=\"line\">Person.objects.get(name=name)</div><div class=\"line\"></div><div class=\"line\">get是用来获取一个对象的，如果需要获取满足条件的一些人，就要用到filter</div><div class=\"line\"></div><div class=\"line\">Person.objects.filter(name=&quot;abc&quot;) # 等于Person.objects.filter(name__exact=&quot;abc&quot;) 名称严格等于 &quot;abc&quot; 的人</div><div class=\"line\"></div><div class=\"line\">Person.objects.filter(name__iexact=&quot;abc&quot;) # 名称为 abc 但是不区分大小写，可以找到 ABC, Abc, aBC，这些都符合条件</div><div class=\"line\"></div><div class=\"line\">Person.objects.filter(name__contains=&quot;abc&quot;) # 名称中包含 &quot;abc&quot;的人</div><div class=\"line\"></div><div class=\"line\">Person.objects.filter(name__icontains=&quot;abc&quot;) #名称中包含 &quot;abc&quot;，且abc不区分大小写</div><div class=\"line\"></div><div class=\"line\">Person.objects.filter(name__regex=&quot;^abc&quot;) # 正则表达式查询</div><div class=\"line\"></div><div class=\"line\">Person.objects.filter(name__iregex=&quot;^abc&quot;)# 正则表达式不区分大小写</div><div class=\"line\"></div><div class=\"line\">filter是找出满足条件的，当然也有排除符合某条件的</div><div class=\"line\"></div><div class=\"line\">Person.objects.exclude(name__contains=&quot;WZ&quot;) # 排除包含 WZ 的Person对象</div><div class=\"line\"></div><div class=\"line\">Person.objects.filter(name__contains=&quot;abc&quot;).exclude(age=23) # 找出名称含有abc, 但是排除年龄是23岁的</div></pre></td></tr></table></figure>\n<h1 id=\"django-模板过滤器\"><a href=\"#django-模板过滤器\" class=\"headerlink\" title=\"django 模板过滤器\"></a>django 模板过滤器</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div></pre></td><td class=\"code\"><pre><div class=\"line\">一、形式：小写：  &#123;&#123; name | lower &#125;&#125;</div><div class=\"line\"></div><div class=\"line\">二、串联：先转义文本到HTML，再转换每行到 &lt;p&gt; 标签： &#123;&#123; my_text|escape|linebreaks &#125;&#125;</div><div class=\"line\"></div><div class=\"line\">三、过滤器的参数</div><div class=\"line\"></div><div class=\"line\">显示前30个字：&#123;&#123; bio | truncatewords:&quot;30&quot; &#125;&#125;</div><div class=\"line\"></div><div class=\"line\">格式化：&#123;&#123; pub_date | date:&quot;F j, Y&quot; &#125;&#125;</div><div class=\"line\"></div><div class=\"line\">过滤器列表：&#123;&#123; 123|add:&quot;5&quot; &#125;&#125; 给value加上一个数值</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; &quot;AB&apos;CD&quot;|addslashes &#125;&#125;： 单引号加上转义号，一般用于输出到javascript中</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; &quot;abcd&quot;|capfirst &#125;&#125;： 第一个字母大写</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; &quot;abcd&quot;|center:&quot;50&quot; &#125;&#125;： 输出指定长度的字符串，并把值对中</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; &quot;123spam456spam789&quot;|cut:&quot;spam&quot; &#125;&#125;： 查找删除指定字符串</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; value|date:&quot;F j, Y&quot; &#125;&#125;： 格式化日期</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; value|default:&quot;(N/A)&quot; &#125;&#125;： 值不存在，使用指定值</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; value|default_if_none:&quot;(N/A)&quot; &#125;&#125;： 值是None，使用指定值</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; 列表变量|dictsort:&quot;数字&quot; &#125;&#125; ：排序从小到大</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; 列表变量|dictsortreversed:&quot;数字&quot; &#125;&#125; ：排序从大到小</div><div class=\"line\"></div><div class=\"line\">&#123;% if 92|divisibleby:&quot;2&quot; %&#125; ：判断是否整除指定数字</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; string|escape &#125;&#125; ：转换为html实体</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; 21984124|filesizeformat &#125;&#125; ：以1024为基数，计算最大值，保留1位小数，增加可读性</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; list|first &#125;&#125; ：返回列表第一个元素</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; &quot;ik23hr&amp;jqwh&quot;|fix_ampersands &#125;&#125;： &amp;转为&amp;amp;</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; 13.414121241|floatformat &#125;&#125; ：保留1位小数，可为负数，几种形式</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; 13.414121241|floatformat:&quot;2&quot; &#125;&#125;： 保留2位小数</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; 23456 |get_digit:&quot;1&quot; &#125;&#125; ：从个位数开始截取指定位置的1个数字</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; list|join:&quot;, &quot; &#125;&#125; ：用指定分隔符连接列表</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; list|length &#125;&#125; ：返回列表个数</div><div class=\"line\"></div><div class=\"line\">&#123;% if 列表|length_is:&quot;3&quot; %&#125; ：列表个数是否指定数值</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; &quot;ABCD&quot;|linebreaks &#125;&#125;： 用新行用&lt;p&gt; 、 &lt;br /&gt; 标记包裹</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; &quot;ABCD&quot;|linebreaksbr &#125;&#125;： 用新行用&lt;br /&gt; 标记包裹</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; 变量|linenumbers &#125;&#125;： 为变量中每一行加上行号</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; &quot;abcd&quot;|ljust:&quot;50&quot; &#125;&#125;： 把字符串在指定宽度中对左，其它用空格填充</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; &quot;ABCD&quot;|lower &#125;&#125;： 小写</div><div class=\"line\"></div><div class=\"line\">&#123;% for i in &quot;1abc1&quot;|make_list %&#125;ABCDE,&#123;% endfor %&#125;： 把字符串或数字的字符个数作为一个列表</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; &quot;abcdefghijklmnopqrstuvwxyz&quot;|phone2numeric &#125;&#125;： 把字符转为可以对应的数字？？</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; 列表或数字|pluralize &#125;&#125;： 单词的复数形式，如列表字符串个数大于1，返回s，否则返回空串</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; 列表或数字|pluralize:&quot;es&quot; &#125;&#125;： 指定es</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; 列表或数字|pluralize:&quot;y,ies&quot; &#125;&#125;： 指定ies替换为y</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; object|pprint &#125;&#125;： 显示一个对象的值</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; 列表|random &#125;&#125;： 返回列表的随机一项</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; string|removetags:&quot;br p div&quot; &#125;&#125;： 删除字符串中指定html标记</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; string|rjust:&quot;50&quot; &#125;&#125;： 把字符串在指定宽度中对右，其它用空格填充</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; 列表|slice:&quot;:2&quot; &#125;&#125;： 切片</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; string|slugify &#125;&#125;： 字符串中留下减号和下划线，其它符号删除，空格用减号替换</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; 3|stringformat:&quot;02i&quot; &#125;&#125;： 字符串格式，使用Python的字符串格式语法</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; &quot;E&lt;A&gt;A&lt;/A&gt;B&lt;C&gt;C&lt;/C&gt;D&quot;|striptags &#125;&#125;： 剥去[X]HTML语法标记</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; 时间变量|time:&quot;P&quot; &#125;&#125;： 日期的时间部分格式</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; datetime|timesince &#125;&#125;： 给定日期到现在过去了多少时间</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; datetime|timesince:&quot;other_datetime&quot; &#125;&#125;： 两日期间过去了多少时间</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; datetime|timeuntil &#125;&#125;： 给定日期到现在过去了多少时间，与上面的区别在于2日期的前后位置。</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; datetime|timeuntil:&quot;other_datetime&quot; &#125;&#125;： 两日期间过去了多少时间</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; &quot;abdsadf&quot;|title &#125;&#125;： 首字母大写</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; &quot;A B C D E F&quot;|truncatewords:&quot;3&quot; &#125;&#125;： 截取指定个数的单词</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; &quot;&lt;a&gt;1&lt;a&gt;1&lt;a&gt;1&lt;/a&gt;&lt;/a&gt;&lt;/a&gt;22&lt;a&gt;1&lt;/a&gt;&quot;|truncatewords_html:&quot;2&quot; &#125;&#125;： 截取指定个数的html标记，并补完整</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; list|unordered_list &#125;&#125;：//ul 多重嵌套列表展现为html的无序列表</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; string|upper &#125;&#125; ：全部大写</div><div class=\"line\"></div><div class=\"line\">&lt;a href=&quot;&#123;&#123; link|urlencode &#125;&#125;&quot;&gt;linkage&lt;/a&gt;： url编码</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; string|urlize &#125;&#125;： 将URLs由纯文本变为可点击的链接。（没有实验成功）</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; string|urlizetrunc:&quot;30&quot; &#125;&#125;： 同上，多个截取字符数。（同样没有实验成功）</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; &quot;B C D E F&quot;|wordcount &#125;&#125;： 单词数</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; &quot;a b c d e f g h i j k&quot;|wordwrap:&quot;5&quot; &#125;&#125;： 每指定数量的字符就插入回车符</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; boolean|yesno:&quot;Yes,No,Perhaps&quot; &#125;&#125;： 对三种值的返回字符串，对应是 非空,空,None</div><div class=\"line\"></div><div class=\"line\">加法</div><div class=\"line\">&#123;&#123;value|add:10&#125;&#125;</div><div class=\"line\">note:value=5,则结果返回15</div><div class=\"line\"></div><div class=\"line\">减法</div><div class=\"line\">&#123;&#123;value|add:-10&#125;&#125;</div><div class=\"line\">note:value=5,则结果返回-5，加一个负数就是减法了</div><div class=\"line\"></div><div class=\"line\">乘法</div><div class=\"line\">&#123;% widthratio 5 1 100%&#125;</div><div class=\"line\">note:等同于：(5 / 1) * 100 ，结果返回500，withratio需要三个参数，它会使用参数1/参数2*参数3的方式进行运算，进行乘法运算，使「参数2」=1</div><div class=\"line\"></div><div class=\"line\">除法</div><div class=\"line\">&#123;% widthratio 5 100 1%&#125;</div><div class=\"line\">note:等同于：(5 / 100) * 1,则结果返回0.05,和乘法一样，使「参数3」= 1就是除法了。</div><div class=\"line\"></div><div class=\"line\">### 关闭自动转义</div><div class=\"line\">&#123;% autoescape off %&#125;</div><div class=\"line\">    &#123;&#123; ele.content |truncatewords_html:&quot;2&quot; &#125;&#125;</div><div class=\"line\">&#123;% endautoescape %&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"Django-学习\"><a href=\"#Django-学习\" class=\"headerlink\" title=\"Django 学习\"></a>Django 学习</h1><p>练习项目：<a href=\"https://github.com/caicaibrid/django_blog_test\">python django mysql 个人博客</a></p>\n<h2 id=\"django-基本命令\"><a href=\"#django-基本命令\" class=\"headerlink\" title=\"django 基本命令\"></a>django 基本命令</h2><blockquote>\n<p>1.新建一个django project<br>    django-admin.py startproject project-name //project-name项目名称</p>\n<p>2.新建app (模块)<br>   python manage.py startapp app-name //一般一个项目有多个app, 当然通用的app也可以在多个项目中使用。</p>\n</blockquote>\n<p>把 app-name 加入到 settings.INSTALLED_APPS中<br>django就会默认去寻找该模块下面的templates文件夹，可以通过render(request,’templates里的html’)直接返回</p>\n<h2 id=\"django-模板\"><a href=\"#django-模板\" class=\"headerlink\" title=\"django 模板\"></a>django 模板</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">from django.shortcuts import render //返回模板render()</div><div class=\"line\">&#123;% block title%&#125; &#123;% endblock %&#125;</div><div class=\"line\"></div><div class=\"line\">&#123;% extends &apos;base.html&apos;%&#125;</div><div class=\"line\"></div><div class=\"line\">&#123;% include &quot;header.html&quot; %&#125;</div><div class=\"line\"></div><div class=\"line\">&#123;% url &quot;add2&quot; 4 5 %&#125; //add2 为路由指定的name 4 5 为参数</div><div class=\"line\"></div><div class=\"line\">模板上得到视图的网址 &#123;% url &apos;add2&apos; 4 5 %&#125;</div><div class=\"line\">&lt;br&gt;</div><div class=\"line\">获取当前的地址 &#123;&#123; request.path &#125;&#125;</div><div class=\"line\">&lt;br&gt;</div><div class=\"line\">获取当前的GET参数 &#123;&#123; request.GET.urlencode &#125;&#125;</div><div class=\"line\">&lt;br&gt;</div><div class=\"line\">获取当前的用户 &#123;&#123; request.user &#125;&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"django-models\"><a href=\"#django-models\" class=\"headerlink\" title=\"django models\"></a>django models</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\">python manage.py startapp modelStudy //创建一个模块modelStudy</div><div class=\"line\">然后在该模块下面编辑models.py添加一个Peopele类</div><div class=\"line\"></div><div class=\"line\">class People(models.Model):</div><div class=\"line\">    name = models.CharField(max_length=30)</div><div class=\"line\">    age = models.IntegerField()</div><div class=\"line\">    def __unicode__(self):</div><div class=\"line\">        return self.name</div><div class=\"line\"></div><div class=\"line\">同步一下数据库（我们使用默认的数据库 SQLite3，无需配置）</div><div class=\"line\">python manage.py syncdb # 进入 manage.py 所在的那个文件夹下输入这个命令</div><div class=\"line\">注意：Django 1.7 及以上的版本需要用以下命令</div><div class=\"line\">python manage.py makemigrations</div><div class=\"line\">python manage.py migrate</div><div class=\"line\"></div><div class=\"line\">上面命令Django生成了一系列的表，也生成了我们新建的modelStudy_people这个表</div><div class=\"line\"></div><div class=\"line\">Django提供了丰富的API, 下面演示如何使用它。</div><div class=\"line\">$ python manage.py shell</div><div class=\"line\">&gt;&gt;&gt; from people.models import Person</div><div class=\"line\">&gt;&gt;&gt; Person.objects.create(name=&quot;WeizhongTu&quot;, age=24)</div><div class=\"line\">&lt;Person: Person object&gt;</div><div class=\"line\"></div><div class=\"line\">新建一个对象的方法有以下几种：</div><div class=\"line\"></div><div class=\"line\">1.People.objects.create(name=name,age=age)</div><div class=\"line\">2.p = People(name=&quot;WZ&quot;, age=23)</div><div class=\"line\">  p.save()</div><div class=\"line\">3.p = People(name=&quot;TWZ&quot;)</div><div class=\"line\">  p.age = 23</div><div class=\"line\">  p.save()</div><div class=\"line\">4.People.objects.get_or_create(name=&quot;WZT&quot;, age=23)</div><div class=\"line\"></div><div class=\"line\">这种方法是防止重复很好的方法，但是速度要相对慢些，返回一个元组，第一个为People对象，第二个为True或False, 新建时返回的是True, 已经存在时返回False.</div><div class=\"line\"></div><div class=\"line\">### 获取对象有以下方法：</div><div class=\"line\"></div><div class=\"line\">Person.objects.all()</div><div class=\"line\"></div><div class=\"line\">Person.objects.all()[:10] 切片操作，获取10个人，不支持负索引，切片可以节约内存</div><div class=\"line\"></div><div class=\"line\">Person.objects.get(name=name)</div><div class=\"line\"></div><div class=\"line\">get是用来获取一个对象的，如果需要获取满足条件的一些人，就要用到filter</div><div class=\"line\"></div><div class=\"line\">Person.objects.filter(name=&quot;abc&quot;) # 等于Person.objects.filter(name__exact=&quot;abc&quot;) 名称严格等于 &quot;abc&quot; 的人</div><div class=\"line\"></div><div class=\"line\">Person.objects.filter(name__iexact=&quot;abc&quot;) # 名称为 abc 但是不区分大小写，可以找到 ABC, Abc, aBC，这些都符合条件</div><div class=\"line\"></div><div class=\"line\">Person.objects.filter(name__contains=&quot;abc&quot;) # 名称中包含 &quot;abc&quot;的人</div><div class=\"line\"></div><div class=\"line\">Person.objects.filter(name__icontains=&quot;abc&quot;) #名称中包含 &quot;abc&quot;，且abc不区分大小写</div><div class=\"line\"></div><div class=\"line\">Person.objects.filter(name__regex=&quot;^abc&quot;) # 正则表达式查询</div><div class=\"line\"></div><div class=\"line\">Person.objects.filter(name__iregex=&quot;^abc&quot;)# 正则表达式不区分大小写</div><div class=\"line\"></div><div class=\"line\">filter是找出满足条件的，当然也有排除符合某条件的</div><div class=\"line\"></div><div class=\"line\">Person.objects.exclude(name__contains=&quot;WZ&quot;) # 排除包含 WZ 的Person对象</div><div class=\"line\"></div><div class=\"line\">Person.objects.filter(name__contains=&quot;abc&quot;).exclude(age=23) # 找出名称含有abc, 但是排除年龄是23岁的</div></pre></td></tr></table></figure>\n<h1 id=\"django-模板过滤器\"><a href=\"#django-模板过滤器\" class=\"headerlink\" title=\"django 模板过滤器\"></a>django 模板过滤器</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div></pre></td><td class=\"code\"><pre><div class=\"line\">一、形式：小写：  &#123;&#123; name | lower &#125;&#125;</div><div class=\"line\"></div><div class=\"line\">二、串联：先转义文本到HTML，再转换每行到 &lt;p&gt; 标签： &#123;&#123; my_text|escape|linebreaks &#125;&#125;</div><div class=\"line\"></div><div class=\"line\">三、过滤器的参数</div><div class=\"line\"></div><div class=\"line\">显示前30个字：&#123;&#123; bio | truncatewords:&quot;30&quot; &#125;&#125;</div><div class=\"line\"></div><div class=\"line\">格式化：&#123;&#123; pub_date | date:&quot;F j, Y&quot; &#125;&#125;</div><div class=\"line\"></div><div class=\"line\">过滤器列表：&#123;&#123; 123|add:&quot;5&quot; &#125;&#125; 给value加上一个数值</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; &quot;AB&apos;CD&quot;|addslashes &#125;&#125;： 单引号加上转义号，一般用于输出到javascript中</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; &quot;abcd&quot;|capfirst &#125;&#125;： 第一个字母大写</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; &quot;abcd&quot;|center:&quot;50&quot; &#125;&#125;： 输出指定长度的字符串，并把值对中</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; &quot;123spam456spam789&quot;|cut:&quot;spam&quot; &#125;&#125;： 查找删除指定字符串</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; value|date:&quot;F j, Y&quot; &#125;&#125;： 格式化日期</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; value|default:&quot;(N/A)&quot; &#125;&#125;： 值不存在，使用指定值</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; value|default_if_none:&quot;(N/A)&quot; &#125;&#125;： 值是None，使用指定值</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; 列表变量|dictsort:&quot;数字&quot; &#125;&#125; ：排序从小到大</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; 列表变量|dictsortreversed:&quot;数字&quot; &#125;&#125; ：排序从大到小</div><div class=\"line\"></div><div class=\"line\">&#123;% if 92|divisibleby:&quot;2&quot; %&#125; ：判断是否整除指定数字</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; string|escape &#125;&#125; ：转换为html实体</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; 21984124|filesizeformat &#125;&#125; ：以1024为基数，计算最大值，保留1位小数，增加可读性</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; list|first &#125;&#125; ：返回列表第一个元素</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; &quot;ik23hr&amp;jqwh&quot;|fix_ampersands &#125;&#125;： &amp;转为&amp;amp;</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; 13.414121241|floatformat &#125;&#125; ：保留1位小数，可为负数，几种形式</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; 13.414121241|floatformat:&quot;2&quot; &#125;&#125;： 保留2位小数</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; 23456 |get_digit:&quot;1&quot; &#125;&#125; ：从个位数开始截取指定位置的1个数字</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; list|join:&quot;, &quot; &#125;&#125; ：用指定分隔符连接列表</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; list|length &#125;&#125; ：返回列表个数</div><div class=\"line\"></div><div class=\"line\">&#123;% if 列表|length_is:&quot;3&quot; %&#125; ：列表个数是否指定数值</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; &quot;ABCD&quot;|linebreaks &#125;&#125;： 用新行用&lt;p&gt; 、 &lt;br /&gt; 标记包裹</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; &quot;ABCD&quot;|linebreaksbr &#125;&#125;： 用新行用&lt;br /&gt; 标记包裹</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; 变量|linenumbers &#125;&#125;： 为变量中每一行加上行号</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; &quot;abcd&quot;|ljust:&quot;50&quot; &#125;&#125;： 把字符串在指定宽度中对左，其它用空格填充</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; &quot;ABCD&quot;|lower &#125;&#125;： 小写</div><div class=\"line\"></div><div class=\"line\">&#123;% for i in &quot;1abc1&quot;|make_list %&#125;ABCDE,&#123;% endfor %&#125;： 把字符串或数字的字符个数作为一个列表</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; &quot;abcdefghijklmnopqrstuvwxyz&quot;|phone2numeric &#125;&#125;： 把字符转为可以对应的数字？？</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; 列表或数字|pluralize &#125;&#125;： 单词的复数形式，如列表字符串个数大于1，返回s，否则返回空串</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; 列表或数字|pluralize:&quot;es&quot; &#125;&#125;： 指定es</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; 列表或数字|pluralize:&quot;y,ies&quot; &#125;&#125;： 指定ies替换为y</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; object|pprint &#125;&#125;： 显示一个对象的值</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; 列表|random &#125;&#125;： 返回列表的随机一项</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; string|removetags:&quot;br p div&quot; &#125;&#125;： 删除字符串中指定html标记</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; string|rjust:&quot;50&quot; &#125;&#125;： 把字符串在指定宽度中对右，其它用空格填充</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; 列表|slice:&quot;:2&quot; &#125;&#125;： 切片</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; string|slugify &#125;&#125;： 字符串中留下减号和下划线，其它符号删除，空格用减号替换</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; 3|stringformat:&quot;02i&quot; &#125;&#125;： 字符串格式，使用Python的字符串格式语法</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; &quot;E&lt;A&gt;A&lt;/A&gt;B&lt;C&gt;C&lt;/C&gt;D&quot;|striptags &#125;&#125;： 剥去[X]HTML语法标记</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; 时间变量|time:&quot;P&quot; &#125;&#125;： 日期的时间部分格式</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; datetime|timesince &#125;&#125;： 给定日期到现在过去了多少时间</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; datetime|timesince:&quot;other_datetime&quot; &#125;&#125;： 两日期间过去了多少时间</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; datetime|timeuntil &#125;&#125;： 给定日期到现在过去了多少时间，与上面的区别在于2日期的前后位置。</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; datetime|timeuntil:&quot;other_datetime&quot; &#125;&#125;： 两日期间过去了多少时间</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; &quot;abdsadf&quot;|title &#125;&#125;： 首字母大写</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; &quot;A B C D E F&quot;|truncatewords:&quot;3&quot; &#125;&#125;： 截取指定个数的单词</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; &quot;&lt;a&gt;1&lt;a&gt;1&lt;a&gt;1&lt;/a&gt;&lt;/a&gt;&lt;/a&gt;22&lt;a&gt;1&lt;/a&gt;&quot;|truncatewords_html:&quot;2&quot; &#125;&#125;： 截取指定个数的html标记，并补完整</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; list|unordered_list &#125;&#125;：//ul 多重嵌套列表展现为html的无序列表</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; string|upper &#125;&#125; ：全部大写</div><div class=\"line\"></div><div class=\"line\">&lt;a href=&quot;&#123;&#123; link|urlencode &#125;&#125;&quot;&gt;linkage&lt;/a&gt;： url编码</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; string|urlize &#125;&#125;： 将URLs由纯文本变为可点击的链接。（没有实验成功）</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; string|urlizetrunc:&quot;30&quot; &#125;&#125;： 同上，多个截取字符数。（同样没有实验成功）</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; &quot;B C D E F&quot;|wordcount &#125;&#125;： 单词数</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; &quot;a b c d e f g h i j k&quot;|wordwrap:&quot;5&quot; &#125;&#125;： 每指定数量的字符就插入回车符</div><div class=\"line\"></div><div class=\"line\">&#123;&#123; boolean|yesno:&quot;Yes,No,Perhaps&quot; &#125;&#125;： 对三种值的返回字符串，对应是 非空,空,None</div><div class=\"line\"></div><div class=\"line\">加法</div><div class=\"line\">&#123;&#123;value|add:10&#125;&#125;</div><div class=\"line\">note:value=5,则结果返回15</div><div class=\"line\"></div><div class=\"line\">减法</div><div class=\"line\">&#123;&#123;value|add:-10&#125;&#125;</div><div class=\"line\">note:value=5,则结果返回-5，加一个负数就是减法了</div><div class=\"line\"></div><div class=\"line\">乘法</div><div class=\"line\">&#123;% widthratio 5 1 100%&#125;</div><div class=\"line\">note:等同于：(5 / 1) * 100 ，结果返回500，withratio需要三个参数，它会使用参数1/参数2*参数3的方式进行运算，进行乘法运算，使「参数2」=1</div><div class=\"line\"></div><div class=\"line\">除法</div><div class=\"line\">&#123;% widthratio 5 100 1%&#125;</div><div class=\"line\">note:等同于：(5 / 100) * 1,则结果返回0.05,和乘法一样，使「参数3」= 1就是除法了。</div><div class=\"line\"></div><div class=\"line\">### 关闭自动转义</div><div class=\"line\">&#123;% autoescape off %&#125;</div><div class=\"line\">    &#123;&#123; ele.content |truncatewords_html:&quot;2&quot; &#125;&#125;</div><div class=\"line\">&#123;% endautoescape %&#125;</div></pre></td></tr></table></figure>"},{"title":"TypeScript","date":"2017-08-06T05:15:40.000Z","_content":"\n# TypeScript\n\n## 原则\n\nTypeScript的核心原则之一是对值所具有的结构进行类型检查\n\n# 数据类型\n\n* ## boolean\n\n```TypeScript\nlet flag:boolean = true;\n```\n\n* ## string\n\n```TypeScript\nlet str:string = \"caicai\";\n```\n\n* ## number\n\n```TypeScript\nlet num:number = 10;\n```\n\n* ## Array\n\n> 定义类型两种方式: \n>1. 第一种,可以在元素类型后面接上 [],表示由此类型元素组成的一个数组\n>2. 第二种,使用数组泛型\n\n```TypeScript\n//以下两种等价\nlet arr:number[] = [1,2,3,4];\nlet arr:Array<number> = [1,2,3,4];\n```\n\n* ## 元组\n\n元组类型允许表示一个已知<span style=\"color:red\">__元素数量和类型的数组__</span>，各元素的类型不必相同,可以直接赋值,但是必须为申明的类型\n\n```TypeScript\nlet list:[string,number]=[\"1\",2];\nlist[5] = 100;\nconsole.log(list) //[\"1\",2,undefined,undefined,undefined,100]\n```\n\n* ## 枚举\n\nenum类型是对JavaScript标准数据类型的一个补充。 像C#等其它语言一样，使用枚举类型可以为一组数值赋予友好的名字,值为0,1,2,...\n\n```TypeScript\nenum Color{\n    red,\n    green,\n    blue\n}\nlet c: Color = Color.red;\nlet cName:string = Color[1];\nconsole.log(cName) //red\nconsole.log(c) //c\n```\n\n* ## any\n\nany为任意类型,既可以赋任何值(可以理解为es5里声明的变量都为any类型,__eg:var sum = 100__)\n\n```typescript\nlet a:any=1\nlet a:any=\"2\"\n```\n\n* ## null undefined void\n\n>1. void 类型与any类型相反,即为没有任何类型,在函数中没写,默认返回void类型\n>2. undefined和null两者各自有自己的类型分别叫做undefined和null\n\n```typescript\nfunction method():void{ //返回值为void类型,return就会报错\n    \n}\nlet u:undefined = undefined;\nlet n:null = null;\n```\n\n## interface \n\n接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约(相当于定义数据类型)\n\n可以用interface进行定义,传入的参数必须全部定义,然后区分是否只读 是否可选\n\n* ## 简单接口\n\n```typescript\nfunction func(name:string,age:number = 10){\n    console.log(name,age) //name age为必传字段\n}\n```\n\n* ## 可选属性\n\n接口里的属性不全都是必需的,有些是只在某些条件下存在，或者根本不存在。即给函数传入的参数对象中只有部分属性赋值了。\n\n> 两种方式\n>1. 在可选属性后面加?\n>2. 可以给参数设置默认值(自己亲测有效,官网没写,有待继续测试)\n\n```typescript\nfunction func(name:string,age?:number){\n    console.log(name,age) //caicai,undefined\n}\nfunction func(name:string,age:number = 10){\n    console.log(name,age) //caicai,10\n}\nfunc(\"caicai\")\n```\n\n* ## 只读属性 readonly\n\n一些对象属性只能在对象刚刚创建的时候修改其值。 你可以在属性名前用 readonly来指定只读属性\n\n```typescript\ninterface Point{\n    readonly x:number,\n    readonly y:number\n}\n\nlet p:Point = {x:5,y:10}\np.x=100;//error\n```\n\n* ## readonly vs const\n\n最简单判断该用readonly还是const的方法是看要把它做为变量使用还是做为一个属性。 做为变量使用的话用 const，若做为属性则使用readonly。\n\n* ## 额外的属性检查\n\n以上定义接口的时候,约定的参数为必传属性,在生活中一般会存在一些不存在的属性需要传入,因此,我们总不能都写到interface里声明一遍(不声明就会报错),\n因此我们需要绕开这些检查,最简单的办法:\n\n1. 使用断言\n\n```typescript\ninterface Point{\n    x:number,\n    y: number\n}\n\nfunction p(config: Point) {\n    console.log(config) //{x:10,y:20,z:100}\n}\n\np({x:10,y:20,z:100} as Point)\n```\n\n2. 添加一个字符串索引签名\n\n```typescript\ninterface Point{\n    x:number,\n    y: number,\n   [propName: string]: any //字符串签名,这样就可以传入任何参数了\n}\n\nfunction p(config: Point) {\n    console.log(config) //{x:10,y:20,z:100}\n}\n\np({x:10,y:20,z:100})\n```\n\n* ## 函数类型\n\n接口能够描述JavaScript中对象拥有的各种各样的外形。 除了描述带有属性的普通对象外，接口也可以描述函数类型。\n\n```typescript\ninterface SearchFunc { //申明一个函数类型(传入参数有两个,返回值的类型为boolean)\n  (source: string, subString: string): boolean;\n}\nlet mySearch: SearchFunc;\nmySearch = function(source: string, subString: string) {\n  let result = source.search(subString);\n  return result > -1;\n}\n```\n\n* ## 可索引的类型\n\n描述那些能够“通过索引得到”的类型 可索引类型具有一个 索引签名，它描述了对象索引的类型，还有相应的索引返回值类型\n\n```typescript\ninterface StringArray {\n  [index: number]: string;\n}\n\nlet myArray: StringArray;\nmyArray = [\"Bob\", \"Fred\"];\n\nlet myStr: string = myArray[0];\n```\n\n* ## 类类型\n\n> 实现接口\n\n```typescript\ninterface ClockInterface {\n    currentTime: Date;//属性\n    setTime(d: Date);//方法\n}\n\nclass Clock implements ClockInterface {//在类里实现\n    currentTime: Date;\n    setTime(d: Date) {\n        this.currentTime = d;\n    }\n    constructor(h: number, m: number) { }\n}\n```\n\n# 类\n\n传统的JavaScript程序使用函数和基于原型的继承来创建可重用的组件,ECMAScript 6开始，JavaScript程序员将能够使用基于类的面向对象的方式\n\n* ##  简单事例\n\n```typescript\nclass Greeter {\n    greeting: string;\n    constructor(message: string) {\n        this.greeting = message;\n    }\n    greet() {\n        return \"Hello, \" + this.greeting;\n    }\n}\n\nlet greeter = new Greeter(\"world\");\n```\n\n以上声明了一个 Greeter类。这个类有3个成员：一个叫做greeting的属性，一个构造函数和一个greet方法\n\n在引用任何一个类成员的时候都用了this。 它表示我们访问的是类的成员。\n\n最后一行，我们使用new构造了Greeter类的一个实例。 它会调用之前定义的构造函数，创建一个 Greeter类型的新对象，并执行构造函数初始化它\n\n* ## 继承\n\n```typescript\nclass Animal {\n    name:string;\n    constructor(theName: string) { this.name = theName; }\n    move(distanceInMeters: number = 0) {\n        console.log(`${this.name} moved ${distanceInMeters}m.`);\n    }\n}\n\nclass Snake extends Animal {\n    constructor(name: string) { super(name); }\n    move(distanceInMeters = 5) {\n        console.log(\"Slithering...\");\n        super.move(distanceInMeters);\n    }\n}\n\nclass Horse extends Animal {\n    constructor(name: string) { super(name); }\n    move(distanceInMeters = 45) {\n        console.log(\"Galloping...\");\n        super.move(distanceInMeters);\n    }\n}\n\nlet sam = new Snake(\"Sammy the Python\");\nlet tom: Animal = new Horse(\"Tommy the Palomino\");\n\nsam.move();\ntom.move(34);\n//运行结果:\n//Slithering...\n//Sammy the Python moved 5m.\n//Galloping...\n//Tommy the Palomino moved 34m.\n```\n\n我们使用 extends关键字来创建子类。你可以看到Horse和Snake类是基类Animal的子类，并且可以访问其属性和方法,并且重写了父类的方法\n\n* ## 公共，私有与受保护的修饰符\n\n* ### 默认为public (可加可不加)\n\n```typescript\nclass Animal {\n    public name: string;\n    public constructor(theName: string) { this.name = theName; }\n    public move(distanceInMeters: number) {\n        console.log(`${this.name} moved ${distanceInMeters}m.`);\n    }\n}\n```\n\n* ### private\n\n当成员被标记成private时，它就不能在声明它的类的外部访问。private成员在派生类中仍然可以访问\n\n```typescript\nclass Animal {\n    private name: string;\n    constructor(theName: string) { this.name = theName; }\n}\n\nnew Animal(\"Cat\").name; // Error: 'name' is private;\n```\n\n* ### protected\n\nprotected修饰符与private修饰符的行为很相似，但有一点不同，protected成员在派生类中仍然可以访问\n\n```typescript\nclass Person {\n    protected name: string;\n    constructor(name: string) { this.name = name; }\n}\n\nclass Employee extends Person {\n    private department: string;\n\n    constructor(name: string, department: string) {\n        super(name)\n        this.department = department;\n    }\n\n    public getElevatorPitch() {\n        return `Hello, my name is ${this.name} and I work in ${this.department}.`;\n    }\n}\n\nlet howard = new Employee(\"Howard\", \"Sales\");\nconsole.log(howard.getElevatorPitch());\nconsole.log(howard.name);\n```\n\n# 函数\n\n## 函数类型\n\n* ### 为函数定义类型\n\n```typescript\nfunction add(x: number, y: number): number {\n    return x + y;\n}\n\nlet myAdd = function(x: number, y: number): number { return x+y; };//返回值为number类型\n```\n\n* ### 书写完整函数类型\n\n```typescript\nlet myAdd: (x:number, y:number) => number =\n    function(x: number, y: number): number { return x+y; };\n```\n\n* ### 推断类型\n\n```typescript\nlet myAdd = function(x: number, y: number): number { return x + y; };\n//=> typescript会自动推断出函数的类型\nlet myAdd: (baseValue:number, increment:number) => number =\n    function(x, y) { return x + y; };\n```\n\n## 可选参数\n\n 在TypeScript里我们可以在参数名旁使用 ?实现可选参数的功能\n\n```typescript\nfunction buildName(firstName: string, lastName?: string) {\n    if (lastName)\n        return firstName + \" \" + lastName;\n    else\n        return firstName;\n}\n\nlet result1 = buildName(\"Bob\");  // works correctly now\nlet result2 = buildName(\"Bob\", \"Adams\", \"Sr.\");  // error, too many parameters\nlet result3 = buildName(\"Bob\", \"Adams\");  // ah, just right\n```\n\n## 默认参数\n\n```typescript\nfunction buildName(firstName: string, lastName = \"Smith\") {//有默认值的参数\n    return firstName + \" \" + lastName;\n}\n\nlet result1 = buildName(\"Bob\");                  // works correctly now, returns \"Bob Smith\"\nlet result2 = buildName(\"Bob\", undefined);       // still works, also returns \"Bob Smith\"\nlet result3 = buildName(\"Bob\", \"Adams\", \"Sr.\");  // error, too many parameters\nlet result4 = buildName(\"Bob\", \"Adams\");         // ah, just right\n```\n\n## 剩余参数\n\n必要参数，默认参数和可选参数有个共同点：它们表示某一个参数。 有时，你想同时操作多个参数，或者你并不知道会有多少参数传递进来。 在JavaScript里，你可以使用 arguments来访问所有传入的参数。\n\n```typescript\nfunction buildName(firstName: string, ...restOfName: string[]) {\n  return firstName + \" \" + restOfName.join(\" \");\n}\n\nlet employeeName = buildName(\"Joseph\", \"Samuel\", \"Lucas\", \"MacKinzie\");\n```\n\n# 泛型\n\n```typescript\nfunction identity<T>(arg: T): T { //假如用户传入的参数T为字符串,则t为string类型,函数返回值也为string类型\n    return arg;\n}\n```\n\n# export import\n\nes6 的导入导出可以用的同时,typeScript新加入了 export = 和 import = require() 进行导出和导入\n\n```typescript\n//ZipCodeValidator.ts\nlet numberRegexp = /^[0-9]+$/;\nclass ZipCodeValidator {\n    isAcceptable(s: string) {\n        return s.length === 5 && numberRegexp.test(s);\n    }\n}\nexport = ZipCodeValidator;\n//Test.ts\nimport zip = require(\"./ZipCodeValidator\");\n\n// Some samples to try\nlet strings = [\"Hello\", \"98052\", \"101\"];\n\n// Validators to use\nlet validator = new zip();\n\n// Show whether each string passed each validator\nstrings.forEach(s => {\n  console.log(`\"${ s }\" - ${ validator.isAcceptable(s) ? \"matches\" : \"does not match\" }`);\n});\n```\n\n\n\n","source":"_posts/TypeScript.md","raw":"---\ntitle: TypeScript\ndate: 2017-08-06 13:15:40\ncategories: TypeScript\ntags:\n    - TypeScript\n---\n\n# TypeScript\n\n## 原则\n\nTypeScript的核心原则之一是对值所具有的结构进行类型检查\n\n# 数据类型\n\n* ## boolean\n\n```TypeScript\nlet flag:boolean = true;\n```\n\n* ## string\n\n```TypeScript\nlet str:string = \"caicai\";\n```\n\n* ## number\n\n```TypeScript\nlet num:number = 10;\n```\n\n* ## Array\n\n> 定义类型两种方式: \n>1. 第一种,可以在元素类型后面接上 [],表示由此类型元素组成的一个数组\n>2. 第二种,使用数组泛型\n\n```TypeScript\n//以下两种等价\nlet arr:number[] = [1,2,3,4];\nlet arr:Array<number> = [1,2,3,4];\n```\n\n* ## 元组\n\n元组类型允许表示一个已知<span style=\"color:red\">__元素数量和类型的数组__</span>，各元素的类型不必相同,可以直接赋值,但是必须为申明的类型\n\n```TypeScript\nlet list:[string,number]=[\"1\",2];\nlist[5] = 100;\nconsole.log(list) //[\"1\",2,undefined,undefined,undefined,100]\n```\n\n* ## 枚举\n\nenum类型是对JavaScript标准数据类型的一个补充。 像C#等其它语言一样，使用枚举类型可以为一组数值赋予友好的名字,值为0,1,2,...\n\n```TypeScript\nenum Color{\n    red,\n    green,\n    blue\n}\nlet c: Color = Color.red;\nlet cName:string = Color[1];\nconsole.log(cName) //red\nconsole.log(c) //c\n```\n\n* ## any\n\nany为任意类型,既可以赋任何值(可以理解为es5里声明的变量都为any类型,__eg:var sum = 100__)\n\n```typescript\nlet a:any=1\nlet a:any=\"2\"\n```\n\n* ## null undefined void\n\n>1. void 类型与any类型相反,即为没有任何类型,在函数中没写,默认返回void类型\n>2. undefined和null两者各自有自己的类型分别叫做undefined和null\n\n```typescript\nfunction method():void{ //返回值为void类型,return就会报错\n    \n}\nlet u:undefined = undefined;\nlet n:null = null;\n```\n\n## interface \n\n接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约(相当于定义数据类型)\n\n可以用interface进行定义,传入的参数必须全部定义,然后区分是否只读 是否可选\n\n* ## 简单接口\n\n```typescript\nfunction func(name:string,age:number = 10){\n    console.log(name,age) //name age为必传字段\n}\n```\n\n* ## 可选属性\n\n接口里的属性不全都是必需的,有些是只在某些条件下存在，或者根本不存在。即给函数传入的参数对象中只有部分属性赋值了。\n\n> 两种方式\n>1. 在可选属性后面加?\n>2. 可以给参数设置默认值(自己亲测有效,官网没写,有待继续测试)\n\n```typescript\nfunction func(name:string,age?:number){\n    console.log(name,age) //caicai,undefined\n}\nfunction func(name:string,age:number = 10){\n    console.log(name,age) //caicai,10\n}\nfunc(\"caicai\")\n```\n\n* ## 只读属性 readonly\n\n一些对象属性只能在对象刚刚创建的时候修改其值。 你可以在属性名前用 readonly来指定只读属性\n\n```typescript\ninterface Point{\n    readonly x:number,\n    readonly y:number\n}\n\nlet p:Point = {x:5,y:10}\np.x=100;//error\n```\n\n* ## readonly vs const\n\n最简单判断该用readonly还是const的方法是看要把它做为变量使用还是做为一个属性。 做为变量使用的话用 const，若做为属性则使用readonly。\n\n* ## 额外的属性检查\n\n以上定义接口的时候,约定的参数为必传属性,在生活中一般会存在一些不存在的属性需要传入,因此,我们总不能都写到interface里声明一遍(不声明就会报错),\n因此我们需要绕开这些检查,最简单的办法:\n\n1. 使用断言\n\n```typescript\ninterface Point{\n    x:number,\n    y: number\n}\n\nfunction p(config: Point) {\n    console.log(config) //{x:10,y:20,z:100}\n}\n\np({x:10,y:20,z:100} as Point)\n```\n\n2. 添加一个字符串索引签名\n\n```typescript\ninterface Point{\n    x:number,\n    y: number,\n   [propName: string]: any //字符串签名,这样就可以传入任何参数了\n}\n\nfunction p(config: Point) {\n    console.log(config) //{x:10,y:20,z:100}\n}\n\np({x:10,y:20,z:100})\n```\n\n* ## 函数类型\n\n接口能够描述JavaScript中对象拥有的各种各样的外形。 除了描述带有属性的普通对象外，接口也可以描述函数类型。\n\n```typescript\ninterface SearchFunc { //申明一个函数类型(传入参数有两个,返回值的类型为boolean)\n  (source: string, subString: string): boolean;\n}\nlet mySearch: SearchFunc;\nmySearch = function(source: string, subString: string) {\n  let result = source.search(subString);\n  return result > -1;\n}\n```\n\n* ## 可索引的类型\n\n描述那些能够“通过索引得到”的类型 可索引类型具有一个 索引签名，它描述了对象索引的类型，还有相应的索引返回值类型\n\n```typescript\ninterface StringArray {\n  [index: number]: string;\n}\n\nlet myArray: StringArray;\nmyArray = [\"Bob\", \"Fred\"];\n\nlet myStr: string = myArray[0];\n```\n\n* ## 类类型\n\n> 实现接口\n\n```typescript\ninterface ClockInterface {\n    currentTime: Date;//属性\n    setTime(d: Date);//方法\n}\n\nclass Clock implements ClockInterface {//在类里实现\n    currentTime: Date;\n    setTime(d: Date) {\n        this.currentTime = d;\n    }\n    constructor(h: number, m: number) { }\n}\n```\n\n# 类\n\n传统的JavaScript程序使用函数和基于原型的继承来创建可重用的组件,ECMAScript 6开始，JavaScript程序员将能够使用基于类的面向对象的方式\n\n* ##  简单事例\n\n```typescript\nclass Greeter {\n    greeting: string;\n    constructor(message: string) {\n        this.greeting = message;\n    }\n    greet() {\n        return \"Hello, \" + this.greeting;\n    }\n}\n\nlet greeter = new Greeter(\"world\");\n```\n\n以上声明了一个 Greeter类。这个类有3个成员：一个叫做greeting的属性，一个构造函数和一个greet方法\n\n在引用任何一个类成员的时候都用了this。 它表示我们访问的是类的成员。\n\n最后一行，我们使用new构造了Greeter类的一个实例。 它会调用之前定义的构造函数，创建一个 Greeter类型的新对象，并执行构造函数初始化它\n\n* ## 继承\n\n```typescript\nclass Animal {\n    name:string;\n    constructor(theName: string) { this.name = theName; }\n    move(distanceInMeters: number = 0) {\n        console.log(`${this.name} moved ${distanceInMeters}m.`);\n    }\n}\n\nclass Snake extends Animal {\n    constructor(name: string) { super(name); }\n    move(distanceInMeters = 5) {\n        console.log(\"Slithering...\");\n        super.move(distanceInMeters);\n    }\n}\n\nclass Horse extends Animal {\n    constructor(name: string) { super(name); }\n    move(distanceInMeters = 45) {\n        console.log(\"Galloping...\");\n        super.move(distanceInMeters);\n    }\n}\n\nlet sam = new Snake(\"Sammy the Python\");\nlet tom: Animal = new Horse(\"Tommy the Palomino\");\n\nsam.move();\ntom.move(34);\n//运行结果:\n//Slithering...\n//Sammy the Python moved 5m.\n//Galloping...\n//Tommy the Palomino moved 34m.\n```\n\n我们使用 extends关键字来创建子类。你可以看到Horse和Snake类是基类Animal的子类，并且可以访问其属性和方法,并且重写了父类的方法\n\n* ## 公共，私有与受保护的修饰符\n\n* ### 默认为public (可加可不加)\n\n```typescript\nclass Animal {\n    public name: string;\n    public constructor(theName: string) { this.name = theName; }\n    public move(distanceInMeters: number) {\n        console.log(`${this.name} moved ${distanceInMeters}m.`);\n    }\n}\n```\n\n* ### private\n\n当成员被标记成private时，它就不能在声明它的类的外部访问。private成员在派生类中仍然可以访问\n\n```typescript\nclass Animal {\n    private name: string;\n    constructor(theName: string) { this.name = theName; }\n}\n\nnew Animal(\"Cat\").name; // Error: 'name' is private;\n```\n\n* ### protected\n\nprotected修饰符与private修饰符的行为很相似，但有一点不同，protected成员在派生类中仍然可以访问\n\n```typescript\nclass Person {\n    protected name: string;\n    constructor(name: string) { this.name = name; }\n}\n\nclass Employee extends Person {\n    private department: string;\n\n    constructor(name: string, department: string) {\n        super(name)\n        this.department = department;\n    }\n\n    public getElevatorPitch() {\n        return `Hello, my name is ${this.name} and I work in ${this.department}.`;\n    }\n}\n\nlet howard = new Employee(\"Howard\", \"Sales\");\nconsole.log(howard.getElevatorPitch());\nconsole.log(howard.name);\n```\n\n# 函数\n\n## 函数类型\n\n* ### 为函数定义类型\n\n```typescript\nfunction add(x: number, y: number): number {\n    return x + y;\n}\n\nlet myAdd = function(x: number, y: number): number { return x+y; };//返回值为number类型\n```\n\n* ### 书写完整函数类型\n\n```typescript\nlet myAdd: (x:number, y:number) => number =\n    function(x: number, y: number): number { return x+y; };\n```\n\n* ### 推断类型\n\n```typescript\nlet myAdd = function(x: number, y: number): number { return x + y; };\n//=> typescript会自动推断出函数的类型\nlet myAdd: (baseValue:number, increment:number) => number =\n    function(x, y) { return x + y; };\n```\n\n## 可选参数\n\n 在TypeScript里我们可以在参数名旁使用 ?实现可选参数的功能\n\n```typescript\nfunction buildName(firstName: string, lastName?: string) {\n    if (lastName)\n        return firstName + \" \" + lastName;\n    else\n        return firstName;\n}\n\nlet result1 = buildName(\"Bob\");  // works correctly now\nlet result2 = buildName(\"Bob\", \"Adams\", \"Sr.\");  // error, too many parameters\nlet result3 = buildName(\"Bob\", \"Adams\");  // ah, just right\n```\n\n## 默认参数\n\n```typescript\nfunction buildName(firstName: string, lastName = \"Smith\") {//有默认值的参数\n    return firstName + \" \" + lastName;\n}\n\nlet result1 = buildName(\"Bob\");                  // works correctly now, returns \"Bob Smith\"\nlet result2 = buildName(\"Bob\", undefined);       // still works, also returns \"Bob Smith\"\nlet result3 = buildName(\"Bob\", \"Adams\", \"Sr.\");  // error, too many parameters\nlet result4 = buildName(\"Bob\", \"Adams\");         // ah, just right\n```\n\n## 剩余参数\n\n必要参数，默认参数和可选参数有个共同点：它们表示某一个参数。 有时，你想同时操作多个参数，或者你并不知道会有多少参数传递进来。 在JavaScript里，你可以使用 arguments来访问所有传入的参数。\n\n```typescript\nfunction buildName(firstName: string, ...restOfName: string[]) {\n  return firstName + \" \" + restOfName.join(\" \");\n}\n\nlet employeeName = buildName(\"Joseph\", \"Samuel\", \"Lucas\", \"MacKinzie\");\n```\n\n# 泛型\n\n```typescript\nfunction identity<T>(arg: T): T { //假如用户传入的参数T为字符串,则t为string类型,函数返回值也为string类型\n    return arg;\n}\n```\n\n# export import\n\nes6 的导入导出可以用的同时,typeScript新加入了 export = 和 import = require() 进行导出和导入\n\n```typescript\n//ZipCodeValidator.ts\nlet numberRegexp = /^[0-9]+$/;\nclass ZipCodeValidator {\n    isAcceptable(s: string) {\n        return s.length === 5 && numberRegexp.test(s);\n    }\n}\nexport = ZipCodeValidator;\n//Test.ts\nimport zip = require(\"./ZipCodeValidator\");\n\n// Some samples to try\nlet strings = [\"Hello\", \"98052\", \"101\"];\n\n// Validators to use\nlet validator = new zip();\n\n// Show whether each string passed each validator\nstrings.forEach(s => {\n  console.log(`\"${ s }\" - ${ validator.isAcceptable(s) ? \"matches\" : \"does not match\" }`);\n});\n```\n\n\n\n","slug":"TypeScript","published":1,"updated":"2017-08-16T05:59:08.717Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb1u1p5800020sq9nm8tfvdj","content":"<h1 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h1><h2 id=\"原则\"><a href=\"#原则\" class=\"headerlink\" title=\"原则\"></a>原则</h2><p>TypeScript的核心原则之一是对值所具有的结构进行类型检查</p>\n<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><ul>\n<li><h2 id=\"boolean\"><a href=\"#boolean\" class=\"headerlink\" title=\"boolean\"></a>boolean</h2></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> flag:<span class=\"built_in\">boolean</span> = <span class=\"literal\">true</span>;</div></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h2></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> str:<span class=\"built_in\">string</span> = <span class=\"string\">\"caicai\"</span>;</div></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"number\"><a href=\"#number\" class=\"headerlink\" title=\"number\"></a>number</h2></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> num:<span class=\"built_in\">number</span> = <span class=\"number\">10</span>;</div></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"Array\"><a href=\"#Array\" class=\"headerlink\" title=\"Array\"></a>Array</h2></li>\n</ul>\n<blockquote>\n<p>定义类型两种方式: </p>\n<ol>\n<li>第一种,可以在元素类型后面接上 [],表示由此类型元素组成的一个数组</li>\n<li>第二种,使用数组泛型</li>\n</ol>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//以下两种等价</span></div><div class=\"line\"><span class=\"keyword\">let</span> arr:<span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">let</span> arr:<span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">number</span>&gt; = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h2></li>\n</ul>\n<p>元组类型允许表示一个已知<span style=\"color:red\"><strong>元素数量和类型的数组</strong></span>，各元素的类型不必相同,可以直接赋值,但是必须为申明的类型</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> list:[<span class=\"built_in\">string</span>,<span class=\"built_in\">number</span>]=[<span class=\"string\">\"1\"</span>,<span class=\"number\">2</span>];</div><div class=\"line\">list[<span class=\"number\">5</span>] = <span class=\"number\">100</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(list) <span class=\"comment\">//[\"1\",2,undefined,undefined,undefined,100]</span></div></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h2></li>\n</ul>\n<p>enum类型是对JavaScript标准数据类型的一个补充。 像C#等其它语言一样，使用枚举类型可以为一组数值赋予友好的名字,值为0,1,2,…</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">enum</span> Color&#123;</div><div class=\"line\">    red,</div><div class=\"line\">    green,</div><div class=\"line\">    blue</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> c: Color = Color.red;</div><div class=\"line\"><span class=\"keyword\">let</span> cName:<span class=\"built_in\">string</span> = Color[<span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"built_in\">console</span>.log(cName) <span class=\"comment\">//red</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(c) <span class=\"comment\">//c</span></div></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"any\"><a href=\"#any\" class=\"headerlink\" title=\"any\"></a>any</h2></li>\n</ul>\n<p>any为任意类型,既可以赋任何值(可以理解为es5里声明的变量都为any类型,<strong>eg:var sum = 100</strong>)</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> a:<span class=\"built_in\">any</span>=<span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">let</span> a:<span class=\"built_in\">any</span>=<span class=\"string\">\"2\"</span></div></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"null-undefined-void\"><a href=\"#null-undefined-void\" class=\"headerlink\" title=\"null undefined void\"></a>null undefined void</h2></li>\n</ul>\n<blockquote>\n<ol>\n<li>void 类型与any类型相反,即为没有任何类型,在函数中没写,默认返回void类型</li>\n<li>undefined和null两者各自有自己的类型分别叫做undefined和null</li>\n</ol>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">method</span>(<span class=\"params\"></span>):<span class=\"title\">void</span></span>&#123; <span class=\"comment\">//返回值为void类型,return就会报错</span></div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> u:<span class=\"literal\">undefined</span> = <span class=\"literal\">undefined</span>;</div><div class=\"line\"><span class=\"keyword\">let</span> n:<span class=\"literal\">null</span> = <span class=\"literal\">null</span>;</div></pre></td></tr></table></figure>\n<h2 id=\"interface\"><a href=\"#interface\" class=\"headerlink\" title=\"interface\"></a>interface</h2><p>接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约(相当于定义数据类型)</p>\n<p>可以用interface进行定义,传入的参数必须全部定义,然后区分是否只读 是否可选</p>\n<ul>\n<li><h2 id=\"简单接口\"><a href=\"#简单接口\" class=\"headerlink\" title=\"简单接口\"></a>简单接口</h2></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">name:<span class=\"built_in\">string</span>,age:<span class=\"built_in\">number</span> = 10</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(name,age) <span class=\"comment\">//name age为必传字段</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"可选属性\"><a href=\"#可选属性\" class=\"headerlink\" title=\"可选属性\"></a>可选属性</h2></li>\n</ul>\n<p>接口里的属性不全都是必需的,有些是只在某些条件下存在，或者根本不存在。即给函数传入的参数对象中只有部分属性赋值了。</p>\n<blockquote>\n<p>两种方式</p>\n<ol>\n<li>在可选属性后面加?</li>\n<li>可以给参数设置默认值(自己亲测有效,官网没写,有待继续测试)</li>\n</ol>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">name:<span class=\"built_in\">string</span>,age?:<span class=\"built_in\">number</span></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(name,age) <span class=\"comment\">//caicai,undefined</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">name:<span class=\"built_in\">string</span>,age:<span class=\"built_in\">number</span> = 10</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(name,age) <span class=\"comment\">//caicai,10</span></div><div class=\"line\">&#125;</div><div class=\"line\">func(<span class=\"string\">\"caicai\"</span>)</div></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"只读属性-readonly\"><a href=\"#只读属性-readonly\" class=\"headerlink\" title=\"只读属性 readonly\"></a>只读属性 readonly</h2></li>\n</ul>\n<p>一些对象属性只能在对象刚刚创建的时候修改其值。 你可以在属性名前用 readonly来指定只读属性</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">interface</span> Point&#123;</div><div class=\"line\">    readonly x:<span class=\"built_in\">number</span>,</div><div class=\"line\">    readonly y:<span class=\"built_in\">number</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> p:Point = &#123;x:<span class=\"number\">5</span>,y:<span class=\"number\">10</span>&#125;</div><div class=\"line\">p.x=<span class=\"number\">100</span>;<span class=\"comment\">//error</span></div></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"readonly-vs-const\"><a href=\"#readonly-vs-const\" class=\"headerlink\" title=\"readonly vs const\"></a>readonly vs const</h2></li>\n</ul>\n<p>最简单判断该用readonly还是const的方法是看要把它做为变量使用还是做为一个属性。 做为变量使用的话用 const，若做为属性则使用readonly。</p>\n<ul>\n<li><h2 id=\"额外的属性检查\"><a href=\"#额外的属性检查\" class=\"headerlink\" title=\"额外的属性检查\"></a>额外的属性检查</h2></li>\n</ul>\n<p>以上定义接口的时候,约定的参数为必传属性,在生活中一般会存在一些不存在的属性需要传入,因此,我们总不能都写到interface里声明一遍(不声明就会报错),<br>因此我们需要绕开这些检查,最简单的办法:</p>\n<ol>\n<li>使用断言</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">interface</span> Point&#123;</div><div class=\"line\">    x:<span class=\"built_in\">number</span>,</div><div class=\"line\">    y: <span class=\"built_in\">number</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">p</span>(<span class=\"params\">config: Point</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(config) <span class=\"comment\">//&#123;x:10,y:20,z:100&#125;</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">p(&#123;x:<span class=\"number\">10</span>,y:<span class=\"number\">20</span>,z:<span class=\"number\">100</span>&#125; as Point)</div></pre></td></tr></table></figure>\n<ol>\n<li>添加一个字符串索引签名</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">interface</span> Point&#123;</div><div class=\"line\">    x:<span class=\"built_in\">number</span>,</div><div class=\"line\">    y: <span class=\"built_in\">number</span>,</div><div class=\"line\">   [propName: <span class=\"built_in\">string</span>]: <span class=\"built_in\">any</span> <span class=\"comment\">//字符串签名,这样就可以传入任何参数了</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">p</span>(<span class=\"params\">config: Point</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(config) <span class=\"comment\">//&#123;x:10,y:20,z:100&#125;</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">p(&#123;x:<span class=\"number\">10</span>,y:<span class=\"number\">20</span>,z:<span class=\"number\">100</span>&#125;)</div></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"函数类型\"><a href=\"#函数类型\" class=\"headerlink\" title=\"函数类型\"></a>函数类型</h2></li>\n</ul>\n<p>接口能够描述JavaScript中对象拥有的各种各样的外形。 除了描述带有属性的普通对象外，接口也可以描述函数类型。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">interface</span> SearchFunc &#123; <span class=\"comment\">//申明一个函数类型(传入参数有两个,返回值的类型为boolean)</span></div><div class=\"line\">  (source: <span class=\"built_in\">string</span>, subString: <span class=\"built_in\">string</span>): <span class=\"built_in\">boolean</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> mySearch: SearchFunc;</div><div class=\"line\">mySearch = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source: <span class=\"built_in\">string</span>, subString: <span class=\"built_in\">string</span></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> result = source.search(subString);</div><div class=\"line\">  <span class=\"keyword\">return</span> result &gt; <span class=\"number\">-1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"可索引的类型\"><a href=\"#可索引的类型\" class=\"headerlink\" title=\"可索引的类型\"></a>可索引的类型</h2></li>\n</ul>\n<p>描述那些能够“通过索引得到”的类型 可索引类型具有一个 索引签名，它描述了对象索引的类型，还有相应的索引返回值类型</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">interface</span> StringArray &#123;</div><div class=\"line\">  [index: <span class=\"built_in\">number</span>]: <span class=\"built_in\">string</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> myArray: StringArray;</div><div class=\"line\">myArray = [<span class=\"string\">\"Bob\"</span>, <span class=\"string\">\"Fred\"</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> myStr: <span class=\"built_in\">string</span> = myArray[<span class=\"number\">0</span>];</div></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"类类型\"><a href=\"#类类型\" class=\"headerlink\" title=\"类类型\"></a>类类型</h2></li>\n</ul>\n<blockquote>\n<p>实现接口</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">interface</span> ClockInterface &#123;</div><div class=\"line\">    currentTime: <span class=\"built_in\">Date</span>;<span class=\"comment\">//属性</span></div><div class=\"line\">    setTime(d: <span class=\"built_in\">Date</span>);<span class=\"comment\">//方法</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> Clock <span class=\"keyword\">implements</span> ClockInterface &#123;<span class=\"comment\">//在类里实现</span></div><div class=\"line\">    currentTime: <span class=\"built_in\">Date</span>;</div><div class=\"line\">    setTime(d: <span class=\"built_in\">Date</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.currentTime = d;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(h: number, m: number) &#123; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h1><p>传统的JavaScript程序使用函数和基于原型的继承来创建可重用的组件,ECMAScript 6开始，JavaScript程序员将能够使用基于类的面向对象的方式</p>\n<ul>\n<li><h2 id=\"简单事例\"><a href=\"#简单事例\" class=\"headerlink\" title=\"简单事例\"></a>简单事例</h2></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Greeter &#123;</div><div class=\"line\">    greeting: <span class=\"built_in\">string</span>;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(message: string) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.greeting = message;</div><div class=\"line\">    &#125;</div><div class=\"line\">    greet() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Hello, \"</span> + <span class=\"keyword\">this</span>.greeting;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> greeter = <span class=\"keyword\">new</span> Greeter(<span class=\"string\">\"world\"</span>);</div></pre></td></tr></table></figure>\n<p>以上声明了一个 Greeter类。这个类有3个成员：一个叫做greeting的属性，一个构造函数和一个greet方法</p>\n<p>在引用任何一个类成员的时候都用了this。 它表示我们访问的是类的成员。</p>\n<p>最后一行，我们使用new构造了Greeter类的一个实例。 它会调用之前定义的构造函数，创建一个 Greeter类型的新对象，并执行构造函数初始化它</p>\n<ul>\n<li><h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Animal &#123;</div><div class=\"line\">    name:<span class=\"built_in\">string</span>;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(theName: string) &#123; <span class=\"keyword\">this</span>.name = theName; &#125;</div><div class=\"line\">    move(distanceInMeters: <span class=\"built_in\">number</span> = <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;this.name&#125;</span> moved <span class=\"subst\">$&#123;distanceInMeters&#125;</span>m.`</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> Snake extends Animal &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name: string) &#123; <span class=\"keyword\">super</span>(name); &#125;</div><div class=\"line\">    move(distanceInMeters = <span class=\"number\">5</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Slithering...\"</span>);</div><div class=\"line\">        <span class=\"keyword\">super</span>.move(distanceInMeters);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> Horse extends Animal &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name: string) &#123; <span class=\"keyword\">super</span>(name); &#125;</div><div class=\"line\">    move(distanceInMeters = <span class=\"number\">45</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Galloping...\"</span>);</div><div class=\"line\">        <span class=\"keyword\">super</span>.move(distanceInMeters);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> sam = <span class=\"keyword\">new</span> Snake(<span class=\"string\">\"Sammy the Python\"</span>);</div><div class=\"line\"><span class=\"keyword\">let</span> tom: Animal = <span class=\"keyword\">new</span> Horse(<span class=\"string\">\"Tommy the Palomino\"</span>);</div><div class=\"line\"></div><div class=\"line\">sam.move();</div><div class=\"line\">tom.move(<span class=\"number\">34</span>);</div><div class=\"line\"><span class=\"comment\">//运行结果:</span></div><div class=\"line\"><span class=\"comment\">//Slithering...</span></div><div class=\"line\"><span class=\"comment\">//Sammy the Python moved 5m.</span></div><div class=\"line\"><span class=\"comment\">//Galloping...</span></div><div class=\"line\"><span class=\"comment\">//Tommy the Palomino moved 34m.</span></div></pre></td></tr></table></figure>\n<p>我们使用 extends关键字来创建子类。你可以看到Horse和Snake类是基类Animal的子类，并且可以访问其属性和方法,并且重写了父类的方法</p>\n<ul>\n<li><h2 id=\"公共，私有与受保护的修饰符\"><a href=\"#公共，私有与受保护的修饰符\" class=\"headerlink\" title=\"公共，私有与受保护的修饰符\"></a>公共，私有与受保护的修饰符</h2></li>\n<li><h3 id=\"默认为public-可加可不加\"><a href=\"#默认为public-可加可不加\" class=\"headerlink\" title=\"默认为public (可加可不加)\"></a>默认为public (可加可不加)</h3></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Animal &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> name: <span class=\"built_in\">string</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">constructor</span>(theName: string) &#123; <span class=\"keyword\">this</span>.name = theName; &#125;</div><div class=\"line\">    <span class=\"keyword\">public</span> move(distanceInMeters: <span class=\"built_in\">number</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;this.name&#125;</span> moved <span class=\"subst\">$&#123;distanceInMeters&#125;</span>m.`</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><h3 id=\"private\"><a href=\"#private\" class=\"headerlink\" title=\"private\"></a>private</h3></li>\n</ul>\n<p>当成员被标记成private时，它就不能在声明它的类的外部访问。private成员在派生类中仍然可以访问</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Animal &#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> name: <span class=\"built_in\">string</span>;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(theName: string) &#123; <span class=\"keyword\">this</span>.name = theName; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Animal(<span class=\"string\">\"Cat\"</span>).name; <span class=\"comment\">// Error: 'name' is private;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><h3 id=\"protected\"><a href=\"#protected\" class=\"headerlink\" title=\"protected\"></a>protected</h3></li>\n</ul>\n<p>protected修饰符与private修饰符的行为很相似，但有一点不同，protected成员在派生类中仍然可以访问</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Person &#123;</div><div class=\"line\">    <span class=\"keyword\">protected</span> name: <span class=\"built_in\">string</span>;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name: string) &#123; <span class=\"keyword\">this</span>.name = name; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> Employee extends Person &#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> department: <span class=\"built_in\">string</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name: string, department: string) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(name)</div><div class=\"line\">        <span class=\"keyword\">this</span>.department = department;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> getElevatorPitch() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`Hello, my name is <span class=\"subst\">$&#123;this.name&#125;</span> and I work in <span class=\"subst\">$&#123;this.department&#125;</span>.`</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> howard = <span class=\"keyword\">new</span> Employee(<span class=\"string\">\"Howard\"</span>, <span class=\"string\">\"Sales\"</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(howard.getElevatorPitch());</div><div class=\"line\"><span class=\"built_in\">console</span>.log(howard.name);</div></pre></td></tr></table></figure>\n<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><h2 id=\"函数类型-1\"><a href=\"#函数类型-1\" class=\"headerlink\" title=\"函数类型\"></a>函数类型</h2><ul>\n<li><h3 id=\"为函数定义类型\"><a href=\"#为函数定义类型\" class=\"headerlink\" title=\"为函数定义类型\"></a>为函数定义类型</h3></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span></span>): <span class=\"title\">number</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x + y;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> myAdd = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span></span>): <span class=\"title\">number</span> </span>&#123; <span class=\"keyword\">return</span> x+y; &#125;;<span class=\"comment\">//返回值为number类型</span></div></pre></td></tr></table></figure>\n<ul>\n<li><h3 id=\"书写完整函数类型\"><a href=\"#书写完整函数类型\" class=\"headerlink\" title=\"书写完整函数类型\"></a>书写完整函数类型</h3></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> myAdd: (x:<span class=\"built_in\">number</span>, y:<span class=\"built_in\">number</span>) =&gt; <span class=\"built_in\">number</span> =</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span></span>): <span class=\"title\">number</span> </span>&#123; <span class=\"keyword\">return</span> x+y; &#125;;</div></pre></td></tr></table></figure>\n<ul>\n<li><h3 id=\"推断类型\"><a href=\"#推断类型\" class=\"headerlink\" title=\"推断类型\"></a>推断类型</h3></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> myAdd = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span></span>): <span class=\"title\">number</span> </span>&#123; <span class=\"keyword\">return</span> x + y; &#125;;</div><div class=\"line\"><span class=\"comment\">//=&gt; typescript会自动推断出函数的类型</span></div><div class=\"line\"><span class=\"keyword\">let</span> myAdd: (baseValue:<span class=\"built_in\">number</span>, increment:<span class=\"built_in\">number</span>) =&gt; <span class=\"built_in\">number</span> =</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) </span>&#123; <span class=\"keyword\">return</span> x + y; &#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"可选参数\"><a href=\"#可选参数\" class=\"headerlink\" title=\"可选参数\"></a>可选参数</h2><p> 在TypeScript里我们可以在参数名旁使用 ?实现可选参数的功能</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildName</span>(<span class=\"params\">firstName: <span class=\"built_in\">string</span>, lastName?: <span class=\"built_in\">string</span></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (lastName)</div><div class=\"line\">        <span class=\"keyword\">return</span> firstName + <span class=\"string\">\" \"</span> + lastName;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">        <span class=\"keyword\">return</span> firstName;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> result1 = buildName(<span class=\"string\">\"Bob\"</span>);  <span class=\"comment\">// works correctly now</span></div><div class=\"line\"><span class=\"keyword\">let</span> result2 = buildName(<span class=\"string\">\"Bob\"</span>, <span class=\"string\">\"Adams\"</span>, <span class=\"string\">\"Sr.\"</span>);  <span class=\"comment\">// error, too many parameters</span></div><div class=\"line\"><span class=\"keyword\">let</span> result3 = buildName(<span class=\"string\">\"Bob\"</span>, <span class=\"string\">\"Adams\"</span>);  <span class=\"comment\">// ah, just right</span></div></pre></td></tr></table></figure>\n<h2 id=\"默认参数\"><a href=\"#默认参数\" class=\"headerlink\" title=\"默认参数\"></a>默认参数</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">function buildName(firstName: string, lastName = \"Smith\") &#123;//有默认值的参数</div><div class=\"line\">    return firstName + \" \" + lastName;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">let result1 = buildName(\"Bob\");                  // works correctly now, returns \"Bob Smith\"</div><div class=\"line\">let result2 = buildName(\"Bob\", undefined);       // still works, also returns \"Bob Smith\"</div><div class=\"line\">let result3 = buildName(\"Bob\", \"Adams\", \"Sr.\");  // error, too many parameters</div><div class=\"line\">let result4 = buildName(\"Bob\", \"Adams\");         // ah, just right</div></pre></td></tr></table></figure>\n<h2 id=\"剩余参数\"><a href=\"#剩余参数\" class=\"headerlink\" title=\"剩余参数\"></a>剩余参数</h2><p>必要参数，默认参数和可选参数有个共同点：它们表示某一个参数。 有时，你想同时操作多个参数，或者你并不知道会有多少参数传递进来。 在JavaScript里，你可以使用 arguments来访问所有传入的参数。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildName</span>(<span class=\"params\">firstName: <span class=\"built_in\">string</span>, ...restOfName: <span class=\"built_in\">string</span>[]</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> firstName + <span class=\"string\">\" \"</span> + restOfName.join(<span class=\"string\">\" \"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> employeeName = buildName(<span class=\"string\">\"Joseph\"</span>, <span class=\"string\">\"Samuel\"</span>, <span class=\"string\">\"Lucas\"</span>, <span class=\"string\">\"MacKinzie\"</span>);</div></pre></td></tr></table></figure>\n<h1 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h1><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">identity</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">arg: T</span>): <span class=\"title\">T</span> </span>&#123; <span class=\"comment\">//假如用户传入的参数T为字符串,则t为string类型,函数返回值也为string类型</span></div><div class=\"line\">    <span class=\"keyword\">return</span> arg;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"export-import\"><a href=\"#export-import\" class=\"headerlink\" title=\"export import\"></a>export import</h1><p>es6 的导入导出可以用的同时,typeScript新加入了 export = 和 import = require() 进行导出和导入</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//ZipCodeValidator.ts</span></div><div class=\"line\"><span class=\"keyword\">let</span> numberRegexp = <span class=\"regexp\">/^[0-9]+$/</span>;</div><div class=\"line\"><span class=\"keyword\">class</span> ZipCodeValidator &#123;</div><div class=\"line\">    isAcceptable(s: <span class=\"built_in\">string</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> s.length === <span class=\"number\">5</span> &amp;&amp; numberRegexp.test(s);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> = ZipCodeValidator;</div><div class=\"line\"><span class=\"comment\">//Test.ts</span></div><div class=\"line\"><span class=\"keyword\">import</span> zip = <span class=\"built_in\">require</span>(<span class=\"string\">\"./ZipCodeValidator\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Some samples to try</span></div><div class=\"line\"><span class=\"keyword\">let</span> strings = [<span class=\"string\">\"Hello\"</span>, <span class=\"string\">\"98052\"</span>, <span class=\"string\">\"101\"</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Validators to use</span></div><div class=\"line\"><span class=\"keyword\">let</span> validator = <span class=\"keyword\">new</span> zip();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Show whether each string passed each validator</span></div><div class=\"line\">strings.forEach(s =&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`\"<span class=\"subst\">$&#123; s &#125;</span>\" - <span class=\"subst\">$&#123; validator.isAcceptable(s) ? \"matches\" : \"does not match\" &#125;</span>`</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h1><h2 id=\"原则\"><a href=\"#原则\" class=\"headerlink\" title=\"原则\"></a>原则</h2><p>TypeScript的核心原则之一是对值所具有的结构进行类型检查</p>\n<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><ul>\n<li><h2 id=\"boolean\"><a href=\"#boolean\" class=\"headerlink\" title=\"boolean\"></a>boolean</h2></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> flag:<span class=\"built_in\">boolean</span> = <span class=\"literal\">true</span>;</div></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h2></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> str:<span class=\"built_in\">string</span> = <span class=\"string\">\"caicai\"</span>;</div></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"number\"><a href=\"#number\" class=\"headerlink\" title=\"number\"></a>number</h2></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> num:<span class=\"built_in\">number</span> = <span class=\"number\">10</span>;</div></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"Array\"><a href=\"#Array\" class=\"headerlink\" title=\"Array\"></a>Array</h2></li>\n</ul>\n<blockquote>\n<p>定义类型两种方式: </p>\n<ol>\n<li>第一种,可以在元素类型后面接上 [],表示由此类型元素组成的一个数组</li>\n<li>第二种,使用数组泛型</li>\n</ol>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//以下两种等价</span></div><div class=\"line\"><span class=\"keyword\">let</span> arr:<span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">let</span> arr:<span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">number</span>&gt; = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</div></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h2></li>\n</ul>\n<p>元组类型允许表示一个已知<span style=\"color:red\"><strong>元素数量和类型的数组</strong></span>，各元素的类型不必相同,可以直接赋值,但是必须为申明的类型</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> list:[<span class=\"built_in\">string</span>,<span class=\"built_in\">number</span>]=[<span class=\"string\">\"1\"</span>,<span class=\"number\">2</span>];</div><div class=\"line\">list[<span class=\"number\">5</span>] = <span class=\"number\">100</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(list) <span class=\"comment\">//[\"1\",2,undefined,undefined,undefined,100]</span></div></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h2></li>\n</ul>\n<p>enum类型是对JavaScript标准数据类型的一个补充。 像C#等其它语言一样，使用枚举类型可以为一组数值赋予友好的名字,值为0,1,2,…</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">enum</span> Color&#123;</div><div class=\"line\">    red,</div><div class=\"line\">    green,</div><div class=\"line\">    blue</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> c: Color = Color.red;</div><div class=\"line\"><span class=\"keyword\">let</span> cName:<span class=\"built_in\">string</span> = Color[<span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"built_in\">console</span>.log(cName) <span class=\"comment\">//red</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(c) <span class=\"comment\">//c</span></div></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"any\"><a href=\"#any\" class=\"headerlink\" title=\"any\"></a>any</h2></li>\n</ul>\n<p>any为任意类型,既可以赋任何值(可以理解为es5里声明的变量都为any类型,<strong>eg:var sum = 100</strong>)</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> a:<span class=\"built_in\">any</span>=<span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">let</span> a:<span class=\"built_in\">any</span>=<span class=\"string\">\"2\"</span></div></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"null-undefined-void\"><a href=\"#null-undefined-void\" class=\"headerlink\" title=\"null undefined void\"></a>null undefined void</h2></li>\n</ul>\n<blockquote>\n<ol>\n<li>void 类型与any类型相反,即为没有任何类型,在函数中没写,默认返回void类型</li>\n<li>undefined和null两者各自有自己的类型分别叫做undefined和null</li>\n</ol>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">method</span>(<span class=\"params\"></span>):<span class=\"title\">void</span></span>&#123; <span class=\"comment\">//返回值为void类型,return就会报错</span></div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> u:<span class=\"literal\">undefined</span> = <span class=\"literal\">undefined</span>;</div><div class=\"line\"><span class=\"keyword\">let</span> n:<span class=\"literal\">null</span> = <span class=\"literal\">null</span>;</div></pre></td></tr></table></figure>\n<h2 id=\"interface\"><a href=\"#interface\" class=\"headerlink\" title=\"interface\"></a>interface</h2><p>接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约(相当于定义数据类型)</p>\n<p>可以用interface进行定义,传入的参数必须全部定义,然后区分是否只读 是否可选</p>\n<ul>\n<li><h2 id=\"简单接口\"><a href=\"#简单接口\" class=\"headerlink\" title=\"简单接口\"></a>简单接口</h2></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">name:<span class=\"built_in\">string</span>,age:<span class=\"built_in\">number</span> = 10</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(name,age) <span class=\"comment\">//name age为必传字段</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"可选属性\"><a href=\"#可选属性\" class=\"headerlink\" title=\"可选属性\"></a>可选属性</h2></li>\n</ul>\n<p>接口里的属性不全都是必需的,有些是只在某些条件下存在，或者根本不存在。即给函数传入的参数对象中只有部分属性赋值了。</p>\n<blockquote>\n<p>两种方式</p>\n<ol>\n<li>在可选属性后面加?</li>\n<li>可以给参数设置默认值(自己亲测有效,官网没写,有待继续测试)</li>\n</ol>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">name:<span class=\"built_in\">string</span>,age?:<span class=\"built_in\">number</span></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(name,age) <span class=\"comment\">//caicai,undefined</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">name:<span class=\"built_in\">string</span>,age:<span class=\"built_in\">number</span> = 10</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(name,age) <span class=\"comment\">//caicai,10</span></div><div class=\"line\">&#125;</div><div class=\"line\">func(<span class=\"string\">\"caicai\"</span>)</div></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"只读属性-readonly\"><a href=\"#只读属性-readonly\" class=\"headerlink\" title=\"只读属性 readonly\"></a>只读属性 readonly</h2></li>\n</ul>\n<p>一些对象属性只能在对象刚刚创建的时候修改其值。 你可以在属性名前用 readonly来指定只读属性</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">interface</span> Point&#123;</div><div class=\"line\">    readonly x:<span class=\"built_in\">number</span>,</div><div class=\"line\">    readonly y:<span class=\"built_in\">number</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> p:Point = &#123;x:<span class=\"number\">5</span>,y:<span class=\"number\">10</span>&#125;</div><div class=\"line\">p.x=<span class=\"number\">100</span>;<span class=\"comment\">//error</span></div></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"readonly-vs-const\"><a href=\"#readonly-vs-const\" class=\"headerlink\" title=\"readonly vs const\"></a>readonly vs const</h2></li>\n</ul>\n<p>最简单判断该用readonly还是const的方法是看要把它做为变量使用还是做为一个属性。 做为变量使用的话用 const，若做为属性则使用readonly。</p>\n<ul>\n<li><h2 id=\"额外的属性检查\"><a href=\"#额外的属性检查\" class=\"headerlink\" title=\"额外的属性检查\"></a>额外的属性检查</h2></li>\n</ul>\n<p>以上定义接口的时候,约定的参数为必传属性,在生活中一般会存在一些不存在的属性需要传入,因此,我们总不能都写到interface里声明一遍(不声明就会报错),<br>因此我们需要绕开这些检查,最简单的办法:</p>\n<ol>\n<li>使用断言</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">interface</span> Point&#123;</div><div class=\"line\">    x:<span class=\"built_in\">number</span>,</div><div class=\"line\">    y: <span class=\"built_in\">number</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">p</span>(<span class=\"params\">config: Point</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(config) <span class=\"comment\">//&#123;x:10,y:20,z:100&#125;</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">p(&#123;x:<span class=\"number\">10</span>,y:<span class=\"number\">20</span>,z:<span class=\"number\">100</span>&#125; as Point)</div></pre></td></tr></table></figure>\n<ol>\n<li>添加一个字符串索引签名</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">interface</span> Point&#123;</div><div class=\"line\">    x:<span class=\"built_in\">number</span>,</div><div class=\"line\">    y: <span class=\"built_in\">number</span>,</div><div class=\"line\">   [propName: <span class=\"built_in\">string</span>]: <span class=\"built_in\">any</span> <span class=\"comment\">//字符串签名,这样就可以传入任何参数了</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">p</span>(<span class=\"params\">config: Point</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(config) <span class=\"comment\">//&#123;x:10,y:20,z:100&#125;</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">p(&#123;x:<span class=\"number\">10</span>,y:<span class=\"number\">20</span>,z:<span class=\"number\">100</span>&#125;)</div></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"函数类型\"><a href=\"#函数类型\" class=\"headerlink\" title=\"函数类型\"></a>函数类型</h2></li>\n</ul>\n<p>接口能够描述JavaScript中对象拥有的各种各样的外形。 除了描述带有属性的普通对象外，接口也可以描述函数类型。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">interface</span> SearchFunc &#123; <span class=\"comment\">//申明一个函数类型(传入参数有两个,返回值的类型为boolean)</span></div><div class=\"line\">  (source: <span class=\"built_in\">string</span>, subString: <span class=\"built_in\">string</span>): <span class=\"built_in\">boolean</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> mySearch: SearchFunc;</div><div class=\"line\">mySearch = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source: <span class=\"built_in\">string</span>, subString: <span class=\"built_in\">string</span></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> result = source.search(subString);</div><div class=\"line\">  <span class=\"keyword\">return</span> result &gt; <span class=\"number\">-1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"可索引的类型\"><a href=\"#可索引的类型\" class=\"headerlink\" title=\"可索引的类型\"></a>可索引的类型</h2></li>\n</ul>\n<p>描述那些能够“通过索引得到”的类型 可索引类型具有一个 索引签名，它描述了对象索引的类型，还有相应的索引返回值类型</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">interface</span> StringArray &#123;</div><div class=\"line\">  [index: <span class=\"built_in\">number</span>]: <span class=\"built_in\">string</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> myArray: StringArray;</div><div class=\"line\">myArray = [<span class=\"string\">\"Bob\"</span>, <span class=\"string\">\"Fred\"</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> myStr: <span class=\"built_in\">string</span> = myArray[<span class=\"number\">0</span>];</div></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"类类型\"><a href=\"#类类型\" class=\"headerlink\" title=\"类类型\"></a>类类型</h2></li>\n</ul>\n<blockquote>\n<p>实现接口</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">interface</span> ClockInterface &#123;</div><div class=\"line\">    currentTime: <span class=\"built_in\">Date</span>;<span class=\"comment\">//属性</span></div><div class=\"line\">    setTime(d: <span class=\"built_in\">Date</span>);<span class=\"comment\">//方法</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> Clock <span class=\"keyword\">implements</span> ClockInterface &#123;<span class=\"comment\">//在类里实现</span></div><div class=\"line\">    currentTime: <span class=\"built_in\">Date</span>;</div><div class=\"line\">    setTime(d: <span class=\"built_in\">Date</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.currentTime = d;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(h: number, m: number) &#123; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h1><p>传统的JavaScript程序使用函数和基于原型的继承来创建可重用的组件,ECMAScript 6开始，JavaScript程序员将能够使用基于类的面向对象的方式</p>\n<ul>\n<li><h2 id=\"简单事例\"><a href=\"#简单事例\" class=\"headerlink\" title=\"简单事例\"></a>简单事例</h2></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Greeter &#123;</div><div class=\"line\">    greeting: <span class=\"built_in\">string</span>;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(message: string) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.greeting = message;</div><div class=\"line\">    &#125;</div><div class=\"line\">    greet() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Hello, \"</span> + <span class=\"keyword\">this</span>.greeting;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> greeter = <span class=\"keyword\">new</span> Greeter(<span class=\"string\">\"world\"</span>);</div></pre></td></tr></table></figure>\n<p>以上声明了一个 Greeter类。这个类有3个成员：一个叫做greeting的属性，一个构造函数和一个greet方法</p>\n<p>在引用任何一个类成员的时候都用了this。 它表示我们访问的是类的成员。</p>\n<p>最后一行，我们使用new构造了Greeter类的一个实例。 它会调用之前定义的构造函数，创建一个 Greeter类型的新对象，并执行构造函数初始化它</p>\n<ul>\n<li><h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Animal &#123;</div><div class=\"line\">    name:<span class=\"built_in\">string</span>;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(theName: string) &#123; <span class=\"keyword\">this</span>.name = theName; &#125;</div><div class=\"line\">    move(distanceInMeters: <span class=\"built_in\">number</span> = <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;this.name&#125;</span> moved <span class=\"subst\">$&#123;distanceInMeters&#125;</span>m.`</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> Snake extends Animal &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name: string) &#123; <span class=\"keyword\">super</span>(name); &#125;</div><div class=\"line\">    move(distanceInMeters = <span class=\"number\">5</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Slithering...\"</span>);</div><div class=\"line\">        <span class=\"keyword\">super</span>.move(distanceInMeters);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> Horse extends Animal &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name: string) &#123; <span class=\"keyword\">super</span>(name); &#125;</div><div class=\"line\">    move(distanceInMeters = <span class=\"number\">45</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Galloping...\"</span>);</div><div class=\"line\">        <span class=\"keyword\">super</span>.move(distanceInMeters);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> sam = <span class=\"keyword\">new</span> Snake(<span class=\"string\">\"Sammy the Python\"</span>);</div><div class=\"line\"><span class=\"keyword\">let</span> tom: Animal = <span class=\"keyword\">new</span> Horse(<span class=\"string\">\"Tommy the Palomino\"</span>);</div><div class=\"line\"></div><div class=\"line\">sam.move();</div><div class=\"line\">tom.move(<span class=\"number\">34</span>);</div><div class=\"line\"><span class=\"comment\">//运行结果:</span></div><div class=\"line\"><span class=\"comment\">//Slithering...</span></div><div class=\"line\"><span class=\"comment\">//Sammy the Python moved 5m.</span></div><div class=\"line\"><span class=\"comment\">//Galloping...</span></div><div class=\"line\"><span class=\"comment\">//Tommy the Palomino moved 34m.</span></div></pre></td></tr></table></figure>\n<p>我们使用 extends关键字来创建子类。你可以看到Horse和Snake类是基类Animal的子类，并且可以访问其属性和方法,并且重写了父类的方法</p>\n<ul>\n<li><h2 id=\"公共，私有与受保护的修饰符\"><a href=\"#公共，私有与受保护的修饰符\" class=\"headerlink\" title=\"公共，私有与受保护的修饰符\"></a>公共，私有与受保护的修饰符</h2></li>\n<li><h3 id=\"默认为public-可加可不加\"><a href=\"#默认为public-可加可不加\" class=\"headerlink\" title=\"默认为public (可加可不加)\"></a>默认为public (可加可不加)</h3></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Animal &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> name: <span class=\"built_in\">string</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">constructor</span>(theName: string) &#123; <span class=\"keyword\">this</span>.name = theName; &#125;</div><div class=\"line\">    <span class=\"keyword\">public</span> move(distanceInMeters: <span class=\"built_in\">number</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;this.name&#125;</span> moved <span class=\"subst\">$&#123;distanceInMeters&#125;</span>m.`</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><h3 id=\"private\"><a href=\"#private\" class=\"headerlink\" title=\"private\"></a>private</h3></li>\n</ul>\n<p>当成员被标记成private时，它就不能在声明它的类的外部访问。private成员在派生类中仍然可以访问</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Animal &#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> name: <span class=\"built_in\">string</span>;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(theName: string) &#123; <span class=\"keyword\">this</span>.name = theName; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Animal(<span class=\"string\">\"Cat\"</span>).name; <span class=\"comment\">// Error: 'name' is private;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><h3 id=\"protected\"><a href=\"#protected\" class=\"headerlink\" title=\"protected\"></a>protected</h3></li>\n</ul>\n<p>protected修饰符与private修饰符的行为很相似，但有一点不同，protected成员在派生类中仍然可以访问</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Person &#123;</div><div class=\"line\">    <span class=\"keyword\">protected</span> name: <span class=\"built_in\">string</span>;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name: string) &#123; <span class=\"keyword\">this</span>.name = name; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> Employee extends Person &#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> department: <span class=\"built_in\">string</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name: string, department: string) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(name)</div><div class=\"line\">        <span class=\"keyword\">this</span>.department = department;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> getElevatorPitch() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`Hello, my name is <span class=\"subst\">$&#123;this.name&#125;</span> and I work in <span class=\"subst\">$&#123;this.department&#125;</span>.`</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> howard = <span class=\"keyword\">new</span> Employee(<span class=\"string\">\"Howard\"</span>, <span class=\"string\">\"Sales\"</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(howard.getElevatorPitch());</div><div class=\"line\"><span class=\"built_in\">console</span>.log(howard.name);</div></pre></td></tr></table></figure>\n<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><h2 id=\"函数类型-1\"><a href=\"#函数类型-1\" class=\"headerlink\" title=\"函数类型\"></a>函数类型</h2><ul>\n<li><h3 id=\"为函数定义类型\"><a href=\"#为函数定义类型\" class=\"headerlink\" title=\"为函数定义类型\"></a>为函数定义类型</h3></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span></span>): <span class=\"title\">number</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x + y;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> myAdd = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span></span>): <span class=\"title\">number</span> </span>&#123; <span class=\"keyword\">return</span> x+y; &#125;;<span class=\"comment\">//返回值为number类型</span></div></pre></td></tr></table></figure>\n<ul>\n<li><h3 id=\"书写完整函数类型\"><a href=\"#书写完整函数类型\" class=\"headerlink\" title=\"书写完整函数类型\"></a>书写完整函数类型</h3></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> myAdd: (x:<span class=\"built_in\">number</span>, y:<span class=\"built_in\">number</span>) =&gt; <span class=\"built_in\">number</span> =</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span></span>): <span class=\"title\">number</span> </span>&#123; <span class=\"keyword\">return</span> x+y; &#125;;</div></pre></td></tr></table></figure>\n<ul>\n<li><h3 id=\"推断类型\"><a href=\"#推断类型\" class=\"headerlink\" title=\"推断类型\"></a>推断类型</h3></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> myAdd = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span></span>): <span class=\"title\">number</span> </span>&#123; <span class=\"keyword\">return</span> x + y; &#125;;</div><div class=\"line\"><span class=\"comment\">//=&gt; typescript会自动推断出函数的类型</span></div><div class=\"line\"><span class=\"keyword\">let</span> myAdd: (baseValue:<span class=\"built_in\">number</span>, increment:<span class=\"built_in\">number</span>) =&gt; <span class=\"built_in\">number</span> =</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) </span>&#123; <span class=\"keyword\">return</span> x + y; &#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"可选参数\"><a href=\"#可选参数\" class=\"headerlink\" title=\"可选参数\"></a>可选参数</h2><p> 在TypeScript里我们可以在参数名旁使用 ?实现可选参数的功能</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildName</span>(<span class=\"params\">firstName: <span class=\"built_in\">string</span>, lastName?: <span class=\"built_in\">string</span></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (lastName)</div><div class=\"line\">        <span class=\"keyword\">return</span> firstName + <span class=\"string\">\" \"</span> + lastName;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">        <span class=\"keyword\">return</span> firstName;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> result1 = buildName(<span class=\"string\">\"Bob\"</span>);  <span class=\"comment\">// works correctly now</span></div><div class=\"line\"><span class=\"keyword\">let</span> result2 = buildName(<span class=\"string\">\"Bob\"</span>, <span class=\"string\">\"Adams\"</span>, <span class=\"string\">\"Sr.\"</span>);  <span class=\"comment\">// error, too many parameters</span></div><div class=\"line\"><span class=\"keyword\">let</span> result3 = buildName(<span class=\"string\">\"Bob\"</span>, <span class=\"string\">\"Adams\"</span>);  <span class=\"comment\">// ah, just right</span></div></pre></td></tr></table></figure>\n<h2 id=\"默认参数\"><a href=\"#默认参数\" class=\"headerlink\" title=\"默认参数\"></a>默认参数</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">function buildName(firstName: string, lastName = \"Smith\") &#123;//有默认值的参数</div><div class=\"line\">    return firstName + \" \" + lastName;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">let result1 = buildName(\"Bob\");                  // works correctly now, returns \"Bob Smith\"</div><div class=\"line\">let result2 = buildName(\"Bob\", undefined);       // still works, also returns \"Bob Smith\"</div><div class=\"line\">let result3 = buildName(\"Bob\", \"Adams\", \"Sr.\");  // error, too many parameters</div><div class=\"line\">let result4 = buildName(\"Bob\", \"Adams\");         // ah, just right</div></pre></td></tr></table></figure>\n<h2 id=\"剩余参数\"><a href=\"#剩余参数\" class=\"headerlink\" title=\"剩余参数\"></a>剩余参数</h2><p>必要参数，默认参数和可选参数有个共同点：它们表示某一个参数。 有时，你想同时操作多个参数，或者你并不知道会有多少参数传递进来。 在JavaScript里，你可以使用 arguments来访问所有传入的参数。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildName</span>(<span class=\"params\">firstName: <span class=\"built_in\">string</span>, ...restOfName: <span class=\"built_in\">string</span>[]</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> firstName + <span class=\"string\">\" \"</span> + restOfName.join(<span class=\"string\">\" \"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> employeeName = buildName(<span class=\"string\">\"Joseph\"</span>, <span class=\"string\">\"Samuel\"</span>, <span class=\"string\">\"Lucas\"</span>, <span class=\"string\">\"MacKinzie\"</span>);</div></pre></td></tr></table></figure>\n<h1 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h1><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">identity</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">arg: T</span>): <span class=\"title\">T</span> </span>&#123; <span class=\"comment\">//假如用户传入的参数T为字符串,则t为string类型,函数返回值也为string类型</span></div><div class=\"line\">    <span class=\"keyword\">return</span> arg;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"export-import\"><a href=\"#export-import\" class=\"headerlink\" title=\"export import\"></a>export import</h1><p>es6 的导入导出可以用的同时,typeScript新加入了 export = 和 import = require() 进行导出和导入</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//ZipCodeValidator.ts</span></div><div class=\"line\"><span class=\"keyword\">let</span> numberRegexp = <span class=\"regexp\">/^[0-9]+$/</span>;</div><div class=\"line\"><span class=\"keyword\">class</span> ZipCodeValidator &#123;</div><div class=\"line\">    isAcceptable(s: <span class=\"built_in\">string</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> s.length === <span class=\"number\">5</span> &amp;&amp; numberRegexp.test(s);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> = ZipCodeValidator;</div><div class=\"line\"><span class=\"comment\">//Test.ts</span></div><div class=\"line\"><span class=\"keyword\">import</span> zip = <span class=\"built_in\">require</span>(<span class=\"string\">\"./ZipCodeValidator\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Some samples to try</span></div><div class=\"line\"><span class=\"keyword\">let</span> strings = [<span class=\"string\">\"Hello\"</span>, <span class=\"string\">\"98052\"</span>, <span class=\"string\">\"101\"</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Validators to use</span></div><div class=\"line\"><span class=\"keyword\">let</span> validator = <span class=\"keyword\">new</span> zip();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Show whether each string passed each validator</span></div><div class=\"line\">strings.forEach(s =&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`\"<span class=\"subst\">$&#123; s &#125;</span>\" - <span class=\"subst\">$&#123; validator.isAcceptable(s) ? \"matches\" : \"does not match\" &#125;</span>`</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n"},{"title":"Jquery ready函数的实现","date":"2017-12-08T01:47:40.000Z","_content":"\n## ready和onload函数的区别\n\n- 运行时间\n\nonload函数必须等到页面里所有东西加载完,ready函数则为渲染完dom结构就会执行\n\n- 编写个数\n\nwindow.onload只能写一个(写多个的话,只会执行一个)$(document).ready()可以写多个 \n\n- 简化写法\n\nwindow.onload没有简写,$(document).ready()可以简写为$(function(){})\n\n## 怎样用javascript实现jquery的ready函数呢?\n\n标准浏览器可以监听DOMContentLoaded,ie浏览器可以监听onreadystatechange\n\n具体代码实现:\n\n```javascript 1.8\nfunction ready(callback) {\n  if(document.addEventListener){\n      document.addEventListener(\"DOMContentLoaded\",function() {\n        document.removeEventListener(\"DOMContentLoaded\",arguments.callee,false);\n        callback();\n      })\n  }else if(document.attanchEvent){\n       document.attanchEvent(\"onreadystatechange\",function() {\n         if(document.readyState === \"complete\"){\n             document.detanchEvent(\"DOMContentLoaded\",arguments.callee);\n             callback();\n         }\n       })\n  }\n}\n```","source":"_posts/Jquery-ready函数的实现.md","raw":"---\ntitle: Jquery ready函数的实现\ndate: 2017-12-08 09:47:40\ncategories: Javascript\ntags:\n     - Javascript\n---\n\n## ready和onload函数的区别\n\n- 运行时间\n\nonload函数必须等到页面里所有东西加载完,ready函数则为渲染完dom结构就会执行\n\n- 编写个数\n\nwindow.onload只能写一个(写多个的话,只会执行一个)$(document).ready()可以写多个 \n\n- 简化写法\n\nwindow.onload没有简写,$(document).ready()可以简写为$(function(){})\n\n## 怎样用javascript实现jquery的ready函数呢?\n\n标准浏览器可以监听DOMContentLoaded,ie浏览器可以监听onreadystatechange\n\n具体代码实现:\n\n```javascript 1.8\nfunction ready(callback) {\n  if(document.addEventListener){\n      document.addEventListener(\"DOMContentLoaded\",function() {\n        document.removeEventListener(\"DOMContentLoaded\",arguments.callee,false);\n        callback();\n      })\n  }else if(document.attanchEvent){\n       document.attanchEvent(\"onreadystatechange\",function() {\n         if(document.readyState === \"complete\"){\n             document.detanchEvent(\"DOMContentLoaded\",arguments.callee);\n             callback();\n         }\n       })\n  }\n}\n```","slug":"Jquery-ready函数的实现","published":1,"updated":"2017-12-08T02:12:40.860Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb1u1p5s00060sq9oa023hnh","content":"<h2 id=\"ready和onload函数的区别\"><a href=\"#ready和onload函数的区别\" class=\"headerlink\" title=\"ready和onload函数的区别\"></a>ready和onload函数的区别</h2><ul>\n<li>运行时间</li>\n</ul>\n<p>onload函数必须等到页面里所有东西加载完,ready函数则为渲染完dom结构就会执行</p>\n<ul>\n<li>编写个数</li>\n</ul>\n<p>window.onload只能写一个(写多个的话,只会执行一个)$(document).ready()可以写多个 </p>\n<ul>\n<li>简化写法</li>\n</ul>\n<p>window.onload没有简写,$(document).ready()可以简写为$(function(){})</p>\n<h2 id=\"怎样用javascript实现jquery的ready函数呢\"><a href=\"#怎样用javascript实现jquery的ready函数呢\" class=\"headerlink\" title=\"怎样用javascript实现jquery的ready函数呢?\"></a>怎样用javascript实现jquery的ready函数呢?</h2><p>标准浏览器可以监听DOMContentLoaded,ie浏览器可以监听onreadystatechange</p>\n<p>具体代码实现:</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ready</span>(<span class=\"params\">callback</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.addEventListener)&#123;</div><div class=\"line\">      <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"DOMContentLoaded\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">document</span>.removeEventListener(<span class=\"string\">\"DOMContentLoaded\"</span>,<span class=\"built_in\">arguments</span>.callee,<span class=\"literal\">false</span>);</div><div class=\"line\">        callback();</div><div class=\"line\">      &#125;)</div><div class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.attanchEvent)&#123;</div><div class=\"line\">       <span class=\"built_in\">document</span>.attanchEvent(<span class=\"string\">\"onreadystatechange\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">         <span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.readyState === <span class=\"string\">\"complete\"</span>)&#123;</div><div class=\"line\">             <span class=\"built_in\">document</span>.detanchEvent(<span class=\"string\">\"DOMContentLoaded\"</span>,<span class=\"built_in\">arguments</span>.callee);</div><div class=\"line\">             callback();</div><div class=\"line\">         &#125;</div><div class=\"line\">       &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"ready和onload函数的区别\"><a href=\"#ready和onload函数的区别\" class=\"headerlink\" title=\"ready和onload函数的区别\"></a>ready和onload函数的区别</h2><ul>\n<li>运行时间</li>\n</ul>\n<p>onload函数必须等到页面里所有东西加载完,ready函数则为渲染完dom结构就会执行</p>\n<ul>\n<li>编写个数</li>\n</ul>\n<p>window.onload只能写一个(写多个的话,只会执行一个)$(document).ready()可以写多个 </p>\n<ul>\n<li>简化写法</li>\n</ul>\n<p>window.onload没有简写,$(document).ready()可以简写为$(function(){})</p>\n<h2 id=\"怎样用javascript实现jquery的ready函数呢\"><a href=\"#怎样用javascript实现jquery的ready函数呢\" class=\"headerlink\" title=\"怎样用javascript实现jquery的ready函数呢?\"></a>怎样用javascript实现jquery的ready函数呢?</h2><p>标准浏览器可以监听DOMContentLoaded,ie浏览器可以监听onreadystatechange</p>\n<p>具体代码实现:</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ready</span>(<span class=\"params\">callback</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.addEventListener)&#123;</div><div class=\"line\">      <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"DOMContentLoaded\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">document</span>.removeEventListener(<span class=\"string\">\"DOMContentLoaded\"</span>,<span class=\"built_in\">arguments</span>.callee,<span class=\"literal\">false</span>);</div><div class=\"line\">        callback();</div><div class=\"line\">      &#125;)</div><div class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.attanchEvent)&#123;</div><div class=\"line\">       <span class=\"built_in\">document</span>.attanchEvent(<span class=\"string\">\"onreadystatechange\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">         <span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.readyState === <span class=\"string\">\"complete\"</span>)&#123;</div><div class=\"line\">             <span class=\"built_in\">document</span>.detanchEvent(<span class=\"string\">\"DOMContentLoaded\"</span>,<span class=\"built_in\">arguments</span>.callee);</div><div class=\"line\">             callback();</div><div class=\"line\">         &#125;</div><div class=\"line\">       &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"dom","date":"2016-11-23T07:00:33.000Z","_content":"\n---------\n```\n<body>\n    <div id=\"div\">\n        <div class=\"div1\" name=\"div\">hello world<span>奥斯卡看卡</span></div>\n        <div class=\"div2\" name=\"div\">哈哈哈</div>\n    </div>\n</body>\n```\n\n## 获取元素节点\n\n> getElementById 返回的结果是以对象的形式，其余为类数组（NodeList对象）\n\n```\nvar　divId = document.getElementById(\"div\");\nconsole.log(divId)\nvar divTag = document.getElementsByTagName(\"div\");\nconsole.log(divTag)\nvar divClass = document.getElementsByClassName(\"div1\");\nconsole.log(divClass)\nvar divName = document.getElementsByName(\"div\");\nconsole.log(divName)   \n```\n## javascript 的css选择器\n\ndocument.querySelector()\ndocument.querySelectorAll()\n```\nvar div =document.querySelector(\"#div>div\");\nconsole.log(div) //输出为div1的对象形式\nvar div = document.querySelectorAll(\"div\");\nconsole.log(div) //输出为所有div\n```\n\n## 文档结构和遍历\n\n一.作为节点数的文档\n 1. parentNode    获取该节点的父节点\n 2. childNodes    获取该节点的子节点数组\n 3. firstChild    获取该节点的第一个子节点\n 4. lastChild    获取该节点的最后一个子节点\n 5. nextSibling    获取该节点的下一个兄弟元素\n 6. previoursSibling    获取该节点的上一个兄弟元素\n 7. nodeType    节点的类型，9代表Document节点，1代表Element节点，3代表Text节点，8代表Comment节点，11代表DocumentFragment节点\n 8. nodeVlue    Text节点或Comment节点的文本内容\n 9. nodeName    元素的标签名(如P,SPAN,#text(文本节点),DIV)，以大写形式表示\n\n```\nvar span = document.getElementsByTagName(\"span\");\nconsole.log(span[0].parentNode) // //输出为div1的对象形式\nvar div = document.getElementById(\"div\");\nconsole.log(div.childNodes) //输出为\n/*NodeList[5]\n{0:text,\n1:div.div1,\n2:text,\n3:div.div2,\n4:text,\nlength:5}*/\nconsole.log(div.firstChild)//文本节点\nconsole.log(div.childNodes[1].firstChild.nodeValue) //文本节点的ｖａｌｕｅ\nconsole.log(span[0].parentNode.nextSibling.nextSibling) // 输出为div２对象　因为第一个nextSibling是一个text节点\nvar text=\"\";\nfor(var i=0;i<div.childNodes.length;i++){\n    if(div.childNodes[i].nodeType==1){　//元素节点\n        text+=div.childNodes[i].nodeName.toLowerCase()+\":\"+div.childNodes[i].innerText+\"----\"+\"\\n\";\n    }else if(div.childNodes[i].nodeType==3){ //text节点\n        text+=div.childNodes[i].nodeName.toLowerCase()+\":\"+div.childNodes[i].nodeValue+\"----\"+\"\\n\";\n    }\n}\nconsole.log(text)\n```\n\n二.作为元素树的文档 // 忽略掉文本节点\n1、firstElementChild         第一个子元素节点\n2、lastElementChild          最后一个子元素节点\n3、nextElementSibling        下一个兄弟元素节点\n4、previousElementSibling    前一个兄弟元素节点\n5、childElementCount         子元素节点个数量\n\n```\n<div id=\"div1\">\n    <p id=\"p1\" class=\"class1\"> 我是第一个P</p>\n    <p id=\"p2\" class=\"class2\">我是第二个P</p>\n</div>\nvar node = document.getElementById(\"div1\");\nvar node1 = node.firstElementChild;\nvar node2 = node.lastElementChild;\n\nalert(node.childElementCount);  //输出2，div1一共有两个非文档子元素节点\nalert(node1.innerHTML);         //输出 我是第一个P\nalert(node2.innerHTML);         //输出 我是第二个P\nalert(node2.previousElementSibling.innerHTML);  //输出 我是第一个P(第二个元素节点的上一个非文本元素节点是P1)\nalert(node1.nextElementSibling.innerHTML);      //输出 我是第二个P(第一个元素节点的下一个兄弟非文本节点是P2)\n```\n\n## javascript操作HTML属性\n\n> 1、属性的读取，此处要注意的是，某些HTML属性名称在javascript之中是保留字，因此会有些许不同，如class,lable中的for在javascript中变为htmlFor,className。\n\n```\n<div id=\"div1\">\n    <p id=\"p1\" class=\"class1\"> 我是第一个P</p>\n    <img src=\"123.jpg\" alt=\"我是一张图片\" id=\"img1\" />\n    <input type=\"text\" value=\"我是一个文本框\" id=\"input1\" />\n</div>\n\nwindow.onload = function () {\n    var nodeText = document.getElementById(\"input1\");\n    alert(nodeText.value);        //输出 我是一个文本框\n    var nodeImg = document.getElementById(\"img1\");\n    alert(nodeImg.alt);            //输出 我是一张图片\n    var nodeP = document.getElementById(\"p1\");\n    alert(nodeP.className);        //输出 class1    注意获取class是className，如果写成nodeP.class则输出undefined\n}\n```\n\n> 属性的设置，此处同样要注意的是保留字\n\n```\n<div id=\"div1\">\n    <img src=\"1big.jpg\" alt=\"我是一张图片\" id=\"img1\" onclick=\"fun1()\" />\n</div>\n\nfunction fun1() {\n    document.getElementById(\"img1\").src = \"1small.jpg\";        //改变图片的路径属性。实现的效果为，当点击图片时，大图变小图。\n}\n```\n\n> 非标准HTML属性  //注意这两个方法是不必理会javascript保留字的，HTML属性是什么就怎么写。\n\ngetAttribute();   \nsetAttribute();\n\n```\n<div id=\"div1\">\n    <img src=\"1big.jpg\" alt=\"我是一张图片\" class=\"imgClass\" id=\"img1\" onclick=\"fun1()\" />\n</div>\n\nfunction fun1() {\n    document.getElementById(\"img1\").setAttribute(\"src\", \"1small.jpg\");\n    alert(document.getElementById(\"img1\").getAttribute(\"class\"));\n}\n```\n\n> Attr节点的属性\n\nattributes属性  非Element对象返回null，Element一般返回Attr对象。Attr对象是一个特殊的Node,通过name与value获取属性名称与值。\n\n```\nvar div = document.getElementsByTagName(\"div\");\nconsole.log(div[1].attributes) //返回div1的所有属性 {0:class,1:name}\nconsole.log(div[1].attributes[0].name) //返回div1的第一个属性的nodeName　结果为class\nconsole.log(div[1].attributes[0].value) //返回div1的第一个属性的nodeValue　结果为div1\n```\n\n> 元素的内容\n\n1、innerText、textContent    innerText与textContent的区别，当文本为空时，innerText是\"\"，而textContent是undefined\n2、innerHTML\n\n```\n<div id=\"div1\">\n    <p id=\"p1\">我是第一个P</p>\n    <p id=\"p2\">我是第<b>二</b>个P</p>\n</div>\n\nwindow.onload = function () {\n    alert(document.getElementById(\"p1\").innerText);  //注意火狐浏览器不支持innerText\n    alert(document.getElementById(\"p1\").textContent);    //基本都支持textContent\n    document.getElementById(\"p1\").textContent = \"我是p1，javascript改变了我\";    //设置文档Text\n    alert(document.getElementById(\"p2\").textContent);\n    alert(document.getElementById(\"p2\").innerHTML); //innerHTML与innerText的区别，就是对HTML代码的输出方式Text不会输出HTML代码\n}\n```\n\n> 创建，插入，删除节点\n\n1、document.createTextNode()    创建一个文本节点\n \n ```\n<div id=\"div1\">\n     <p id=\"p1\">我是第一个P</p>\n     <p id=\"p2\">我是第二个P</p>\n</div>\n\nwindow.onload = function () {\n     var textNode = document.createTextNode(\"<p>我是一个javascript新建的节点</p>\");\n     document.getElementById(\"div1\").appendChild(textNode);\n}\n结果为：\n<div id=\"div1\">\n    <p id=\"p1\">我是第一个P</p>\n    <p id=\"p2\">我是第二个P</p>\n    我是一个javascript新建的节点\n</div>\n ```\n \n2、document.createElement()    创建一个元素节点\n \n ```\n <div id=\"div1\">\n     <p id=\"p1\">我是第一个P</p>\n     <p id=\"p2\">我是第二个P</p>\n </div>\n window.onload = function () {\n     var pNode = document.createElement(\"p\");\n     pNode.textContent = \"新建一个P节点\";\n     document.getElementById(\"div1\").appendChild(pNode);\n }\n 结果为：\n <div id=\"div1\">\n     <p id=\"p1\">我是第一个P</p>\n     <p id=\"p2\">我是第二个P</p>\n     <p>新建一个P节点</p>\n </div>\n ```\n \n3、插入节点\nappendChild()    //将一个节点插入到调用节点的最后面\ninsertBefore()   //接受两个参数，第一个为待插入的节点，第二个指明在哪个节点前面，如果不传入第二个参数，报错。\n\n```\n<div id=\"div1\">\n    <p id=\"p1\">我是第一个P</p>\n</div>\n\nwindow.onload = function () {\n    var pNode1 = document.createElement(\"p\");\n    pNode1.textContent = \"insertBefore插入的节点\";\n    var pNode2 = document.createElement(\"p\");\n    pNode2.textContent = \"appendChild插入的节点\";\n    document.getElementById(\"div1\").appendChild(pNode2);\n    document.getElementById(\"div1\").insertBefore(pNode1,document.getElementById(\"p1\"));\n}\n结果为：\n<div id=\"div1\">\n    <p>insertBefore插入的节点</p>\n    <p id=\"p1\">我是第一个P</p>\n    <p>appendChild插入的节点</p>\n</div>\n```\n\n4、删除和替换节点。\n1)removeChild();    由父元素调用，删除一个子节点。注意是直接父元素调用，删除直接子元素才有效，删除孙子元素就没有效果了。\n\n```\n<div id=\"div1\">\n    <p id=\"p1\">我是第一个P</p>\n    <p id=\"p2\">我是第二个P</p>\n</div>\n\nwindow.onload = function () {\n    var div1 = document.getElementById(\"div1\");\n    div1.removeChild(document.getElementById(\"p2\"));\n}\n执行之后代码变为：\n<div id=\"div1\">\n    <p id=\"p1\">我是第一个P</p>    //注意到第二个P元素已经被移除了\n</div>\n```\n\n2)replaceChild()    //删除一个子节点，并用一个新节点代替它，第一个参数为新建的节点，第二个节点为被替换的节点\n\n```\n<div id=\"div1\">\n    <p id=\"p1\">我是第一个P</p>\n    <p id=\"p2\">我是第二个P</p>\n</div>\n\nwindow.onload = function () {\n    var div1 = document.getElementById(\"div1\");\n    var span1 = document.createElement(\"span\");\n    span1.textContent = \"我是一个新建的span\";\n    div1.replaceChild(span1,document.getElementById(\"p2\"));\n}\n执行完成后HTML代码变为：\n<div id=\"div1\">\n    <p id=\"p1\">我是第一个P</p>\n    <span>我是一个新建的span</span>    //留意到p2节点已经被替换为span1节点了\n</div>\n```\n\n> javascript操作元素CSS　通过元素的style属性可以随意读取和设置元素的CSS样式\n\n```\n<div id=\"div1\" style=\"width:100px; height:100px; background-color:red\"></div>\nwindow.onload = function () {\n    alert(document.getElementById(\"div1\").style.backgroundColor);\n    document.getElementById(\"div1\").style.backgroundColor = \"yellow\";\n}\n```\n\n> IE有许多好用的方法，后来都被其他浏览器抄袭了，比如这个contains方法。如果A元素包含B元素，则返回true(可以A包含A)，否则false。唯一不支持这个方法的是IE的死对头firefox。\n\n```\n<div id=\"parent\">\n  <p>\n    <strong id=\"child\" >本例子会在火狐中会报错。</strong>\n  </p>\n</div>\nwindow.onload = function(){\n    var A = document.getElementById('parent'),\n    B = document.getElementById('child');\n    alert(A.contains(A));　//true\n    alert(A.contains(B));　//true\n    alert(B.contains(A));  //false\n  }\n```\n\n> cloneNode(true/false) 克隆节点　　true为深度克隆　false为只克隆节点本身\n\n```\nvar p = document.createElement(\"p\");\np.id =\"ppp\";\np.innerText = \"我是新创建的p元素\";\nvar cloneNode = p.cloneNode(true); //<p id=\"ppp\">我是新创建的p元素</p>\nvar cloneNode = p.cloneNode(false);//默认为false <p id=\"ppp\"></p>\n```\n\n> addEventListener() 第一个参数是事件名，第二个是回调函数，第三个参数为true表示捕获，false表示冒泡。\n\naddEventListener()将指定的事件监听器注册到目标对象上，当目标对象触发制定的事件时，指定的回调函数就会触发。目标对象可以是 文档上的元素、 document、 window 或者XMLHttpRequest(比如onreadystatechange事件)。IE8及以下不支持此方法且只有事件冒泡没有事件捕获。IE9开始支持此方法，也就有了事件捕获。\n\n```\nvar div1 = document.getElementById(\"div1\");\ndiv1.addEventListener(\"click\", listener, false);\nfunction listener() {\n    console.log('test');\n}\nvar cloneHtml = div1.cloneNode(true);\ndocument.body.appendChild(cloneHtml);\n/*\n注意：\n    当对某一个元素1既绑定了捕获事件，又绑定了冒泡事件时：\n    当这个元素1并不是触发事件的那个元素2时，则触发顺序会按照先 捕获 后 冒泡 的顺序触发；\n    当这个元素1就是最底层的触发事件的元素时，则这个元素没有捕获和冒泡的区别，谁先绑定就先触发谁。\n*/\nvar div2 = document.getElementById(\"div2\");\ndiv2.addEventListener(\"click\", listener2, true);\nfunction listener2() {\n    console.log('test2');\n}\ndiv2.addEventListener(\"click\", listener1, false);\nfunction listener1() {\n    console.log('test1');\n}\n// 按绑定顺序执行，两个`addEventLister()`颠倒过来则执行顺序也变化\n// 如果再对`div1`绑定一个捕获、一个冒泡，则会先触发捕获 再 触发冒泡，与绑定顺序无关\n```\n\nremoveEventListener():与addEventListener()绑定事件对应的就是移除已绑定的事件\n注意：只能通过removeEventListener()解绑有名字的函数，对于绑定的匿名函数无法解除绑定。\n```\nvar div2 = document.getElementById(\"div2\");\ndiv2.addEventListener(\"click\", listener2, true);\nfunction listener2() {\n    console.log('test2');\n}\ndiv2.removeEventListener(\"click\", listener2, true);\n```\n\n attachEvent()、detachEvent() IE8及以下使用这两个方法绑定和解绑事件，当然，IE9+也支持这个事件。但这个方法绑定的事件默认为冒泡也只有冒泡。\n \n```\n// 这里需要在事件前加 on\ndiv2.attachEvent(\"onclick\", listener1);\nfunction listener1() {\n    console.log('test');\n    console.log(this);\n}\ndiv2.detachEvent(\"onclick\", listener1);\n//和addEventListener()一样，也不能解绑匿名函数。\n\n//标准事件和IE事件中的阻止默认事件和冒泡事件也有很大区别。\nvar div2 = document.getElementById(\"div2\");\nif (div2.addEventListener) {\n    div2.addEventListener(\"click\", function(e) {\n        e.preventDefault(); // 阻止默认事件\n        e.stopPropagation(); // 阻止冒泡\n        console.log(e.target.innerHTML);\n    }, false);\n} else {\n    div2.attachEvent(\"onclick\", function() {\n        var e = window.event;\n        e.returnValue = false; // 阻止默认事件\n        e.cancelBubble = true; // 阻止冒泡\n        console.log(e.srcElement.innerHTML);\n    });\n}\n```\n\n 自定义事件：createEvent()\n \n createEvent()用于创建一个新的 event ，而后这个 event 必须调用它的 init() 方法进行初始化。最后就可以在目标元素上使用dispatchEvent()调用新创建的event事件了。\n initEvent(type, bubbles, cancelable)\n type表示自定义的事件类型，bubbles表示是否冒泡，cancelable表示是否阻止默认事件。\n target.dispatchEvent(ev)\n target就是要触发自定义事件的DOM元素\n \n ```\n var div1 = document.getElementById(\"div1\");\n div1.addEventListener(\"message\", function(){\n     console.log('test');\n }, false);\n\n var div2 = document.getElementById(\"div2\");\n div2.addEventListener(\"message\", function(e){\n     console.log(this);\n     console.log(e);\n }, false);\n var ev = document.createEvent(\"Event\");\n ev.initEvent(\"message\", false, true); // 起泡参数变为true，div1的事件就会触发\n div2.dispatchEvent(ev);\n ```","source":"_posts/dom.md","raw":"---\ntitle: dom\ndate: 2016-11-23 15:00:33\ncategories: Javascript\ntags:\n     - Javascript\n---\n\n---------\n```\n<body>\n    <div id=\"div\">\n        <div class=\"div1\" name=\"div\">hello world<span>奥斯卡看卡</span></div>\n        <div class=\"div2\" name=\"div\">哈哈哈</div>\n    </div>\n</body>\n```\n\n## 获取元素节点\n\n> getElementById 返回的结果是以对象的形式，其余为类数组（NodeList对象）\n\n```\nvar　divId = document.getElementById(\"div\");\nconsole.log(divId)\nvar divTag = document.getElementsByTagName(\"div\");\nconsole.log(divTag)\nvar divClass = document.getElementsByClassName(\"div1\");\nconsole.log(divClass)\nvar divName = document.getElementsByName(\"div\");\nconsole.log(divName)   \n```\n## javascript 的css选择器\n\ndocument.querySelector()\ndocument.querySelectorAll()\n```\nvar div =document.querySelector(\"#div>div\");\nconsole.log(div) //输出为div1的对象形式\nvar div = document.querySelectorAll(\"div\");\nconsole.log(div) //输出为所有div\n```\n\n## 文档结构和遍历\n\n一.作为节点数的文档\n 1. parentNode    获取该节点的父节点\n 2. childNodes    获取该节点的子节点数组\n 3. firstChild    获取该节点的第一个子节点\n 4. lastChild    获取该节点的最后一个子节点\n 5. nextSibling    获取该节点的下一个兄弟元素\n 6. previoursSibling    获取该节点的上一个兄弟元素\n 7. nodeType    节点的类型，9代表Document节点，1代表Element节点，3代表Text节点，8代表Comment节点，11代表DocumentFragment节点\n 8. nodeVlue    Text节点或Comment节点的文本内容\n 9. nodeName    元素的标签名(如P,SPAN,#text(文本节点),DIV)，以大写形式表示\n\n```\nvar span = document.getElementsByTagName(\"span\");\nconsole.log(span[0].parentNode) // //输出为div1的对象形式\nvar div = document.getElementById(\"div\");\nconsole.log(div.childNodes) //输出为\n/*NodeList[5]\n{0:text,\n1:div.div1,\n2:text,\n3:div.div2,\n4:text,\nlength:5}*/\nconsole.log(div.firstChild)//文本节点\nconsole.log(div.childNodes[1].firstChild.nodeValue) //文本节点的ｖａｌｕｅ\nconsole.log(span[0].parentNode.nextSibling.nextSibling) // 输出为div２对象　因为第一个nextSibling是一个text节点\nvar text=\"\";\nfor(var i=0;i<div.childNodes.length;i++){\n    if(div.childNodes[i].nodeType==1){　//元素节点\n        text+=div.childNodes[i].nodeName.toLowerCase()+\":\"+div.childNodes[i].innerText+\"----\"+\"\\n\";\n    }else if(div.childNodes[i].nodeType==3){ //text节点\n        text+=div.childNodes[i].nodeName.toLowerCase()+\":\"+div.childNodes[i].nodeValue+\"----\"+\"\\n\";\n    }\n}\nconsole.log(text)\n```\n\n二.作为元素树的文档 // 忽略掉文本节点\n1、firstElementChild         第一个子元素节点\n2、lastElementChild          最后一个子元素节点\n3、nextElementSibling        下一个兄弟元素节点\n4、previousElementSibling    前一个兄弟元素节点\n5、childElementCount         子元素节点个数量\n\n```\n<div id=\"div1\">\n    <p id=\"p1\" class=\"class1\"> 我是第一个P</p>\n    <p id=\"p2\" class=\"class2\">我是第二个P</p>\n</div>\nvar node = document.getElementById(\"div1\");\nvar node1 = node.firstElementChild;\nvar node2 = node.lastElementChild;\n\nalert(node.childElementCount);  //输出2，div1一共有两个非文档子元素节点\nalert(node1.innerHTML);         //输出 我是第一个P\nalert(node2.innerHTML);         //输出 我是第二个P\nalert(node2.previousElementSibling.innerHTML);  //输出 我是第一个P(第二个元素节点的上一个非文本元素节点是P1)\nalert(node1.nextElementSibling.innerHTML);      //输出 我是第二个P(第一个元素节点的下一个兄弟非文本节点是P2)\n```\n\n## javascript操作HTML属性\n\n> 1、属性的读取，此处要注意的是，某些HTML属性名称在javascript之中是保留字，因此会有些许不同，如class,lable中的for在javascript中变为htmlFor,className。\n\n```\n<div id=\"div1\">\n    <p id=\"p1\" class=\"class1\"> 我是第一个P</p>\n    <img src=\"123.jpg\" alt=\"我是一张图片\" id=\"img1\" />\n    <input type=\"text\" value=\"我是一个文本框\" id=\"input1\" />\n</div>\n\nwindow.onload = function () {\n    var nodeText = document.getElementById(\"input1\");\n    alert(nodeText.value);        //输出 我是一个文本框\n    var nodeImg = document.getElementById(\"img1\");\n    alert(nodeImg.alt);            //输出 我是一张图片\n    var nodeP = document.getElementById(\"p1\");\n    alert(nodeP.className);        //输出 class1    注意获取class是className，如果写成nodeP.class则输出undefined\n}\n```\n\n> 属性的设置，此处同样要注意的是保留字\n\n```\n<div id=\"div1\">\n    <img src=\"1big.jpg\" alt=\"我是一张图片\" id=\"img1\" onclick=\"fun1()\" />\n</div>\n\nfunction fun1() {\n    document.getElementById(\"img1\").src = \"1small.jpg\";        //改变图片的路径属性。实现的效果为，当点击图片时，大图变小图。\n}\n```\n\n> 非标准HTML属性  //注意这两个方法是不必理会javascript保留字的，HTML属性是什么就怎么写。\n\ngetAttribute();   \nsetAttribute();\n\n```\n<div id=\"div1\">\n    <img src=\"1big.jpg\" alt=\"我是一张图片\" class=\"imgClass\" id=\"img1\" onclick=\"fun1()\" />\n</div>\n\nfunction fun1() {\n    document.getElementById(\"img1\").setAttribute(\"src\", \"1small.jpg\");\n    alert(document.getElementById(\"img1\").getAttribute(\"class\"));\n}\n```\n\n> Attr节点的属性\n\nattributes属性  非Element对象返回null，Element一般返回Attr对象。Attr对象是一个特殊的Node,通过name与value获取属性名称与值。\n\n```\nvar div = document.getElementsByTagName(\"div\");\nconsole.log(div[1].attributes) //返回div1的所有属性 {0:class,1:name}\nconsole.log(div[1].attributes[0].name) //返回div1的第一个属性的nodeName　结果为class\nconsole.log(div[1].attributes[0].value) //返回div1的第一个属性的nodeValue　结果为div1\n```\n\n> 元素的内容\n\n1、innerText、textContent    innerText与textContent的区别，当文本为空时，innerText是\"\"，而textContent是undefined\n2、innerHTML\n\n```\n<div id=\"div1\">\n    <p id=\"p1\">我是第一个P</p>\n    <p id=\"p2\">我是第<b>二</b>个P</p>\n</div>\n\nwindow.onload = function () {\n    alert(document.getElementById(\"p1\").innerText);  //注意火狐浏览器不支持innerText\n    alert(document.getElementById(\"p1\").textContent);    //基本都支持textContent\n    document.getElementById(\"p1\").textContent = \"我是p1，javascript改变了我\";    //设置文档Text\n    alert(document.getElementById(\"p2\").textContent);\n    alert(document.getElementById(\"p2\").innerHTML); //innerHTML与innerText的区别，就是对HTML代码的输出方式Text不会输出HTML代码\n}\n```\n\n> 创建，插入，删除节点\n\n1、document.createTextNode()    创建一个文本节点\n \n ```\n<div id=\"div1\">\n     <p id=\"p1\">我是第一个P</p>\n     <p id=\"p2\">我是第二个P</p>\n</div>\n\nwindow.onload = function () {\n     var textNode = document.createTextNode(\"<p>我是一个javascript新建的节点</p>\");\n     document.getElementById(\"div1\").appendChild(textNode);\n}\n结果为：\n<div id=\"div1\">\n    <p id=\"p1\">我是第一个P</p>\n    <p id=\"p2\">我是第二个P</p>\n    我是一个javascript新建的节点\n</div>\n ```\n \n2、document.createElement()    创建一个元素节点\n \n ```\n <div id=\"div1\">\n     <p id=\"p1\">我是第一个P</p>\n     <p id=\"p2\">我是第二个P</p>\n </div>\n window.onload = function () {\n     var pNode = document.createElement(\"p\");\n     pNode.textContent = \"新建一个P节点\";\n     document.getElementById(\"div1\").appendChild(pNode);\n }\n 结果为：\n <div id=\"div1\">\n     <p id=\"p1\">我是第一个P</p>\n     <p id=\"p2\">我是第二个P</p>\n     <p>新建一个P节点</p>\n </div>\n ```\n \n3、插入节点\nappendChild()    //将一个节点插入到调用节点的最后面\ninsertBefore()   //接受两个参数，第一个为待插入的节点，第二个指明在哪个节点前面，如果不传入第二个参数，报错。\n\n```\n<div id=\"div1\">\n    <p id=\"p1\">我是第一个P</p>\n</div>\n\nwindow.onload = function () {\n    var pNode1 = document.createElement(\"p\");\n    pNode1.textContent = \"insertBefore插入的节点\";\n    var pNode2 = document.createElement(\"p\");\n    pNode2.textContent = \"appendChild插入的节点\";\n    document.getElementById(\"div1\").appendChild(pNode2);\n    document.getElementById(\"div1\").insertBefore(pNode1,document.getElementById(\"p1\"));\n}\n结果为：\n<div id=\"div1\">\n    <p>insertBefore插入的节点</p>\n    <p id=\"p1\">我是第一个P</p>\n    <p>appendChild插入的节点</p>\n</div>\n```\n\n4、删除和替换节点。\n1)removeChild();    由父元素调用，删除一个子节点。注意是直接父元素调用，删除直接子元素才有效，删除孙子元素就没有效果了。\n\n```\n<div id=\"div1\">\n    <p id=\"p1\">我是第一个P</p>\n    <p id=\"p2\">我是第二个P</p>\n</div>\n\nwindow.onload = function () {\n    var div1 = document.getElementById(\"div1\");\n    div1.removeChild(document.getElementById(\"p2\"));\n}\n执行之后代码变为：\n<div id=\"div1\">\n    <p id=\"p1\">我是第一个P</p>    //注意到第二个P元素已经被移除了\n</div>\n```\n\n2)replaceChild()    //删除一个子节点，并用一个新节点代替它，第一个参数为新建的节点，第二个节点为被替换的节点\n\n```\n<div id=\"div1\">\n    <p id=\"p1\">我是第一个P</p>\n    <p id=\"p2\">我是第二个P</p>\n</div>\n\nwindow.onload = function () {\n    var div1 = document.getElementById(\"div1\");\n    var span1 = document.createElement(\"span\");\n    span1.textContent = \"我是一个新建的span\";\n    div1.replaceChild(span1,document.getElementById(\"p2\"));\n}\n执行完成后HTML代码变为：\n<div id=\"div1\">\n    <p id=\"p1\">我是第一个P</p>\n    <span>我是一个新建的span</span>    //留意到p2节点已经被替换为span1节点了\n</div>\n```\n\n> javascript操作元素CSS　通过元素的style属性可以随意读取和设置元素的CSS样式\n\n```\n<div id=\"div1\" style=\"width:100px; height:100px; background-color:red\"></div>\nwindow.onload = function () {\n    alert(document.getElementById(\"div1\").style.backgroundColor);\n    document.getElementById(\"div1\").style.backgroundColor = \"yellow\";\n}\n```\n\n> IE有许多好用的方法，后来都被其他浏览器抄袭了，比如这个contains方法。如果A元素包含B元素，则返回true(可以A包含A)，否则false。唯一不支持这个方法的是IE的死对头firefox。\n\n```\n<div id=\"parent\">\n  <p>\n    <strong id=\"child\" >本例子会在火狐中会报错。</strong>\n  </p>\n</div>\nwindow.onload = function(){\n    var A = document.getElementById('parent'),\n    B = document.getElementById('child');\n    alert(A.contains(A));　//true\n    alert(A.contains(B));　//true\n    alert(B.contains(A));  //false\n  }\n```\n\n> cloneNode(true/false) 克隆节点　　true为深度克隆　false为只克隆节点本身\n\n```\nvar p = document.createElement(\"p\");\np.id =\"ppp\";\np.innerText = \"我是新创建的p元素\";\nvar cloneNode = p.cloneNode(true); //<p id=\"ppp\">我是新创建的p元素</p>\nvar cloneNode = p.cloneNode(false);//默认为false <p id=\"ppp\"></p>\n```\n\n> addEventListener() 第一个参数是事件名，第二个是回调函数，第三个参数为true表示捕获，false表示冒泡。\n\naddEventListener()将指定的事件监听器注册到目标对象上，当目标对象触发制定的事件时，指定的回调函数就会触发。目标对象可以是 文档上的元素、 document、 window 或者XMLHttpRequest(比如onreadystatechange事件)。IE8及以下不支持此方法且只有事件冒泡没有事件捕获。IE9开始支持此方法，也就有了事件捕获。\n\n```\nvar div1 = document.getElementById(\"div1\");\ndiv1.addEventListener(\"click\", listener, false);\nfunction listener() {\n    console.log('test');\n}\nvar cloneHtml = div1.cloneNode(true);\ndocument.body.appendChild(cloneHtml);\n/*\n注意：\n    当对某一个元素1既绑定了捕获事件，又绑定了冒泡事件时：\n    当这个元素1并不是触发事件的那个元素2时，则触发顺序会按照先 捕获 后 冒泡 的顺序触发；\n    当这个元素1就是最底层的触发事件的元素时，则这个元素没有捕获和冒泡的区别，谁先绑定就先触发谁。\n*/\nvar div2 = document.getElementById(\"div2\");\ndiv2.addEventListener(\"click\", listener2, true);\nfunction listener2() {\n    console.log('test2');\n}\ndiv2.addEventListener(\"click\", listener1, false);\nfunction listener1() {\n    console.log('test1');\n}\n// 按绑定顺序执行，两个`addEventLister()`颠倒过来则执行顺序也变化\n// 如果再对`div1`绑定一个捕获、一个冒泡，则会先触发捕获 再 触发冒泡，与绑定顺序无关\n```\n\nremoveEventListener():与addEventListener()绑定事件对应的就是移除已绑定的事件\n注意：只能通过removeEventListener()解绑有名字的函数，对于绑定的匿名函数无法解除绑定。\n```\nvar div2 = document.getElementById(\"div2\");\ndiv2.addEventListener(\"click\", listener2, true);\nfunction listener2() {\n    console.log('test2');\n}\ndiv2.removeEventListener(\"click\", listener2, true);\n```\n\n attachEvent()、detachEvent() IE8及以下使用这两个方法绑定和解绑事件，当然，IE9+也支持这个事件。但这个方法绑定的事件默认为冒泡也只有冒泡。\n \n```\n// 这里需要在事件前加 on\ndiv2.attachEvent(\"onclick\", listener1);\nfunction listener1() {\n    console.log('test');\n    console.log(this);\n}\ndiv2.detachEvent(\"onclick\", listener1);\n//和addEventListener()一样，也不能解绑匿名函数。\n\n//标准事件和IE事件中的阻止默认事件和冒泡事件也有很大区别。\nvar div2 = document.getElementById(\"div2\");\nif (div2.addEventListener) {\n    div2.addEventListener(\"click\", function(e) {\n        e.preventDefault(); // 阻止默认事件\n        e.stopPropagation(); // 阻止冒泡\n        console.log(e.target.innerHTML);\n    }, false);\n} else {\n    div2.attachEvent(\"onclick\", function() {\n        var e = window.event;\n        e.returnValue = false; // 阻止默认事件\n        e.cancelBubble = true; // 阻止冒泡\n        console.log(e.srcElement.innerHTML);\n    });\n}\n```\n\n 自定义事件：createEvent()\n \n createEvent()用于创建一个新的 event ，而后这个 event 必须调用它的 init() 方法进行初始化。最后就可以在目标元素上使用dispatchEvent()调用新创建的event事件了。\n initEvent(type, bubbles, cancelable)\n type表示自定义的事件类型，bubbles表示是否冒泡，cancelable表示是否阻止默认事件。\n target.dispatchEvent(ev)\n target就是要触发自定义事件的DOM元素\n \n ```\n var div1 = document.getElementById(\"div1\");\n div1.addEventListener(\"message\", function(){\n     console.log('test');\n }, false);\n\n var div2 = document.getElementById(\"div2\");\n div2.addEventListener(\"message\", function(e){\n     console.log(this);\n     console.log(e);\n }, false);\n var ev = document.createEvent(\"Event\");\n ev.initEvent(\"message\", false, true); // 起泡参数变为true，div1的事件就会触发\n div2.dispatchEvent(ev);\n ```","slug":"dom","published":1,"updated":"2017-02-28T14:39:40.033Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb1u1p6200080sq9rm6vulei","content":"<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body&gt;</div><div class=\"line\">    &lt;div id=&quot;div&quot;&gt;</div><div class=\"line\">        &lt;div class=&quot;div1&quot; name=&quot;div&quot;&gt;hello world&lt;span&gt;奥斯卡看卡&lt;/span&gt;&lt;/div&gt;</div><div class=\"line\">        &lt;div class=&quot;div2&quot; name=&quot;div&quot;&gt;哈哈哈&lt;/div&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/body&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"获取元素节点\"><a href=\"#获取元素节点\" class=\"headerlink\" title=\"获取元素节点\"></a>获取元素节点</h2><blockquote>\n<p>getElementById 返回的结果是以对象的形式，其余为类数组（NodeList对象）</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var　divId = document.getElementById(&quot;div&quot;);</div><div class=\"line\">console.log(divId)</div><div class=\"line\">var divTag = document.getElementsByTagName(&quot;div&quot;);</div><div class=\"line\">console.log(divTag)</div><div class=\"line\">var divClass = document.getElementsByClassName(&quot;div1&quot;);</div><div class=\"line\">console.log(divClass)</div><div class=\"line\">var divName = document.getElementsByName(&quot;div&quot;);</div><div class=\"line\">console.log(divName)</div></pre></td></tr></table></figure>\n<h2 id=\"javascript-的css选择器\"><a href=\"#javascript-的css选择器\" class=\"headerlink\" title=\"javascript 的css选择器\"></a>javascript 的css选择器</h2><p>document.querySelector()<br>document.querySelectorAll()<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var div =document.querySelector(&quot;#div&gt;div&quot;);</div><div class=\"line\">console.log(div) //输出为div1的对象形式</div><div class=\"line\">var div = document.querySelectorAll(&quot;div&quot;);</div><div class=\"line\">console.log(div) //输出为所有div</div></pre></td></tr></table></figure></p>\n<h2 id=\"文档结构和遍历\"><a href=\"#文档结构和遍历\" class=\"headerlink\" title=\"文档结构和遍历\"></a>文档结构和遍历</h2><p>一.作为节点数的文档</p>\n<ol>\n<li>parentNode    获取该节点的父节点</li>\n<li>childNodes    获取该节点的子节点数组</li>\n<li>firstChild    获取该节点的第一个子节点</li>\n<li>lastChild    获取该节点的最后一个子节点</li>\n<li>nextSibling    获取该节点的下一个兄弟元素</li>\n<li>previoursSibling    获取该节点的上一个兄弟元素</li>\n<li>nodeType    节点的类型，9代表Document节点，1代表Element节点，3代表Text节点，8代表Comment节点，11代表DocumentFragment节点</li>\n<li>nodeVlue    Text节点或Comment节点的文本内容</li>\n<li>nodeName    元素的标签名(如P,SPAN,#text(文本节点),DIV)，以大写形式表示</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">var span = document.getElementsByTagName(&quot;span&quot;);</div><div class=\"line\">console.log(span[0].parentNode) // //输出为div1的对象形式</div><div class=\"line\">var div = document.getElementById(&quot;div&quot;);</div><div class=\"line\">console.log(div.childNodes) //输出为</div><div class=\"line\">/*NodeList[5]</div><div class=\"line\">&#123;0:text,</div><div class=\"line\">1:div.div1,</div><div class=\"line\">2:text,</div><div class=\"line\">3:div.div2,</div><div class=\"line\">4:text,</div><div class=\"line\">length:5&#125;*/</div><div class=\"line\">console.log(div.firstChild)//文本节点</div><div class=\"line\">console.log(div.childNodes[1].firstChild.nodeValue) //文本节点的ｖａｌｕｅ</div><div class=\"line\">console.log(span[0].parentNode.nextSibling.nextSibling) // 输出为div２对象　因为第一个nextSibling是一个text节点</div><div class=\"line\">var text=&quot;&quot;;</div><div class=\"line\">for(var i=0;i&lt;div.childNodes.length;i++)&#123;</div><div class=\"line\">    if(div.childNodes[i].nodeType==1)&#123;　//元素节点</div><div class=\"line\">        text+=div.childNodes[i].nodeName.toLowerCase()+&quot;:&quot;+div.childNodes[i].innerText+&quot;----&quot;+&quot;\\n&quot;;</div><div class=\"line\">    &#125;else if(div.childNodes[i].nodeType==3)&#123; //text节点</div><div class=\"line\">        text+=div.childNodes[i].nodeName.toLowerCase()+&quot;:&quot;+div.childNodes[i].nodeValue+&quot;----&quot;+&quot;\\n&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">console.log(text)</div></pre></td></tr></table></figure>\n<p>二.作为元素树的文档 // 忽略掉文本节点<br>1、firstElementChild         第一个子元素节点<br>2、lastElementChild          最后一个子元素节点<br>3、nextElementSibling        下一个兄弟元素节点<br>4、previousElementSibling    前一个兄弟元素节点<br>5、childElementCount         子元素节点个数量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;div1&quot;&gt;</div><div class=\"line\">    &lt;p id=&quot;p1&quot; class=&quot;class1&quot;&gt; 我是第一个P&lt;/p&gt;</div><div class=\"line\">    &lt;p id=&quot;p2&quot; class=&quot;class2&quot;&gt;我是第二个P&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">var node = document.getElementById(&quot;div1&quot;);</div><div class=\"line\">var node1 = node.firstElementChild;</div><div class=\"line\">var node2 = node.lastElementChild;</div><div class=\"line\"></div><div class=\"line\">alert(node.childElementCount);  //输出2，div1一共有两个非文档子元素节点</div><div class=\"line\">alert(node1.innerHTML);         //输出 我是第一个P</div><div class=\"line\">alert(node2.innerHTML);         //输出 我是第二个P</div><div class=\"line\">alert(node2.previousElementSibling.innerHTML);  //输出 我是第一个P(第二个元素节点的上一个非文本元素节点是P1)</div><div class=\"line\">alert(node1.nextElementSibling.innerHTML);      //输出 我是第二个P(第一个元素节点的下一个兄弟非文本节点是P2)</div></pre></td></tr></table></figure>\n<h2 id=\"javascript操作HTML属性\"><a href=\"#javascript操作HTML属性\" class=\"headerlink\" title=\"javascript操作HTML属性\"></a>javascript操作HTML属性</h2><blockquote>\n<p>1、属性的读取，此处要注意的是，某些HTML属性名称在javascript之中是保留字，因此会有些许不同，如class,lable中的for在javascript中变为htmlFor,className。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;div1&quot;&gt;</div><div class=\"line\">    &lt;p id=&quot;p1&quot; class=&quot;class1&quot;&gt; 我是第一个P&lt;/p&gt;</div><div class=\"line\">    &lt;img src=&quot;123.jpg&quot; alt=&quot;我是一张图片&quot; id=&quot;img1&quot; /&gt;</div><div class=\"line\">    &lt;input type=&quot;text&quot; value=&quot;我是一个文本框&quot; id=&quot;input1&quot; /&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">window.onload = function () &#123;</div><div class=\"line\">    var nodeText = document.getElementById(&quot;input1&quot;);</div><div class=\"line\">    alert(nodeText.value);        //输出 我是一个文本框</div><div class=\"line\">    var nodeImg = document.getElementById(&quot;img1&quot;);</div><div class=\"line\">    alert(nodeImg.alt);            //输出 我是一张图片</div><div class=\"line\">    var nodeP = document.getElementById(&quot;p1&quot;);</div><div class=\"line\">    alert(nodeP.className);        //输出 class1    注意获取class是className，如果写成nodeP.class则输出undefined</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>属性的设置，此处同样要注意的是保留字</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;div1&quot;&gt;</div><div class=\"line\">    &lt;img src=&quot;1big.jpg&quot; alt=&quot;我是一张图片&quot; id=&quot;img1&quot; onclick=&quot;fun1()&quot; /&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">function fun1() &#123;</div><div class=\"line\">    document.getElementById(&quot;img1&quot;).src = &quot;1small.jpg&quot;;        //改变图片的路径属性。实现的效果为，当点击图片时，大图变小图。</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>非标准HTML属性  //注意这两个方法是不必理会javascript保留字的，HTML属性是什么就怎么写。</p>\n</blockquote>\n<p>getAttribute();<br>setAttribute();</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;div1&quot;&gt;</div><div class=\"line\">    &lt;img src=&quot;1big.jpg&quot; alt=&quot;我是一张图片&quot; class=&quot;imgClass&quot; id=&quot;img1&quot; onclick=&quot;fun1()&quot; /&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">function fun1() &#123;</div><div class=\"line\">    document.getElementById(&quot;img1&quot;).setAttribute(&quot;src&quot;, &quot;1small.jpg&quot;);</div><div class=\"line\">    alert(document.getElementById(&quot;img1&quot;).getAttribute(&quot;class&quot;));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Attr节点的属性</p>\n</blockquote>\n<p>attributes属性  非Element对象返回null，Element一般返回Attr对象。Attr对象是一个特殊的Node,通过name与value获取属性名称与值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var div = document.getElementsByTagName(&quot;div&quot;);</div><div class=\"line\">console.log(div[1].attributes) //返回div1的所有属性 &#123;0:class,1:name&#125;</div><div class=\"line\">console.log(div[1].attributes[0].name) //返回div1的第一个属性的nodeName　结果为class</div><div class=\"line\">console.log(div[1].attributes[0].value) //返回div1的第一个属性的nodeValue　结果为div1</div></pre></td></tr></table></figure>\n<blockquote>\n<p>元素的内容</p>\n</blockquote>\n<p>1、innerText、textContent    innerText与textContent的区别，当文本为空时，innerText是””，而textContent是undefined<br>2、innerHTML</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;div1&quot;&gt;</div><div class=\"line\">    &lt;p id=&quot;p1&quot;&gt;我是第一个P&lt;/p&gt;</div><div class=\"line\">    &lt;p id=&quot;p2&quot;&gt;我是第&lt;b&gt;二&lt;/b&gt;个P&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">window.onload = function () &#123;</div><div class=\"line\">    alert(document.getElementById(&quot;p1&quot;).innerText);  //注意火狐浏览器不支持innerText</div><div class=\"line\">    alert(document.getElementById(&quot;p1&quot;).textContent);    //基本都支持textContent</div><div class=\"line\">    document.getElementById(&quot;p1&quot;).textContent = &quot;我是p1，javascript改变了我&quot;;    //设置文档Text</div><div class=\"line\">    alert(document.getElementById(&quot;p2&quot;).textContent);</div><div class=\"line\">    alert(document.getElementById(&quot;p2&quot;).innerHTML); //innerHTML与innerText的区别，就是对HTML代码的输出方式Text不会输出HTML代码</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>创建，插入，删除节点</p>\n</blockquote>\n<p>1、document.createTextNode()    创建一个文本节点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;div1&quot;&gt;</div><div class=\"line\">     &lt;p id=&quot;p1&quot;&gt;我是第一个P&lt;/p&gt;</div><div class=\"line\">     &lt;p id=&quot;p2&quot;&gt;我是第二个P&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">window.onload = function () &#123;</div><div class=\"line\">     var textNode = document.createTextNode(&quot;&lt;p&gt;我是一个javascript新建的节点&lt;/p&gt;&quot;);</div><div class=\"line\">     document.getElementById(&quot;div1&quot;).appendChild(textNode);</div><div class=\"line\">&#125;</div><div class=\"line\">结果为：</div><div class=\"line\">&lt;div id=&quot;div1&quot;&gt;</div><div class=\"line\">    &lt;p id=&quot;p1&quot;&gt;我是第一个P&lt;/p&gt;</div><div class=\"line\">    &lt;p id=&quot;p2&quot;&gt;我是第二个P&lt;/p&gt;</div><div class=\"line\">    我是一个javascript新建的节点</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>2、document.createElement()    创建一个元素节点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;div1&quot;&gt;</div><div class=\"line\">    &lt;p id=&quot;p1&quot;&gt;我是第一个P&lt;/p&gt;</div><div class=\"line\">    &lt;p id=&quot;p2&quot;&gt;我是第二个P&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">window.onload = function () &#123;</div><div class=\"line\">    var pNode = document.createElement(&quot;p&quot;);</div><div class=\"line\">    pNode.textContent = &quot;新建一个P节点&quot;;</div><div class=\"line\">    document.getElementById(&quot;div1&quot;).appendChild(pNode);</div><div class=\"line\">&#125;</div><div class=\"line\">结果为：</div><div class=\"line\">&lt;div id=&quot;div1&quot;&gt;</div><div class=\"line\">    &lt;p id=&quot;p1&quot;&gt;我是第一个P&lt;/p&gt;</div><div class=\"line\">    &lt;p id=&quot;p2&quot;&gt;我是第二个P&lt;/p&gt;</div><div class=\"line\">    &lt;p&gt;新建一个P节点&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>3、插入节点<br>appendChild()    //将一个节点插入到调用节点的最后面<br>insertBefore()   //接受两个参数，第一个为待插入的节点，第二个指明在哪个节点前面，如果不传入第二个参数，报错。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;div1&quot;&gt;</div><div class=\"line\">    &lt;p id=&quot;p1&quot;&gt;我是第一个P&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">window.onload = function () &#123;</div><div class=\"line\">    var pNode1 = document.createElement(&quot;p&quot;);</div><div class=\"line\">    pNode1.textContent = &quot;insertBefore插入的节点&quot;;</div><div class=\"line\">    var pNode2 = document.createElement(&quot;p&quot;);</div><div class=\"line\">    pNode2.textContent = &quot;appendChild插入的节点&quot;;</div><div class=\"line\">    document.getElementById(&quot;div1&quot;).appendChild(pNode2);</div><div class=\"line\">    document.getElementById(&quot;div1&quot;).insertBefore(pNode1,document.getElementById(&quot;p1&quot;));</div><div class=\"line\">&#125;</div><div class=\"line\">结果为：</div><div class=\"line\">&lt;div id=&quot;div1&quot;&gt;</div><div class=\"line\">    &lt;p&gt;insertBefore插入的节点&lt;/p&gt;</div><div class=\"line\">    &lt;p id=&quot;p1&quot;&gt;我是第一个P&lt;/p&gt;</div><div class=\"line\">    &lt;p&gt;appendChild插入的节点&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>4、删除和替换节点。<br>1)removeChild();    由父元素调用，删除一个子节点。注意是直接父元素调用，删除直接子元素才有效，删除孙子元素就没有效果了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;div1&quot;&gt;</div><div class=\"line\">    &lt;p id=&quot;p1&quot;&gt;我是第一个P&lt;/p&gt;</div><div class=\"line\">    &lt;p id=&quot;p2&quot;&gt;我是第二个P&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">window.onload = function () &#123;</div><div class=\"line\">    var div1 = document.getElementById(&quot;div1&quot;);</div><div class=\"line\">    div1.removeChild(document.getElementById(&quot;p2&quot;));</div><div class=\"line\">&#125;</div><div class=\"line\">执行之后代码变为：</div><div class=\"line\">&lt;div id=&quot;div1&quot;&gt;</div><div class=\"line\">    &lt;p id=&quot;p1&quot;&gt;我是第一个P&lt;/p&gt;    //注意到第二个P元素已经被移除了</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>2)replaceChild()    //删除一个子节点，并用一个新节点代替它，第一个参数为新建的节点，第二个节点为被替换的节点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;div1&quot;&gt;</div><div class=\"line\">    &lt;p id=&quot;p1&quot;&gt;我是第一个P&lt;/p&gt;</div><div class=\"line\">    &lt;p id=&quot;p2&quot;&gt;我是第二个P&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">window.onload = function () &#123;</div><div class=\"line\">    var div1 = document.getElementById(&quot;div1&quot;);</div><div class=\"line\">    var span1 = document.createElement(&quot;span&quot;);</div><div class=\"line\">    span1.textContent = &quot;我是一个新建的span&quot;;</div><div class=\"line\">    div1.replaceChild(span1,document.getElementById(&quot;p2&quot;));</div><div class=\"line\">&#125;</div><div class=\"line\">执行完成后HTML代码变为：</div><div class=\"line\">&lt;div id=&quot;div1&quot;&gt;</div><div class=\"line\">    &lt;p id=&quot;p1&quot;&gt;我是第一个P&lt;/p&gt;</div><div class=\"line\">    &lt;span&gt;我是一个新建的span&lt;/span&gt;    //留意到p2节点已经被替换为span1节点了</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>javascript操作元素CSS　通过元素的style属性可以随意读取和设置元素的CSS样式</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;div1&quot; style=&quot;width:100px; height:100px; background-color:red&quot;&gt;&lt;/div&gt;</div><div class=\"line\">window.onload = function () &#123;</div><div class=\"line\">    alert(document.getElementById(&quot;div1&quot;).style.backgroundColor);</div><div class=\"line\">    document.getElementById(&quot;div1&quot;).style.backgroundColor = &quot;yellow&quot;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>IE有许多好用的方法，后来都被其他浏览器抄袭了，比如这个contains方法。如果A元素包含B元素，则返回true(可以A包含A)，否则false。唯一不支持这个方法的是IE的死对头firefox。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;parent&quot;&gt;</div><div class=\"line\">  &lt;p&gt;</div><div class=\"line\">    &lt;strong id=&quot;child&quot; &gt;本例子会在火狐中会报错。&lt;/strong&gt;</div><div class=\"line\">  &lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">window.onload = function()&#123;</div><div class=\"line\">    var A = document.getElementById(&apos;parent&apos;),</div><div class=\"line\">    B = document.getElementById(&apos;child&apos;);</div><div class=\"line\">    alert(A.contains(A));　//true</div><div class=\"line\">    alert(A.contains(B));　//true</div><div class=\"line\">    alert(B.contains(A));  //false</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>cloneNode(true/false) 克隆节点　　true为深度克隆　false为只克隆节点本身</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var p = document.createElement(&quot;p&quot;);</div><div class=\"line\">p.id =&quot;ppp&quot;;</div><div class=\"line\">p.innerText = &quot;我是新创建的p元素&quot;;</div><div class=\"line\">var cloneNode = p.cloneNode(true); //&lt;p id=&quot;ppp&quot;&gt;我是新创建的p元素&lt;/p&gt;</div><div class=\"line\">var cloneNode = p.cloneNode(false);//默认为false &lt;p id=&quot;ppp&quot;&gt;&lt;/p&gt;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>addEventListener() 第一个参数是事件名，第二个是回调函数，第三个参数为true表示捕获，false表示冒泡。</p>\n</blockquote>\n<p>addEventListener()将指定的事件监听器注册到目标对象上，当目标对象触发制定的事件时，指定的回调函数就会触发。目标对象可以是 文档上的元素、 document、 window 或者XMLHttpRequest(比如onreadystatechange事件)。IE8及以下不支持此方法且只有事件冒泡没有事件捕获。IE9开始支持此方法，也就有了事件捕获。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">var div1 = document.getElementById(&quot;div1&quot;);</div><div class=\"line\">div1.addEventListener(&quot;click&quot;, listener, false);</div><div class=\"line\">function listener() &#123;</div><div class=\"line\">    console.log(&apos;test&apos;);</div><div class=\"line\">&#125;</div><div class=\"line\">var cloneHtml = div1.cloneNode(true);</div><div class=\"line\">document.body.appendChild(cloneHtml);</div><div class=\"line\">/*</div><div class=\"line\">注意：</div><div class=\"line\">    当对某一个元素1既绑定了捕获事件，又绑定了冒泡事件时：</div><div class=\"line\">    当这个元素1并不是触发事件的那个元素2时，则触发顺序会按照先 捕获 后 冒泡 的顺序触发；</div><div class=\"line\">    当这个元素1就是最底层的触发事件的元素时，则这个元素没有捕获和冒泡的区别，谁先绑定就先触发谁。</div><div class=\"line\">*/</div><div class=\"line\">var div2 = document.getElementById(&quot;div2&quot;);</div><div class=\"line\">div2.addEventListener(&quot;click&quot;, listener2, true);</div><div class=\"line\">function listener2() &#123;</div><div class=\"line\">    console.log(&apos;test2&apos;);</div><div class=\"line\">&#125;</div><div class=\"line\">div2.addEventListener(&quot;click&quot;, listener1, false);</div><div class=\"line\">function listener1() &#123;</div><div class=\"line\">    console.log(&apos;test1&apos;);</div><div class=\"line\">&#125;</div><div class=\"line\">// 按绑定顺序执行，两个`addEventLister()`颠倒过来则执行顺序也变化</div><div class=\"line\">// 如果再对`div1`绑定一个捕获、一个冒泡，则会先触发捕获 再 触发冒泡，与绑定顺序无关</div></pre></td></tr></table></figure>\n<p>removeEventListener():与addEventListener()绑定事件对应的就是移除已绑定的事件<br>注意：只能通过removeEventListener()解绑有名字的函数，对于绑定的匿名函数无法解除绑定。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var div2 = document.getElementById(&quot;div2&quot;);</div><div class=\"line\">div2.addEventListener(&quot;click&quot;, listener2, true);</div><div class=\"line\">function listener2() &#123;</div><div class=\"line\">    console.log(&apos;test2&apos;);</div><div class=\"line\">&#125;</div><div class=\"line\">div2.removeEventListener(&quot;click&quot;, listener2, true);</div></pre></td></tr></table></figure></p>\n<p> attachEvent()、detachEvent() IE8及以下使用这两个方法绑定和解绑事件，当然，IE9+也支持这个事件。但这个方法绑定的事件默认为冒泡也只有冒泡。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 这里需要在事件前加 on</div><div class=\"line\">div2.attachEvent(&quot;onclick&quot;, listener1);</div><div class=\"line\">function listener1() &#123;</div><div class=\"line\">    console.log(&apos;test&apos;);</div><div class=\"line\">    console.log(this);</div><div class=\"line\">&#125;</div><div class=\"line\">div2.detachEvent(&quot;onclick&quot;, listener1);</div><div class=\"line\">//和addEventListener()一样，也不能解绑匿名函数。</div><div class=\"line\"></div><div class=\"line\">//标准事件和IE事件中的阻止默认事件和冒泡事件也有很大区别。</div><div class=\"line\">var div2 = document.getElementById(&quot;div2&quot;);</div><div class=\"line\">if (div2.addEventListener) &#123;</div><div class=\"line\">    div2.addEventListener(&quot;click&quot;, function(e) &#123;</div><div class=\"line\">        e.preventDefault(); // 阻止默认事件</div><div class=\"line\">        e.stopPropagation(); // 阻止冒泡</div><div class=\"line\">        console.log(e.target.innerHTML);</div><div class=\"line\">    &#125;, false);</div><div class=\"line\">&#125; else &#123;</div><div class=\"line\">    div2.attachEvent(&quot;onclick&quot;, function() &#123;</div><div class=\"line\">        var e = window.event;</div><div class=\"line\">        e.returnValue = false; // 阻止默认事件</div><div class=\"line\">        e.cancelBubble = true; // 阻止冒泡</div><div class=\"line\">        console.log(e.srcElement.innerHTML);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 自定义事件：createEvent()</p>\n<p> createEvent()用于创建一个新的 event ，而后这个 event 必须调用它的 init() 方法进行初始化。最后就可以在目标元素上使用dispatchEvent()调用新创建的event事件了。<br> initEvent(type, bubbles, cancelable)<br> type表示自定义的事件类型，bubbles表示是否冒泡，cancelable表示是否阻止默认事件。<br> target.dispatchEvent(ev)<br> target就是要触发自定义事件的DOM元素</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">var div1 = document.getElementById(&quot;div1&quot;);</div><div class=\"line\">div1.addEventListener(&quot;message&quot;, function()&#123;</div><div class=\"line\">    console.log(&apos;test&apos;);</div><div class=\"line\">&#125;, false);</div><div class=\"line\"></div><div class=\"line\">var div2 = document.getElementById(&quot;div2&quot;);</div><div class=\"line\">div2.addEventListener(&quot;message&quot;, function(e)&#123;</div><div class=\"line\">    console.log(this);</div><div class=\"line\">    console.log(e);</div><div class=\"line\">&#125;, false);</div><div class=\"line\">var ev = document.createEvent(&quot;Event&quot;);</div><div class=\"line\">ev.initEvent(&quot;message&quot;, false, true); // 起泡参数变为true，div1的事件就会触发</div><div class=\"line\">div2.dispatchEvent(ev);</div></pre></td></tr></table></figure>","excerpt":"","more":"<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body&gt;</div><div class=\"line\">    &lt;div id=&quot;div&quot;&gt;</div><div class=\"line\">        &lt;div class=&quot;div1&quot; name=&quot;div&quot;&gt;hello world&lt;span&gt;奥斯卡看卡&lt;/span&gt;&lt;/div&gt;</div><div class=\"line\">        &lt;div class=&quot;div2&quot; name=&quot;div&quot;&gt;哈哈哈&lt;/div&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/body&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"获取元素节点\"><a href=\"#获取元素节点\" class=\"headerlink\" title=\"获取元素节点\"></a>获取元素节点</h2><blockquote>\n<p>getElementById 返回的结果是以对象的形式，其余为类数组（NodeList对象）</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var　divId = document.getElementById(&quot;div&quot;);</div><div class=\"line\">console.log(divId)</div><div class=\"line\">var divTag = document.getElementsByTagName(&quot;div&quot;);</div><div class=\"line\">console.log(divTag)</div><div class=\"line\">var divClass = document.getElementsByClassName(&quot;div1&quot;);</div><div class=\"line\">console.log(divClass)</div><div class=\"line\">var divName = document.getElementsByName(&quot;div&quot;);</div><div class=\"line\">console.log(divName)</div></pre></td></tr></table></figure>\n<h2 id=\"javascript-的css选择器\"><a href=\"#javascript-的css选择器\" class=\"headerlink\" title=\"javascript 的css选择器\"></a>javascript 的css选择器</h2><p>document.querySelector()<br>document.querySelectorAll()<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var div =document.querySelector(&quot;#div&gt;div&quot;);</div><div class=\"line\">console.log(div) //输出为div1的对象形式</div><div class=\"line\">var div = document.querySelectorAll(&quot;div&quot;);</div><div class=\"line\">console.log(div) //输出为所有div</div></pre></td></tr></table></figure></p>\n<h2 id=\"文档结构和遍历\"><a href=\"#文档结构和遍历\" class=\"headerlink\" title=\"文档结构和遍历\"></a>文档结构和遍历</h2><p>一.作为节点数的文档</p>\n<ol>\n<li>parentNode    获取该节点的父节点</li>\n<li>childNodes    获取该节点的子节点数组</li>\n<li>firstChild    获取该节点的第一个子节点</li>\n<li>lastChild    获取该节点的最后一个子节点</li>\n<li>nextSibling    获取该节点的下一个兄弟元素</li>\n<li>previoursSibling    获取该节点的上一个兄弟元素</li>\n<li>nodeType    节点的类型，9代表Document节点，1代表Element节点，3代表Text节点，8代表Comment节点，11代表DocumentFragment节点</li>\n<li>nodeVlue    Text节点或Comment节点的文本内容</li>\n<li>nodeName    元素的标签名(如P,SPAN,#text(文本节点),DIV)，以大写形式表示</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">var span = document.getElementsByTagName(&quot;span&quot;);</div><div class=\"line\">console.log(span[0].parentNode) // //输出为div1的对象形式</div><div class=\"line\">var div = document.getElementById(&quot;div&quot;);</div><div class=\"line\">console.log(div.childNodes) //输出为</div><div class=\"line\">/*NodeList[5]</div><div class=\"line\">&#123;0:text,</div><div class=\"line\">1:div.div1,</div><div class=\"line\">2:text,</div><div class=\"line\">3:div.div2,</div><div class=\"line\">4:text,</div><div class=\"line\">length:5&#125;*/</div><div class=\"line\">console.log(div.firstChild)//文本节点</div><div class=\"line\">console.log(div.childNodes[1].firstChild.nodeValue) //文本节点的ｖａｌｕｅ</div><div class=\"line\">console.log(span[0].parentNode.nextSibling.nextSibling) // 输出为div２对象　因为第一个nextSibling是一个text节点</div><div class=\"line\">var text=&quot;&quot;;</div><div class=\"line\">for(var i=0;i&lt;div.childNodes.length;i++)&#123;</div><div class=\"line\">    if(div.childNodes[i].nodeType==1)&#123;　//元素节点</div><div class=\"line\">        text+=div.childNodes[i].nodeName.toLowerCase()+&quot;:&quot;+div.childNodes[i].innerText+&quot;----&quot;+&quot;\\n&quot;;</div><div class=\"line\">    &#125;else if(div.childNodes[i].nodeType==3)&#123; //text节点</div><div class=\"line\">        text+=div.childNodes[i].nodeName.toLowerCase()+&quot;:&quot;+div.childNodes[i].nodeValue+&quot;----&quot;+&quot;\\n&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">console.log(text)</div></pre></td></tr></table></figure>\n<p>二.作为元素树的文档 // 忽略掉文本节点<br>1、firstElementChild         第一个子元素节点<br>2、lastElementChild          最后一个子元素节点<br>3、nextElementSibling        下一个兄弟元素节点<br>4、previousElementSibling    前一个兄弟元素节点<br>5、childElementCount         子元素节点个数量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;div1&quot;&gt;</div><div class=\"line\">    &lt;p id=&quot;p1&quot; class=&quot;class1&quot;&gt; 我是第一个P&lt;/p&gt;</div><div class=\"line\">    &lt;p id=&quot;p2&quot; class=&quot;class2&quot;&gt;我是第二个P&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">var node = document.getElementById(&quot;div1&quot;);</div><div class=\"line\">var node1 = node.firstElementChild;</div><div class=\"line\">var node2 = node.lastElementChild;</div><div class=\"line\"></div><div class=\"line\">alert(node.childElementCount);  //输出2，div1一共有两个非文档子元素节点</div><div class=\"line\">alert(node1.innerHTML);         //输出 我是第一个P</div><div class=\"line\">alert(node2.innerHTML);         //输出 我是第二个P</div><div class=\"line\">alert(node2.previousElementSibling.innerHTML);  //输出 我是第一个P(第二个元素节点的上一个非文本元素节点是P1)</div><div class=\"line\">alert(node1.nextElementSibling.innerHTML);      //输出 我是第二个P(第一个元素节点的下一个兄弟非文本节点是P2)</div></pre></td></tr></table></figure>\n<h2 id=\"javascript操作HTML属性\"><a href=\"#javascript操作HTML属性\" class=\"headerlink\" title=\"javascript操作HTML属性\"></a>javascript操作HTML属性</h2><blockquote>\n<p>1、属性的读取，此处要注意的是，某些HTML属性名称在javascript之中是保留字，因此会有些许不同，如class,lable中的for在javascript中变为htmlFor,className。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;div1&quot;&gt;</div><div class=\"line\">    &lt;p id=&quot;p1&quot; class=&quot;class1&quot;&gt; 我是第一个P&lt;/p&gt;</div><div class=\"line\">    &lt;img src=&quot;123.jpg&quot; alt=&quot;我是一张图片&quot; id=&quot;img1&quot; /&gt;</div><div class=\"line\">    &lt;input type=&quot;text&quot; value=&quot;我是一个文本框&quot; id=&quot;input1&quot; /&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">window.onload = function () &#123;</div><div class=\"line\">    var nodeText = document.getElementById(&quot;input1&quot;);</div><div class=\"line\">    alert(nodeText.value);        //输出 我是一个文本框</div><div class=\"line\">    var nodeImg = document.getElementById(&quot;img1&quot;);</div><div class=\"line\">    alert(nodeImg.alt);            //输出 我是一张图片</div><div class=\"line\">    var nodeP = document.getElementById(&quot;p1&quot;);</div><div class=\"line\">    alert(nodeP.className);        //输出 class1    注意获取class是className，如果写成nodeP.class则输出undefined</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>属性的设置，此处同样要注意的是保留字</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;div1&quot;&gt;</div><div class=\"line\">    &lt;img src=&quot;1big.jpg&quot; alt=&quot;我是一张图片&quot; id=&quot;img1&quot; onclick=&quot;fun1()&quot; /&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">function fun1() &#123;</div><div class=\"line\">    document.getElementById(&quot;img1&quot;).src = &quot;1small.jpg&quot;;        //改变图片的路径属性。实现的效果为，当点击图片时，大图变小图。</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>非标准HTML属性  //注意这两个方法是不必理会javascript保留字的，HTML属性是什么就怎么写。</p>\n</blockquote>\n<p>getAttribute();<br>setAttribute();</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;div1&quot;&gt;</div><div class=\"line\">    &lt;img src=&quot;1big.jpg&quot; alt=&quot;我是一张图片&quot; class=&quot;imgClass&quot; id=&quot;img1&quot; onclick=&quot;fun1()&quot; /&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">function fun1() &#123;</div><div class=\"line\">    document.getElementById(&quot;img1&quot;).setAttribute(&quot;src&quot;, &quot;1small.jpg&quot;);</div><div class=\"line\">    alert(document.getElementById(&quot;img1&quot;).getAttribute(&quot;class&quot;));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Attr节点的属性</p>\n</blockquote>\n<p>attributes属性  非Element对象返回null，Element一般返回Attr对象。Attr对象是一个特殊的Node,通过name与value获取属性名称与值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var div = document.getElementsByTagName(&quot;div&quot;);</div><div class=\"line\">console.log(div[1].attributes) //返回div1的所有属性 &#123;0:class,1:name&#125;</div><div class=\"line\">console.log(div[1].attributes[0].name) //返回div1的第一个属性的nodeName　结果为class</div><div class=\"line\">console.log(div[1].attributes[0].value) //返回div1的第一个属性的nodeValue　结果为div1</div></pre></td></tr></table></figure>\n<blockquote>\n<p>元素的内容</p>\n</blockquote>\n<p>1、innerText、textContent    innerText与textContent的区别，当文本为空时，innerText是””，而textContent是undefined<br>2、innerHTML</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;div1&quot;&gt;</div><div class=\"line\">    &lt;p id=&quot;p1&quot;&gt;我是第一个P&lt;/p&gt;</div><div class=\"line\">    &lt;p id=&quot;p2&quot;&gt;我是第&lt;b&gt;二&lt;/b&gt;个P&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">window.onload = function () &#123;</div><div class=\"line\">    alert(document.getElementById(&quot;p1&quot;).innerText);  //注意火狐浏览器不支持innerText</div><div class=\"line\">    alert(document.getElementById(&quot;p1&quot;).textContent);    //基本都支持textContent</div><div class=\"line\">    document.getElementById(&quot;p1&quot;).textContent = &quot;我是p1，javascript改变了我&quot;;    //设置文档Text</div><div class=\"line\">    alert(document.getElementById(&quot;p2&quot;).textContent);</div><div class=\"line\">    alert(document.getElementById(&quot;p2&quot;).innerHTML); //innerHTML与innerText的区别，就是对HTML代码的输出方式Text不会输出HTML代码</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>创建，插入，删除节点</p>\n</blockquote>\n<p>1、document.createTextNode()    创建一个文本节点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;div1&quot;&gt;</div><div class=\"line\">     &lt;p id=&quot;p1&quot;&gt;我是第一个P&lt;/p&gt;</div><div class=\"line\">     &lt;p id=&quot;p2&quot;&gt;我是第二个P&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">window.onload = function () &#123;</div><div class=\"line\">     var textNode = document.createTextNode(&quot;&lt;p&gt;我是一个javascript新建的节点&lt;/p&gt;&quot;);</div><div class=\"line\">     document.getElementById(&quot;div1&quot;).appendChild(textNode);</div><div class=\"line\">&#125;</div><div class=\"line\">结果为：</div><div class=\"line\">&lt;div id=&quot;div1&quot;&gt;</div><div class=\"line\">    &lt;p id=&quot;p1&quot;&gt;我是第一个P&lt;/p&gt;</div><div class=\"line\">    &lt;p id=&quot;p2&quot;&gt;我是第二个P&lt;/p&gt;</div><div class=\"line\">    我是一个javascript新建的节点</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>2、document.createElement()    创建一个元素节点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;div1&quot;&gt;</div><div class=\"line\">    &lt;p id=&quot;p1&quot;&gt;我是第一个P&lt;/p&gt;</div><div class=\"line\">    &lt;p id=&quot;p2&quot;&gt;我是第二个P&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">window.onload = function () &#123;</div><div class=\"line\">    var pNode = document.createElement(&quot;p&quot;);</div><div class=\"line\">    pNode.textContent = &quot;新建一个P节点&quot;;</div><div class=\"line\">    document.getElementById(&quot;div1&quot;).appendChild(pNode);</div><div class=\"line\">&#125;</div><div class=\"line\">结果为：</div><div class=\"line\">&lt;div id=&quot;div1&quot;&gt;</div><div class=\"line\">    &lt;p id=&quot;p1&quot;&gt;我是第一个P&lt;/p&gt;</div><div class=\"line\">    &lt;p id=&quot;p2&quot;&gt;我是第二个P&lt;/p&gt;</div><div class=\"line\">    &lt;p&gt;新建一个P节点&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>3、插入节点<br>appendChild()    //将一个节点插入到调用节点的最后面<br>insertBefore()   //接受两个参数，第一个为待插入的节点，第二个指明在哪个节点前面，如果不传入第二个参数，报错。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;div1&quot;&gt;</div><div class=\"line\">    &lt;p id=&quot;p1&quot;&gt;我是第一个P&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">window.onload = function () &#123;</div><div class=\"line\">    var pNode1 = document.createElement(&quot;p&quot;);</div><div class=\"line\">    pNode1.textContent = &quot;insertBefore插入的节点&quot;;</div><div class=\"line\">    var pNode2 = document.createElement(&quot;p&quot;);</div><div class=\"line\">    pNode2.textContent = &quot;appendChild插入的节点&quot;;</div><div class=\"line\">    document.getElementById(&quot;div1&quot;).appendChild(pNode2);</div><div class=\"line\">    document.getElementById(&quot;div1&quot;).insertBefore(pNode1,document.getElementById(&quot;p1&quot;));</div><div class=\"line\">&#125;</div><div class=\"line\">结果为：</div><div class=\"line\">&lt;div id=&quot;div1&quot;&gt;</div><div class=\"line\">    &lt;p&gt;insertBefore插入的节点&lt;/p&gt;</div><div class=\"line\">    &lt;p id=&quot;p1&quot;&gt;我是第一个P&lt;/p&gt;</div><div class=\"line\">    &lt;p&gt;appendChild插入的节点&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>4、删除和替换节点。<br>1)removeChild();    由父元素调用，删除一个子节点。注意是直接父元素调用，删除直接子元素才有效，删除孙子元素就没有效果了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;div1&quot;&gt;</div><div class=\"line\">    &lt;p id=&quot;p1&quot;&gt;我是第一个P&lt;/p&gt;</div><div class=\"line\">    &lt;p id=&quot;p2&quot;&gt;我是第二个P&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">window.onload = function () &#123;</div><div class=\"line\">    var div1 = document.getElementById(&quot;div1&quot;);</div><div class=\"line\">    div1.removeChild(document.getElementById(&quot;p2&quot;));</div><div class=\"line\">&#125;</div><div class=\"line\">执行之后代码变为：</div><div class=\"line\">&lt;div id=&quot;div1&quot;&gt;</div><div class=\"line\">    &lt;p id=&quot;p1&quot;&gt;我是第一个P&lt;/p&gt;    //注意到第二个P元素已经被移除了</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>2)replaceChild()    //删除一个子节点，并用一个新节点代替它，第一个参数为新建的节点，第二个节点为被替换的节点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;div1&quot;&gt;</div><div class=\"line\">    &lt;p id=&quot;p1&quot;&gt;我是第一个P&lt;/p&gt;</div><div class=\"line\">    &lt;p id=&quot;p2&quot;&gt;我是第二个P&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">window.onload = function () &#123;</div><div class=\"line\">    var div1 = document.getElementById(&quot;div1&quot;);</div><div class=\"line\">    var span1 = document.createElement(&quot;span&quot;);</div><div class=\"line\">    span1.textContent = &quot;我是一个新建的span&quot;;</div><div class=\"line\">    div1.replaceChild(span1,document.getElementById(&quot;p2&quot;));</div><div class=\"line\">&#125;</div><div class=\"line\">执行完成后HTML代码变为：</div><div class=\"line\">&lt;div id=&quot;div1&quot;&gt;</div><div class=\"line\">    &lt;p id=&quot;p1&quot;&gt;我是第一个P&lt;/p&gt;</div><div class=\"line\">    &lt;span&gt;我是一个新建的span&lt;/span&gt;    //留意到p2节点已经被替换为span1节点了</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>javascript操作元素CSS　通过元素的style属性可以随意读取和设置元素的CSS样式</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;div1&quot; style=&quot;width:100px; height:100px; background-color:red&quot;&gt;&lt;/div&gt;</div><div class=\"line\">window.onload = function () &#123;</div><div class=\"line\">    alert(document.getElementById(&quot;div1&quot;).style.backgroundColor);</div><div class=\"line\">    document.getElementById(&quot;div1&quot;).style.backgroundColor = &quot;yellow&quot;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>IE有许多好用的方法，后来都被其他浏览器抄袭了，比如这个contains方法。如果A元素包含B元素，则返回true(可以A包含A)，否则false。唯一不支持这个方法的是IE的死对头firefox。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;parent&quot;&gt;</div><div class=\"line\">  &lt;p&gt;</div><div class=\"line\">    &lt;strong id=&quot;child&quot; &gt;本例子会在火狐中会报错。&lt;/strong&gt;</div><div class=\"line\">  &lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">window.onload = function()&#123;</div><div class=\"line\">    var A = document.getElementById(&apos;parent&apos;),</div><div class=\"line\">    B = document.getElementById(&apos;child&apos;);</div><div class=\"line\">    alert(A.contains(A));　//true</div><div class=\"line\">    alert(A.contains(B));　//true</div><div class=\"line\">    alert(B.contains(A));  //false</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>cloneNode(true/false) 克隆节点　　true为深度克隆　false为只克隆节点本身</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var p = document.createElement(&quot;p&quot;);</div><div class=\"line\">p.id =&quot;ppp&quot;;</div><div class=\"line\">p.innerText = &quot;我是新创建的p元素&quot;;</div><div class=\"line\">var cloneNode = p.cloneNode(true); //&lt;p id=&quot;ppp&quot;&gt;我是新创建的p元素&lt;/p&gt;</div><div class=\"line\">var cloneNode = p.cloneNode(false);//默认为false &lt;p id=&quot;ppp&quot;&gt;&lt;/p&gt;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>addEventListener() 第一个参数是事件名，第二个是回调函数，第三个参数为true表示捕获，false表示冒泡。</p>\n</blockquote>\n<p>addEventListener()将指定的事件监听器注册到目标对象上，当目标对象触发制定的事件时，指定的回调函数就会触发。目标对象可以是 文档上的元素、 document、 window 或者XMLHttpRequest(比如onreadystatechange事件)。IE8及以下不支持此方法且只有事件冒泡没有事件捕获。IE9开始支持此方法，也就有了事件捕获。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">var div1 = document.getElementById(&quot;div1&quot;);</div><div class=\"line\">div1.addEventListener(&quot;click&quot;, listener, false);</div><div class=\"line\">function listener() &#123;</div><div class=\"line\">    console.log(&apos;test&apos;);</div><div class=\"line\">&#125;</div><div class=\"line\">var cloneHtml = div1.cloneNode(true);</div><div class=\"line\">document.body.appendChild(cloneHtml);</div><div class=\"line\">/*</div><div class=\"line\">注意：</div><div class=\"line\">    当对某一个元素1既绑定了捕获事件，又绑定了冒泡事件时：</div><div class=\"line\">    当这个元素1并不是触发事件的那个元素2时，则触发顺序会按照先 捕获 后 冒泡 的顺序触发；</div><div class=\"line\">    当这个元素1就是最底层的触发事件的元素时，则这个元素没有捕获和冒泡的区别，谁先绑定就先触发谁。</div><div class=\"line\">*/</div><div class=\"line\">var div2 = document.getElementById(&quot;div2&quot;);</div><div class=\"line\">div2.addEventListener(&quot;click&quot;, listener2, true);</div><div class=\"line\">function listener2() &#123;</div><div class=\"line\">    console.log(&apos;test2&apos;);</div><div class=\"line\">&#125;</div><div class=\"line\">div2.addEventListener(&quot;click&quot;, listener1, false);</div><div class=\"line\">function listener1() &#123;</div><div class=\"line\">    console.log(&apos;test1&apos;);</div><div class=\"line\">&#125;</div><div class=\"line\">// 按绑定顺序执行，两个`addEventLister()`颠倒过来则执行顺序也变化</div><div class=\"line\">// 如果再对`div1`绑定一个捕获、一个冒泡，则会先触发捕获 再 触发冒泡，与绑定顺序无关</div></pre></td></tr></table></figure>\n<p>removeEventListener():与addEventListener()绑定事件对应的就是移除已绑定的事件<br>注意：只能通过removeEventListener()解绑有名字的函数，对于绑定的匿名函数无法解除绑定。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var div2 = document.getElementById(&quot;div2&quot;);</div><div class=\"line\">div2.addEventListener(&quot;click&quot;, listener2, true);</div><div class=\"line\">function listener2() &#123;</div><div class=\"line\">    console.log(&apos;test2&apos;);</div><div class=\"line\">&#125;</div><div class=\"line\">div2.removeEventListener(&quot;click&quot;, listener2, true);</div></pre></td></tr></table></figure></p>\n<p> attachEvent()、detachEvent() IE8及以下使用这两个方法绑定和解绑事件，当然，IE9+也支持这个事件。但这个方法绑定的事件默认为冒泡也只有冒泡。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 这里需要在事件前加 on</div><div class=\"line\">div2.attachEvent(&quot;onclick&quot;, listener1);</div><div class=\"line\">function listener1() &#123;</div><div class=\"line\">    console.log(&apos;test&apos;);</div><div class=\"line\">    console.log(this);</div><div class=\"line\">&#125;</div><div class=\"line\">div2.detachEvent(&quot;onclick&quot;, listener1);</div><div class=\"line\">//和addEventListener()一样，也不能解绑匿名函数。</div><div class=\"line\"></div><div class=\"line\">//标准事件和IE事件中的阻止默认事件和冒泡事件也有很大区别。</div><div class=\"line\">var div2 = document.getElementById(&quot;div2&quot;);</div><div class=\"line\">if (div2.addEventListener) &#123;</div><div class=\"line\">    div2.addEventListener(&quot;click&quot;, function(e) &#123;</div><div class=\"line\">        e.preventDefault(); // 阻止默认事件</div><div class=\"line\">        e.stopPropagation(); // 阻止冒泡</div><div class=\"line\">        console.log(e.target.innerHTML);</div><div class=\"line\">    &#125;, false);</div><div class=\"line\">&#125; else &#123;</div><div class=\"line\">    div2.attachEvent(&quot;onclick&quot;, function() &#123;</div><div class=\"line\">        var e = window.event;</div><div class=\"line\">        e.returnValue = false; // 阻止默认事件</div><div class=\"line\">        e.cancelBubble = true; // 阻止冒泡</div><div class=\"line\">        console.log(e.srcElement.innerHTML);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 自定义事件：createEvent()</p>\n<p> createEvent()用于创建一个新的 event ，而后这个 event 必须调用它的 init() 方法进行初始化。最后就可以在目标元素上使用dispatchEvent()调用新创建的event事件了。<br> initEvent(type, bubbles, cancelable)<br> type表示自定义的事件类型，bubbles表示是否冒泡，cancelable表示是否阻止默认事件。<br> target.dispatchEvent(ev)<br> target就是要触发自定义事件的DOM元素</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">var div1 = document.getElementById(&quot;div1&quot;);</div><div class=\"line\">div1.addEventListener(&quot;message&quot;, function()&#123;</div><div class=\"line\">    console.log(&apos;test&apos;);</div><div class=\"line\">&#125;, false);</div><div class=\"line\"></div><div class=\"line\">var div2 = document.getElementById(&quot;div2&quot;);</div><div class=\"line\">div2.addEventListener(&quot;message&quot;, function(e)&#123;</div><div class=\"line\">    console.log(this);</div><div class=\"line\">    console.log(e);</div><div class=\"line\">&#125;, false);</div><div class=\"line\">var ev = document.createEvent(&quot;Event&quot;);</div><div class=\"line\">ev.initEvent(&quot;message&quot;, false, true); // 起泡参数变为true，div1的事件就会触发</div><div class=\"line\">div2.dispatchEvent(ev);</div></pre></td></tr></table></figure>"},{"title":"MVC 的理解","date":"2016-07-23T02:00:33.000Z","_content":"# MVC \n## View层\n与页面上元素直接相关的部分都属于View，包括html，CSS和一部分直接控制页面元素的JS。可以从Model中得到数据，并将其显示到页面上。而关于数据的变更与请求，则统统交给Controller处理\n## Controller层:\n作为Model和View的粘合剂，Controller将View方面的请求转发给合适的 Model，在必要时也会去更新View。而Controller本身也可以作为Model的观察者，获取Model的变更。而作为Controller 本身，就不应该有涉及到页面元素的代码了。\n## Model层:\n与后端的沟通、AJAX请求以及对数据的处理都属于Model的工作。Model本身不知道谁是View，谁是Controller。它只提供一些方法供View和Controller调用，并且将变更通知给它的观察者View或Controller。显 然，Model与页面元素之间也解耦了\n        \n### 知己知彼，对症下药\n在前端框架和类库越来越丰富的今天。选择一款对的框架或类库就显得尤为重要了，我觉得没必要盲目跟风，看见什么框架火就屁颠屁颠跑去啃一个星期，然后因为项目工作上用不到，几个月之后又全忘光了。所以我觉得重要的是把基础打扎实，重点是去了解各个类库与框架的作用，某类框架着重用于解决什么问题，然后在项目需要用到时候再去研读API才是上策。最后，我们要清楚MVC在前端开发中的应用具有的局限性，简单的项目如果使用MVC框架会可能导致项目变得更加复杂。当然随着Web前端的复杂度不断增加，前端MVC框架的不断发展，相信在未来的应用软件类复杂产品当中，MVC框架一定会给前端工作带来效率上的飞跃。\n","source":"_posts/MVC的理解.md","raw":"---\ntitle: MVC 的理解\ndate: 2016-07-23 10:00:33\ncategories: MVC\ntags:\n     - MVC\n---\n# MVC \n## View层\n与页面上元素直接相关的部分都属于View，包括html，CSS和一部分直接控制页面元素的JS。可以从Model中得到数据，并将其显示到页面上。而关于数据的变更与请求，则统统交给Controller处理\n## Controller层:\n作为Model和View的粘合剂，Controller将View方面的请求转发给合适的 Model，在必要时也会去更新View。而Controller本身也可以作为Model的观察者，获取Model的变更。而作为Controller 本身，就不应该有涉及到页面元素的代码了。\n## Model层:\n与后端的沟通、AJAX请求以及对数据的处理都属于Model的工作。Model本身不知道谁是View，谁是Controller。它只提供一些方法供View和Controller调用，并且将变更通知给它的观察者View或Controller。显 然，Model与页面元素之间也解耦了\n        \n### 知己知彼，对症下药\n在前端框架和类库越来越丰富的今天。选择一款对的框架或类库就显得尤为重要了，我觉得没必要盲目跟风，看见什么框架火就屁颠屁颠跑去啃一个星期，然后因为项目工作上用不到，几个月之后又全忘光了。所以我觉得重要的是把基础打扎实，重点是去了解各个类库与框架的作用，某类框架着重用于解决什么问题，然后在项目需要用到时候再去研读API才是上策。最后，我们要清楚MVC在前端开发中的应用具有的局限性，简单的项目如果使用MVC框架会可能导致项目变得更加复杂。当然随着Web前端的复杂度不断增加，前端MVC框架的不断发展，相信在未来的应用软件类复杂产品当中，MVC框架一定会给前端工作带来效率上的飞跃。\n","slug":"MVC的理解","published":1,"updated":"2017-04-22T10:20:21.521Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb1u1p6e00090sq9i5piiwy5","content":"<h1 id=\"MVC\"><a href=\"#MVC\" class=\"headerlink\" title=\"MVC\"></a>MVC</h1><h2 id=\"View层\"><a href=\"#View层\" class=\"headerlink\" title=\"View层\"></a>View层</h2><p>与页面上元素直接相关的部分都属于View，包括html，CSS和一部分直接控制页面元素的JS。可以从Model中得到数据，并将其显示到页面上。而关于数据的变更与请求，则统统交给Controller处理</p>\n<h2 id=\"Controller层\"><a href=\"#Controller层\" class=\"headerlink\" title=\"Controller层:\"></a>Controller层:</h2><p>作为Model和View的粘合剂，Controller将View方面的请求转发给合适的 Model，在必要时也会去更新View。而Controller本身也可以作为Model的观察者，获取Model的变更。而作为Controller 本身，就不应该有涉及到页面元素的代码了。</p>\n<h2 id=\"Model层\"><a href=\"#Model层\" class=\"headerlink\" title=\"Model层:\"></a>Model层:</h2><p>与后端的沟通、AJAX请求以及对数据的处理都属于Model的工作。Model本身不知道谁是View，谁是Controller。它只提供一些方法供View和Controller调用，并且将变更通知给它的观察者View或Controller。显 然，Model与页面元素之间也解耦了</p>\n<h3 id=\"知己知彼，对症下药\"><a href=\"#知己知彼，对症下药\" class=\"headerlink\" title=\"知己知彼，对症下药\"></a>知己知彼，对症下药</h3><p>在前端框架和类库越来越丰富的今天。选择一款对的框架或类库就显得尤为重要了，我觉得没必要盲目跟风，看见什么框架火就屁颠屁颠跑去啃一个星期，然后因为项目工作上用不到，几个月之后又全忘光了。所以我觉得重要的是把基础打扎实，重点是去了解各个类库与框架的作用，某类框架着重用于解决什么问题，然后在项目需要用到时候再去研读API才是上策。最后，我们要清楚MVC在前端开发中的应用具有的局限性，简单的项目如果使用MVC框架会可能导致项目变得更加复杂。当然随着Web前端的复杂度不断增加，前端MVC框架的不断发展，相信在未来的应用软件类复杂产品当中，MVC框架一定会给前端工作带来效率上的飞跃。</p>\n","excerpt":"","more":"<h1 id=\"MVC\"><a href=\"#MVC\" class=\"headerlink\" title=\"MVC\"></a>MVC</h1><h2 id=\"View层\"><a href=\"#View层\" class=\"headerlink\" title=\"View层\"></a>View层</h2><p>与页面上元素直接相关的部分都属于View，包括html，CSS和一部分直接控制页面元素的JS。可以从Model中得到数据，并将其显示到页面上。而关于数据的变更与请求，则统统交给Controller处理</p>\n<h2 id=\"Controller层\"><a href=\"#Controller层\" class=\"headerlink\" title=\"Controller层:\"></a>Controller层:</h2><p>作为Model和View的粘合剂，Controller将View方面的请求转发给合适的 Model，在必要时也会去更新View。而Controller本身也可以作为Model的观察者，获取Model的变更。而作为Controller 本身，就不应该有涉及到页面元素的代码了。</p>\n<h2 id=\"Model层\"><a href=\"#Model层\" class=\"headerlink\" title=\"Model层:\"></a>Model层:</h2><p>与后端的沟通、AJAX请求以及对数据的处理都属于Model的工作。Model本身不知道谁是View，谁是Controller。它只提供一些方法供View和Controller调用，并且将变更通知给它的观察者View或Controller。显 然，Model与页面元素之间也解耦了</p>\n<h3 id=\"知己知彼，对症下药\"><a href=\"#知己知彼，对症下药\" class=\"headerlink\" title=\"知己知彼，对症下药\"></a>知己知彼，对症下药</h3><p>在前端框架和类库越来越丰富的今天。选择一款对的框架或类库就显得尤为重要了，我觉得没必要盲目跟风，看见什么框架火就屁颠屁颠跑去啃一个星期，然后因为项目工作上用不到，几个月之后又全忘光了。所以我觉得重要的是把基础打扎实，重点是去了解各个类库与框架的作用，某类框架着重用于解决什么问题，然后在项目需要用到时候再去研读API才是上策。最后，我们要清楚MVC在前端开发中的应用具有的局限性，简单的项目如果使用MVC框架会可能导致项目变得更加复杂。当然随着Web前端的复杂度不断增加，前端MVC框架的不断发展，相信在未来的应用软件类复杂产品当中，MVC框架一定会给前端工作带来效率上的飞跃。</p>\n"},{"title":"hexo常用命令","date":"2016-07-28T13:20:32.000Z","_content":"## hexo常用命令\n\n### 部署步骤\n#### 每次部署的步骤，可按以下三步来进行。\n#### hexo clean\n#### hexo generate\n#### hexo deploy\n\n### hexo new \"postName\" #新建文章\n### hexo new page\"pageName\" #新建页面\n### hexo generate #生成静态页面至public目录\n### hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\n### hexo deploy #将.deploy目录部署到GitHub\n### hexo help # 查看帮助\n### hexo version #查看Hexo的版本","source":"_posts/hexo常用命令.md","raw":"---\ntitle: hexo常用命令\ndate: 2016-07-28 21:20:32\ncategories: hexo\ntags:\n    - hexo\n---\n## hexo常用命令\n\n### 部署步骤\n#### 每次部署的步骤，可按以下三步来进行。\n#### hexo clean\n#### hexo generate\n#### hexo deploy\n\n### hexo new \"postName\" #新建文章\n### hexo new page\"pageName\" #新建页面\n### hexo generate #生成静态页面至public目录\n### hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\n### hexo deploy #将.deploy目录部署到GitHub\n### hexo help # 查看帮助\n### hexo version #查看Hexo的版本","slug":"hexo常用命令","published":1,"updated":"2017-12-08T01:47:10.983Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb1u1p6l000d0sq9fk81wx4q","content":"<h2 id=\"hexo常用命令\"><a href=\"#hexo常用命令\" class=\"headerlink\" title=\"hexo常用命令\"></a>hexo常用命令</h2><h3 id=\"部署步骤\"><a href=\"#部署步骤\" class=\"headerlink\" title=\"部署步骤\"></a>部署步骤</h3><h4 id=\"每次部署的步骤，可按以下三步来进行。\"><a href=\"#每次部署的步骤，可按以下三步来进行。\" class=\"headerlink\" title=\"每次部署的步骤，可按以下三步来进行。\"></a>每次部署的步骤，可按以下三步来进行。</h4><h4 id=\"hexo-clean\"><a href=\"#hexo-clean\" class=\"headerlink\" title=\"hexo clean\"></a>hexo clean</h4><h4 id=\"hexo-generate\"><a href=\"#hexo-generate\" class=\"headerlink\" title=\"hexo generate\"></a>hexo generate</h4><h4 id=\"hexo-deploy\"><a href=\"#hexo-deploy\" class=\"headerlink\" title=\"hexo deploy\"></a>hexo deploy</h4><h3 id=\"hexo-new-“postName”-新建文章\"><a href=\"#hexo-new-“postName”-新建文章\" class=\"headerlink\" title=\"hexo new “postName” #新建文章\"></a>hexo new “postName” #新建文章</h3><h3 id=\"hexo-new-page”pageName”-新建页面\"><a href=\"#hexo-new-page”pageName”-新建页面\" class=\"headerlink\" title=\"hexo new page”pageName” #新建页面\"></a>hexo new page”pageName” #新建页面</h3><h3 id=\"hexo-generate-生成静态页面至public目录\"><a href=\"#hexo-generate-生成静态页面至public目录\" class=\"headerlink\" title=\"hexo generate #生成静态页面至public目录\"></a>hexo generate #生成静态页面至public目录</h3><h3 id=\"hexo-server-开启预览访问端口（默认端口4000，’ctrl-c’关闭server）\"><a href=\"#hexo-server-开启预览访问端口（默认端口4000，’ctrl-c’关闭server）\" class=\"headerlink\" title=\"hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）\"></a>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）</h3><h3 id=\"hexo-deploy-将-deploy目录部署到GitHub\"><a href=\"#hexo-deploy-将-deploy目录部署到GitHub\" class=\"headerlink\" title=\"hexo deploy #将.deploy目录部署到GitHub\"></a>hexo deploy #将.deploy目录部署到GitHub</h3><h3 id=\"hexo-help-查看帮助\"><a href=\"#hexo-help-查看帮助\" class=\"headerlink\" title=\"hexo help # 查看帮助\"></a>hexo help # 查看帮助</h3><h3 id=\"hexo-version-查看Hexo的版本\"><a href=\"#hexo-version-查看Hexo的版本\" class=\"headerlink\" title=\"hexo version #查看Hexo的版本\"></a>hexo version #查看Hexo的版本</h3>","excerpt":"","more":"<h2 id=\"hexo常用命令\"><a href=\"#hexo常用命令\" class=\"headerlink\" title=\"hexo常用命令\"></a>hexo常用命令</h2><h3 id=\"部署步骤\"><a href=\"#部署步骤\" class=\"headerlink\" title=\"部署步骤\"></a>部署步骤</h3><h4 id=\"每次部署的步骤，可按以下三步来进行。\"><a href=\"#每次部署的步骤，可按以下三步来进行。\" class=\"headerlink\" title=\"每次部署的步骤，可按以下三步来进行。\"></a>每次部署的步骤，可按以下三步来进行。</h4><h4 id=\"hexo-clean\"><a href=\"#hexo-clean\" class=\"headerlink\" title=\"hexo clean\"></a>hexo clean</h4><h4 id=\"hexo-generate\"><a href=\"#hexo-generate\" class=\"headerlink\" title=\"hexo generate\"></a>hexo generate</h4><h4 id=\"hexo-deploy\"><a href=\"#hexo-deploy\" class=\"headerlink\" title=\"hexo deploy\"></a>hexo deploy</h4><h3 id=\"hexo-new-“postName”-新建文章\"><a href=\"#hexo-new-“postName”-新建文章\" class=\"headerlink\" title=\"hexo new “postName” #新建文章\"></a>hexo new “postName” #新建文章</h3><h3 id=\"hexo-new-page”pageName”-新建页面\"><a href=\"#hexo-new-page”pageName”-新建页面\" class=\"headerlink\" title=\"hexo new page”pageName” #新建页面\"></a>hexo new page”pageName” #新建页面</h3><h3 id=\"hexo-generate-生成静态页面至public目录\"><a href=\"#hexo-generate-生成静态页面至public目录\" class=\"headerlink\" title=\"hexo generate #生成静态页面至public目录\"></a>hexo generate #生成静态页面至public目录</h3><h3 id=\"hexo-server-开启预览访问端口（默认端口4000，’ctrl-c’关闭server）\"><a href=\"#hexo-server-开启预览访问端口（默认端口4000，’ctrl-c’关闭server）\" class=\"headerlink\" title=\"hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）\"></a>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）</h3><h3 id=\"hexo-deploy-将-deploy目录部署到GitHub\"><a href=\"#hexo-deploy-将-deploy目录部署到GitHub\" class=\"headerlink\" title=\"hexo deploy #将.deploy目录部署到GitHub\"></a>hexo deploy #将.deploy目录部署到GitHub</h3><h3 id=\"hexo-help-查看帮助\"><a href=\"#hexo-help-查看帮助\" class=\"headerlink\" title=\"hexo help # 查看帮助\"></a>hexo help # 查看帮助</h3><h3 id=\"hexo-version-查看Hexo的版本\"><a href=\"#hexo-version-查看Hexo的版本\" class=\"headerlink\" title=\"hexo version #查看Hexo的版本\"></a>hexo version #查看Hexo的版本</h3>"},{"title":"URL到展现页面的全过程","date":"2016-12-28T14:28:47.000Z","_content":"\n---------------------\n\n## url到页面展现的过程   \n\n[原文地址](http://www.cnblogs.com/strick/p/5494869.html)\n\n1.域名解析 \t-> \t\tDNS（Domain Name System）位于应用层，提供域名和IP地址之间的解析服务。\n2.建立tcp连接 \t\t传输控制协议\n3.发起http请求\n4.服务器响应http请求\n5.浏览器渲染页面\n\n## TCP/IP分为4层:\n\n应用层（HTTP客户端）、传输层（tcp）、网络层（ip）、链路层（网络）\n\nHTTP（Hyper Text Transfer Protocol），超文本传输协议，由请求和响应构成。\n\n## 3次握手\n\n1）.发送端发送一个带SYN标志的数据包给对方\n2）.接收端回传一个带SYN（握手信号）和ACK（确认字符）标志的数据包以示传达确认信息\n3）.发送端再回传一个带ACK标志的数据包，代表握手结束\n\n## 状态码:\n\n1xx 信息性状态码，接收的请求正在处理\n2xx 成功状态码，请求正常处理完毕\n3xx 重定向状态码，需要进行附加操作以完成请求\n4xx 客户端错误状态码，服务器无法处理请求\n5xx 服务端错误状态码，服务器处理请求出错\n\n## html解析过程\n\n解析HTML以构建DOM树 -> 构建Render（渲染）树 -> 布局Render树 -> 绘制Render树\n\n## 网页优化\n\n[毫秒必争，前端网页性能最佳实践](http://www.cnblogs.com/developersupport/p/3248695.html)\n","source":"_posts/URL到展现页面的全过程.md","raw":"---\ntitle: URL到展现页面的全过程\ndate: 2016-12-28 22:28:47\ncategories: Javascript\ntags:\n     - Javascript\n---\n\n---------------------\n\n## url到页面展现的过程   \n\n[原文地址](http://www.cnblogs.com/strick/p/5494869.html)\n\n1.域名解析 \t-> \t\tDNS（Domain Name System）位于应用层，提供域名和IP地址之间的解析服务。\n2.建立tcp连接 \t\t传输控制协议\n3.发起http请求\n4.服务器响应http请求\n5.浏览器渲染页面\n\n## TCP/IP分为4层:\n\n应用层（HTTP客户端）、传输层（tcp）、网络层（ip）、链路层（网络）\n\nHTTP（Hyper Text Transfer Protocol），超文本传输协议，由请求和响应构成。\n\n## 3次握手\n\n1）.发送端发送一个带SYN标志的数据包给对方\n2）.接收端回传一个带SYN（握手信号）和ACK（确认字符）标志的数据包以示传达确认信息\n3）.发送端再回传一个带ACK标志的数据包，代表握手结束\n\n## 状态码:\n\n1xx 信息性状态码，接收的请求正在处理\n2xx 成功状态码，请求正常处理完毕\n3xx 重定向状态码，需要进行附加操作以完成请求\n4xx 客户端错误状态码，服务器无法处理请求\n5xx 服务端错误状态码，服务器处理请求出错\n\n## html解析过程\n\n解析HTML以构建DOM树 -> 构建Render（渲染）树 -> 布局Render树 -> 绘制Render树\n\n## 网页优化\n\n[毫秒必争，前端网页性能最佳实践](http://www.cnblogs.com/developersupport/p/3248695.html)\n","slug":"URL到展现页面的全过程","published":1,"updated":"2017-02-28T14:39:40.031Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb1u1p6q000f0sq95botmr11","content":"<hr>\n<h2 id=\"url到页面展现的过程\"><a href=\"#url到页面展现的过程\" class=\"headerlink\" title=\"url到页面展现的过程\"></a>url到页面展现的过程</h2><p><a href=\"http://www.cnblogs.com/strick/p/5494869.html\" target=\"_blank\" rel=\"external\">原文地址</a></p>\n<p>1.域名解析     -&gt;         DNS（Domain Name System）位于应用层，提供域名和IP地址之间的解析服务。<br>2.建立tcp连接         传输控制协议<br>3.发起http请求<br>4.服务器响应http请求<br>5.浏览器渲染页面</p>\n<h2 id=\"TCP-IP分为4层\"><a href=\"#TCP-IP分为4层\" class=\"headerlink\" title=\"TCP/IP分为4层:\"></a>TCP/IP分为4层:</h2><p>应用层（HTTP客户端）、传输层（tcp）、网络层（ip）、链路层（网络）</p>\n<p>HTTP（Hyper Text Transfer Protocol），超文本传输协议，由请求和响应构成。</p>\n<h2 id=\"3次握手\"><a href=\"#3次握手\" class=\"headerlink\" title=\"3次握手\"></a>3次握手</h2><p>1）.发送端发送一个带SYN标志的数据包给对方<br>2）.接收端回传一个带SYN（握手信号）和ACK（确认字符）标志的数据包以示传达确认信息<br>3）.发送端再回传一个带ACK标志的数据包，代表握手结束</p>\n<h2 id=\"状态码\"><a href=\"#状态码\" class=\"headerlink\" title=\"状态码:\"></a>状态码:</h2><p>1xx 信息性状态码，接收的请求正在处理<br>2xx 成功状态码，请求正常处理完毕<br>3xx 重定向状态码，需要进行附加操作以完成请求<br>4xx 客户端错误状态码，服务器无法处理请求<br>5xx 服务端错误状态码，服务器处理请求出错</p>\n<h2 id=\"html解析过程\"><a href=\"#html解析过程\" class=\"headerlink\" title=\"html解析过程\"></a>html解析过程</h2><p>解析HTML以构建DOM树 -&gt; 构建Render（渲染）树 -&gt; 布局Render树 -&gt; 绘制Render树</p>\n<h2 id=\"网页优化\"><a href=\"#网页优化\" class=\"headerlink\" title=\"网页优化\"></a>网页优化</h2><p><a href=\"http://www.cnblogs.com/developersupport/p/3248695.html\" target=\"_blank\" rel=\"external\">毫秒必争，前端网页性能最佳实践</a></p>\n","excerpt":"","more":"<hr>\n<h2 id=\"url到页面展现的过程\"><a href=\"#url到页面展现的过程\" class=\"headerlink\" title=\"url到页面展现的过程\"></a>url到页面展现的过程</h2><p><a href=\"http://www.cnblogs.com/strick/p/5494869.html\">原文地址</a></p>\n<p>1.域名解析     -&gt;         DNS（Domain Name System）位于应用层，提供域名和IP地址之间的解析服务。<br>2.建立tcp连接         传输控制协议<br>3.发起http请求<br>4.服务器响应http请求<br>5.浏览器渲染页面</p>\n<h2 id=\"TCP-IP分为4层\"><a href=\"#TCP-IP分为4层\" class=\"headerlink\" title=\"TCP/IP分为4层:\"></a>TCP/IP分为4层:</h2><p>应用层（HTTP客户端）、传输层（tcp）、网络层（ip）、链路层（网络）</p>\n<p>HTTP（Hyper Text Transfer Protocol），超文本传输协议，由请求和响应构成。</p>\n<h2 id=\"3次握手\"><a href=\"#3次握手\" class=\"headerlink\" title=\"3次握手\"></a>3次握手</h2><p>1）.发送端发送一个带SYN标志的数据包给对方<br>2）.接收端回传一个带SYN（握手信号）和ACK（确认字符）标志的数据包以示传达确认信息<br>3）.发送端再回传一个带ACK标志的数据包，代表握手结束</p>\n<h2 id=\"状态码\"><a href=\"#状态码\" class=\"headerlink\" title=\"状态码:\"></a>状态码:</h2><p>1xx 信息性状态码，接收的请求正在处理<br>2xx 成功状态码，请求正常处理完毕<br>3xx 重定向状态码，需要进行附加操作以完成请求<br>4xx 客户端错误状态码，服务器无法处理请求<br>5xx 服务端错误状态码，服务器处理请求出错</p>\n<h2 id=\"html解析过程\"><a href=\"#html解析过程\" class=\"headerlink\" title=\"html解析过程\"></a>html解析过程</h2><p>解析HTML以构建DOM树 -&gt; 构建Render（渲染）树 -&gt; 布局Render树 -&gt; 绘制Render树</p>\n<h2 id=\"网页优化\"><a href=\"#网页优化\" class=\"headerlink\" title=\"网页优化\"></a>网页优化</h2><p><a href=\"http://www.cnblogs.com/developersupport/p/3248695.html\">毫秒必争，前端网页性能最佳实践</a></p>\n"},{"title":"apply_call_bind用法","date":"2016-09-05T13:14:19.000Z","_content":"\n# apply call bind 用法\napply call bind 都是用来改变上下文的this指向的\n## 不同点\ncall和apply一样，直接引用在方法上，而bind绑定this后返回一个方法，但内部核心还是apply。\n## 例子\n```\n    var obj = {\n      a: 1,\n      b: 2,\n      getCount: function(c, d) {\n        return this.a + this.b + c + d;\n      }\n    };\n    window.a = window.b = 0;\n    console.log(obj.getCount(3, 4));  // 10\n    var func = obj.getCount;\n    console.log(func(3, 4)); //7\n```\n上面为何会这样？因为func在上下文中的this是window，bind的存在正是为了改变this指向获取想要的值：\n```\n    var obj = {\n      a: 1,\n      b: 2,\n      getCount: function(c, d) {\n        return this.a + this.b + c + d;\n      }\n    };\n\n    window.a = window.b = 0;\n    var func = obj.getCount.bind(obj);\n    console.log(func(3, 4));  // 10\n```\n- [x] 上面说明：bind是function的一个函数扩展方法，bind以后代码重新绑定了func内部的this指向 `（getCount中的this->bind的obj）`\n\n## 兼容写法\n```\n    var obj = {\n      a: 1,\n      b: 2,\n      getCount: function(c, d) {\n        return this.a + this.b + c + d;\n      }\n    };\n\n    Function.prototype.bind = Function.prototype.bind || function(context) {\n      var that = this;\n      return function() {\n        // console.log(arguments); // console [3,4] if ie<6-8>\n        return that.apply(context, arguments);\n\n      }\n    }\n    window.a = window.b = 0;\n    var func = obj.getCount.bind(obj);\n    console.log(func(3, 4));  // 10\n```\n其实在我看来bind的核心是返回一个未执行的方法，如果直接使用apply或者call：\n```\n    var ans = obj.getCount.call(obj,3,4);\n    console.log(ans); // 10\n    或\n    var ans = obj.getCount.apply(obj, [3, 4]);\n    console.log(ans); // 10\n```\n无法使用简写的func函数构造，所以用bind传递this指向，再返回一个未执行的方法，实现方式相当巧妙。","source":"_posts/apply-call-bind用法.md","raw":"---\ntitle: apply_call_bind用法\ndate: 2016-09-05 21:14:19\ncategories: Javascript\ntags:\n    - Javascript\n---\n\n# apply call bind 用法\napply call bind 都是用来改变上下文的this指向的\n## 不同点\ncall和apply一样，直接引用在方法上，而bind绑定this后返回一个方法，但内部核心还是apply。\n## 例子\n```\n    var obj = {\n      a: 1,\n      b: 2,\n      getCount: function(c, d) {\n        return this.a + this.b + c + d;\n      }\n    };\n    window.a = window.b = 0;\n    console.log(obj.getCount(3, 4));  // 10\n    var func = obj.getCount;\n    console.log(func(3, 4)); //7\n```\n上面为何会这样？因为func在上下文中的this是window，bind的存在正是为了改变this指向获取想要的值：\n```\n    var obj = {\n      a: 1,\n      b: 2,\n      getCount: function(c, d) {\n        return this.a + this.b + c + d;\n      }\n    };\n\n    window.a = window.b = 0;\n    var func = obj.getCount.bind(obj);\n    console.log(func(3, 4));  // 10\n```\n- [x] 上面说明：bind是function的一个函数扩展方法，bind以后代码重新绑定了func内部的this指向 `（getCount中的this->bind的obj）`\n\n## 兼容写法\n```\n    var obj = {\n      a: 1,\n      b: 2,\n      getCount: function(c, d) {\n        return this.a + this.b + c + d;\n      }\n    };\n\n    Function.prototype.bind = Function.prototype.bind || function(context) {\n      var that = this;\n      return function() {\n        // console.log(arguments); // console [3,4] if ie<6-8>\n        return that.apply(context, arguments);\n\n      }\n    }\n    window.a = window.b = 0;\n    var func = obj.getCount.bind(obj);\n    console.log(func(3, 4));  // 10\n```\n其实在我看来bind的核心是返回一个未执行的方法，如果直接使用apply或者call：\n```\n    var ans = obj.getCount.call(obj,3,4);\n    console.log(ans); // 10\n    或\n    var ans = obj.getCount.apply(obj, [3, 4]);\n    console.log(ans); // 10\n```\n无法使用简写的func函数构造，所以用bind传递this指向，再返回一个未执行的方法，实现方式相当巧妙。","slug":"apply-call-bind用法","published":1,"updated":"2016-11-05T13:16:47.188Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb1u1p6x000i0sq9dw6bwnf2","content":"<h1 id=\"apply-call-bind-用法\"><a href=\"#apply-call-bind-用法\" class=\"headerlink\" title=\"apply call bind 用法\"></a>apply call bind 用法</h1><p>apply call bind 都是用来改变上下文的this指向的</p>\n<h2 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h2><p>call和apply一样，直接引用在方法上，而bind绑定this后返回一个方法，但内部核心还是apply。</p>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var obj = &#123;</div><div class=\"line\">  a: 1,</div><div class=\"line\">  b: 2,</div><div class=\"line\">  getCount: function(c, d) &#123;</div><div class=\"line\">    return this.a + this.b + c + d;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">window.a = window.b = 0;</div><div class=\"line\">console.log(obj.getCount(3, 4));  // 10</div><div class=\"line\">var func = obj.getCount;</div><div class=\"line\">console.log(func(3, 4)); //7</div></pre></td></tr></table></figure>\n<p>上面为何会这样？因为func在上下文中的this是window，bind的存在正是为了改变this指向获取想要的值：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var obj = &#123;</div><div class=\"line\">  a: 1,</div><div class=\"line\">  b: 2,</div><div class=\"line\">  getCount: function(c, d) &#123;</div><div class=\"line\">    return this.a + this.b + c + d;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">window.a = window.b = 0;</div><div class=\"line\">var func = obj.getCount.bind(obj);</div><div class=\"line\">console.log(func(3, 4));  // 10</div></pre></td></tr></table></figure></p>\n<ul>\n<li>[x] 上面说明：bind是function的一个函数扩展方法，bind以后代码重新绑定了func内部的this指向 <code>（getCount中的this-&gt;bind的obj）</code></li>\n</ul>\n<h2 id=\"兼容写法\"><a href=\"#兼容写法\" class=\"headerlink\" title=\"兼容写法\"></a>兼容写法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">var obj = &#123;</div><div class=\"line\">  a: 1,</div><div class=\"line\">  b: 2,</div><div class=\"line\">  getCount: function(c, d) &#123;</div><div class=\"line\">    return this.a + this.b + c + d;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">Function.prototype.bind = Function.prototype.bind || function(context) &#123;</div><div class=\"line\">  var that = this;</div><div class=\"line\">  return function() &#123;</div><div class=\"line\">    // console.log(arguments); // console [3,4] if ie&lt;6-8&gt;</div><div class=\"line\">    return that.apply(context, arguments);</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">window.a = window.b = 0;</div><div class=\"line\">var func = obj.getCount.bind(obj);</div><div class=\"line\">console.log(func(3, 4));  // 10</div></pre></td></tr></table></figure>\n<p>其实在我看来bind的核心是返回一个未执行的方法，如果直接使用apply或者call：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var ans = obj.getCount.call(obj,3,4);</div><div class=\"line\">console.log(ans); // 10</div><div class=\"line\">或</div><div class=\"line\">var ans = obj.getCount.apply(obj, [3, 4]);</div><div class=\"line\">console.log(ans); // 10</div></pre></td></tr></table></figure></p>\n<p>无法使用简写的func函数构造，所以用bind传递this指向，再返回一个未执行的方法，实现方式相当巧妙。</p>\n","excerpt":"","more":"<h1 id=\"apply-call-bind-用法\"><a href=\"#apply-call-bind-用法\" class=\"headerlink\" title=\"apply call bind 用法\"></a>apply call bind 用法</h1><p>apply call bind 都是用来改变上下文的this指向的</p>\n<h2 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h2><p>call和apply一样，直接引用在方法上，而bind绑定this后返回一个方法，但内部核心还是apply。</p>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var obj = &#123;</div><div class=\"line\">  a: 1,</div><div class=\"line\">  b: 2,</div><div class=\"line\">  getCount: function(c, d) &#123;</div><div class=\"line\">    return this.a + this.b + c + d;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">window.a = window.b = 0;</div><div class=\"line\">console.log(obj.getCount(3, 4));  // 10</div><div class=\"line\">var func = obj.getCount;</div><div class=\"line\">console.log(func(3, 4)); //7</div></pre></td></tr></table></figure>\n<p>上面为何会这样？因为func在上下文中的this是window，bind的存在正是为了改变this指向获取想要的值：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var obj = &#123;</div><div class=\"line\">  a: 1,</div><div class=\"line\">  b: 2,</div><div class=\"line\">  getCount: function(c, d) &#123;</div><div class=\"line\">    return this.a + this.b + c + d;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">window.a = window.b = 0;</div><div class=\"line\">var func = obj.getCount.bind(obj);</div><div class=\"line\">console.log(func(3, 4));  // 10</div></pre></td></tr></table></figure></p>\n<ul>\n<li>[x] 上面说明：bind是function的一个函数扩展方法，bind以后代码重新绑定了func内部的this指向 <code>（getCount中的this-&gt;bind的obj）</code></li>\n</ul>\n<h2 id=\"兼容写法\"><a href=\"#兼容写法\" class=\"headerlink\" title=\"兼容写法\"></a>兼容写法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">var obj = &#123;</div><div class=\"line\">  a: 1,</div><div class=\"line\">  b: 2,</div><div class=\"line\">  getCount: function(c, d) &#123;</div><div class=\"line\">    return this.a + this.b + c + d;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">Function.prototype.bind = Function.prototype.bind || function(context) &#123;</div><div class=\"line\">  var that = this;</div><div class=\"line\">  return function() &#123;</div><div class=\"line\">    // console.log(arguments); // console [3,4] if ie&lt;6-8&gt;</div><div class=\"line\">    return that.apply(context, arguments);</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">window.a = window.b = 0;</div><div class=\"line\">var func = obj.getCount.bind(obj);</div><div class=\"line\">console.log(func(3, 4));  // 10</div></pre></td></tr></table></figure>\n<p>其实在我看来bind的核心是返回一个未执行的方法，如果直接使用apply或者call：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var ans = obj.getCount.call(obj,3,4);</div><div class=\"line\">console.log(ans); // 10</div><div class=\"line\">或</div><div class=\"line\">var ans = obj.getCount.apply(obj, [3, 4]);</div><div class=\"line\">console.log(ans); // 10</div></pre></td></tr></table></figure></p>\n<p>无法使用简写的func函数构造，所以用bind传递this指向，再返回一个未执行的方法，实现方式相当巧妙。</p>\n"},{"title":"javascript内存泄漏","date":"2017-08-24T02:01:38.000Z","_content":"# 内存泄漏\n\n## 简介(先来堆废话)\n\n内存泄漏（Memory Leak）是指程序中己动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。\n\n内存泄漏缺陷具有隐蔽性、积累性的特征，比其他内存非法访问错误更难检测。因为内存泄漏的产生原因是内存块未被释放，属于遗漏型缺陷而不是过错型缺陷。此外，内存泄漏通常不会直接产生可观察的错误症状，而是逐渐积累，降低系统整体性能，极端的情况下可能使系统崩溃。\n\n随着计算机应用需求的日益增加，应用程序的设计与开发也相应的日趋复杂，开发人员在程序实现的过程中处理的变量也大量增加，如何有效进行内存分配和释放，防止内存泄漏的问题变得越来越突出。例如服务器应用软件，需要长时间的运行，不断的处理由客户端发来的请求，如果没有有效的内存管理，每处理一次请求信息就有一定的内存泄漏。这样不仅影响到服务器的性能，还可能造成整个系统的崩溃。因此，内存管理成为软件设计开发人员在设计中考虑的主要方面.\n\n## 原因\n\n1. 常发性内存泄漏\n\n发生内存泄漏的代码会被多次执行到，每次被执行时都会导致一块内存泄漏。\n\n2. 偶发性内存泄漏\n\n发生内存泄漏的代码只有在某些特定环境或操作过程下才会发生。常发性和偶发性是相对的。对于特定的环境，偶发性的也许就变成了常发性的。所以测试环境和测试方法对检测内存泄漏至关重要。\n\n3. 一次性内存泄漏\n\n发生内存泄漏的代码只会被执行一次，或者由于算法上的缺陷，导致总会有一块且仅有一块内存发生泄漏。\n\n4. 隐式内存泄漏\n\n程序在运行过程中不停的分配内存，但是直到结束的时候才释放内存。严格的说这里并没有发生内存泄漏，因为最终程序释放了所有申请的内存。但是对于一个服务器程序，需要运行几天，几周甚至几个月，不及时释放内存也可能导致最终耗尽系统的所有内存。所以，我们称这类内存泄漏为隐式内存泄漏。从用户使用程序的角度来看，内存泄漏本身不会产生什么危害，作为一般的用户，根本感觉不到内存泄漏的存在。真正有危害的是内存泄漏的堆积，这会最终耗尽系统所有的内存。从这个角度来说，一次性内存泄漏并没有什么危害，因为它不会堆积，而隐式内存泄漏危害性则非常大，因为较之于常发性和偶发性内存泄漏它更难被检测到。\n\n-[x] <span style=\"color:red\">总而言之,就是没有及时的释放内存</span>\n\n## 简单例子\n\n```javascript 1.8\nfunction a() {\n  var dom = document.getElementById(\"dom\");\n  dom.onclick = function () { \n      console.log(dom.id)\n   }\n}\n//以上代码在执行完以后不会被垃圾回收机制清除\nfunction a() {\n  var dom = document.getElementById(\"dom\");\n  dom.onclick = function () { \n      console.log(dom.id)\n   }\n   dom = null;\n}\n//以上就会动态的销毁,从而减少其引用次数\n```\n\n\n\n\n\n\n\n\n\n","source":"_posts/javascript内存泄漏.md","raw":"---\ntitle: javascript内存泄漏\ndate: 2017-08-24 10:01:38\ncategories: Javascript\ntags:\n     - Javascript\n---\n# 内存泄漏\n\n## 简介(先来堆废话)\n\n内存泄漏（Memory Leak）是指程序中己动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。\n\n内存泄漏缺陷具有隐蔽性、积累性的特征，比其他内存非法访问错误更难检测。因为内存泄漏的产生原因是内存块未被释放，属于遗漏型缺陷而不是过错型缺陷。此外，内存泄漏通常不会直接产生可观察的错误症状，而是逐渐积累，降低系统整体性能，极端的情况下可能使系统崩溃。\n\n随着计算机应用需求的日益增加，应用程序的设计与开发也相应的日趋复杂，开发人员在程序实现的过程中处理的变量也大量增加，如何有效进行内存分配和释放，防止内存泄漏的问题变得越来越突出。例如服务器应用软件，需要长时间的运行，不断的处理由客户端发来的请求，如果没有有效的内存管理，每处理一次请求信息就有一定的内存泄漏。这样不仅影响到服务器的性能，还可能造成整个系统的崩溃。因此，内存管理成为软件设计开发人员在设计中考虑的主要方面.\n\n## 原因\n\n1. 常发性内存泄漏\n\n发生内存泄漏的代码会被多次执行到，每次被执行时都会导致一块内存泄漏。\n\n2. 偶发性内存泄漏\n\n发生内存泄漏的代码只有在某些特定环境或操作过程下才会发生。常发性和偶发性是相对的。对于特定的环境，偶发性的也许就变成了常发性的。所以测试环境和测试方法对检测内存泄漏至关重要。\n\n3. 一次性内存泄漏\n\n发生内存泄漏的代码只会被执行一次，或者由于算法上的缺陷，导致总会有一块且仅有一块内存发生泄漏。\n\n4. 隐式内存泄漏\n\n程序在运行过程中不停的分配内存，但是直到结束的时候才释放内存。严格的说这里并没有发生内存泄漏，因为最终程序释放了所有申请的内存。但是对于一个服务器程序，需要运行几天，几周甚至几个月，不及时释放内存也可能导致最终耗尽系统的所有内存。所以，我们称这类内存泄漏为隐式内存泄漏。从用户使用程序的角度来看，内存泄漏本身不会产生什么危害，作为一般的用户，根本感觉不到内存泄漏的存在。真正有危害的是内存泄漏的堆积，这会最终耗尽系统所有的内存。从这个角度来说，一次性内存泄漏并没有什么危害，因为它不会堆积，而隐式内存泄漏危害性则非常大，因为较之于常发性和偶发性内存泄漏它更难被检测到。\n\n-[x] <span style=\"color:red\">总而言之,就是没有及时的释放内存</span>\n\n## 简单例子\n\n```javascript 1.8\nfunction a() {\n  var dom = document.getElementById(\"dom\");\n  dom.onclick = function () { \n      console.log(dom.id)\n   }\n}\n//以上代码在执行完以后不会被垃圾回收机制清除\nfunction a() {\n  var dom = document.getElementById(\"dom\");\n  dom.onclick = function () { \n      console.log(dom.id)\n   }\n   dom = null;\n}\n//以上就会动态的销毁,从而减少其引用次数\n```\n\n\n\n\n\n\n\n\n\n","slug":"javascript内存泄漏","published":1,"updated":"2017-09-19T09:13:05.491Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb1u1p71000k0sq9eyx7ht3m","content":"<h1 id=\"内存泄漏\"><a href=\"#内存泄漏\" class=\"headerlink\" title=\"内存泄漏\"></a>内存泄漏</h1><h2 id=\"简介-先来堆废话\"><a href=\"#简介-先来堆废话\" class=\"headerlink\" title=\"简介(先来堆废话)\"></a>简介(先来堆废话)</h2><p>内存泄漏（Memory Leak）是指程序中己动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。</p>\n<p>内存泄漏缺陷具有隐蔽性、积累性的特征，比其他内存非法访问错误更难检测。因为内存泄漏的产生原因是内存块未被释放，属于遗漏型缺陷而不是过错型缺陷。此外，内存泄漏通常不会直接产生可观察的错误症状，而是逐渐积累，降低系统整体性能，极端的情况下可能使系统崩溃。</p>\n<p>随着计算机应用需求的日益增加，应用程序的设计与开发也相应的日趋复杂，开发人员在程序实现的过程中处理的变量也大量增加，如何有效进行内存分配和释放，防止内存泄漏的问题变得越来越突出。例如服务器应用软件，需要长时间的运行，不断的处理由客户端发来的请求，如果没有有效的内存管理，每处理一次请求信息就有一定的内存泄漏。这样不仅影响到服务器的性能，还可能造成整个系统的崩溃。因此，内存管理成为软件设计开发人员在设计中考虑的主要方面.</p>\n<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><ol>\n<li>常发性内存泄漏</li>\n</ol>\n<p>发生内存泄漏的代码会被多次执行到，每次被执行时都会导致一块内存泄漏。</p>\n<ol>\n<li>偶发性内存泄漏</li>\n</ol>\n<p>发生内存泄漏的代码只有在某些特定环境或操作过程下才会发生。常发性和偶发性是相对的。对于特定的环境，偶发性的也许就变成了常发性的。所以测试环境和测试方法对检测内存泄漏至关重要。</p>\n<ol>\n<li>一次性内存泄漏</li>\n</ol>\n<p>发生内存泄漏的代码只会被执行一次，或者由于算法上的缺陷，导致总会有一块且仅有一块内存发生泄漏。</p>\n<ol>\n<li>隐式内存泄漏</li>\n</ol>\n<p>程序在运行过程中不停的分配内存，但是直到结束的时候才释放内存。严格的说这里并没有发生内存泄漏，因为最终程序释放了所有申请的内存。但是对于一个服务器程序，需要运行几天，几周甚至几个月，不及时释放内存也可能导致最终耗尽系统的所有内存。所以，我们称这类内存泄漏为隐式内存泄漏。从用户使用程序的角度来看，内存泄漏本身不会产生什么危害，作为一般的用户，根本感觉不到内存泄漏的存在。真正有危害的是内存泄漏的堆积，这会最终耗尽系统所有的内存。从这个角度来说，一次性内存泄漏并没有什么危害，因为它不会堆积，而隐式内存泄漏危害性则非常大，因为较之于常发性和偶发性内存泄漏它更难被检测到。</p>\n<p>-[x] <span style=\"color:red\">总而言之,就是没有及时的释放内存</span></p>\n<h2 id=\"简单例子\"><a href=\"#简单例子\" class=\"headerlink\" title=\"简单例子\"></a>简单例子</h2><figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> dom = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"dom\"</span>);</div><div class=\"line\">  dom.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">      <span class=\"built_in\">console</span>.log(dom.id)</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//以上代码在执行完以后不会被垃圾回收机制清除</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> dom = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"dom\"</span>);</div><div class=\"line\">  dom.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">      <span class=\"built_in\">console</span>.log(dom.id)</div><div class=\"line\">   &#125;</div><div class=\"line\">   dom = <span class=\"literal\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//以上就会动态的销毁,从而减少其引用次数</span></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"内存泄漏\"><a href=\"#内存泄漏\" class=\"headerlink\" title=\"内存泄漏\"></a>内存泄漏</h1><h2 id=\"简介-先来堆废话\"><a href=\"#简介-先来堆废话\" class=\"headerlink\" title=\"简介(先来堆废话)\"></a>简介(先来堆废话)</h2><p>内存泄漏（Memory Leak）是指程序中己动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。</p>\n<p>内存泄漏缺陷具有隐蔽性、积累性的特征，比其他内存非法访问错误更难检测。因为内存泄漏的产生原因是内存块未被释放，属于遗漏型缺陷而不是过错型缺陷。此外，内存泄漏通常不会直接产生可观察的错误症状，而是逐渐积累，降低系统整体性能，极端的情况下可能使系统崩溃。</p>\n<p>随着计算机应用需求的日益增加，应用程序的设计与开发也相应的日趋复杂，开发人员在程序实现的过程中处理的变量也大量增加，如何有效进行内存分配和释放，防止内存泄漏的问题变得越来越突出。例如服务器应用软件，需要长时间的运行，不断的处理由客户端发来的请求，如果没有有效的内存管理，每处理一次请求信息就有一定的内存泄漏。这样不仅影响到服务器的性能，还可能造成整个系统的崩溃。因此，内存管理成为软件设计开发人员在设计中考虑的主要方面.</p>\n<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><ol>\n<li>常发性内存泄漏</li>\n</ol>\n<p>发生内存泄漏的代码会被多次执行到，每次被执行时都会导致一块内存泄漏。</p>\n<ol>\n<li>偶发性内存泄漏</li>\n</ol>\n<p>发生内存泄漏的代码只有在某些特定环境或操作过程下才会发生。常发性和偶发性是相对的。对于特定的环境，偶发性的也许就变成了常发性的。所以测试环境和测试方法对检测内存泄漏至关重要。</p>\n<ol>\n<li>一次性内存泄漏</li>\n</ol>\n<p>发生内存泄漏的代码只会被执行一次，或者由于算法上的缺陷，导致总会有一块且仅有一块内存发生泄漏。</p>\n<ol>\n<li>隐式内存泄漏</li>\n</ol>\n<p>程序在运行过程中不停的分配内存，但是直到结束的时候才释放内存。严格的说这里并没有发生内存泄漏，因为最终程序释放了所有申请的内存。但是对于一个服务器程序，需要运行几天，几周甚至几个月，不及时释放内存也可能导致最终耗尽系统的所有内存。所以，我们称这类内存泄漏为隐式内存泄漏。从用户使用程序的角度来看，内存泄漏本身不会产生什么危害，作为一般的用户，根本感觉不到内存泄漏的存在。真正有危害的是内存泄漏的堆积，这会最终耗尽系统所有的内存。从这个角度来说，一次性内存泄漏并没有什么危害，因为它不会堆积，而隐式内存泄漏危害性则非常大，因为较之于常发性和偶发性内存泄漏它更难被检测到。</p>\n<p>-[x] <span style=\"color:red\">总而言之,就是没有及时的释放内存</span></p>\n<h2 id=\"简单例子\"><a href=\"#简单例子\" class=\"headerlink\" title=\"简单例子\"></a>简单例子</h2><figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> dom = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"dom\"</span>);</div><div class=\"line\">  dom.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">      <span class=\"built_in\">console</span>.log(dom.id)</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//以上代码在执行完以后不会被垃圾回收机制清除</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> dom = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"dom\"</span>);</div><div class=\"line\">  dom.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">      <span class=\"built_in\">console</span>.log(dom.id)</div><div class=\"line\">   &#125;</div><div class=\"line\">   dom = <span class=\"literal\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//以上就会动态的销毁,从而减少其引用次数</span></div></pre></td></tr></table></figure>\n"},{"title":"es6 async解析","date":"2017-08-03T06:06:40.000Z","_content":"\n# async 函数\n\nasync函数就是将 Generator 函数的星号（*）替换成async，将yield替换成await，仅此而已\n\n## Generator 函数读取文件例子\n\n```javascript 1.8\n    var fs = require('fs');\n    var readFile = function (fileName) {\n      return new Promise(function (resolve, reject) {\n        fs.readFile(fileName, function(error, data) {\n          if (error) return reject(error);\n          resolve(data);\n        });\n      });\n    };\n    \n    var gen = function* () {\n      var f1 = yield readFile('/etc/fstab');\n      var f2 = yield readFile('/etc/shells');\n      console.log(f1.toString());\n      console.log(f2.toString());\n    };\n```\n\n## async 函数改写\n\n```javascript 1.8\n    var asyncReadFile = async function () {\n      var f1 = await readFile('/etc/fstab');\n      var f2 = await readFile('/etc/shells');\n      console.log(f1.toString());\n      console.log(f2.toString());\n    };\n```\n\n## async 函数优点\n\n1. 内置执行器,不用像Generator函数一样调用next()方法\n\n2. 更好的语义\n\n3. 更广的适用性\n   yield命令后面只能是 Thunk 函数或 Promise 对象，而async函数的await命令后面，可以是Promise 对象和原始类型的值（数值、字符串和布尔值，但这时等同于同步操作(相当于直接返回Promise.resolve(\"成功了\"))\n\n4. 返回值是 Promise 可以进行链式调用(.then(function(res){}))\n\n## async 实例\n\n```javascript 1.8\n    function a(){\n      return new Promise(function(resolve,reject){\n         setTimeout(function(){\n           console.log(\"-------\")\n            //resolve({name:\"caicai\",age:12})\n            //reject(\"错误\")\n         },2000)\n      })\n    }\n    async function getName(){\n      try {\n          let name = await a()\n          console.log(name)\n      }catch (e){\n          console.log(e)\n      }\n      let age = await \"20\";\n      return age\n    }\n    \n    getName().then(function(res){\n      console.log(res) // 若有return则返回return的结果,没有则为undefined\n    })\n    \n    //运行结果:\n    //resolve的结果\n        //-------\n        //Object {name: \"caicai\", age: 12}\n        //20\n    //reject的结果\n        //-------\n        //错误\n        //20\n```\n\n## 结论 \n\n1. await后面的代码,需要等待await的结果\n\n2. await后面的表达式,可以为任意类型\n\n3. 如果使用return语句会返回return的结果,在.then回调中可以取到,若不使用return,则返回undefined\n\n4. 如果await的结果返回为reject(),则不会执行后面的代码\n\n5. 在写await操作的时候,判断是否可能会失败,如果可能失败,则用try{ }catch (e){ }块捕获异常,可以让下面的代码正常执行","source":"_posts/es6-async解析.md","raw":"---\ntitle: es6 async解析\ndate: 2017-08-03 14:06:40\ncategories: ES6\ntags:\n    - ES6\n---\n\n# async 函数\n\nasync函数就是将 Generator 函数的星号（*）替换成async，将yield替换成await，仅此而已\n\n## Generator 函数读取文件例子\n\n```javascript 1.8\n    var fs = require('fs');\n    var readFile = function (fileName) {\n      return new Promise(function (resolve, reject) {\n        fs.readFile(fileName, function(error, data) {\n          if (error) return reject(error);\n          resolve(data);\n        });\n      });\n    };\n    \n    var gen = function* () {\n      var f1 = yield readFile('/etc/fstab');\n      var f2 = yield readFile('/etc/shells');\n      console.log(f1.toString());\n      console.log(f2.toString());\n    };\n```\n\n## async 函数改写\n\n```javascript 1.8\n    var asyncReadFile = async function () {\n      var f1 = await readFile('/etc/fstab');\n      var f2 = await readFile('/etc/shells');\n      console.log(f1.toString());\n      console.log(f2.toString());\n    };\n```\n\n## async 函数优点\n\n1. 内置执行器,不用像Generator函数一样调用next()方法\n\n2. 更好的语义\n\n3. 更广的适用性\n   yield命令后面只能是 Thunk 函数或 Promise 对象，而async函数的await命令后面，可以是Promise 对象和原始类型的值（数值、字符串和布尔值，但这时等同于同步操作(相当于直接返回Promise.resolve(\"成功了\"))\n\n4. 返回值是 Promise 可以进行链式调用(.then(function(res){}))\n\n## async 实例\n\n```javascript 1.8\n    function a(){\n      return new Promise(function(resolve,reject){\n         setTimeout(function(){\n           console.log(\"-------\")\n            //resolve({name:\"caicai\",age:12})\n            //reject(\"错误\")\n         },2000)\n      })\n    }\n    async function getName(){\n      try {\n          let name = await a()\n          console.log(name)\n      }catch (e){\n          console.log(e)\n      }\n      let age = await \"20\";\n      return age\n    }\n    \n    getName().then(function(res){\n      console.log(res) // 若有return则返回return的结果,没有则为undefined\n    })\n    \n    //运行结果:\n    //resolve的结果\n        //-------\n        //Object {name: \"caicai\", age: 12}\n        //20\n    //reject的结果\n        //-------\n        //错误\n        //20\n```\n\n## 结论 \n\n1. await后面的代码,需要等待await的结果\n\n2. await后面的表达式,可以为任意类型\n\n3. 如果使用return语句会返回return的结果,在.then回调中可以取到,若不使用return,则返回undefined\n\n4. 如果await的结果返回为reject(),则不会执行后面的代码\n\n5. 在写await操作的时候,判断是否可能会失败,如果可能失败,则用try{ }catch (e){ }块捕获异常,可以让下面的代码正常执行","slug":"es6-async解析","published":1,"updated":"2017-08-03T06:42:37.156Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb1u1p7d000p0sq99yexz417","content":"<h1 id=\"async-函数\"><a href=\"#async-函数\" class=\"headerlink\" title=\"async 函数\"></a>async 函数</h1><p>async函数就是将 Generator 函数的星号（*）替换成async，将yield替换成await，仅此而已</p>\n<h2 id=\"Generator-函数读取文件例子\"><a href=\"#Generator-函数读取文件例子\" class=\"headerlink\" title=\"Generator 函数读取文件例子\"></a>Generator 函数读取文件例子</h2><figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> readFile = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fileName</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">    fs.readFile(fileName, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, data</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (error) <span class=\"keyword\">return</span> reject(error);</div><div class=\"line\">      resolve(data);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> gen = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> f1 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'/etc/fstab'</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> f2 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'/etc/shells'</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(f1.toString());</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(f2.toString());</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"async-函数改写\"><a href=\"#async-函数改写\" class=\"headerlink\" title=\"async 函数改写\"></a>async 函数改写</h2><figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> asyncReadFile = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> f1 = <span class=\"keyword\">await</span> readFile(<span class=\"string\">'/etc/fstab'</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> f2 = <span class=\"keyword\">await</span> readFile(<span class=\"string\">'/etc/shells'</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(f1.toString());</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(f2.toString());</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"async-函数优点\"><a href=\"#async-函数优点\" class=\"headerlink\" title=\"async 函数优点\"></a>async 函数优点</h2><ol>\n<li><p>内置执行器,不用像Generator函数一样调用next()方法</p>\n</li>\n<li><p>更好的语义</p>\n</li>\n<li><p>更广的适用性<br>yield命令后面只能是 Thunk 函数或 Promise 对象，而async函数的await命令后面，可以是Promise 对象和原始类型的值（数值、字符串和布尔值，但这时等同于同步操作(相当于直接返回Promise.resolve(“成功了”))</p>\n</li>\n<li><p>返回值是 Promise 可以进行链式调用(.then(function(res){}))</p>\n</li>\n</ol>\n<h2 id=\"async-实例\"><a href=\"#async-实例\" class=\"headerlink\" title=\"async 实例\"></a>async 实例</h2><figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</div><div class=\"line\">     setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"string\">\"-------\"</span>)</div><div class=\"line\">        <span class=\"comment\">//resolve(&#123;name:\"caicai\",age:12&#125;)</span></div><div class=\"line\">        <span class=\"comment\">//reject(\"错误\")</span></div><div class=\"line\">     &#125;,<span class=\"number\">2000</span>)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">let</span> name = <span class=\"keyword\">await</span> a()</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(name)</div><div class=\"line\">  &#125;<span class=\"keyword\">catch</span> (e)&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(e)</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">let</span> age = <span class=\"keyword\">await</span> <span class=\"string\">\"20\"</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> age</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">getName().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(res) <span class=\"comment\">// 若有return则返回return的结果,没有则为undefined</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//运行结果:</span></div><div class=\"line\"><span class=\"comment\">//resolve的结果</span></div><div class=\"line\">    <span class=\"comment\">//-------</span></div><div class=\"line\">    <span class=\"comment\">//Object &#123;name: \"caicai\", age: 12&#125;</span></div><div class=\"line\">    <span class=\"comment\">//20</span></div><div class=\"line\"><span class=\"comment\">//reject的结果</span></div><div class=\"line\">    <span class=\"comment\">//-------</span></div><div class=\"line\">    <span class=\"comment\">//错误</span></div><div class=\"line\">    <span class=\"comment\">//20</span></div></pre></td></tr></table></figure>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><ol>\n<li><p>await后面的代码,需要等待await的结果</p>\n</li>\n<li><p>await后面的表达式,可以为任意类型</p>\n</li>\n<li><p>如果使用return语句会返回return的结果,在.then回调中可以取到,若不使用return,则返回undefined</p>\n</li>\n<li><p>如果await的结果返回为reject(),则不会执行后面的代码</p>\n</li>\n<li><p>在写await操作的时候,判断是否可能会失败,如果可能失败,则用try{ }catch (e){ }块捕获异常,可以让下面的代码正常执行</p>\n</li>\n</ol>\n","excerpt":"","more":"<h1 id=\"async-函数\"><a href=\"#async-函数\" class=\"headerlink\" title=\"async 函数\"></a>async 函数</h1><p>async函数就是将 Generator 函数的星号（*）替换成async，将yield替换成await，仅此而已</p>\n<h2 id=\"Generator-函数读取文件例子\"><a href=\"#Generator-函数读取文件例子\" class=\"headerlink\" title=\"Generator 函数读取文件例子\"></a>Generator 函数读取文件例子</h2><figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> readFile = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fileName</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">    fs.readFile(fileName, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, data</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (error) <span class=\"keyword\">return</span> reject(error);</div><div class=\"line\">      resolve(data);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> gen = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> f1 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'/etc/fstab'</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> f2 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'/etc/shells'</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(f1.toString());</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(f2.toString());</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"async-函数改写\"><a href=\"#async-函数改写\" class=\"headerlink\" title=\"async 函数改写\"></a>async 函数改写</h2><figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> asyncReadFile = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> f1 = <span class=\"keyword\">await</span> readFile(<span class=\"string\">'/etc/fstab'</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> f2 = <span class=\"keyword\">await</span> readFile(<span class=\"string\">'/etc/shells'</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(f1.toString());</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(f2.toString());</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"async-函数优点\"><a href=\"#async-函数优点\" class=\"headerlink\" title=\"async 函数优点\"></a>async 函数优点</h2><ol>\n<li><p>内置执行器,不用像Generator函数一样调用next()方法</p>\n</li>\n<li><p>更好的语义</p>\n</li>\n<li><p>更广的适用性<br>yield命令后面只能是 Thunk 函数或 Promise 对象，而async函数的await命令后面，可以是Promise 对象和原始类型的值（数值、字符串和布尔值，但这时等同于同步操作(相当于直接返回Promise.resolve(“成功了”))</p>\n</li>\n<li><p>返回值是 Promise 可以进行链式调用(.then(function(res){}))</p>\n</li>\n</ol>\n<h2 id=\"async-实例\"><a href=\"#async-实例\" class=\"headerlink\" title=\"async 实例\"></a>async 实例</h2><figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</div><div class=\"line\">     setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"string\">\"-------\"</span>)</div><div class=\"line\">        <span class=\"comment\">//resolve(&#123;name:\"caicai\",age:12&#125;)</span></div><div class=\"line\">        <span class=\"comment\">//reject(\"错误\")</span></div><div class=\"line\">     &#125;,<span class=\"number\">2000</span>)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">let</span> name = <span class=\"keyword\">await</span> a()</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(name)</div><div class=\"line\">  &#125;<span class=\"keyword\">catch</span> (e)&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(e)</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">let</span> age = <span class=\"keyword\">await</span> <span class=\"string\">\"20\"</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> age</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">getName().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(res) <span class=\"comment\">// 若有return则返回return的结果,没有则为undefined</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//运行结果:</span></div><div class=\"line\"><span class=\"comment\">//resolve的结果</span></div><div class=\"line\">    <span class=\"comment\">//-------</span></div><div class=\"line\">    <span class=\"comment\">//Object &#123;name: \"caicai\", age: 12&#125;</span></div><div class=\"line\">    <span class=\"comment\">//20</span></div><div class=\"line\"><span class=\"comment\">//reject的结果</span></div><div class=\"line\">    <span class=\"comment\">//-------</span></div><div class=\"line\">    <span class=\"comment\">//错误</span></div><div class=\"line\">    <span class=\"comment\">//20</span></div></pre></td></tr></table></figure>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><ol>\n<li><p>await后面的代码,需要等待await的结果</p>\n</li>\n<li><p>await后面的表达式,可以为任意类型</p>\n</li>\n<li><p>如果使用return语句会返回return的结果,在.then回调中可以取到,若不使用return,则返回undefined</p>\n</li>\n<li><p>如果await的结果返回为reject(),则不会执行后面的代码</p>\n</li>\n<li><p>在写await操作的时候,判断是否可能会失败,如果可能失败,则用try{ }catch (e){ }块捕获异常,可以让下面的代码正常执行</p>\n</li>\n</ol>\n"},{"title":"module.exports和exports的区别","date":"2016-08-15T12:48:46.000Z","_content":"\nmodule.exports和exports的区别一直很困扰我,看过几次也一直忘记，今天在学习nodeJs时，又看到这两个玩意,看到这里又困惑了，于是专门花了一点时间又研究了下这两个玩意，顿时茅塞顿开，以此笔记来见证我的理解，废话不多说了，也不会说。。。看下面的代码吧！！！\n# module.exports和exports的区别\n\n## node 控制台直接打印console.log(module)\n\n```javascript\n{\n  id: '.',\n  exports: {},\n  parent: null,\n  filename: '/home/sa/Desktop/node_study/module/module.js',\n  loaded: false,\n  children: [],\n  paths:[ '/home/sa/Desktop/node_study/module/node_modules',\n     '/home/sa/Desktop/node_study/node_modules',\n     '/home/sa/Desktop/node_modules',\n     '/home/sa/node_modules',\n     '/home/node_modules']\n }\n```\n## node 控制台直接打印console.log(exports)\n\n```javascript\n{}\n```\n## 在来看个例子\n\n```javascript\nvar a = { name : 1 };\nvar b = a;\nconsole.log(a) //{name:1}\nconsole.log(b) //{name:1}\n\nb.name = 2;\nconsole.log(a) //{name:2}\nconsole.log(b) //{name:2}\n\nvar b = {name:3};\nconsole.log(a) //{name:2}\nconsole.log(b) //{name:3}\n```\n\n解释：a 是一个对象，b 是对 a 的引用，即 a 和 b 指向同一块内存，所以前两个输出一样。当对 b 作修改时，即 a 和 b 指向同一块内存地址的内容发生了改变，所以 a 也会体现出来，所以第三四个输出一样。当 b 被覆盖时，b 指向了一块新的内存，a 还是指向原来的内存，所以最后两个输出不一样。\n<br />\n明白了上述例子后，我们只需知道三点就知道 exports 和 module.exports 的区别了：\n\n> * module.exports 初始值为一个空对象 {}\n> * exports 是指向的 module.exports 的引用\n> * require() 返回的是 module.exports 而不是 export\n\n# 结论\n\n> * exports = module.exports = { }\n> * exports = { } 将会指向一块新的内存，不能用这种方式导出模块\n> * exports.xxx = { } 将会指向同一块内存，可以用这种方式导出模块\n> * 如果用第二种方式导出模块，最后加上 module.exports = exports 重新赋值，一样可以达到导出模块的效果\n","source":"_posts/module-exports和exports的区别.md","raw":"---\ntitle: module.exports和exports的区别\ndate: 2016-08-15 20:48:46\ncategories: Javascript\ntags:\n    - Javascript\n---\n\nmodule.exports和exports的区别一直很困扰我,看过几次也一直忘记，今天在学习nodeJs时，又看到这两个玩意,看到这里又困惑了，于是专门花了一点时间又研究了下这两个玩意，顿时茅塞顿开，以此笔记来见证我的理解，废话不多说了，也不会说。。。看下面的代码吧！！！\n# module.exports和exports的区别\n\n## node 控制台直接打印console.log(module)\n\n```javascript\n{\n  id: '.',\n  exports: {},\n  parent: null,\n  filename: '/home/sa/Desktop/node_study/module/module.js',\n  loaded: false,\n  children: [],\n  paths:[ '/home/sa/Desktop/node_study/module/node_modules',\n     '/home/sa/Desktop/node_study/node_modules',\n     '/home/sa/Desktop/node_modules',\n     '/home/sa/node_modules',\n     '/home/node_modules']\n }\n```\n## node 控制台直接打印console.log(exports)\n\n```javascript\n{}\n```\n## 在来看个例子\n\n```javascript\nvar a = { name : 1 };\nvar b = a;\nconsole.log(a) //{name:1}\nconsole.log(b) //{name:1}\n\nb.name = 2;\nconsole.log(a) //{name:2}\nconsole.log(b) //{name:2}\n\nvar b = {name:3};\nconsole.log(a) //{name:2}\nconsole.log(b) //{name:3}\n```\n\n解释：a 是一个对象，b 是对 a 的引用，即 a 和 b 指向同一块内存，所以前两个输出一样。当对 b 作修改时，即 a 和 b 指向同一块内存地址的内容发生了改变，所以 a 也会体现出来，所以第三四个输出一样。当 b 被覆盖时，b 指向了一块新的内存，a 还是指向原来的内存，所以最后两个输出不一样。\n<br />\n明白了上述例子后，我们只需知道三点就知道 exports 和 module.exports 的区别了：\n\n> * module.exports 初始值为一个空对象 {}\n> * exports 是指向的 module.exports 的引用\n> * require() 返回的是 module.exports 而不是 export\n\n# 结论\n\n> * exports = module.exports = { }\n> * exports = { } 将会指向一块新的内存，不能用这种方式导出模块\n> * exports.xxx = { } 将会指向同一块内存，可以用这种方式导出模块\n> * 如果用第二种方式导出模块，最后加上 module.exports = exports 重新赋值，一样可以达到导出模块的效果\n","slug":"module-exports和exports的区别","published":1,"updated":"2016-11-05T13:32:45.731Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb1u1p7h000s0sq9ncji2er2","content":"<p>module.exports和exports的区别一直很困扰我,看过几次也一直忘记，今天在学习nodeJs时，又看到这两个玩意,看到这里又困惑了，于是专门花了一点时间又研究了下这两个玩意，顿时茅塞顿开，以此笔记来见证我的理解，废话不多说了，也不会说。。。看下面的代码吧！！！</p>\n<h1 id=\"module-exports和exports的区别\"><a href=\"#module-exports和exports的区别\" class=\"headerlink\" title=\"module.exports和exports的区别\"></a>module.exports和exports的区别</h1><h2 id=\"node-控制台直接打印console-log-module\"><a href=\"#node-控制台直接打印console-log-module\" class=\"headerlink\" title=\"node 控制台直接打印console.log(module)\"></a>node 控制台直接打印console.log(module)</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">id</span>: <span class=\"string\">'.'</span>,</div><div class=\"line\">  <span class=\"attr\">exports</span>: &#123;&#125;,</div><div class=\"line\">  <span class=\"attr\">parent</span>: <span class=\"literal\">null</span>,</div><div class=\"line\">  <span class=\"attr\">filename</span>: <span class=\"string\">'/home/sa/Desktop/node_study/module/module.js'</span>,</div><div class=\"line\">  <span class=\"attr\">loaded</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">  <span class=\"attr\">children</span>: [],</div><div class=\"line\">  <span class=\"attr\">paths</span>:[ <span class=\"string\">'/home/sa/Desktop/node_study/module/node_modules'</span>,</div><div class=\"line\">     <span class=\"string\">'/home/sa/Desktop/node_study/node_modules'</span>,</div><div class=\"line\">     <span class=\"string\">'/home/sa/Desktop/node_modules'</span>,</div><div class=\"line\">     <span class=\"string\">'/home/sa/node_modules'</span>,</div><div class=\"line\">     <span class=\"string\">'/home/node_modules'</span>]</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"node-控制台直接打印console-log-exports\"><a href=\"#node-控制台直接打印console-log-exports\" class=\"headerlink\" title=\"node 控制台直接打印console.log(exports)\"></a>node 控制台直接打印console.log(exports)</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"在来看个例子\"><a href=\"#在来看个例子\" class=\"headerlink\" title=\"在来看个例子\"></a>在来看个例子</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = &#123; <span class=\"attr\">name</span> : <span class=\"number\">1</span> &#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> b = a;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">//&#123;name:1&#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">//&#123;name:1&#125;</span></div><div class=\"line\"></div><div class=\"line\">b.name = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">//&#123;name:2&#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">//&#123;name:2&#125;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> b = &#123;<span class=\"attr\">name</span>:<span class=\"number\">3</span>&#125;;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">//&#123;name:2&#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">//&#123;name:3&#125;</span></div></pre></td></tr></table></figure>\n<p>解释：a 是一个对象，b 是对 a 的引用，即 a 和 b 指向同一块内存，所以前两个输出一样。当对 b 作修改时，即 a 和 b 指向同一块内存地址的内容发生了改变，所以 a 也会体现出来，所以第三四个输出一样。当 b 被覆盖时，b 指向了一块新的内存，a 还是指向原来的内存，所以最后两个输出不一样。<br><br><br>明白了上述例子后，我们只需知道三点就知道 exports 和 module.exports 的区别了：</p>\n<blockquote>\n<ul>\n<li>module.exports 初始值为一个空对象 {}</li>\n<li>exports 是指向的 module.exports 的引用</li>\n<li>require() 返回的是 module.exports 而不是 export</li>\n</ul>\n</blockquote>\n<h1 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h1><blockquote>\n<ul>\n<li>exports = module.exports = { }</li>\n<li>exports = { } 将会指向一块新的内存，不能用这种方式导出模块</li>\n<li>exports.xxx = { } 将会指向同一块内存，可以用这种方式导出模块</li>\n<li>如果用第二种方式导出模块，最后加上 module.exports = exports 重新赋值，一样可以达到导出模块的效果</li>\n</ul>\n</blockquote>\n","excerpt":"","more":"<p>module.exports和exports的区别一直很困扰我,看过几次也一直忘记，今天在学习nodeJs时，又看到这两个玩意,看到这里又困惑了，于是专门花了一点时间又研究了下这两个玩意，顿时茅塞顿开，以此笔记来见证我的理解，废话不多说了，也不会说。。。看下面的代码吧！！！</p>\n<h1 id=\"module-exports和exports的区别\"><a href=\"#module-exports和exports的区别\" class=\"headerlink\" title=\"module.exports和exports的区别\"></a>module.exports和exports的区别</h1><h2 id=\"node-控制台直接打印console-log-module\"><a href=\"#node-控制台直接打印console-log-module\" class=\"headerlink\" title=\"node 控制台直接打印console.log(module)\"></a>node 控制台直接打印console.log(module)</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">id</span>: <span class=\"string\">'.'</span>,</div><div class=\"line\">  <span class=\"attr\">exports</span>: &#123;&#125;,</div><div class=\"line\">  <span class=\"attr\">parent</span>: <span class=\"literal\">null</span>,</div><div class=\"line\">  <span class=\"attr\">filename</span>: <span class=\"string\">'/home/sa/Desktop/node_study/module/module.js'</span>,</div><div class=\"line\">  <span class=\"attr\">loaded</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">  <span class=\"attr\">children</span>: [],</div><div class=\"line\">  <span class=\"attr\">paths</span>:[ <span class=\"string\">'/home/sa/Desktop/node_study/module/node_modules'</span>,</div><div class=\"line\">     <span class=\"string\">'/home/sa/Desktop/node_study/node_modules'</span>,</div><div class=\"line\">     <span class=\"string\">'/home/sa/Desktop/node_modules'</span>,</div><div class=\"line\">     <span class=\"string\">'/home/sa/node_modules'</span>,</div><div class=\"line\">     <span class=\"string\">'/home/node_modules'</span>]</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"node-控制台直接打印console-log-exports\"><a href=\"#node-控制台直接打印console-log-exports\" class=\"headerlink\" title=\"node 控制台直接打印console.log(exports)\"></a>node 控制台直接打印console.log(exports)</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"在来看个例子\"><a href=\"#在来看个例子\" class=\"headerlink\" title=\"在来看个例子\"></a>在来看个例子</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = &#123; <span class=\"attr\">name</span> : <span class=\"number\">1</span> &#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> b = a;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">//&#123;name:1&#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">//&#123;name:1&#125;</span></div><div class=\"line\"></div><div class=\"line\">b.name = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">//&#123;name:2&#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">//&#123;name:2&#125;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> b = &#123;<span class=\"attr\">name</span>:<span class=\"number\">3</span>&#125;;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">//&#123;name:2&#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">//&#123;name:3&#125;</span></div></pre></td></tr></table></figure>\n<p>解释：a 是一个对象，b 是对 a 的引用，即 a 和 b 指向同一块内存，所以前两个输出一样。当对 b 作修改时，即 a 和 b 指向同一块内存地址的内容发生了改变，所以 a 也会体现出来，所以第三四个输出一样。当 b 被覆盖时，b 指向了一块新的内存，a 还是指向原来的内存，所以最后两个输出不一样。<br><br /><br>明白了上述例子后，我们只需知道三点就知道 exports 和 module.exports 的区别了：</p>\n<blockquote>\n<ul>\n<li>module.exports 初始值为一个空对象 {}</li>\n<li>exports 是指向的 module.exports 的引用</li>\n<li>require() 返回的是 module.exports 而不是 export</li>\n</ul>\n</blockquote>\n<h1 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h1><blockquote>\n<ul>\n<li>exports = module.exports = { }</li>\n<li>exports = { } 将会指向一块新的内存，不能用这种方式导出模块</li>\n<li>exports.xxx = { } 将会指向同一块内存，可以用这种方式导出模块</li>\n<li>如果用第二种方式导出模块，最后加上 module.exports = exports 重新赋值，一样可以达到导出模块的效果</li>\n</ul>\n</blockquote>\n"},{"title":"hexo部署出现404找不到js的解决方案","date":"2016-11-06T12:24:55.000Z","_content":"\n马拉个币，好不容易写了几篇文章，在部署的时候本地没问题，部署到github却出现各种404，原以为是自己配置哪里出现的问题，没想到是用的hexo的next主题出现了问题，找啊找啊找，终于找到了解决方案，蛋痛了！\n\n<div>\n    <img src=\"/img/fuck.jpg\" width=\"100%\"/>\n</div>\n\n这是NexT主题的问题，解决方法：\n1.更新最新版本即可修复。(不建议更新，配置繁琐，伤不起)\n2.根据作者的提示，首先修改source/vendors为source/lib，然后修改_config.yml， 将 _internal: vendors修改为_internal:lib 然后修改next底下所有引用source/vendors路径为source/lib。这些地方可以通过文件查找找出来。\n主要集中在这几个文件中。\n - Hexo\\themes\\next.bowerrc\n - Hexo\\themes\\next.gitignore\n - Hexo\\themes\\next.javascript_ignore\n - Hexo\\themes\\next\\bower.json\n\n。修改完毕后，刷新重新g一遍就ok啦。\n\n##### [hexo部署出现404找不到js的解决方案](https://github.com/hexojs/hexo/issues/2238)\n\n<div>\n    <img src=\"/img/fuck.jpg\" width=\"100%\"/>\n</div>","source":"_posts/hexo部署出现404找不到js的解决方案.md","raw":"---\ntitle: hexo部署出现404找不到js的解决方案\ndate: 2016-11-06 20:24:55\ncategories: hexo\ntags:\n    - hexo\n---\n\n马拉个币，好不容易写了几篇文章，在部署的时候本地没问题，部署到github却出现各种404，原以为是自己配置哪里出现的问题，没想到是用的hexo的next主题出现了问题，找啊找啊找，终于找到了解决方案，蛋痛了！\n\n<div>\n    <img src=\"/img/fuck.jpg\" width=\"100%\"/>\n</div>\n\n这是NexT主题的问题，解决方法：\n1.更新最新版本即可修复。(不建议更新，配置繁琐，伤不起)\n2.根据作者的提示，首先修改source/vendors为source/lib，然后修改_config.yml， 将 _internal: vendors修改为_internal:lib 然后修改next底下所有引用source/vendors路径为source/lib。这些地方可以通过文件查找找出来。\n主要集中在这几个文件中。\n - Hexo\\themes\\next.bowerrc\n - Hexo\\themes\\next.gitignore\n - Hexo\\themes\\next.javascript_ignore\n - Hexo\\themes\\next\\bower.json\n\n。修改完毕后，刷新重新g一遍就ok啦。\n\n##### [hexo部署出现404找不到js的解决方案](https://github.com/hexojs/hexo/issues/2238)\n\n<div>\n    <img src=\"/img/fuck.jpg\" width=\"100%\"/>\n</div>","slug":"hexo部署出现404找不到js的解决方案","published":1,"updated":"2016-11-06T12:57:40.307Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb1u1p7z000x0sq911ej9j4g","content":"<p>马拉个币，好不容易写了几篇文章，在部署的时候本地没问题，部署到github却出现各种404，原以为是自己配置哪里出现的问题，没想到是用的hexo的next主题出现了问题，找啊找啊找，终于找到了解决方案，蛋痛了！</p>\n<div><br>    <img src=\"/img/fuck.jpg\" width=\"100%\"><br></div>\n\n<p>这是NexT主题的问题，解决方法：<br>1.更新最新版本即可修复。(不建议更新，配置繁琐，伤不起)<br>2.根据作者的提示，首先修改source/vendors为source/lib，然后修改_config.yml， 将 _internal: vendors修改为_internal:lib 然后修改next底下所有引用source/vendors路径为source/lib。这些地方可以通过文件查找找出来。<br>主要集中在这几个文件中。</p>\n<ul>\n<li>Hexo\\themes\\next.bowerrc</li>\n<li>Hexo\\themes\\next.gitignore</li>\n<li>Hexo\\themes\\next.javascript_ignore</li>\n<li>Hexo\\themes\\next\\bower.json</li>\n</ul>\n<p>。修改完毕后，刷新重新g一遍就ok啦。</p>\n<h5 id=\"hexo部署出现404找不到js的解决方案\"><a href=\"#hexo部署出现404找不到js的解决方案\" class=\"headerlink\" title=\"hexo部署出现404找不到js的解决方案\"></a><a href=\"https://github.com/hexojs/hexo/issues/2238\" target=\"_blank\" rel=\"external\">hexo部署出现404找不到js的解决方案</a></h5><div><br>    <img src=\"/img/fuck.jpg\" width=\"100%\"><br></div>","excerpt":"","more":"<p>马拉个币，好不容易写了几篇文章，在部署的时候本地没问题，部署到github却出现各种404，原以为是自己配置哪里出现的问题，没想到是用的hexo的next主题出现了问题，找啊找啊找，终于找到了解决方案，蛋痛了！</p>\n<div><br>    <img src=\"/img/fuck.jpg\" width=\"100%\"/><br></div>\n\n<p>这是NexT主题的问题，解决方法：<br>1.更新最新版本即可修复。(不建议更新，配置繁琐，伤不起)<br>2.根据作者的提示，首先修改source/vendors为source/lib，然后修改_config.yml， 将 _internal: vendors修改为_internal:lib 然后修改next底下所有引用source/vendors路径为source/lib。这些地方可以通过文件查找找出来。<br>主要集中在这几个文件中。</p>\n<ul>\n<li>Hexo\\themes\\next.bowerrc</li>\n<li>Hexo\\themes\\next.gitignore</li>\n<li>Hexo\\themes\\next.javascript_ignore</li>\n<li>Hexo\\themes\\next\\bower.json</li>\n</ul>\n<p>。修改完毕后，刷新重新g一遍就ok啦。</p>\n<h5 id=\"hexo部署出现404找不到js的解决方案\"><a href=\"#hexo部署出现404找不到js的解决方案\" class=\"headerlink\" title=\"hexo部署出现404找不到js的解决方案\"></a><a href=\"https://github.com/hexojs/hexo/issues/2238\">hexo部署出现404找不到js的解决方案</a></h5><div><br>    <img src=\"/img/fuck.jpg\" width=\"100%\"/><br></div>"},{"title":"nodeJS开发指南","date":"2017-12-11T06:43:54.000Z","_content":"","source":"_posts/nodeJS开发指南.md","raw":"---\ntitle: nodeJS开发指南\ndate: 2017-12-11 14:43:54\ntags:\n---\n","slug":"nodeJS开发指南","published":1,"updated":"2017-12-11T06:43:54.334Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb1u1p8300100sq9eh1x8fe8","content":"","excerpt":"","more":""},{"title":"javascript 排序","date":"2016-07-23T02:00:33.000Z","_content":"\n# javascript 排序算法\n\n## 冒泡排序\n\n> 比较相邻的两个元素,如果第一个比第二个大,就交换顺序\n> 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。\n> 针对所有的元素重复以上的步骤，除了最后一个。\n> 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较\n\n```\nfunction bubbleSort(arr){\n  for(var i=0;i<arr.length-1;i++){\n    for(var j=0;j<arr.length-1-i;j++){\n      if(arr[j]>arr[j+1]){\n        var temp = arr[j+1];\n        arr[j+1] = arr[j];\n        arr[j] = temp;\n      }\n    }\n  }\n  return arr\n}\n```\n\n## 选择排序\n\n> 取到待排序的集合,默认第一个数值已经排序\n> 然后从剩余未排序序列继续寻找最小元素,然后放到已排序序列的结尾\n\n```\nfunction selectSort(arr){\n\tfor(var i=0;i<arr.length-1;i++){\n\t\tvar minIndex = i;\n\t\tfor(var j=i+1;j<arr.length;j++){\n\t\t\tif(arr[minIndex]>arr[j]){\n\t\t\t\tminIndex = j;\n\t\t\t}\n\t\t}\n\t\tvar temp = arr[i];\n\t\tarr[i] = arr[minIndex];\n\t\tarr[minIndex] = temp\n\t}\n\treturn arr;\n}\n```\n\n##  插入排序\n\n> 将待排序的序列的地一个元素看作是一个有序序列,,然后从第二个元素到最后一个元素为待排序序列\n> 从头到尾依次扫描,将扫描到的每个元素插入有序序列适当的位置\n\n```\nfunction insertSort(arr){\n  for(var i = 1;i<arr.length;i++){\n  \tvar curIndex = i-1;\n\t  var curValue = arr[i]\n\t  while(curIndex >=0 && arr[curIndex]>curValue){\n\t\tarr[curIndex+1] = arr[curIndex]\n\t\tcurIndex--;\n\t} \n\tarr[curIndex+1] = curValue\n  }\n  return arr\n}\n```\n\n## 二分查找法\n\n> 二分查找法，也为折半查找，首先要找到一个中间值，通过与中间值比较，大的放右，小的放左，再在两边寻找中间值，持续以上操作，直到找到所在位置为止\n\n```\nfunction erfen(arr,num,start,end){\n\tvar start = start || 0;\n\tvar end = end || arr.length-1;\n\tvar middle = Math.ceil((start+end)/2);\n\tconsole.log(arr+\"-------\"+num+\"-------\"+ middle);\n\tif(num==arr[middle]){\n\t\tconsole.log(\"******************\")\n\t\treturn middle;\n\t}else if(num<arr[middle]){\n\t\treturn erfen(arr,num,0,middle-1);\n\t}else{\n\t\treturn erfen(arr,num,middle+1,false);\n\t}\n}\n```\n\n## 快速排序\n\n> 快速排序是冒泡排序的升级，第一趟排序时将数据分成两部分，一部分比另一部分的所有数据都要小。然后递归调用，在两边都实行快速排序。\n\n```\nfunction quickSort(data){\n\tif(data.length<=1){\n\t\treturn data;\n\t}\t\n\tvar middle = Math.floor(data.length/2);\n\tvar middleData = data.splice(middle,1)[0];\n\t\n\tvar left=[];\n\tvar right=[];\n\t\n\tfor(var i=0;i<data.length;i++){\n\t\tif(data[i]<middleData){\n\t\t\tleft.push(data[i])\n\t\t}else{\n\t\t\tright.push(data[i]);\n\t\t}\n\t}\n\tconsole.log(left+\"--------\"+right)\n\treturn quickSort(left).concat([middleData],quickSort(right))\t\n}\n```","source":"_posts/javascript排序.md","raw":"---\ntitle: javascript 排序\ndate: 2016-07-23 10:00:33\ncategories: Javascript\ntags:\n     - Javascript\n---\n\n# javascript 排序算法\n\n## 冒泡排序\n\n> 比较相邻的两个元素,如果第一个比第二个大,就交换顺序\n> 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。\n> 针对所有的元素重复以上的步骤，除了最后一个。\n> 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较\n\n```\nfunction bubbleSort(arr){\n  for(var i=0;i<arr.length-1;i++){\n    for(var j=0;j<arr.length-1-i;j++){\n      if(arr[j]>arr[j+1]){\n        var temp = arr[j+1];\n        arr[j+1] = arr[j];\n        arr[j] = temp;\n      }\n    }\n  }\n  return arr\n}\n```\n\n## 选择排序\n\n> 取到待排序的集合,默认第一个数值已经排序\n> 然后从剩余未排序序列继续寻找最小元素,然后放到已排序序列的结尾\n\n```\nfunction selectSort(arr){\n\tfor(var i=0;i<arr.length-1;i++){\n\t\tvar minIndex = i;\n\t\tfor(var j=i+1;j<arr.length;j++){\n\t\t\tif(arr[minIndex]>arr[j]){\n\t\t\t\tminIndex = j;\n\t\t\t}\n\t\t}\n\t\tvar temp = arr[i];\n\t\tarr[i] = arr[minIndex];\n\t\tarr[minIndex] = temp\n\t}\n\treturn arr;\n}\n```\n\n##  插入排序\n\n> 将待排序的序列的地一个元素看作是一个有序序列,,然后从第二个元素到最后一个元素为待排序序列\n> 从头到尾依次扫描,将扫描到的每个元素插入有序序列适当的位置\n\n```\nfunction insertSort(arr){\n  for(var i = 1;i<arr.length;i++){\n  \tvar curIndex = i-1;\n\t  var curValue = arr[i]\n\t  while(curIndex >=0 && arr[curIndex]>curValue){\n\t\tarr[curIndex+1] = arr[curIndex]\n\t\tcurIndex--;\n\t} \n\tarr[curIndex+1] = curValue\n  }\n  return arr\n}\n```\n\n## 二分查找法\n\n> 二分查找法，也为折半查找，首先要找到一个中间值，通过与中间值比较，大的放右，小的放左，再在两边寻找中间值，持续以上操作，直到找到所在位置为止\n\n```\nfunction erfen(arr,num,start,end){\n\tvar start = start || 0;\n\tvar end = end || arr.length-1;\n\tvar middle = Math.ceil((start+end)/2);\n\tconsole.log(arr+\"-------\"+num+\"-------\"+ middle);\n\tif(num==arr[middle]){\n\t\tconsole.log(\"******************\")\n\t\treturn middle;\n\t}else if(num<arr[middle]){\n\t\treturn erfen(arr,num,0,middle-1);\n\t}else{\n\t\treturn erfen(arr,num,middle+1,false);\n\t}\n}\n```\n\n## 快速排序\n\n> 快速排序是冒泡排序的升级，第一趟排序时将数据分成两部分，一部分比另一部分的所有数据都要小。然后递归调用，在两边都实行快速排序。\n\n```\nfunction quickSort(data){\n\tif(data.length<=1){\n\t\treturn data;\n\t}\t\n\tvar middle = Math.floor(data.length/2);\n\tvar middleData = data.splice(middle,1)[0];\n\t\n\tvar left=[];\n\tvar right=[];\n\t\n\tfor(var i=0;i<data.length;i++){\n\t\tif(data[i]<middleData){\n\t\t\tleft.push(data[i])\n\t\t}else{\n\t\t\tright.push(data[i]);\n\t\t}\n\t}\n\tconsole.log(left+\"--------\"+right)\n\treturn quickSort(left).concat([middleData],quickSort(right))\t\n}\n```","slug":"javascript排序","published":1,"updated":"2017-04-22T10:01:33.021Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb1u1p8700150sq9bwqttcrj","content":"<h1 id=\"javascript-排序算法\"><a href=\"#javascript-排序算法\" class=\"headerlink\" title=\"javascript 排序算法\"></a>javascript 排序算法</h1><h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><blockquote>\n<p>比较相邻的两个元素,如果第一个比第二个大,就交换顺序<br>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。<br>针对所有的元素重复以上的步骤，除了最后一个。<br>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">function bubbleSort(arr)&#123;</div><div class=\"line\">  for(var i=0;i&lt;arr.length-1;i++)&#123;</div><div class=\"line\">    for(var j=0;j&lt;arr.length-1-i;j++)&#123;</div><div class=\"line\">      if(arr[j]&gt;arr[j+1])&#123;</div><div class=\"line\">        var temp = arr[j+1];</div><div class=\"line\">        arr[j+1] = arr[j];</div><div class=\"line\">        arr[j] = temp;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  return arr</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><blockquote>\n<p>取到待排序的集合,默认第一个数值已经排序<br>然后从剩余未排序序列继续寻找最小元素,然后放到已排序序列的结尾</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">function selectSort(arr)&#123;</div><div class=\"line\">\tfor(var i=0;i&lt;arr.length-1;i++)&#123;</div><div class=\"line\">\t\tvar minIndex = i;</div><div class=\"line\">\t\tfor(var j=i+1;j&lt;arr.length;j++)&#123;</div><div class=\"line\">\t\t\tif(arr[minIndex]&gt;arr[j])&#123;</div><div class=\"line\">\t\t\t\tminIndex = j;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tvar temp = arr[i];</div><div class=\"line\">\t\tarr[i] = arr[minIndex];</div><div class=\"line\">\t\tarr[minIndex] = temp</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treturn arr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h2><blockquote>\n<p>将待排序的序列的地一个元素看作是一个有序序列,,然后从第二个元素到最后一个元素为待排序序列<br>从头到尾依次扫描,将扫描到的每个元素插入有序序列适当的位置</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">function insertSort(arr)&#123;</div><div class=\"line\">  for(var i = 1;i&lt;arr.length;i++)&#123;</div><div class=\"line\">  \tvar curIndex = i-1;</div><div class=\"line\">\t  var curValue = arr[i]</div><div class=\"line\">\t  while(curIndex &gt;=0 &amp;&amp; arr[curIndex]&gt;curValue)&#123;</div><div class=\"line\">\t\tarr[curIndex+1] = arr[curIndex]</div><div class=\"line\">\t\tcurIndex--;</div><div class=\"line\">\t&#125; </div><div class=\"line\">\tarr[curIndex+1] = curValue</div><div class=\"line\">  &#125;</div><div class=\"line\">  return arr</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"二分查找法\"><a href=\"#二分查找法\" class=\"headerlink\" title=\"二分查找法\"></a>二分查找法</h2><blockquote>\n<p>二分查找法，也为折半查找，首先要找到一个中间值，通过与中间值比较，大的放右，小的放左，再在两边寻找中间值，持续以上操作，直到找到所在位置为止</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">function erfen(arr,num,start,end)&#123;</div><div class=\"line\">\tvar start = start || 0;</div><div class=\"line\">\tvar end = end || arr.length-1;</div><div class=\"line\">\tvar middle = Math.ceil((start+end)/2);</div><div class=\"line\">\tconsole.log(arr+&quot;-------&quot;+num+&quot;-------&quot;+ middle);</div><div class=\"line\">\tif(num==arr[middle])&#123;</div><div class=\"line\">\t\tconsole.log(&quot;******************&quot;)</div><div class=\"line\">\t\treturn middle;</div><div class=\"line\">\t&#125;else if(num&lt;arr[middle])&#123;</div><div class=\"line\">\t\treturn erfen(arr,num,0,middle-1);</div><div class=\"line\">\t&#125;else&#123;</div><div class=\"line\">\t\treturn erfen(arr,num,middle+1,false);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><blockquote>\n<p>快速排序是冒泡排序的升级，第一趟排序时将数据分成两部分，一部分比另一部分的所有数据都要小。然后递归调用，在两边都实行快速排序。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">function quickSort(data)&#123;</div><div class=\"line\">\tif(data.length&lt;=1)&#123;</div><div class=\"line\">\t\treturn data;</div><div class=\"line\">\t&#125;\t</div><div class=\"line\">\tvar middle = Math.floor(data.length/2);</div><div class=\"line\">\tvar middleData = data.splice(middle,1)[0];</div><div class=\"line\">\t</div><div class=\"line\">\tvar left=[];</div><div class=\"line\">\tvar right=[];</div><div class=\"line\">\t</div><div class=\"line\">\tfor(var i=0;i&lt;data.length;i++)&#123;</div><div class=\"line\">\t\tif(data[i]&lt;middleData)&#123;</div><div class=\"line\">\t\t\tleft.push(data[i])</div><div class=\"line\">\t\t&#125;else&#123;</div><div class=\"line\">\t\t\tright.push(data[i]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tconsole.log(left+&quot;--------&quot;+right)</div><div class=\"line\">\treturn quickSort(left).concat([middleData],quickSort(right))\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"javascript-排序算法\"><a href=\"#javascript-排序算法\" class=\"headerlink\" title=\"javascript 排序算法\"></a>javascript 排序算法</h1><h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><blockquote>\n<p>比较相邻的两个元素,如果第一个比第二个大,就交换顺序<br>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。<br>针对所有的元素重复以上的步骤，除了最后一个。<br>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">function bubbleSort(arr)&#123;</div><div class=\"line\">  for(var i=0;i&lt;arr.length-1;i++)&#123;</div><div class=\"line\">    for(var j=0;j&lt;arr.length-1-i;j++)&#123;</div><div class=\"line\">      if(arr[j]&gt;arr[j+1])&#123;</div><div class=\"line\">        var temp = arr[j+1];</div><div class=\"line\">        arr[j+1] = arr[j];</div><div class=\"line\">        arr[j] = temp;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  return arr</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><blockquote>\n<p>取到待排序的集合,默认第一个数值已经排序<br>然后从剩余未排序序列继续寻找最小元素,然后放到已排序序列的结尾</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">function selectSort(arr)&#123;</div><div class=\"line\">\tfor(var i=0;i&lt;arr.length-1;i++)&#123;</div><div class=\"line\">\t\tvar minIndex = i;</div><div class=\"line\">\t\tfor(var j=i+1;j&lt;arr.length;j++)&#123;</div><div class=\"line\">\t\t\tif(arr[minIndex]&gt;arr[j])&#123;</div><div class=\"line\">\t\t\t\tminIndex = j;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tvar temp = arr[i];</div><div class=\"line\">\t\tarr[i] = arr[minIndex];</div><div class=\"line\">\t\tarr[minIndex] = temp</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treturn arr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h2><blockquote>\n<p>将待排序的序列的地一个元素看作是一个有序序列,,然后从第二个元素到最后一个元素为待排序序列<br>从头到尾依次扫描,将扫描到的每个元素插入有序序列适当的位置</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">function insertSort(arr)&#123;</div><div class=\"line\">  for(var i = 1;i&lt;arr.length;i++)&#123;</div><div class=\"line\">  \tvar curIndex = i-1;</div><div class=\"line\">\t  var curValue = arr[i]</div><div class=\"line\">\t  while(curIndex &gt;=0 &amp;&amp; arr[curIndex]&gt;curValue)&#123;</div><div class=\"line\">\t\tarr[curIndex+1] = arr[curIndex]</div><div class=\"line\">\t\tcurIndex--;</div><div class=\"line\">\t&#125; </div><div class=\"line\">\tarr[curIndex+1] = curValue</div><div class=\"line\">  &#125;</div><div class=\"line\">  return arr</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"二分查找法\"><a href=\"#二分查找法\" class=\"headerlink\" title=\"二分查找法\"></a>二分查找法</h2><blockquote>\n<p>二分查找法，也为折半查找，首先要找到一个中间值，通过与中间值比较，大的放右，小的放左，再在两边寻找中间值，持续以上操作，直到找到所在位置为止</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">function erfen(arr,num,start,end)&#123;</div><div class=\"line\">\tvar start = start || 0;</div><div class=\"line\">\tvar end = end || arr.length-1;</div><div class=\"line\">\tvar middle = Math.ceil((start+end)/2);</div><div class=\"line\">\tconsole.log(arr+&quot;-------&quot;+num+&quot;-------&quot;+ middle);</div><div class=\"line\">\tif(num==arr[middle])&#123;</div><div class=\"line\">\t\tconsole.log(&quot;******************&quot;)</div><div class=\"line\">\t\treturn middle;</div><div class=\"line\">\t&#125;else if(num&lt;arr[middle])&#123;</div><div class=\"line\">\t\treturn erfen(arr,num,0,middle-1);</div><div class=\"line\">\t&#125;else&#123;</div><div class=\"line\">\t\treturn erfen(arr,num,middle+1,false);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><blockquote>\n<p>快速排序是冒泡排序的升级，第一趟排序时将数据分成两部分，一部分比另一部分的所有数据都要小。然后递归调用，在两边都实行快速排序。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">function quickSort(data)&#123;</div><div class=\"line\">\tif(data.length&lt;=1)&#123;</div><div class=\"line\">\t\treturn data;</div><div class=\"line\">\t&#125;\t</div><div class=\"line\">\tvar middle = Math.floor(data.length/2);</div><div class=\"line\">\tvar middleData = data.splice(middle,1)[0];</div><div class=\"line\">\t</div><div class=\"line\">\tvar left=[];</div><div class=\"line\">\tvar right=[];</div><div class=\"line\">\t</div><div class=\"line\">\tfor(var i=0;i&lt;data.length;i++)&#123;</div><div class=\"line\">\t\tif(data[i]&lt;middleData)&#123;</div><div class=\"line\">\t\t\tleft.push(data[i])</div><div class=\"line\">\t\t&#125;else&#123;</div><div class=\"line\">\t\t\tright.push(data[i]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tconsole.log(left+&quot;--------&quot;+right)</div><div class=\"line\">\treturn quickSort(left).concat([middleData],quickSort(right))\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"javascript数组遍历之间的区别","date":"2017-08-16T03:35:09.000Z","_content":"\n# for..of vs. for..in 语句\n\n> for..of和for..in均可迭代一个列表,但是用于迭代的值却不同\n\n> for..in迭代的是对象的 键 的列表\n\n> for..of则迭代对象的键对应的值\n\n\n```javascript 1.8\nlet list = [4, 5, 6];\n\nfor (let i in list) {\n    console.log(i); // \"0\", \"1\", \"2\",\n}\n\nfor (let i of list) {\n    console.log(i); // \"4\", \"5\", \"6\"\n}\n```\n\n\n> for..in可以操作任何对象；它提供了查看对象属性的一种方法\n\n> for..of关注于迭代对象的值\n\n```javascript 1.8\nlet pets = new Set([\"Cat\", \"Dog\", \"Hamster\"]);\npets[\"species\"] = \"mammals\";\n\nfor (let pet in pets) {\n    console.log(pet); // \"species\"\n}\n\nfor (let pet of pets) {\n    console.log(pet); // \"Cat\", \"Dog\", \"Hamster\"\n}\n```\n\n# 数组map方法\n\nmap() 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果,必须有返回值\n\n```javascript\nlet numbers = [1, 5, 10, 15];\nlet doubles = numbers.map((x) => {\n   return x * 2;\n});\n// numbers is still [1, 5, 10, 15]\n// doubles is now [2, 10, 20, 30]\n```\n\n使用 map 重新格式化数组中的对象\n\n```javascript 1.8\nvar kvArray = [{key: 1, value: 10}, \n               {key: 2, value: 20}, \n               {key: 3, value: 30}];\n\nvar reformattedArray = kvArray.map(function(obj) { \n   var rObj = {};\n   rObj[obj.key] = obj.value;\n   return rObj;\n});\n\n// reformattedArray is now [{1: 10}, {2: 20}, {3: 30}], \n\n// kvArray is still: \n// [{key: 1, value: 10}, \n//  {key: 2, value: 20}, \n//  {key: 3, value: 30}]\n```\n\n反转字符串\n\n```javascript 1.8\nvar str = '12345';\nArray.prototype.map.call(str, function(x) {\n  return x;\n}).reverse().join(''); \n\n//'54321'\n```\n\n## find()\n\nfind() 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined,返回符合条件的数组的值\n\n```javascript 1.8\nfunction isBigEnough(element) {\n  return element >= 15;\n}\n\n[12, 5, 8, 130, 44].find(isBigEnough); // 130\n```\n\n## entries()\n\nentries() 方法返回一个新的Array Iterator对象，该对象包含数组中每个索引的键/值对。\n\n```javascript 1.8\nvar arr = [\"a\", \"b\", \"c\"];\nvar iterator = arr.entries();\n// undefined\n\nconsole.log(iterator);\n// Array Iterator {}\n\nconsole.log(iterator.next().value); \n// [0, \"a\"]\nconsole.log(iterator.next().value); \n// [1, \"b\"]\nconsole.log(iterator.next().value); \n// [2, \"c\"]\n```\n\n##  keys()\n\nkeys() 方法返回一个新的Array迭代器，它包含数组中每个索引的键\n\n```javascript 1.8\nlet arr = [\"a\", \"b\", \"c\"];\nlet iterator = arr.keys();\n// undefined\nconsole.log(iterator);\n// Array Iterator {}\nconsole.log(iterator.next()); \n// Object {value: 0, done: false}\nconsole.log(iterator.next()); \n// Object {value: 1, done: false}\nconsole.log(iterator.next()); \n// Object {value: 2, done: false}\nconsole.log(iterator.next()); \n// Object {value: undefined, done: true}\n```\n\n## values()\n\nvalues() 方法返回一个新的 Array Iterator 对象，该对象包含数组每个索引的值。\n\n```javascript 1.8\nlet arr = ['w', 'y', 'k', 'o', 'p'];\nlet eArr = arr.values();\nconsole.log(eArr.next().value); // w\nconsole.log(eArr.next().value); // y\nconsole.log(eArr.next().value); // k\nconsole.log(eArr.next().value); // o\nconsole.log(eArr.next().value); // p\n```\n\n> 数组的方法entries()、keys()、values()都会返回Array Iterator 对象,可以使用for...of...直接遍历,也可以调取迭代期的next()方法\n\n## every() \n\n返回值为boolean,检测数组的每一项是否可以通过callback函数,如果遇到false,循环就结束,否则返回true\n\n```javascript 1.8\nfunction isBigEnough(element, index, array) {\n  return (element >= 10);\n}\nvar passed = [12, 5, 8, 130, 44].every(isBigEnough);\n// passed is false\npassed = [12, 54, 18, 130, 44].every(isBigEnough);\n// passed is true\n```\n\n## filter()\n\n创建一个新数组, 通过回调函数返回结果为true的集合\n\n```javascript 1.8\nfunction isBigEnough(element) {\n  return element >= 10;\n}\nvar filtered = [12, 5, 8, 130, 44].filter(isBigEnough);\n// filtered is [12, 130, 44]\n```\n\n## forEach()\n\nforEach() 方法对数组的每个元素执行一次提供的函数。\n\n```javascript 1.8\nlet a = ['a', 'b', 'c'];\n\na.forEach(function(element) {\n    console.log(element);\n});\n\n// a\n// b\n// c\n```\n\n## reduce()  返回值为数组累计的结果\n\nreduce() 方法对累加器和数组中的每个元素 (从左到右)应用一个函数，将其减少为单个值。\n\narray.reduce(function(accumulator, currentValue, currentIndex, array), initialValue)\n\naccumulator 上一次调用回调返回的值，或者是提供的初始值（initialValue）\n\ninitialValue 其值用于第一次调用 callback 的第一个参数。如果没有设置初始值，则将数组中的第一个元素作为初始值。空数组调用reduce时没有设置初始值将会报错\n\n\n```javascript 1.8\nvar total = [0, 1, 2, 3].reduce(function(sum, value) {\n  return sum + value;\n}, 0);\n// total is 6\n```\n\n计算数组中每个元素出现的次数\n\n```javascript 1.8\nvar names = ['Alice', 'Bob', 'Tiff', 'Bruce', 'Alice'];\n\nvar countedNames = names.reduce(function (allNames, name) { \n  if (name in allNames) {\n    allNames[name]++;\n  }\n  else {\n    allNames[name] = 1;\n  }\n  return allNames;\n}, {});\n// countedNames is:\n// { 'Alice': 2, 'Bob': 1, 'Tiff': 1, 'Bruce': 1 }\n```\n\n对于一个数组中的元素全是对象，每个对象又包含一个特定数组的情况，我们可以使用扩展运算符外加一个初始值的方式，来连接所有的特定数组\n\n```javascript 1.8\nvar friends = [{\n  name: 'Anna',\n  books: ['Bible', 'Harry Potter'],\n  age: 21\n}, {\n  name: 'Bob',\n  books: ['War and peace', 'Romeo and Juliet'],\n  age: 26\n}, {\n  name: 'Alice',\n  books: ['The Lord of the Rings', 'The Shining'],\n  age: 18\n}];\nvar allbooks = friends.reduce(function(prev, curr) {\n  return [...prev, ...curr.books];\n}, ['Alphabet']);\n\n// allbooks = [\n//   'Alphabet', 'Bible', 'Harry Potter', 'War and peace', \n//   'Romeo and Juliet', 'The Lord of the Rings',\n//   'The Shining'\n// ]\n```\n\n## reduceRight() \n\nreduceRight() 方法接受一个函数作为累加器（accumulator）和数组的每个值（从右到左）将其减少为单个值。\n\n```javascript 1.8\nlet flattened = [\n    [0, 1], \n    [2, 3], \n    [4, 5]\n].reduceRight((a, b) => {\n    return a.concat(b);\n}, []);\n\n// flattened is [4, 5, 2, 3, 0, 1]\n```\n\n## some()\n\nsome() 方法测试数组中的某些元素是否通过由提供的函数实现的测试。有一个结果为真返回即为true,返回boolean\n\n与every()方法相反,every()遇到false就会循环结束,而some遇到true就会结束\n\n> 测试数组元素的值\n\n```javascript 1.8\nfunction isBigEnough(element, index, array) {\n  return (element >= 10);\n}\nvar passed = [2, 5, 8, 1, 4].some(isBigEnough);\n// passed is false\npassed = [12, 5, 8, 1, 4].some(isBigEnough);\n// passed is true\n```","source":"_posts/javascript数组遍历之间的区别.md","raw":"---\ntitle: javascript数组遍历之间的区别\ndate: 2017-08-16 11:35:09\ncategories: Javascript\ntags:\n     - Javascript\n---\n\n# for..of vs. for..in 语句\n\n> for..of和for..in均可迭代一个列表,但是用于迭代的值却不同\n\n> for..in迭代的是对象的 键 的列表\n\n> for..of则迭代对象的键对应的值\n\n\n```javascript 1.8\nlet list = [4, 5, 6];\n\nfor (let i in list) {\n    console.log(i); // \"0\", \"1\", \"2\",\n}\n\nfor (let i of list) {\n    console.log(i); // \"4\", \"5\", \"6\"\n}\n```\n\n\n> for..in可以操作任何对象；它提供了查看对象属性的一种方法\n\n> for..of关注于迭代对象的值\n\n```javascript 1.8\nlet pets = new Set([\"Cat\", \"Dog\", \"Hamster\"]);\npets[\"species\"] = \"mammals\";\n\nfor (let pet in pets) {\n    console.log(pet); // \"species\"\n}\n\nfor (let pet of pets) {\n    console.log(pet); // \"Cat\", \"Dog\", \"Hamster\"\n}\n```\n\n# 数组map方法\n\nmap() 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果,必须有返回值\n\n```javascript\nlet numbers = [1, 5, 10, 15];\nlet doubles = numbers.map((x) => {\n   return x * 2;\n});\n// numbers is still [1, 5, 10, 15]\n// doubles is now [2, 10, 20, 30]\n```\n\n使用 map 重新格式化数组中的对象\n\n```javascript 1.8\nvar kvArray = [{key: 1, value: 10}, \n               {key: 2, value: 20}, \n               {key: 3, value: 30}];\n\nvar reformattedArray = kvArray.map(function(obj) { \n   var rObj = {};\n   rObj[obj.key] = obj.value;\n   return rObj;\n});\n\n// reformattedArray is now [{1: 10}, {2: 20}, {3: 30}], \n\n// kvArray is still: \n// [{key: 1, value: 10}, \n//  {key: 2, value: 20}, \n//  {key: 3, value: 30}]\n```\n\n反转字符串\n\n```javascript 1.8\nvar str = '12345';\nArray.prototype.map.call(str, function(x) {\n  return x;\n}).reverse().join(''); \n\n//'54321'\n```\n\n## find()\n\nfind() 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined,返回符合条件的数组的值\n\n```javascript 1.8\nfunction isBigEnough(element) {\n  return element >= 15;\n}\n\n[12, 5, 8, 130, 44].find(isBigEnough); // 130\n```\n\n## entries()\n\nentries() 方法返回一个新的Array Iterator对象，该对象包含数组中每个索引的键/值对。\n\n```javascript 1.8\nvar arr = [\"a\", \"b\", \"c\"];\nvar iterator = arr.entries();\n// undefined\n\nconsole.log(iterator);\n// Array Iterator {}\n\nconsole.log(iterator.next().value); \n// [0, \"a\"]\nconsole.log(iterator.next().value); \n// [1, \"b\"]\nconsole.log(iterator.next().value); \n// [2, \"c\"]\n```\n\n##  keys()\n\nkeys() 方法返回一个新的Array迭代器，它包含数组中每个索引的键\n\n```javascript 1.8\nlet arr = [\"a\", \"b\", \"c\"];\nlet iterator = arr.keys();\n// undefined\nconsole.log(iterator);\n// Array Iterator {}\nconsole.log(iterator.next()); \n// Object {value: 0, done: false}\nconsole.log(iterator.next()); \n// Object {value: 1, done: false}\nconsole.log(iterator.next()); \n// Object {value: 2, done: false}\nconsole.log(iterator.next()); \n// Object {value: undefined, done: true}\n```\n\n## values()\n\nvalues() 方法返回一个新的 Array Iterator 对象，该对象包含数组每个索引的值。\n\n```javascript 1.8\nlet arr = ['w', 'y', 'k', 'o', 'p'];\nlet eArr = arr.values();\nconsole.log(eArr.next().value); // w\nconsole.log(eArr.next().value); // y\nconsole.log(eArr.next().value); // k\nconsole.log(eArr.next().value); // o\nconsole.log(eArr.next().value); // p\n```\n\n> 数组的方法entries()、keys()、values()都会返回Array Iterator 对象,可以使用for...of...直接遍历,也可以调取迭代期的next()方法\n\n## every() \n\n返回值为boolean,检测数组的每一项是否可以通过callback函数,如果遇到false,循环就结束,否则返回true\n\n```javascript 1.8\nfunction isBigEnough(element, index, array) {\n  return (element >= 10);\n}\nvar passed = [12, 5, 8, 130, 44].every(isBigEnough);\n// passed is false\npassed = [12, 54, 18, 130, 44].every(isBigEnough);\n// passed is true\n```\n\n## filter()\n\n创建一个新数组, 通过回调函数返回结果为true的集合\n\n```javascript 1.8\nfunction isBigEnough(element) {\n  return element >= 10;\n}\nvar filtered = [12, 5, 8, 130, 44].filter(isBigEnough);\n// filtered is [12, 130, 44]\n```\n\n## forEach()\n\nforEach() 方法对数组的每个元素执行一次提供的函数。\n\n```javascript 1.8\nlet a = ['a', 'b', 'c'];\n\na.forEach(function(element) {\n    console.log(element);\n});\n\n// a\n// b\n// c\n```\n\n## reduce()  返回值为数组累计的结果\n\nreduce() 方法对累加器和数组中的每个元素 (从左到右)应用一个函数，将其减少为单个值。\n\narray.reduce(function(accumulator, currentValue, currentIndex, array), initialValue)\n\naccumulator 上一次调用回调返回的值，或者是提供的初始值（initialValue）\n\ninitialValue 其值用于第一次调用 callback 的第一个参数。如果没有设置初始值，则将数组中的第一个元素作为初始值。空数组调用reduce时没有设置初始值将会报错\n\n\n```javascript 1.8\nvar total = [0, 1, 2, 3].reduce(function(sum, value) {\n  return sum + value;\n}, 0);\n// total is 6\n```\n\n计算数组中每个元素出现的次数\n\n```javascript 1.8\nvar names = ['Alice', 'Bob', 'Tiff', 'Bruce', 'Alice'];\n\nvar countedNames = names.reduce(function (allNames, name) { \n  if (name in allNames) {\n    allNames[name]++;\n  }\n  else {\n    allNames[name] = 1;\n  }\n  return allNames;\n}, {});\n// countedNames is:\n// { 'Alice': 2, 'Bob': 1, 'Tiff': 1, 'Bruce': 1 }\n```\n\n对于一个数组中的元素全是对象，每个对象又包含一个特定数组的情况，我们可以使用扩展运算符外加一个初始值的方式，来连接所有的特定数组\n\n```javascript 1.8\nvar friends = [{\n  name: 'Anna',\n  books: ['Bible', 'Harry Potter'],\n  age: 21\n}, {\n  name: 'Bob',\n  books: ['War and peace', 'Romeo and Juliet'],\n  age: 26\n}, {\n  name: 'Alice',\n  books: ['The Lord of the Rings', 'The Shining'],\n  age: 18\n}];\nvar allbooks = friends.reduce(function(prev, curr) {\n  return [...prev, ...curr.books];\n}, ['Alphabet']);\n\n// allbooks = [\n//   'Alphabet', 'Bible', 'Harry Potter', 'War and peace', \n//   'Romeo and Juliet', 'The Lord of the Rings',\n//   'The Shining'\n// ]\n```\n\n## reduceRight() \n\nreduceRight() 方法接受一个函数作为累加器（accumulator）和数组的每个值（从右到左）将其减少为单个值。\n\n```javascript 1.8\nlet flattened = [\n    [0, 1], \n    [2, 3], \n    [4, 5]\n].reduceRight((a, b) => {\n    return a.concat(b);\n}, []);\n\n// flattened is [4, 5, 2, 3, 0, 1]\n```\n\n## some()\n\nsome() 方法测试数组中的某些元素是否通过由提供的函数实现的测试。有一个结果为真返回即为true,返回boolean\n\n与every()方法相反,every()遇到false就会循环结束,而some遇到true就会结束\n\n> 测试数组元素的值\n\n```javascript 1.8\nfunction isBigEnough(element, index, array) {\n  return (element >= 10);\n}\nvar passed = [2, 5, 8, 1, 4].some(isBigEnough);\n// passed is false\npassed = [12, 5, 8, 1, 4].some(isBigEnough);\n// passed is true\n```","slug":"javascript数组遍历之间的区别","published":1,"updated":"2017-08-16T06:57:17.674Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb1u1p8900180sq90muwm55b","content":"<h1 id=\"for-of-vs-for-in-语句\"><a href=\"#for-of-vs-for-in-语句\" class=\"headerlink\" title=\"for..of vs. for..in 语句\"></a>for..of vs. for..in 语句</h1><blockquote>\n<p>for..of和for..in均可迭代一个列表,但是用于迭代的值却不同</p>\n<p>for..in迭代的是对象的 键 的列表</p>\n<p>for..of则迭代对象的键对应的值</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> list = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> list) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// \"0\", \"1\", \"2\",</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> list) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// \"4\", \"5\", \"6\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>for..in可以操作任何对象；它提供了查看对象属性的一种方法</p>\n<p>for..of关注于迭代对象的值</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> pets = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">\"Cat\"</span>, <span class=\"string\">\"Dog\"</span>, <span class=\"string\">\"Hamster\"</span>]);</div><div class=\"line\">pets[<span class=\"string\">\"species\"</span>] = <span class=\"string\">\"mammals\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> pet <span class=\"keyword\">in</span> pets) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(pet); <span class=\"comment\">// \"species\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> pet <span class=\"keyword\">of</span> pets) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(pet); <span class=\"comment\">// \"Cat\", \"Dog\", \"Hamster\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"数组map方法\"><a href=\"#数组map方法\" class=\"headerlink\" title=\"数组map方法\"></a>数组map方法</h1><p>map() 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果,必须有返回值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>];</div><div class=\"line\"><span class=\"keyword\">let</span> doubles = numbers.map(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> &#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> x * <span class=\"number\">2</span>;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// numbers is still [1, 5, 10, 15]</span></div><div class=\"line\"><span class=\"comment\">// doubles is now [2, 10, 20, 30]</span></div></pre></td></tr></table></figure>\n<p>使用 map 重新格式化数组中的对象</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> kvArray = [&#123;<span class=\"attr\">key</span>: <span class=\"number\">1</span>, <span class=\"attr\">value</span>: <span class=\"number\">10</span>&#125;, </div><div class=\"line\">               &#123;<span class=\"attr\">key</span>: <span class=\"number\">2</span>, <span class=\"attr\">value</span>: <span class=\"number\">20</span>&#125;, </div><div class=\"line\">               &#123;<span class=\"attr\">key</span>: <span class=\"number\">3</span>, <span class=\"attr\">value</span>: <span class=\"number\">30</span>&#125;];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> reformattedArray = kvArray.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123; </div><div class=\"line\">   <span class=\"keyword\">var</span> rObj = &#123;&#125;;</div><div class=\"line\">   rObj[obj.key] = obj.value;</div><div class=\"line\">   <span class=\"keyword\">return</span> rObj;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// reformattedArray is now [&#123;1: 10&#125;, &#123;2: 20&#125;, &#123;3: 30&#125;], </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// kvArray is still: </span></div><div class=\"line\"><span class=\"comment\">// [&#123;key: 1, value: 10&#125;, </span></div><div class=\"line\"><span class=\"comment\">//  &#123;key: 2, value: 20&#125;, </span></div><div class=\"line\"><span class=\"comment\">//  &#123;key: 3, value: 30&#125;]</span></div></pre></td></tr></table></figure>\n<p>反转字符串</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'12345'</span>;</div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.map.call(str, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> x;</div><div class=\"line\">&#125;).reverse().join(<span class=\"string\">''</span>); </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//'54321'</span></div></pre></td></tr></table></figure>\n<h2 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find()\"></a>find()</h2><p>find() 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined,返回符合条件的数组的值</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isBigEnough</span>(<span class=\"params\">element</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> element &gt;= <span class=\"number\">15</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">[<span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">130</span>, <span class=\"number\">44</span>].find(isBigEnough); <span class=\"comment\">// 130</span></div></pre></td></tr></table></figure>\n<h2 id=\"entries\"><a href=\"#entries\" class=\"headerlink\" title=\"entries()\"></a>entries()</h2><p>entries() 方法返回一个新的Array Iterator对象，该对象包含数组中每个索引的键/值对。</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> iterator = arr.entries();</div><div class=\"line\"><span class=\"comment\">// undefined</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(iterator);</div><div class=\"line\"><span class=\"comment\">// Array Iterator &#123;&#125;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next().value); </div><div class=\"line\"><span class=\"comment\">// [0, \"a\"]</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next().value); </div><div class=\"line\"><span class=\"comment\">// [1, \"b\"]</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next().value); </div><div class=\"line\"><span class=\"comment\">// [2, \"c\"]</span></div></pre></td></tr></table></figure>\n<h2 id=\"keys\"><a href=\"#keys\" class=\"headerlink\" title=\"keys()\"></a>keys()</h2><p>keys() 方法返回一个新的Array迭代器，它包含数组中每个索引的键</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>];</div><div class=\"line\"><span class=\"keyword\">let</span> iterator = arr.keys();</div><div class=\"line\"><span class=\"comment\">// undefined</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(iterator);</div><div class=\"line\"><span class=\"comment\">// Array Iterator &#123;&#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); </div><div class=\"line\"><span class=\"comment\">// Object &#123;value: 0, done: false&#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); </div><div class=\"line\"><span class=\"comment\">// Object &#123;value: 1, done: false&#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); </div><div class=\"line\"><span class=\"comment\">// Object &#123;value: 2, done: false&#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); </div><div class=\"line\"><span class=\"comment\">// Object &#123;value: undefined, done: true&#125;</span></div></pre></td></tr></table></figure>\n<h2 id=\"values\"><a href=\"#values\" class=\"headerlink\" title=\"values()\"></a>values()</h2><p>values() 方法返回一个新的 Array Iterator 对象，该对象包含数组每个索引的值。</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">'w'</span>, <span class=\"string\">'y'</span>, <span class=\"string\">'k'</span>, <span class=\"string\">'o'</span>, <span class=\"string\">'p'</span>];</div><div class=\"line\"><span class=\"keyword\">let</span> eArr = arr.values();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(eArr.next().value); <span class=\"comment\">// w</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(eArr.next().value); <span class=\"comment\">// y</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(eArr.next().value); <span class=\"comment\">// k</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(eArr.next().value); <span class=\"comment\">// o</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(eArr.next().value); <span class=\"comment\">// p</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>数组的方法entries()、keys()、values()都会返回Array Iterator 对象,可以使用for…of…直接遍历,也可以调取迭代期的next()方法</p>\n</blockquote>\n<h2 id=\"every\"><a href=\"#every\" class=\"headerlink\" title=\"every()\"></a>every()</h2><p>返回值为boolean,检测数组的每一项是否可以通过callback函数,如果遇到false,循环就结束,否则返回true</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isBigEnough</span>(<span class=\"params\">element, index, array</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (element &gt;= <span class=\"number\">10</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> passed = [<span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">130</span>, <span class=\"number\">44</span>].every(isBigEnough);</div><div class=\"line\"><span class=\"comment\">// passed is false</span></div><div class=\"line\">passed = [<span class=\"number\">12</span>, <span class=\"number\">54</span>, <span class=\"number\">18</span>, <span class=\"number\">130</span>, <span class=\"number\">44</span>].every(isBigEnough);</div><div class=\"line\"><span class=\"comment\">// passed is true</span></div></pre></td></tr></table></figure>\n<h2 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter()\"></a>filter()</h2><p>创建一个新数组, 通过回调函数返回结果为true的集合</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isBigEnough</span>(<span class=\"params\">element</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> element &gt;= <span class=\"number\">10</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> filtered = [<span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">130</span>, <span class=\"number\">44</span>].filter(isBigEnough);</div><div class=\"line\"><span class=\"comment\">// filtered is [12, 130, 44]</span></div></pre></td></tr></table></figure>\n<h2 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach()\"></a>forEach()</h2><p>forEach() 方法对数组的每个元素执行一次提供的函数。</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];</div><div class=\"line\"></div><div class=\"line\">a.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(element);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// a</span></div><div class=\"line\"><span class=\"comment\">// b</span></div><div class=\"line\"><span class=\"comment\">// c</span></div></pre></td></tr></table></figure>\n<h2 id=\"reduce-返回值为数组累计的结果\"><a href=\"#reduce-返回值为数组累计的结果\" class=\"headerlink\" title=\"reduce()  返回值为数组累计的结果\"></a>reduce()  返回值为数组累计的结果</h2><p>reduce() 方法对累加器和数组中的每个元素 (从左到右)应用一个函数，将其减少为单个值。</p>\n<p>array.reduce(function(accumulator, currentValue, currentIndex, array), initialValue)</p>\n<p>accumulator 上一次调用回调返回的值，或者是提供的初始值（initialValue）</p>\n<p>initialValue 其值用于第一次调用 callback 的第一个参数。如果没有设置初始值，则将数组中的第一个元素作为初始值。空数组调用reduce时没有设置初始值将会报错</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> total = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sum, value</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> sum + value;</div><div class=\"line\">&#125;, <span class=\"number\">0</span>);</div><div class=\"line\"><span class=\"comment\">// total is 6</span></div></pre></td></tr></table></figure>\n<p>计算数组中每个元素出现的次数</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> names = [<span class=\"string\">'Alice'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tiff'</span>, <span class=\"string\">'Bruce'</span>, <span class=\"string\">'Alice'</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> countedNames = names.reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">allNames, name</span>) </span>&#123; </div><div class=\"line\">  <span class=\"keyword\">if</span> (name <span class=\"keyword\">in</span> allNames) &#123;</div><div class=\"line\">    allNames[name]++;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    allNames[name] = <span class=\"number\">1</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> allNames;</div><div class=\"line\">&#125;, &#123;&#125;);</div><div class=\"line\"><span class=\"comment\">// countedNames is:</span></div><div class=\"line\"><span class=\"comment\">// &#123; 'Alice': 2, 'Bob': 1, 'Tiff': 1, 'Bruce': 1 &#125;</span></div></pre></td></tr></table></figure>\n<p>对于一个数组中的元素全是对象，每个对象又包含一个特定数组的情况，我们可以使用扩展运算符外加一个初始值的方式，来连接所有的特定数组</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> friends = [&#123;</div><div class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">'Anna'</span>,</div><div class=\"line\">  <span class=\"attr\">books</span>: [<span class=\"string\">'Bible'</span>, <span class=\"string\">'Harry Potter'</span>],</div><div class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">21</span></div><div class=\"line\">&#125;, &#123;</div><div class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">'Bob'</span>,</div><div class=\"line\">  <span class=\"attr\">books</span>: [<span class=\"string\">'War and peace'</span>, <span class=\"string\">'Romeo and Juliet'</span>],</div><div class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">26</span></div><div class=\"line\">&#125;, &#123;</div><div class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">'Alice'</span>,</div><div class=\"line\">  <span class=\"attr\">books</span>: [<span class=\"string\">'The Lord of the Rings'</span>, <span class=\"string\">'The Shining'</span>],</div><div class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span></div><div class=\"line\">&#125;];</div><div class=\"line\"><span class=\"keyword\">var</span> allbooks = friends.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prev, curr</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> [...prev, ...curr.books];</div><div class=\"line\">&#125;, [<span class=\"string\">'Alphabet'</span>]);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// allbooks = [</span></div><div class=\"line\"><span class=\"comment\">//   'Alphabet', 'Bible', 'Harry Potter', 'War and peace', </span></div><div class=\"line\"><span class=\"comment\">//   'Romeo and Juliet', 'The Lord of the Rings',</span></div><div class=\"line\"><span class=\"comment\">//   'The Shining'</span></div><div class=\"line\"><span class=\"comment\">// ]</span></div></pre></td></tr></table></figure>\n<h2 id=\"reduceRight\"><a href=\"#reduceRight\" class=\"headerlink\" title=\"reduceRight()\"></a>reduceRight()</h2><p>reduceRight() 方法接受一个函数作为累加器（accumulator）和数组的每个值（从右到左）将其减少为单个值。</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> flattened = [</div><div class=\"line\">    [<span class=\"number\">0</span>, <span class=\"number\">1</span>], </div><div class=\"line\">    [<span class=\"number\">2</span>, <span class=\"number\">3</span>], </div><div class=\"line\">    [<span class=\"number\">4</span>, <span class=\"number\">5</span>]</div><div class=\"line\">].reduceRight(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a.concat(b);</div><div class=\"line\">&#125;, []);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// flattened is [4, 5, 2, 3, 0, 1]</span></div></pre></td></tr></table></figure>\n<h2 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"some()\"></a>some()</h2><p>some() 方法测试数组中的某些元素是否通过由提供的函数实现的测试。有一个结果为真返回即为true,返回boolean</p>\n<p>与every()方法相反,every()遇到false就会循环结束,而some遇到true就会结束</p>\n<blockquote>\n<p>测试数组元素的值</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isBigEnough</span>(<span class=\"params\">element, index, array</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (element &gt;= <span class=\"number\">10</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> passed = [<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>].some(isBigEnough);</div><div class=\"line\"><span class=\"comment\">// passed is false</span></div><div class=\"line\">passed = [<span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>].some(isBigEnough);</div><div class=\"line\"><span class=\"comment\">// passed is true</span></div></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"for-of-vs-for-in-语句\"><a href=\"#for-of-vs-for-in-语句\" class=\"headerlink\" title=\"for..of vs. for..in 语句\"></a>for..of vs. for..in 语句</h1><blockquote>\n<p>for..of和for..in均可迭代一个列表,但是用于迭代的值却不同</p>\n<p>for..in迭代的是对象的 键 的列表</p>\n<p>for..of则迭代对象的键对应的值</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> list = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> list) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// \"0\", \"1\", \"2\",</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> list) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// \"4\", \"5\", \"6\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>for..in可以操作任何对象；它提供了查看对象属性的一种方法</p>\n<p>for..of关注于迭代对象的值</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> pets = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">\"Cat\"</span>, <span class=\"string\">\"Dog\"</span>, <span class=\"string\">\"Hamster\"</span>]);</div><div class=\"line\">pets[<span class=\"string\">\"species\"</span>] = <span class=\"string\">\"mammals\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> pet <span class=\"keyword\">in</span> pets) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(pet); <span class=\"comment\">// \"species\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> pet <span class=\"keyword\">of</span> pets) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(pet); <span class=\"comment\">// \"Cat\", \"Dog\", \"Hamster\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"数组map方法\"><a href=\"#数组map方法\" class=\"headerlink\" title=\"数组map方法\"></a>数组map方法</h1><p>map() 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果,必须有返回值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>];</div><div class=\"line\"><span class=\"keyword\">let</span> doubles = numbers.map(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> &#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> x * <span class=\"number\">2</span>;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// numbers is still [1, 5, 10, 15]</span></div><div class=\"line\"><span class=\"comment\">// doubles is now [2, 10, 20, 30]</span></div></pre></td></tr></table></figure>\n<p>使用 map 重新格式化数组中的对象</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> kvArray = [&#123;<span class=\"attr\">key</span>: <span class=\"number\">1</span>, <span class=\"attr\">value</span>: <span class=\"number\">10</span>&#125;, </div><div class=\"line\">               &#123;<span class=\"attr\">key</span>: <span class=\"number\">2</span>, <span class=\"attr\">value</span>: <span class=\"number\">20</span>&#125;, </div><div class=\"line\">               &#123;<span class=\"attr\">key</span>: <span class=\"number\">3</span>, <span class=\"attr\">value</span>: <span class=\"number\">30</span>&#125;];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> reformattedArray = kvArray.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123; </div><div class=\"line\">   <span class=\"keyword\">var</span> rObj = &#123;&#125;;</div><div class=\"line\">   rObj[obj.key] = obj.value;</div><div class=\"line\">   <span class=\"keyword\">return</span> rObj;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// reformattedArray is now [&#123;1: 10&#125;, &#123;2: 20&#125;, &#123;3: 30&#125;], </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// kvArray is still: </span></div><div class=\"line\"><span class=\"comment\">// [&#123;key: 1, value: 10&#125;, </span></div><div class=\"line\"><span class=\"comment\">//  &#123;key: 2, value: 20&#125;, </span></div><div class=\"line\"><span class=\"comment\">//  &#123;key: 3, value: 30&#125;]</span></div></pre></td></tr></table></figure>\n<p>反转字符串</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'12345'</span>;</div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.map.call(str, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> x;</div><div class=\"line\">&#125;).reverse().join(<span class=\"string\">''</span>); </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//'54321'</span></div></pre></td></tr></table></figure>\n<h2 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find()\"></a>find()</h2><p>find() 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined,返回符合条件的数组的值</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isBigEnough</span>(<span class=\"params\">element</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> element &gt;= <span class=\"number\">15</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">[<span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">130</span>, <span class=\"number\">44</span>].find(isBigEnough); <span class=\"comment\">// 130</span></div></pre></td></tr></table></figure>\n<h2 id=\"entries\"><a href=\"#entries\" class=\"headerlink\" title=\"entries()\"></a>entries()</h2><p>entries() 方法返回一个新的Array Iterator对象，该对象包含数组中每个索引的键/值对。</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> iterator = arr.entries();</div><div class=\"line\"><span class=\"comment\">// undefined</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(iterator);</div><div class=\"line\"><span class=\"comment\">// Array Iterator &#123;&#125;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next().value); </div><div class=\"line\"><span class=\"comment\">// [0, \"a\"]</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next().value); </div><div class=\"line\"><span class=\"comment\">// [1, \"b\"]</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next().value); </div><div class=\"line\"><span class=\"comment\">// [2, \"c\"]</span></div></pre></td></tr></table></figure>\n<h2 id=\"keys\"><a href=\"#keys\" class=\"headerlink\" title=\"keys()\"></a>keys()</h2><p>keys() 方法返回一个新的Array迭代器，它包含数组中每个索引的键</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>];</div><div class=\"line\"><span class=\"keyword\">let</span> iterator = arr.keys();</div><div class=\"line\"><span class=\"comment\">// undefined</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(iterator);</div><div class=\"line\"><span class=\"comment\">// Array Iterator &#123;&#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); </div><div class=\"line\"><span class=\"comment\">// Object &#123;value: 0, done: false&#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); </div><div class=\"line\"><span class=\"comment\">// Object &#123;value: 1, done: false&#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); </div><div class=\"line\"><span class=\"comment\">// Object &#123;value: 2, done: false&#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); </div><div class=\"line\"><span class=\"comment\">// Object &#123;value: undefined, done: true&#125;</span></div></pre></td></tr></table></figure>\n<h2 id=\"values\"><a href=\"#values\" class=\"headerlink\" title=\"values()\"></a>values()</h2><p>values() 方法返回一个新的 Array Iterator 对象，该对象包含数组每个索引的值。</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">'w'</span>, <span class=\"string\">'y'</span>, <span class=\"string\">'k'</span>, <span class=\"string\">'o'</span>, <span class=\"string\">'p'</span>];</div><div class=\"line\"><span class=\"keyword\">let</span> eArr = arr.values();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(eArr.next().value); <span class=\"comment\">// w</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(eArr.next().value); <span class=\"comment\">// y</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(eArr.next().value); <span class=\"comment\">// k</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(eArr.next().value); <span class=\"comment\">// o</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(eArr.next().value); <span class=\"comment\">// p</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>数组的方法entries()、keys()、values()都会返回Array Iterator 对象,可以使用for…of…直接遍历,也可以调取迭代期的next()方法</p>\n</blockquote>\n<h2 id=\"every\"><a href=\"#every\" class=\"headerlink\" title=\"every()\"></a>every()</h2><p>返回值为boolean,检测数组的每一项是否可以通过callback函数,如果遇到false,循环就结束,否则返回true</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isBigEnough</span>(<span class=\"params\">element, index, array</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (element &gt;= <span class=\"number\">10</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> passed = [<span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">130</span>, <span class=\"number\">44</span>].every(isBigEnough);</div><div class=\"line\"><span class=\"comment\">// passed is false</span></div><div class=\"line\">passed = [<span class=\"number\">12</span>, <span class=\"number\">54</span>, <span class=\"number\">18</span>, <span class=\"number\">130</span>, <span class=\"number\">44</span>].every(isBigEnough);</div><div class=\"line\"><span class=\"comment\">// passed is true</span></div></pre></td></tr></table></figure>\n<h2 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter()\"></a>filter()</h2><p>创建一个新数组, 通过回调函数返回结果为true的集合</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isBigEnough</span>(<span class=\"params\">element</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> element &gt;= <span class=\"number\">10</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> filtered = [<span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">130</span>, <span class=\"number\">44</span>].filter(isBigEnough);</div><div class=\"line\"><span class=\"comment\">// filtered is [12, 130, 44]</span></div></pre></td></tr></table></figure>\n<h2 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach()\"></a>forEach()</h2><p>forEach() 方法对数组的每个元素执行一次提供的函数。</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];</div><div class=\"line\"></div><div class=\"line\">a.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(element);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// a</span></div><div class=\"line\"><span class=\"comment\">// b</span></div><div class=\"line\"><span class=\"comment\">// c</span></div></pre></td></tr></table></figure>\n<h2 id=\"reduce-返回值为数组累计的结果\"><a href=\"#reduce-返回值为数组累计的结果\" class=\"headerlink\" title=\"reduce()  返回值为数组累计的结果\"></a>reduce()  返回值为数组累计的结果</h2><p>reduce() 方法对累加器和数组中的每个元素 (从左到右)应用一个函数，将其减少为单个值。</p>\n<p>array.reduce(function(accumulator, currentValue, currentIndex, array), initialValue)</p>\n<p>accumulator 上一次调用回调返回的值，或者是提供的初始值（initialValue）</p>\n<p>initialValue 其值用于第一次调用 callback 的第一个参数。如果没有设置初始值，则将数组中的第一个元素作为初始值。空数组调用reduce时没有设置初始值将会报错</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> total = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sum, value</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> sum + value;</div><div class=\"line\">&#125;, <span class=\"number\">0</span>);</div><div class=\"line\"><span class=\"comment\">// total is 6</span></div></pre></td></tr></table></figure>\n<p>计算数组中每个元素出现的次数</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> names = [<span class=\"string\">'Alice'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tiff'</span>, <span class=\"string\">'Bruce'</span>, <span class=\"string\">'Alice'</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> countedNames = names.reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">allNames, name</span>) </span>&#123; </div><div class=\"line\">  <span class=\"keyword\">if</span> (name <span class=\"keyword\">in</span> allNames) &#123;</div><div class=\"line\">    allNames[name]++;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    allNames[name] = <span class=\"number\">1</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> allNames;</div><div class=\"line\">&#125;, &#123;&#125;);</div><div class=\"line\"><span class=\"comment\">// countedNames is:</span></div><div class=\"line\"><span class=\"comment\">// &#123; 'Alice': 2, 'Bob': 1, 'Tiff': 1, 'Bruce': 1 &#125;</span></div></pre></td></tr></table></figure>\n<p>对于一个数组中的元素全是对象，每个对象又包含一个特定数组的情况，我们可以使用扩展运算符外加一个初始值的方式，来连接所有的特定数组</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> friends = [&#123;</div><div class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">'Anna'</span>,</div><div class=\"line\">  <span class=\"attr\">books</span>: [<span class=\"string\">'Bible'</span>, <span class=\"string\">'Harry Potter'</span>],</div><div class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">21</span></div><div class=\"line\">&#125;, &#123;</div><div class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">'Bob'</span>,</div><div class=\"line\">  <span class=\"attr\">books</span>: [<span class=\"string\">'War and peace'</span>, <span class=\"string\">'Romeo and Juliet'</span>],</div><div class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">26</span></div><div class=\"line\">&#125;, &#123;</div><div class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">'Alice'</span>,</div><div class=\"line\">  <span class=\"attr\">books</span>: [<span class=\"string\">'The Lord of the Rings'</span>, <span class=\"string\">'The Shining'</span>],</div><div class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span></div><div class=\"line\">&#125;];</div><div class=\"line\"><span class=\"keyword\">var</span> allbooks = friends.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prev, curr</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> [...prev, ...curr.books];</div><div class=\"line\">&#125;, [<span class=\"string\">'Alphabet'</span>]);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// allbooks = [</span></div><div class=\"line\"><span class=\"comment\">//   'Alphabet', 'Bible', 'Harry Potter', 'War and peace', </span></div><div class=\"line\"><span class=\"comment\">//   'Romeo and Juliet', 'The Lord of the Rings',</span></div><div class=\"line\"><span class=\"comment\">//   'The Shining'</span></div><div class=\"line\"><span class=\"comment\">// ]</span></div></pre></td></tr></table></figure>\n<h2 id=\"reduceRight\"><a href=\"#reduceRight\" class=\"headerlink\" title=\"reduceRight()\"></a>reduceRight()</h2><p>reduceRight() 方法接受一个函数作为累加器（accumulator）和数组的每个值（从右到左）将其减少为单个值。</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> flattened = [</div><div class=\"line\">    [<span class=\"number\">0</span>, <span class=\"number\">1</span>], </div><div class=\"line\">    [<span class=\"number\">2</span>, <span class=\"number\">3</span>], </div><div class=\"line\">    [<span class=\"number\">4</span>, <span class=\"number\">5</span>]</div><div class=\"line\">].reduceRight(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a.concat(b);</div><div class=\"line\">&#125;, []);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// flattened is [4, 5, 2, 3, 0, 1]</span></div></pre></td></tr></table></figure>\n<h2 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"some()\"></a>some()</h2><p>some() 方法测试数组中的某些元素是否通过由提供的函数实现的测试。有一个结果为真返回即为true,返回boolean</p>\n<p>与every()方法相反,every()遇到false就会循环结束,而some遇到true就会结束</p>\n<blockquote>\n<p>测试数组元素的值</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isBigEnough</span>(<span class=\"params\">element, index, array</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (element &gt;= <span class=\"number\">10</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> passed = [<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>].some(isBigEnough);</div><div class=\"line\"><span class=\"comment\">// passed is false</span></div><div class=\"line\">passed = [<span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>].some(isBigEnough);</div><div class=\"line\"><span class=\"comment\">// passed is true</span></div></pre></td></tr></table></figure>"},{"title":"js高程(第三版)兼容问题和注意事项","date":"2017-08-24T02:01:38.000Z","_content":"\n# js高级程序设计(第三版) 兼容bug\n\n## 数组(Array)\n\n### 构造函数创建数组\n\n* new Array(arg) \n\n1. arg为数字,则创建一个对应数量的数组\n\n2. arg为字符串,则创建包含arg个的一个数组\n\n3. new操作符可以省略\n\n### 对象字面量创建数组\n\n* bug\n\n1. ```let arr = [1,2,]```\n\n在ie中arr的值为1,2,undefined,而在其它浏览器中arr的值为1,2\n\n2. ```let arr = [,,,,]```\n\n在ie8以下```arr.length = 5```,而其它浏览器为```arr.length = 4```\n\n3. ```let arr = [1,2,3,4]```\n\n若改变arr的length长度,则会改变数组对应的数据```arr.length=5;arr[4] = undefined```\n\n### sort 方法\n\nsort方法默认为升序排列,但是比较的每一项的字符串,因此```let arr = [0,1,5,10,15];arr.sort();console.log(arr)//0,1,10,15,5```\n\n可以借助sort方法的参数(比较函数)得到正确的结果\n\n```javascript 1.8\nlet arr = [0,1,5,10,15];\narr.sort(function(a,b) {\n  if(a<b){\n      return -1;\n  }\n  if(a==b){\n      return 0;\n  }\n  if(a>b){\n      return 1;\n  }\n});\nconsole.log(arr)//[0,1,5,10,15]\n```\n\n## 对象(Object)\n\n### 对象属性类型\n\n* 数据属性  可以直接定义\n\n数据属性包含一个数据的位置,在这个位置可以读取和写入,数据属性有4个描述其属性的行为特性\n\n* * [[ Configureable ]] 表示能否通过delete直接删除其属性,默认值true\n\n* * [[ Enumerable ]] 表示该属性能否通过```for ... in ...```进行遍历,默认值为true\n\n* * [[ Writable ]] 表示该属性的值能否修改,默认值为true\n\n* * [[ Value ]] 表示该属性的数据值,默认值为undefined\n\n<font color=\"red\">以上为每个对象的属性都具有的特性,要想修改其默认属性,必须同过```Object.defineProperty()```方法</font>\n\n```\nObject.defineProperty(属性所在的对象,属性的名字,描述符)\n\n//描述符为以上四个属性,这样就可以修改默认值了\n\n//例子\n\nvar person = {}\nObject.defineProperty(person,\"name\",{\n    value:\"caicai\",\n    writable:false\n})\nconsole.log(person.name) // caicai\nperson.name=\"hahaha\"; //严格模式下报错,非严格模式下将会忽略\nconsole.log(person.name) // caicai\n```\n\n* 访问器属性 不可以直接定义,必须通过`Object.defineProperty()`定义\n\n访问器属性不包含数据值,它们包含一对getter和setter函数\n\n* * [[ Configureable ]] 表示能否通过delete直接删除其属性,默认值true\n\n* * [[ Enumerable ]] 表示该属性能否通过```for ... in ...```进行遍历,默认值为true\n\n* * [[ get ]] 表示读取该属性时的值,默认值为undefined\n\n* * [[ set ]] 表示写入该属性的数据值,默认值为undefined\n\n```\nlet book={\n    __year:2004,\n    edition:1\n}\nObject.defineProperty(book,\"year\",{\n    get:function(){\n        return this.__year;\n    },\n    set:function(newValue){\n        if(newValue>this.__year){\n            this.edition += newValue - this.__year;\n            this.__year = newValue;\n        }\n    }\n})\nbook.year = 2015;\nconsole.log(book.edition)//12\n```\n\n### 创建对象\n\n虽然Objectg构造函数和对象字面量都可以创建对象,但有个缺点,使用同一个接口创建很多对象,会产生大量的重复代码,因此就出现了以下的设计模式\n\n#### *  工厂模式\n\n用函数来封装特定的接口,然后进行创建对象\n\n虽然解决了创建多个对象相似的问题,但是没有解决对象识别的问题\n\n```\n//工厂模式\nfuncction CreatePerson(name,age,job){\n    var o = new Object();\n    o.name = name;\n    o.age = age;\n    o.job = job;\n    o.sayName=function(){\n        return this.name\n    }\n    return o;\n}\nvar p1 = CreatePerson(\"caicai1\",20,\"民工\")\nvar p2 = CreatePerson(\"caicai2\",22,\"IT民工\")\n```\n\n#### * 构造函数模式\n\n自定义构造函数,从而定义自定义对象类型的属性和方法\n* * 与工厂模式的区别\n\n* * * 1.没有显示的创建对象\n\n* * * 2.直接将属性和方法赋值给this对象\n\n* * * 3.没有return语句\n\n* * 优点\n\n* * * 1.没有显示的创建对象\n\n* * * 2.直接将属性和方法赋值给this对象\n\n* * * 3.没有return返回值\n\n* * 缺点\n\n* * * 每个方法都要在实例上重新创建一遍\n\n* * * 可以将方法写到全局,然后赋值,这样可以解决两个函数做同一件事的问题,但是这样的话就会出现很多全局函数,没有封装可言,因此出现了原型模式\n\n```\n//方式一\nfunction Person(name,age,job){\n    this.name = name;\n    this.age = age;\n    this.job = job;\n    this.sayName = function(){\n        return this.name\n    }\n}\nvar p1 = new Person(\"caicai1\",20,\"民工\")\nvar p2 = new Person(\"caicai2\",22,\"IT民工\")\n\n//方式二\n function sayName(){\n    return this.name\n}\nfunction Person(name,age,job){\n    this.name = name;\n    this.age = age;\n    this.job = job;\n    this.sayName = sayName;\n}\nvar p1 = new Person(\"caicai1\",20,\"民工\")\nvar p2 = new Person(\"caicai2\",22,\"IT民工\")\n```\n\n#### * 原型模式\n\n每个函数都有一个prototype属性,这个属性是个指针,指向一个对象,这个对象的用途为让所有实例的属性共享属性和方法\n\n即为不必在构造函数中定义对象的属性和方法,而是将这些属性和方法添加到原型对象上\n\n```\nfunction Person(){}\nPerson.prototype.name= \"caicai\"\nPerson.prototype.age= 20\nPerson.prototype.job= \"It\"\nPerson.prototype.sayName= function(){\n    return this.name\n}\n\nvar p1 = new Person();\n\np1.sayName()//caicai\np1.hasOwnPropertype(\"name\")//false\n\np1.name = \"hahha\"\np1.hasOwnPropertype(\"name\")//true\n\ndelete p1.name\np1.hasOwnPropertype(\"name\")//false\n\nvar p2 = new Person();\np2.sayName()//caicai\n```\n\n![\"原型模式\"](/img/prototype.jpg)\n\n* 原型对象\n\n只要创建函数,就会根据一组特定的规则为该函数创建一个prototype属性,而这个属性指向函数的原型对象(Function.prototype),默认情况下该原型对象会获得一个construtor属性,这个属性指向*包含一个prototype属性的函数指针*(Function.prototype.constructor),并且我们可以通过prototype对象继续添加属性和方法\n<hr>\n创建自定义构造函数后,其原型对象默认只会取得construtor属性,其它方法都是继承自Object\n\n当创建一个实例后,该实例内部有一个指针(*._ _proto_ _*),指向构造函数的原型对象\n\n```\nfunction Parent(){}\n\nvar p1 = new Parent();\n\nParent.prototype.constructor === Parent //true\n\np1.__proto__ === Parent.prototype //true\n```\n\n确定一个属性存在于原型对象中 \n\nhasOwnProperty() //判断一个属性是否存在于实例中存在true,不存在false\n\nin 操作符 //判断一个属性是否存在于对象中(在实例和原型上都会去寻找)\n\nisPrototypeOf() //判断一个对象是否为构造函数的实例\n\n```\nfunction hasPrototypeProperty(object,name){\n    return !object.hasOwnProperty(name)&&(name in object);\n}\n\nfunction Person(){}\nvar p = new Person();\nPerson.prototype.isPrototypeOf(p) //true\n```\n\n#### * 组合使用构造函数模式和原型模式\n\n即为两种模式同时使用,构造函数用于定义实例属性,而原型模式用于定义方法和公用的属性\n\n```\nfunction Person(name,age){\n    this.name = name;\n    this.age = age;\n}\nPerson.prototype = {\n    constructor:Person,\n    sayName:function(){\n        return this.name\n    }\n}\n```\n\n#### * 动态原型模式\n\n因为组合模式看起来比较混乱,因此就出现动态原型模式,动态原型模式即为在构造函数内动态的创建原型对象\n\n```\nfunction Person(name,age){\n    this.name = name;\n    this.age = age;\n    if(typeof this.sayName!=undefined){\n        Person.prototype.sayName = function(){\n            return this.name    \n        }\n    }\n}\n\n```\n\n### 继承\n\n#### * 原型链继承\n\n原型链为实现继承的主要方法,其基本思想为利用原型让一个引用类型继承另外一个引用类型的属性和方法\n\n* 原型丶构造函数丶实例的关系 \n\n- [x] 每个构造函数都有一个原型对象.每个原型对象都有一个指向构造函数的指针,而实例都包含一个指向原型对象的指针\n\n```javascript 1.8\nfunction Person() {\n  this.name = \"caicai\"; \n}\nPerson.prototype.getName = function() {\n  return this.name\n}\n\nfunction  Student() {\n    this.age = 20;\n}\n\nStudent.prototype = new Person();\nStudent.prototype.getAge = function() {\n  return this.age;\n}\n\n```\n\n#### * 借用构造函数\n\n在子类型的内部调用父类型的构造函数\n\n```javascript 1.8\nfunction Person() {\n  this.colors = [\"red\",\"blue\"]\n}\nfunction Student() {\n  Person.call(this);\n}\nlet s = new Student();\ns.colors.push(\"black\");\nconsole.log(s.colors)// red,blue,black\n\nlet s1 = new Student();\nconsole.log(s1.colors)//red,blue\n```\n\n#### * 组合继承\n\n将借用构造函数继承和原型链继承结合在一起\n\n```javascript 1.8\nfunction  Person( name ) {\n   this.name = name;\n}\nPerson.prototype.getName = function() {\n  return this.name\n}\n\nfunction Student() {\n  Person.call(this,\"caicai\");\n  this.age = 20;\n}\nStudent.prototype = new Person();\n\nlet s= new Student();\ns.getName() //caicai\n```\n\n#### * 原型式继承\n\n#### * 寄生式继承\n\n#### * 寄生组合式继承\n\n\n\n\n\n\n\n\n\n","source":"_posts/js高程-第三版-兼容问题和注意事项.md","raw":"---\ntitle: js高程(第三版)兼容问题和注意事项\ndate: 2017-08-24 10:01:38\ncategories: Javascript\ntags:\n     - Javascript\n---\n\n# js高级程序设计(第三版) 兼容bug\n\n## 数组(Array)\n\n### 构造函数创建数组\n\n* new Array(arg) \n\n1. arg为数字,则创建一个对应数量的数组\n\n2. arg为字符串,则创建包含arg个的一个数组\n\n3. new操作符可以省略\n\n### 对象字面量创建数组\n\n* bug\n\n1. ```let arr = [1,2,]```\n\n在ie中arr的值为1,2,undefined,而在其它浏览器中arr的值为1,2\n\n2. ```let arr = [,,,,]```\n\n在ie8以下```arr.length = 5```,而其它浏览器为```arr.length = 4```\n\n3. ```let arr = [1,2,3,4]```\n\n若改变arr的length长度,则会改变数组对应的数据```arr.length=5;arr[4] = undefined```\n\n### sort 方法\n\nsort方法默认为升序排列,但是比较的每一项的字符串,因此```let arr = [0,1,5,10,15];arr.sort();console.log(arr)//0,1,10,15,5```\n\n可以借助sort方法的参数(比较函数)得到正确的结果\n\n```javascript 1.8\nlet arr = [0,1,5,10,15];\narr.sort(function(a,b) {\n  if(a<b){\n      return -1;\n  }\n  if(a==b){\n      return 0;\n  }\n  if(a>b){\n      return 1;\n  }\n});\nconsole.log(arr)//[0,1,5,10,15]\n```\n\n## 对象(Object)\n\n### 对象属性类型\n\n* 数据属性  可以直接定义\n\n数据属性包含一个数据的位置,在这个位置可以读取和写入,数据属性有4个描述其属性的行为特性\n\n* * [[ Configureable ]] 表示能否通过delete直接删除其属性,默认值true\n\n* * [[ Enumerable ]] 表示该属性能否通过```for ... in ...```进行遍历,默认值为true\n\n* * [[ Writable ]] 表示该属性的值能否修改,默认值为true\n\n* * [[ Value ]] 表示该属性的数据值,默认值为undefined\n\n<font color=\"red\">以上为每个对象的属性都具有的特性,要想修改其默认属性,必须同过```Object.defineProperty()```方法</font>\n\n```\nObject.defineProperty(属性所在的对象,属性的名字,描述符)\n\n//描述符为以上四个属性,这样就可以修改默认值了\n\n//例子\n\nvar person = {}\nObject.defineProperty(person,\"name\",{\n    value:\"caicai\",\n    writable:false\n})\nconsole.log(person.name) // caicai\nperson.name=\"hahaha\"; //严格模式下报错,非严格模式下将会忽略\nconsole.log(person.name) // caicai\n```\n\n* 访问器属性 不可以直接定义,必须通过`Object.defineProperty()`定义\n\n访问器属性不包含数据值,它们包含一对getter和setter函数\n\n* * [[ Configureable ]] 表示能否通过delete直接删除其属性,默认值true\n\n* * [[ Enumerable ]] 表示该属性能否通过```for ... in ...```进行遍历,默认值为true\n\n* * [[ get ]] 表示读取该属性时的值,默认值为undefined\n\n* * [[ set ]] 表示写入该属性的数据值,默认值为undefined\n\n```\nlet book={\n    __year:2004,\n    edition:1\n}\nObject.defineProperty(book,\"year\",{\n    get:function(){\n        return this.__year;\n    },\n    set:function(newValue){\n        if(newValue>this.__year){\n            this.edition += newValue - this.__year;\n            this.__year = newValue;\n        }\n    }\n})\nbook.year = 2015;\nconsole.log(book.edition)//12\n```\n\n### 创建对象\n\n虽然Objectg构造函数和对象字面量都可以创建对象,但有个缺点,使用同一个接口创建很多对象,会产生大量的重复代码,因此就出现了以下的设计模式\n\n#### *  工厂模式\n\n用函数来封装特定的接口,然后进行创建对象\n\n虽然解决了创建多个对象相似的问题,但是没有解决对象识别的问题\n\n```\n//工厂模式\nfuncction CreatePerson(name,age,job){\n    var o = new Object();\n    o.name = name;\n    o.age = age;\n    o.job = job;\n    o.sayName=function(){\n        return this.name\n    }\n    return o;\n}\nvar p1 = CreatePerson(\"caicai1\",20,\"民工\")\nvar p2 = CreatePerson(\"caicai2\",22,\"IT民工\")\n```\n\n#### * 构造函数模式\n\n自定义构造函数,从而定义自定义对象类型的属性和方法\n* * 与工厂模式的区别\n\n* * * 1.没有显示的创建对象\n\n* * * 2.直接将属性和方法赋值给this对象\n\n* * * 3.没有return语句\n\n* * 优点\n\n* * * 1.没有显示的创建对象\n\n* * * 2.直接将属性和方法赋值给this对象\n\n* * * 3.没有return返回值\n\n* * 缺点\n\n* * * 每个方法都要在实例上重新创建一遍\n\n* * * 可以将方法写到全局,然后赋值,这样可以解决两个函数做同一件事的问题,但是这样的话就会出现很多全局函数,没有封装可言,因此出现了原型模式\n\n```\n//方式一\nfunction Person(name,age,job){\n    this.name = name;\n    this.age = age;\n    this.job = job;\n    this.sayName = function(){\n        return this.name\n    }\n}\nvar p1 = new Person(\"caicai1\",20,\"民工\")\nvar p2 = new Person(\"caicai2\",22,\"IT民工\")\n\n//方式二\n function sayName(){\n    return this.name\n}\nfunction Person(name,age,job){\n    this.name = name;\n    this.age = age;\n    this.job = job;\n    this.sayName = sayName;\n}\nvar p1 = new Person(\"caicai1\",20,\"民工\")\nvar p2 = new Person(\"caicai2\",22,\"IT民工\")\n```\n\n#### * 原型模式\n\n每个函数都有一个prototype属性,这个属性是个指针,指向一个对象,这个对象的用途为让所有实例的属性共享属性和方法\n\n即为不必在构造函数中定义对象的属性和方法,而是将这些属性和方法添加到原型对象上\n\n```\nfunction Person(){}\nPerson.prototype.name= \"caicai\"\nPerson.prototype.age= 20\nPerson.prototype.job= \"It\"\nPerson.prototype.sayName= function(){\n    return this.name\n}\n\nvar p1 = new Person();\n\np1.sayName()//caicai\np1.hasOwnPropertype(\"name\")//false\n\np1.name = \"hahha\"\np1.hasOwnPropertype(\"name\")//true\n\ndelete p1.name\np1.hasOwnPropertype(\"name\")//false\n\nvar p2 = new Person();\np2.sayName()//caicai\n```\n\n![\"原型模式\"](/img/prototype.jpg)\n\n* 原型对象\n\n只要创建函数,就会根据一组特定的规则为该函数创建一个prototype属性,而这个属性指向函数的原型对象(Function.prototype),默认情况下该原型对象会获得一个construtor属性,这个属性指向*包含一个prototype属性的函数指针*(Function.prototype.constructor),并且我们可以通过prototype对象继续添加属性和方法\n<hr>\n创建自定义构造函数后,其原型对象默认只会取得construtor属性,其它方法都是继承自Object\n\n当创建一个实例后,该实例内部有一个指针(*._ _proto_ _*),指向构造函数的原型对象\n\n```\nfunction Parent(){}\n\nvar p1 = new Parent();\n\nParent.prototype.constructor === Parent //true\n\np1.__proto__ === Parent.prototype //true\n```\n\n确定一个属性存在于原型对象中 \n\nhasOwnProperty() //判断一个属性是否存在于实例中存在true,不存在false\n\nin 操作符 //判断一个属性是否存在于对象中(在实例和原型上都会去寻找)\n\nisPrototypeOf() //判断一个对象是否为构造函数的实例\n\n```\nfunction hasPrototypeProperty(object,name){\n    return !object.hasOwnProperty(name)&&(name in object);\n}\n\nfunction Person(){}\nvar p = new Person();\nPerson.prototype.isPrototypeOf(p) //true\n```\n\n#### * 组合使用构造函数模式和原型模式\n\n即为两种模式同时使用,构造函数用于定义实例属性,而原型模式用于定义方法和公用的属性\n\n```\nfunction Person(name,age){\n    this.name = name;\n    this.age = age;\n}\nPerson.prototype = {\n    constructor:Person,\n    sayName:function(){\n        return this.name\n    }\n}\n```\n\n#### * 动态原型模式\n\n因为组合模式看起来比较混乱,因此就出现动态原型模式,动态原型模式即为在构造函数内动态的创建原型对象\n\n```\nfunction Person(name,age){\n    this.name = name;\n    this.age = age;\n    if(typeof this.sayName!=undefined){\n        Person.prototype.sayName = function(){\n            return this.name    \n        }\n    }\n}\n\n```\n\n### 继承\n\n#### * 原型链继承\n\n原型链为实现继承的主要方法,其基本思想为利用原型让一个引用类型继承另外一个引用类型的属性和方法\n\n* 原型丶构造函数丶实例的关系 \n\n- [x] 每个构造函数都有一个原型对象.每个原型对象都有一个指向构造函数的指针,而实例都包含一个指向原型对象的指针\n\n```javascript 1.8\nfunction Person() {\n  this.name = \"caicai\"; \n}\nPerson.prototype.getName = function() {\n  return this.name\n}\n\nfunction  Student() {\n    this.age = 20;\n}\n\nStudent.prototype = new Person();\nStudent.prototype.getAge = function() {\n  return this.age;\n}\n\n```\n\n#### * 借用构造函数\n\n在子类型的内部调用父类型的构造函数\n\n```javascript 1.8\nfunction Person() {\n  this.colors = [\"red\",\"blue\"]\n}\nfunction Student() {\n  Person.call(this);\n}\nlet s = new Student();\ns.colors.push(\"black\");\nconsole.log(s.colors)// red,blue,black\n\nlet s1 = new Student();\nconsole.log(s1.colors)//red,blue\n```\n\n#### * 组合继承\n\n将借用构造函数继承和原型链继承结合在一起\n\n```javascript 1.8\nfunction  Person( name ) {\n   this.name = name;\n}\nPerson.prototype.getName = function() {\n  return this.name\n}\n\nfunction Student() {\n  Person.call(this,\"caicai\");\n  this.age = 20;\n}\nStudent.prototype = new Person();\n\nlet s= new Student();\ns.getName() //caicai\n```\n\n#### * 原型式继承\n\n#### * 寄生式继承\n\n#### * 寄生组合式继承\n\n\n\n\n\n\n\n\n\n","slug":"js高程-第三版-兼容问题和注意事项","published":1,"updated":"2017-09-19T09:16:17.777Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb1u1p8c001b0sq9lcvznx3g","content":"<h1 id=\"js高级程序设计-第三版-兼容bug\"><a href=\"#js高级程序设计-第三版-兼容bug\" class=\"headerlink\" title=\"js高级程序设计(第三版) 兼容bug\"></a>js高级程序设计(第三版) 兼容bug</h1><h2 id=\"数组-Array\"><a href=\"#数组-Array\" class=\"headerlink\" title=\"数组(Array)\"></a>数组(Array)</h2><h3 id=\"构造函数创建数组\"><a href=\"#构造函数创建数组\" class=\"headerlink\" title=\"构造函数创建数组\"></a>构造函数创建数组</h3><ul>\n<li>new Array(arg) </li>\n</ul>\n<ol>\n<li><p>arg为数字,则创建一个对应数量的数组</p>\n</li>\n<li><p>arg为字符串,则创建包含arg个的一个数组</p>\n</li>\n<li><p>new操作符可以省略</p>\n</li>\n</ol>\n<h3 id=\"对象字面量创建数组\"><a href=\"#对象字面量创建数组\" class=\"headerlink\" title=\"对象字面量创建数组\"></a>对象字面量创建数组</h3><ul>\n<li>bug</li>\n</ul>\n<ol>\n<li><figure class=\"highlight plain\"><figcaption><span>arr = [1,2,]```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">在ie中arr的值为1,2,undefined,而在其它浏览器中arr的值为1,2</div><div class=\"line\"></div><div class=\"line\">2. ```let arr = [,,,,]</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在ie8以下<figure class=\"highlight plain\"><figcaption><span>= 5```,而其它浏览器为```arr.length = 4```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">3. ```let arr = [1,2,3,4]</div></pre></td></tr></table></figure></p>\n<p>若改变arr的length长度,则会改变数组对应的数据<figure class=\"highlight plain\"><figcaption><span>= undefined```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">### sort 方法</div><div class=\"line\"></div><div class=\"line\">sort方法默认为升序排列,但是比较的每一项的字符串,因此```let arr = [0,1,5,10,15];arr.sort();console.log(arr)//0,1,10,15,5</div></pre></td></tr></table></figure></p>\n<p>可以借助sort方法的参数(比较函数)得到正确的结果</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">10</span>,<span class=\"number\">15</span>];</div><div class=\"line\">arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(a&lt;b)&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span>(a==b)&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span>(a&gt;b)&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(arr)<span class=\"comment\">//[0,1,5,10,15]</span></div></pre></td></tr></table></figure>\n<h2 id=\"对象-Object\"><a href=\"#对象-Object\" class=\"headerlink\" title=\"对象(Object)\"></a>对象(Object)</h2><h3 id=\"对象属性类型\"><a href=\"#对象属性类型\" class=\"headerlink\" title=\"对象属性类型\"></a>对象属性类型</h3><ul>\n<li>数据属性  可以直接定义</li>\n</ul>\n<p>数据属性包含一个数据的位置,在这个位置可以读取和写入,数据属性有4个描述其属性的行为特性</p>\n<ul>\n<li><ul>\n<li>[[ Configureable ]] 表示能否通过delete直接删除其属性,默认值true</li>\n</ul>\n</li>\n<li><ul>\n<li>[[ Enumerable ]] 表示该属性能否通过<figure class=\"highlight plain\"><figcaption><span>... in ...```进行遍历,默认值为true</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">* * [[ Writable ]] 表示该属性的值能否修改,默认值为true</div><div class=\"line\"></div><div class=\"line\">* * [[ Value ]] 表示该属性的数据值,默认值为undefined</div><div class=\"line\"></div><div class=\"line\">&lt;font color=&quot;red&quot;&gt;以上为每个对象的属性都具有的特性,要想修改其默认属性,必须同过```Object.defineProperty()```方法&lt;/font&gt;</div></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<p>Object.defineProperty(属性所在的对象,属性的名字,描述符)</p>\n<p>//描述符为以上四个属性,这样就可以修改默认值了</p>\n<p>//例子</p>\n<p>var person = {}<br>Object.defineProperty(person,”name”,{<br>    value:”caicai”,<br>    writable:false<br>})<br>console.log(person.name) // caicai<br>person.name=”hahaha”; //严格模式下报错,非严格模式下将会忽略<br>console.log(person.name) // caicai<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">* 访问器属性 不可以直接定义,必须通过`Object.defineProperty()`定义</div><div class=\"line\"></div><div class=\"line\">访问器属性不包含数据值,它们包含一对getter和setter函数</div><div class=\"line\"></div><div class=\"line\">* * [[ Configureable ]] 表示能否通过delete直接删除其属性,默认值true</div><div class=\"line\"></div><div class=\"line\">* * [[ Enumerable ]] 表示该属性能否通过```for ... in ...```进行遍历,默认值为true</div><div class=\"line\"></div><div class=\"line\">* * [[ get ]] 表示读取该属性时的值,默认值为undefined</div><div class=\"line\"></div><div class=\"line\">* * [[ set ]] 表示写入该属性的数据值,默认值为undefined</div></pre></td></tr></table></figure></p>\n<p>let book={<br>    <strong>year:2004,<br>    edition:1<br>}<br>Object.defineProperty(book,”year”,{<br>    get:function(){<br>        return this.</strong>year;<br>    },<br>    set:function(newValue){<br>        if(newValue&gt;this.<strong>year){<br>            this.edition += newValue - this.</strong>year;<br>            this.__year = newValue;<br>        }<br>    }<br>})<br>book.year = 2015;<br>console.log(book.edition)//12<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">### 创建对象</div><div class=\"line\"></div><div class=\"line\">虽然Objectg构造函数和对象字面量都可以创建对象,但有个缺点,使用同一个接口创建很多对象,会产生大量的重复代码,因此就出现了以下的设计模式</div><div class=\"line\"></div><div class=\"line\">#### *  工厂模式</div><div class=\"line\"></div><div class=\"line\">用函数来封装特定的接口,然后进行创建对象</div><div class=\"line\"></div><div class=\"line\">虽然解决了创建多个对象相似的问题,但是没有解决对象识别的问题</div></pre></td></tr></table></figure></p>\n<p>//工厂模式<br>funcction CreatePerson(name,age,job){<br>    var o = new Object();<br>    o.name = name;<br>    o.age = age;<br>    o.job = job;<br>    o.sayName=function(){<br>        return this.name<br>    }<br>    return o;<br>}<br>var p1 = CreatePerson(“caicai1”,20,”民工”)<br>var p2 = CreatePerson(“caicai2”,22,”IT民工”)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">#### * 构造函数模式</div><div class=\"line\"></div><div class=\"line\">自定义构造函数,从而定义自定义对象类型的属性和方法</div><div class=\"line\">* * 与工厂模式的区别</div><div class=\"line\"></div><div class=\"line\">* * * 1.没有显示的创建对象</div><div class=\"line\"></div><div class=\"line\">* * * 2.直接将属性和方法赋值给this对象</div><div class=\"line\"></div><div class=\"line\">* * * 3.没有return语句</div><div class=\"line\"></div><div class=\"line\">* * 优点</div><div class=\"line\"></div><div class=\"line\">* * * 1.没有显示的创建对象</div><div class=\"line\"></div><div class=\"line\">* * * 2.直接将属性和方法赋值给this对象</div><div class=\"line\"></div><div class=\"line\">* * * 3.没有return返回值</div><div class=\"line\"></div><div class=\"line\">* * 缺点</div><div class=\"line\"></div><div class=\"line\">* * * 每个方法都要在实例上重新创建一遍</div><div class=\"line\"></div><div class=\"line\">* * * 可以将方法写到全局,然后赋值,这样可以解决两个函数做同一件事的问题,但是这样的话就会出现很多全局函数,没有封装可言,因此出现了原型模式</div></pre></td></tr></table></figure></p>\n<p>//方式一<br>function Person(name,age,job){<br>    this.name = name;<br>    this.age = age;<br>    this.job = job;<br>    this.sayName = function(){<br>        return this.name<br>    }<br>}<br>var p1 = new Person(“caicai1”,20,”民工”)<br>var p2 = new Person(“caicai2”,22,”IT民工”)</p>\n<p>//方式二<br> function sayName(){<br>    return this.name<br>}<br>function Person(name,age,job){<br>    this.name = name;<br>    this.age = age;<br>    this.job = job;<br>    this.sayName = sayName;<br>}<br>var p1 = new Person(“caicai1”,20,”民工”)<br>var p2 = new Person(“caicai2”,22,”IT民工”)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">#### * 原型模式</div><div class=\"line\"></div><div class=\"line\">每个函数都有一个prototype属性,这个属性是个指针,指向一个对象,这个对象的用途为让所有实例的属性共享属性和方法</div><div class=\"line\"></div><div class=\"line\">即为不必在构造函数中定义对象的属性和方法,而是将这些属性和方法添加到原型对象上</div></pre></td></tr></table></figure></p>\n<p>function Person(){}<br>Person.prototype.name= “caicai”<br>Person.prototype.age= 20<br>Person.prototype.job= “It”<br>Person.prototype.sayName= function(){<br>    return this.name<br>}</p>\n<p>var p1 = new Person();</p>\n<p>p1.sayName()//caicai<br>p1.hasOwnPropertype(“name”)//false</p>\n<p>p1.name = “hahha”<br>p1.hasOwnPropertype(“name”)//true</p>\n<p>delete p1.name<br>p1.hasOwnPropertype(“name”)//false</p>\n<p>var p2 = new Person();<br>p2.sayName()//caicai<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">![&quot;原型模式&quot;](/img/prototype.jpg)</div><div class=\"line\"></div><div class=\"line\">* 原型对象</div><div class=\"line\"></div><div class=\"line\">只要创建函数,就会根据一组特定的规则为该函数创建一个prototype属性,而这个属性指向函数的原型对象(Function.prototype),默认情况下该原型对象会获得一个construtor属性,这个属性指向*包含一个prototype属性的函数指针*(Function.prototype.constructor),并且我们可以通过prototype对象继续添加属性和方法</div><div class=\"line\">&lt;hr&gt;</div><div class=\"line\">创建自定义构造函数后,其原型对象默认只会取得construtor属性,其它方法都是继承自Object</div><div class=\"line\"></div><div class=\"line\">当创建一个实例后,该实例内部有一个指针(*._ _proto_ _*),指向构造函数的原型对象</div></pre></td></tr></table></figure></p>\n<p>function Parent(){}</p>\n<p>var p1 = new Parent();</p>\n<p>Parent.prototype.constructor === Parent //true</p>\n<p>p1.<strong>proto</strong> === Parent.prototype //true<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">确定一个属性存在于原型对象中 </div><div class=\"line\"></div><div class=\"line\">hasOwnProperty() //判断一个属性是否存在于实例中存在true,不存在false</div><div class=\"line\"></div><div class=\"line\">in 操作符 //判断一个属性是否存在于对象中(在实例和原型上都会去寻找)</div><div class=\"line\"></div><div class=\"line\">isPrototypeOf() //判断一个对象是否为构造函数的实例</div></pre></td></tr></table></figure></p>\n<p>function hasPrototypeProperty(object,name){<br>    return !object.hasOwnProperty(name)&amp;&amp;(name in object);<br>}</p>\n<p>function Person(){}<br>var p = new Person();<br>Person.prototype.isPrototypeOf(p) //true<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">#### * 组合使用构造函数模式和原型模式</div><div class=\"line\"></div><div class=\"line\">即为两种模式同时使用,构造函数用于定义实例属性,而原型模式用于定义方法和公用的属性</div></pre></td></tr></table></figure></p>\n<p>function Person(name,age){<br>    this.name = name;<br>    this.age = age;<br>}<br>Person.prototype = {<br>    constructor:Person,<br>    sayName:function(){<br>        return this.name<br>    }<br>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">#### * 动态原型模式</div><div class=\"line\"></div><div class=\"line\">因为组合模式看起来比较混乱,因此就出现动态原型模式,动态原型模式即为在构造函数内动态的创建原型对象</div></pre></td></tr></table></figure></p>\n<p>function Person(name,age){<br>    this.name = name;<br>    this.age = age;<br>    if(typeof this.sayName!=undefined){<br>        Person.prototype.sayName = function(){<br>            return this.name<br>        }<br>    }<br>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">### 继承</div><div class=\"line\"></div><div class=\"line\">#### * 原型链继承</div><div class=\"line\"></div><div class=\"line\">原型链为实现继承的主要方法,其基本思想为利用原型让一个引用类型继承另外一个引用类型的属性和方法</div><div class=\"line\"></div><div class=\"line\">* 原型丶构造函数丶实例的关系 </div><div class=\"line\"></div><div class=\"line\">- [x] 每个构造函数都有一个原型对象.每个原型对象都有一个指向构造函数的指针,而实例都包含一个指向原型对象的指针</div><div class=\"line\"></div><div class=\"line\">```javascript 1.8</div><div class=\"line\">function Person() &#123;</div><div class=\"line\">  this.name = &quot;caicai&quot;; </div><div class=\"line\">&#125;</div><div class=\"line\">Person.prototype.getName = function() &#123;</div><div class=\"line\">  return this.name</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function  Student() &#123;</div><div class=\"line\">    this.age = 20;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Student.prototype = new Person();</div><div class=\"line\">Student.prototype.getAge = function() &#123;</div><div class=\"line\">  return this.age;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"借用构造函数\"><a href=\"#借用构造函数\" class=\"headerlink\" title=\"* 借用构造函数\"></a>* 借用构造函数</h4><p>在子类型的内部调用父类型的构造函数</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.colors = [<span class=\"string\">\"red\"</span>,<span class=\"string\">\"blue\"</span>]</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  Person.call(<span class=\"keyword\">this</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"keyword\">new</span> Student();</div><div class=\"line\">s.colors.push(<span class=\"string\">\"black\"</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(s.colors)<span class=\"comment\">// red,blue,black</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> s1 = <span class=\"keyword\">new</span> Student();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(s1.colors)<span class=\"comment\">//red,blue</span></div></pre></td></tr></table></figure>\n<h4 id=\"组合继承\"><a href=\"#组合继承\" class=\"headerlink\" title=\"* 组合继承\"></a>* 组合继承</h4><p>将借用构造函数继承和原型链继承结合在一起</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"title\">Person</span>(<span class=\"params\"> name </span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">&#125;</div><div class=\"line\">Person.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  Person.call(<span class=\"keyword\">this</span>,<span class=\"string\">\"caicai\"</span>);</div><div class=\"line\">  <span class=\"keyword\">this</span>.age = <span class=\"number\">20</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">Student.prototype = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> s= <span class=\"keyword\">new</span> Student();</div><div class=\"line\">s.getName() <span class=\"comment\">//caicai</span></div></pre></td></tr></table></figure>\n<h4 id=\"原型式继承\"><a href=\"#原型式继承\" class=\"headerlink\" title=\"* 原型式继承\"></a>* 原型式继承</h4><h4 id=\"寄生式继承\"><a href=\"#寄生式继承\" class=\"headerlink\" title=\"* 寄生式继承\"></a>* 寄生式继承</h4><h4 id=\"寄生组合式继承\"><a href=\"#寄生组合式继承\" class=\"headerlink\" title=\"* 寄生组合式继承\"></a>* 寄生组合式继承</h4>","excerpt":"","more":"<h1 id=\"js高级程序设计-第三版-兼容bug\"><a href=\"#js高级程序设计-第三版-兼容bug\" class=\"headerlink\" title=\"js高级程序设计(第三版) 兼容bug\"></a>js高级程序设计(第三版) 兼容bug</h1><h2 id=\"数组-Array\"><a href=\"#数组-Array\" class=\"headerlink\" title=\"数组(Array)\"></a>数组(Array)</h2><h3 id=\"构造函数创建数组\"><a href=\"#构造函数创建数组\" class=\"headerlink\" title=\"构造函数创建数组\"></a>构造函数创建数组</h3><ul>\n<li>new Array(arg) </li>\n</ul>\n<ol>\n<li><p>arg为数字,则创建一个对应数量的数组</p>\n</li>\n<li><p>arg为字符串,则创建包含arg个的一个数组</p>\n</li>\n<li><p>new操作符可以省略</p>\n</li>\n</ol>\n<h3 id=\"对象字面量创建数组\"><a href=\"#对象字面量创建数组\" class=\"headerlink\" title=\"对象字面量创建数组\"></a>对象字面量创建数组</h3><ul>\n<li>bug</li>\n</ul>\n<ol>\n<li><figure class=\"highlight plain\"><figcaption><span>arr = [1,2,]```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">在ie中arr的值为1,2,undefined,而在其它浏览器中arr的值为1,2</div><div class=\"line\"></div><div class=\"line\">2. ```let arr = [,,,,]</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在ie8以下<figure class=\"highlight plain\"><figcaption><span>= 5```,而其它浏览器为```arr.length = 4```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">3. ```let arr = [1,2,3,4]</div></pre></td></tr></table></figure></p>\n<p>若改变arr的length长度,则会改变数组对应的数据<figure class=\"highlight plain\"><figcaption><span>= undefined```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">### sort 方法</div><div class=\"line\"></div><div class=\"line\">sort方法默认为升序排列,但是比较的每一项的字符串,因此```let arr = [0,1,5,10,15];arr.sort();console.log(arr)//0,1,10,15,5</div></pre></td></tr></table></figure></p>\n<p>可以借助sort方法的参数(比较函数)得到正确的结果</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">10</span>,<span class=\"number\">15</span>];</div><div class=\"line\">arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(a&lt;b)&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span>(a==b)&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span>(a&gt;b)&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(arr)<span class=\"comment\">//[0,1,5,10,15]</span></div></pre></td></tr></table></figure>\n<h2 id=\"对象-Object\"><a href=\"#对象-Object\" class=\"headerlink\" title=\"对象(Object)\"></a>对象(Object)</h2><h3 id=\"对象属性类型\"><a href=\"#对象属性类型\" class=\"headerlink\" title=\"对象属性类型\"></a>对象属性类型</h3><ul>\n<li>数据属性  可以直接定义</li>\n</ul>\n<p>数据属性包含一个数据的位置,在这个位置可以读取和写入,数据属性有4个描述其属性的行为特性</p>\n<ul>\n<li><ul>\n<li>[[ Configureable ]] 表示能否通过delete直接删除其属性,默认值true</li>\n</ul>\n</li>\n<li><ul>\n<li>[[ Enumerable ]] 表示该属性能否通过<figure class=\"highlight plain\"><figcaption><span>... in ...```进行遍历,默认值为true</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">* * [[ Writable ]] 表示该属性的值能否修改,默认值为true</div><div class=\"line\"></div><div class=\"line\">* * [[ Value ]] 表示该属性的数据值,默认值为undefined</div><div class=\"line\"></div><div class=\"line\">&lt;font color=&quot;red&quot;&gt;以上为每个对象的属性都具有的特性,要想修改其默认属性,必须同过```Object.defineProperty()```方法&lt;/font&gt;</div></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<p>Object.defineProperty(属性所在的对象,属性的名字,描述符)</p>\n<p>//描述符为以上四个属性,这样就可以修改默认值了</p>\n<p>//例子</p>\n<p>var person = {}<br>Object.defineProperty(person,”name”,{<br>    value:”caicai”,<br>    writable:false<br>})<br>console.log(person.name) // caicai<br>person.name=”hahaha”; //严格模式下报错,非严格模式下将会忽略<br>console.log(person.name) // caicai<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">* 访问器属性 不可以直接定义,必须通过`Object.defineProperty()`定义</div><div class=\"line\"></div><div class=\"line\">访问器属性不包含数据值,它们包含一对getter和setter函数</div><div class=\"line\"></div><div class=\"line\">* * [[ Configureable ]] 表示能否通过delete直接删除其属性,默认值true</div><div class=\"line\"></div><div class=\"line\">* * [[ Enumerable ]] 表示该属性能否通过```for ... in ...```进行遍历,默认值为true</div><div class=\"line\"></div><div class=\"line\">* * [[ get ]] 表示读取该属性时的值,默认值为undefined</div><div class=\"line\"></div><div class=\"line\">* * [[ set ]] 表示写入该属性的数据值,默认值为undefined</div></pre></td></tr></table></figure></p>\n<p>let book={<br>    <strong>year:2004,<br>    edition:1<br>}<br>Object.defineProperty(book,”year”,{<br>    get:function(){<br>        return this.</strong>year;<br>    },<br>    set:function(newValue){<br>        if(newValue&gt;this.<strong>year){<br>            this.edition += newValue - this.</strong>year;<br>            this.__year = newValue;<br>        }<br>    }<br>})<br>book.year = 2015;<br>console.log(book.edition)//12<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">### 创建对象</div><div class=\"line\"></div><div class=\"line\">虽然Objectg构造函数和对象字面量都可以创建对象,但有个缺点,使用同一个接口创建很多对象,会产生大量的重复代码,因此就出现了以下的设计模式</div><div class=\"line\"></div><div class=\"line\">#### *  工厂模式</div><div class=\"line\"></div><div class=\"line\">用函数来封装特定的接口,然后进行创建对象</div><div class=\"line\"></div><div class=\"line\">虽然解决了创建多个对象相似的问题,但是没有解决对象识别的问题</div></pre></td></tr></table></figure></p>\n<p>//工厂模式<br>funcction CreatePerson(name,age,job){<br>    var o = new Object();<br>    o.name = name;<br>    o.age = age;<br>    o.job = job;<br>    o.sayName=function(){<br>        return this.name<br>    }<br>    return o;<br>}<br>var p1 = CreatePerson(“caicai1”,20,”民工”)<br>var p2 = CreatePerson(“caicai2”,22,”IT民工”)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">#### * 构造函数模式</div><div class=\"line\"></div><div class=\"line\">自定义构造函数,从而定义自定义对象类型的属性和方法</div><div class=\"line\">* * 与工厂模式的区别</div><div class=\"line\"></div><div class=\"line\">* * * 1.没有显示的创建对象</div><div class=\"line\"></div><div class=\"line\">* * * 2.直接将属性和方法赋值给this对象</div><div class=\"line\"></div><div class=\"line\">* * * 3.没有return语句</div><div class=\"line\"></div><div class=\"line\">* * 优点</div><div class=\"line\"></div><div class=\"line\">* * * 1.没有显示的创建对象</div><div class=\"line\"></div><div class=\"line\">* * * 2.直接将属性和方法赋值给this对象</div><div class=\"line\"></div><div class=\"line\">* * * 3.没有return返回值</div><div class=\"line\"></div><div class=\"line\">* * 缺点</div><div class=\"line\"></div><div class=\"line\">* * * 每个方法都要在实例上重新创建一遍</div><div class=\"line\"></div><div class=\"line\">* * * 可以将方法写到全局,然后赋值,这样可以解决两个函数做同一件事的问题,但是这样的话就会出现很多全局函数,没有封装可言,因此出现了原型模式</div></pre></td></tr></table></figure></p>\n<p>//方式一<br>function Person(name,age,job){<br>    this.name = name;<br>    this.age = age;<br>    this.job = job;<br>    this.sayName = function(){<br>        return this.name<br>    }<br>}<br>var p1 = new Person(“caicai1”,20,”民工”)<br>var p2 = new Person(“caicai2”,22,”IT民工”)</p>\n<p>//方式二<br> function sayName(){<br>    return this.name<br>}<br>function Person(name,age,job){<br>    this.name = name;<br>    this.age = age;<br>    this.job = job;<br>    this.sayName = sayName;<br>}<br>var p1 = new Person(“caicai1”,20,”民工”)<br>var p2 = new Person(“caicai2”,22,”IT民工”)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">#### * 原型模式</div><div class=\"line\"></div><div class=\"line\">每个函数都有一个prototype属性,这个属性是个指针,指向一个对象,这个对象的用途为让所有实例的属性共享属性和方法</div><div class=\"line\"></div><div class=\"line\">即为不必在构造函数中定义对象的属性和方法,而是将这些属性和方法添加到原型对象上</div></pre></td></tr></table></figure></p>\n<p>function Person(){}<br>Person.prototype.name= “caicai”<br>Person.prototype.age= 20<br>Person.prototype.job= “It”<br>Person.prototype.sayName= function(){<br>    return this.name<br>}</p>\n<p>var p1 = new Person();</p>\n<p>p1.sayName()//caicai<br>p1.hasOwnPropertype(“name”)//false</p>\n<p>p1.name = “hahha”<br>p1.hasOwnPropertype(“name”)//true</p>\n<p>delete p1.name<br>p1.hasOwnPropertype(“name”)//false</p>\n<p>var p2 = new Person();<br>p2.sayName()//caicai<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">![&quot;原型模式&quot;](/img/prototype.jpg)</div><div class=\"line\"></div><div class=\"line\">* 原型对象</div><div class=\"line\"></div><div class=\"line\">只要创建函数,就会根据一组特定的规则为该函数创建一个prototype属性,而这个属性指向函数的原型对象(Function.prototype),默认情况下该原型对象会获得一个construtor属性,这个属性指向*包含一个prototype属性的函数指针*(Function.prototype.constructor),并且我们可以通过prototype对象继续添加属性和方法</div><div class=\"line\">&lt;hr&gt;</div><div class=\"line\">创建自定义构造函数后,其原型对象默认只会取得construtor属性,其它方法都是继承自Object</div><div class=\"line\"></div><div class=\"line\">当创建一个实例后,该实例内部有一个指针(*._ _proto_ _*),指向构造函数的原型对象</div></pre></td></tr></table></figure></p>\n<p>function Parent(){}</p>\n<p>var p1 = new Parent();</p>\n<p>Parent.prototype.constructor === Parent //true</p>\n<p>p1.<strong>proto</strong> === Parent.prototype //true<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">确定一个属性存在于原型对象中 </div><div class=\"line\"></div><div class=\"line\">hasOwnProperty() //判断一个属性是否存在于实例中存在true,不存在false</div><div class=\"line\"></div><div class=\"line\">in 操作符 //判断一个属性是否存在于对象中(在实例和原型上都会去寻找)</div><div class=\"line\"></div><div class=\"line\">isPrototypeOf() //判断一个对象是否为构造函数的实例</div></pre></td></tr></table></figure></p>\n<p>function hasPrototypeProperty(object,name){<br>    return !object.hasOwnProperty(name)&amp;&amp;(name in object);<br>}</p>\n<p>function Person(){}<br>var p = new Person();<br>Person.prototype.isPrototypeOf(p) //true<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">#### * 组合使用构造函数模式和原型模式</div><div class=\"line\"></div><div class=\"line\">即为两种模式同时使用,构造函数用于定义实例属性,而原型模式用于定义方法和公用的属性</div></pre></td></tr></table></figure></p>\n<p>function Person(name,age){<br>    this.name = name;<br>    this.age = age;<br>}<br>Person.prototype = {<br>    constructor:Person,<br>    sayName:function(){<br>        return this.name<br>    }<br>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">#### * 动态原型模式</div><div class=\"line\"></div><div class=\"line\">因为组合模式看起来比较混乱,因此就出现动态原型模式,动态原型模式即为在构造函数内动态的创建原型对象</div></pre></td></tr></table></figure></p>\n<p>function Person(name,age){<br>    this.name = name;<br>    this.age = age;<br>    if(typeof this.sayName!=undefined){<br>        Person.prototype.sayName = function(){<br>            return this.name<br>        }<br>    }<br>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">### 继承</div><div class=\"line\"></div><div class=\"line\">#### * 原型链继承</div><div class=\"line\"></div><div class=\"line\">原型链为实现继承的主要方法,其基本思想为利用原型让一个引用类型继承另外一个引用类型的属性和方法</div><div class=\"line\"></div><div class=\"line\">* 原型丶构造函数丶实例的关系 </div><div class=\"line\"></div><div class=\"line\">- [x] 每个构造函数都有一个原型对象.每个原型对象都有一个指向构造函数的指针,而实例都包含一个指向原型对象的指针</div><div class=\"line\"></div><div class=\"line\">```javascript 1.8</div><div class=\"line\">function Person() &#123;</div><div class=\"line\">  this.name = &quot;caicai&quot;; </div><div class=\"line\">&#125;</div><div class=\"line\">Person.prototype.getName = function() &#123;</div><div class=\"line\">  return this.name</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function  Student() &#123;</div><div class=\"line\">    this.age = 20;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Student.prototype = new Person();</div><div class=\"line\">Student.prototype.getAge = function() &#123;</div><div class=\"line\">  return this.age;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"借用构造函数\"><a href=\"#借用构造函数\" class=\"headerlink\" title=\"* 借用构造函数\"></a>* 借用构造函数</h4><p>在子类型的内部调用父类型的构造函数</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.colors = [<span class=\"string\">\"red\"</span>,<span class=\"string\">\"blue\"</span>]</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  Person.call(<span class=\"keyword\">this</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"keyword\">new</span> Student();</div><div class=\"line\">s.colors.push(<span class=\"string\">\"black\"</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(s.colors)<span class=\"comment\">// red,blue,black</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> s1 = <span class=\"keyword\">new</span> Student();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(s1.colors)<span class=\"comment\">//red,blue</span></div></pre></td></tr></table></figure>\n<h4 id=\"组合继承\"><a href=\"#组合继承\" class=\"headerlink\" title=\"* 组合继承\"></a>* 组合继承</h4><p>将借用构造函数继承和原型链继承结合在一起</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"title\">Person</span>(<span class=\"params\"> name </span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">&#125;</div><div class=\"line\">Person.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  Person.call(<span class=\"keyword\">this</span>,<span class=\"string\">\"caicai\"</span>);</div><div class=\"line\">  <span class=\"keyword\">this</span>.age = <span class=\"number\">20</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">Student.prototype = <span class=\"keyword\">new</span> Person();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> s= <span class=\"keyword\">new</span> Student();</div><div class=\"line\">s.getName() <span class=\"comment\">//caicai</span></div></pre></td></tr></table></figure>\n<h4 id=\"原型式继承\"><a href=\"#原型式继承\" class=\"headerlink\" title=\"* 原型式继承\"></a>* 原型式继承</h4><h4 id=\"寄生式继承\"><a href=\"#寄生式继承\" class=\"headerlink\" title=\"* 寄生式继承\"></a>* 寄生式继承</h4><h4 id=\"寄生组合式继承\"><a href=\"#寄生组合式继承\" class=\"headerlink\" title=\"* 寄生组合式继承\"></a>* 寄生组合式继承</h4>"},{"title":"sass中的@规则","date":"2017-07-01T09:54:55.000Z","_content":"### scss @规则\n\n> * @import\n\n\n1. Sass 扩展了 CSS 的 @import 规则，让它能够引入 SCSS 和 Sass 文件。 所有引入的 SCSS 和 Sass 文件都会被合并并输出一个单一的 CSS 文件。\n2. 引入多个文件 @import \"rounded-corners\", \"text-shadow\";\n3. 嵌套引入\n\n```css\n//假设要引入的样式文件`example.scss`文件中包含这样的代码：\n.example {\n  color: red;\n}\n//然后这样引用：\n\n#main {\n  @import \"example\";\n}\n//编译出来的 CSS：\n#main .example {\n  color: red;\n}\n```\n\n> * @media 指令和 CSS 的使用规则一样的简单，但它有另外一个功能，可以嵌套在 CSS 规则中。\n\n```css\n.sidebar {\n  width: 300px;\n  @media screen and (orientation: landscape) {\n    width: 500px;\n  }\n}\n//编译出来：\n.sidebar {\n  width: 300px; \n}\n@media screen and (orientation: landscape) {\n    .sidebar {\n      width: 500px; \n    } \n}\n//@media 也可以嵌套 @media：\n@media screen {\n  .sidebar {\n    @media (orientation: landscape) {\n      width: 500px;\n    }\n  }\n}\n//此时编译出来：\n@media screen and (orientation: landscape) {\n  .sidebar {\n    width: 500px; } }\n//在使用 @media 时，还可以使用插件#{}:\n$media: screen;\n$feature: -webkit-min-device-pixel-ratio;\n$value: 1.5;\n@media #{$media} and ($feature: $value) {\n  .sidebar {\n    width: 500px;\n  }\n}\n//编译出来的 CSS：\n@media screen and (-webkit-min-device-pixel-ratio: 1.5) {\n  .sidebar {\n    width: 500px; \n  } \n}\n```\n\n> * @extend 是用来扩展选择器或占位符\n\n```css\n.error {\n  border: 1px #f00;\n  background-color: #fdd;\n}\n.error.intrusion {\n  background-image: url(\"/image/hacked.png\");\n}\n.seriousError {\n  @extend .error;\n  border-width: 3px;\n}\n//编译结果\n.error, .seriousError {\n  border: 1px #f00;\n  background-color: #fdd; }\n.error.intrusion, .seriousError.intrusion {\n  background-image: url(\"/image/hacked.png\"); \n}\n.seriousError {\n  border-width: 3px; \n}\n```\n\n> * @at-root 从字面上解释就是跳出根元素\n\n```css\n.a {\n  color: red;\n  .b {\n    color: orange;\n    .c {\n      color: yellow;\n      @at-root .d {\n        color: green;\n      }\n    }\n  }  \n}\n//编译结果\n.a {\n  color: red;\n}\n.a .b {\n  color: orange;\n}\n.a .b .c {\n  color: yellow;\n}\n.d {\n  color: green;\n}\n```\n\n> * @debug 在 Sass 中是用来调试的，当你的在 Sass 的源码中使用了 @debug 指令之后，Sass 代码在编译出错时，在命令终端会输出你设置的提示 Bug\n\n```css\n@debug 10em + 12em;\n会输出：\nLine 1 DEBUG: 22em\n```\n\n> * @warn 和 @debug 功能类似，用来帮助我们更好的调试 Sass。\n\n> * @error 和 @warn、@debug 功能是如出一辙。\n\n```css\n@mixin error($x){\n  @if $x < 10 {\n    width: $x * 10px;\n  } @else if $x == 10 {\n    width: $x;\n  } @else {\n    @error \"你需要将#{$x}值设置在10以内的数\";\n  }\n\n}\n.test {\n  @include error(15);\n}\n//编译结果\n=> 你需要将15值设置在10以内的数 on line 7 at column 5\n```","source":"_posts/sass中的规则.md","raw":"---\ntitle: sass中的@规则\ndate: 2017-07-01 17:54:55\ntags:\n    - Sass\ncategories: Sass\n---\n### scss @规则\n\n> * @import\n\n\n1. Sass 扩展了 CSS 的 @import 规则，让它能够引入 SCSS 和 Sass 文件。 所有引入的 SCSS 和 Sass 文件都会被合并并输出一个单一的 CSS 文件。\n2. 引入多个文件 @import \"rounded-corners\", \"text-shadow\";\n3. 嵌套引入\n\n```css\n//假设要引入的样式文件`example.scss`文件中包含这样的代码：\n.example {\n  color: red;\n}\n//然后这样引用：\n\n#main {\n  @import \"example\";\n}\n//编译出来的 CSS：\n#main .example {\n  color: red;\n}\n```\n\n> * @media 指令和 CSS 的使用规则一样的简单，但它有另外一个功能，可以嵌套在 CSS 规则中。\n\n```css\n.sidebar {\n  width: 300px;\n  @media screen and (orientation: landscape) {\n    width: 500px;\n  }\n}\n//编译出来：\n.sidebar {\n  width: 300px; \n}\n@media screen and (orientation: landscape) {\n    .sidebar {\n      width: 500px; \n    } \n}\n//@media 也可以嵌套 @media：\n@media screen {\n  .sidebar {\n    @media (orientation: landscape) {\n      width: 500px;\n    }\n  }\n}\n//此时编译出来：\n@media screen and (orientation: landscape) {\n  .sidebar {\n    width: 500px; } }\n//在使用 @media 时，还可以使用插件#{}:\n$media: screen;\n$feature: -webkit-min-device-pixel-ratio;\n$value: 1.5;\n@media #{$media} and ($feature: $value) {\n  .sidebar {\n    width: 500px;\n  }\n}\n//编译出来的 CSS：\n@media screen and (-webkit-min-device-pixel-ratio: 1.5) {\n  .sidebar {\n    width: 500px; \n  } \n}\n```\n\n> * @extend 是用来扩展选择器或占位符\n\n```css\n.error {\n  border: 1px #f00;\n  background-color: #fdd;\n}\n.error.intrusion {\n  background-image: url(\"/image/hacked.png\");\n}\n.seriousError {\n  @extend .error;\n  border-width: 3px;\n}\n//编译结果\n.error, .seriousError {\n  border: 1px #f00;\n  background-color: #fdd; }\n.error.intrusion, .seriousError.intrusion {\n  background-image: url(\"/image/hacked.png\"); \n}\n.seriousError {\n  border-width: 3px; \n}\n```\n\n> * @at-root 从字面上解释就是跳出根元素\n\n```css\n.a {\n  color: red;\n  .b {\n    color: orange;\n    .c {\n      color: yellow;\n      @at-root .d {\n        color: green;\n      }\n    }\n  }  \n}\n//编译结果\n.a {\n  color: red;\n}\n.a .b {\n  color: orange;\n}\n.a .b .c {\n  color: yellow;\n}\n.d {\n  color: green;\n}\n```\n\n> * @debug 在 Sass 中是用来调试的，当你的在 Sass 的源码中使用了 @debug 指令之后，Sass 代码在编译出错时，在命令终端会输出你设置的提示 Bug\n\n```css\n@debug 10em + 12em;\n会输出：\nLine 1 DEBUG: 22em\n```\n\n> * @warn 和 @debug 功能类似，用来帮助我们更好的调试 Sass。\n\n> * @error 和 @warn、@debug 功能是如出一辙。\n\n```css\n@mixin error($x){\n  @if $x < 10 {\n    width: $x * 10px;\n  } @else if $x == 10 {\n    width: $x;\n  } @else {\n    @error \"你需要将#{$x}值设置在10以内的数\";\n  }\n\n}\n.test {\n  @include error(15);\n}\n//编译结果\n=> 你需要将15值设置在10以内的数 on line 7 at column 5\n```","slug":"sass中的规则","published":1,"updated":"2017-07-01T10:17:39.171Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb1u1p8r001g0sq9z57scvvz","content":"<h3 id=\"scss-规则\"><a href=\"#scss-规则\" class=\"headerlink\" title=\"scss @规则\"></a>scss @规则</h3><blockquote>\n<ul>\n<li>@import</li>\n</ul>\n</blockquote>\n<ol>\n<li>Sass 扩展了 CSS 的 @import 规则，让它能够引入 SCSS 和 Sass 文件。 所有引入的 SCSS 和 Sass 文件都会被合并并输出一个单一的 CSS 文件。</li>\n<li>引入多个文件 @import “rounded-corners”, “text-shadow”;</li>\n<li>嵌套引入</li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">//假设要引入的样式文件`example.scss`文件中包含这样的代码：</div><div class=\"line\">.example &#123;</div><div class=\"line\">  color: red;</div><div class=\"line\">&#125;</div><div class=\"line\">//然后这样引用：</div><div class=\"line\"></div><div class=\"line\">#main &#123;</div><div class=\"line\">  @import \"example\";</div><div class=\"line\">&#125;</div><div class=\"line\">//编译出来的 CSS：</div><div class=\"line\">#main .example &#123;</div><div class=\"line\">  color: red;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>@media 指令和 CSS 的使用规则一样的简单，但它有另外一个功能，可以嵌套在 CSS 规则中。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">.sidebar &#123;</div><div class=\"line\">  width: 300px;</div><div class=\"line\">  @media screen and (orientation: landscape) &#123;</div><div class=\"line\">    width: 500px;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">//编译出来：</div><div class=\"line\">.sidebar &#123;</div><div class=\"line\">  width: 300px; </div><div class=\"line\">&#125;</div><div class=\"line\">@media screen and (orientation: landscape) &#123;</div><div class=\"line\">    .sidebar &#123;</div><div class=\"line\">      width: 500px; </div><div class=\"line\">    &#125; </div><div class=\"line\">&#125;</div><div class=\"line\">//@media 也可以嵌套 @media：</div><div class=\"line\">@media screen &#123;</div><div class=\"line\">  .sidebar &#123;</div><div class=\"line\">    @media (orientation: landscape) &#123;</div><div class=\"line\">      width: 500px;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">//此时编译出来：</div><div class=\"line\">@media screen and (orientation: landscape) &#123;</div><div class=\"line\">  .sidebar &#123;</div><div class=\"line\">    width: 500px; &#125; &#125;</div><div class=\"line\">//在使用 @media 时，还可以使用插件#&#123;&#125;:</div><div class=\"line\">$media: screen;</div><div class=\"line\">$feature: -webkit-min-device-pixel-ratio;</div><div class=\"line\">$value: 1.5;</div><div class=\"line\">@media #&#123;$media&#125; and ($feature: $value) &#123;</div><div class=\"line\">  .sidebar &#123;</div><div class=\"line\">    width: 500px;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">//编译出来的 CSS：</div><div class=\"line\">@media screen and (-webkit-min-device-pixel-ratio: 1.5) &#123;</div><div class=\"line\">  .sidebar &#123;</div><div class=\"line\">    width: 500px; </div><div class=\"line\">  &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>@extend 是用来扩展选择器或占位符</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">.error &#123;</div><div class=\"line\">  border: 1px #f00;</div><div class=\"line\">  background-color: #fdd;</div><div class=\"line\">&#125;</div><div class=\"line\">.error.intrusion &#123;</div><div class=\"line\">  background-image: url(\"/image/hacked.png\");</div><div class=\"line\">&#125;</div><div class=\"line\">.seriousError &#123;</div><div class=\"line\">  @extend .error;</div><div class=\"line\">  border-width: 3px;</div><div class=\"line\">&#125;</div><div class=\"line\">//编译结果</div><div class=\"line\">.error, .seriousError &#123;</div><div class=\"line\">  border: 1px #f00;</div><div class=\"line\">  background-color: #fdd; &#125;</div><div class=\"line\">.error.intrusion, .seriousError.intrusion &#123;</div><div class=\"line\">  background-image: url(\"/image/hacked.png\"); </div><div class=\"line\">&#125;</div><div class=\"line\">.seriousError &#123;</div><div class=\"line\">  border-width: 3px; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>@at-root 从字面上解释就是跳出根元素</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">.a &#123;</div><div class=\"line\">  color: red;</div><div class=\"line\">  .b &#123;</div><div class=\"line\">    color: orange;</div><div class=\"line\">    .c &#123;</div><div class=\"line\">      color: yellow;</div><div class=\"line\">      @at-root .d &#123;</div><div class=\"line\">        color: green;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;</div><div class=\"line\">//编译结果</div><div class=\"line\">.a &#123;</div><div class=\"line\">  color: red;</div><div class=\"line\">&#125;</div><div class=\"line\">.a .b &#123;</div><div class=\"line\">  color: orange;</div><div class=\"line\">&#125;</div><div class=\"line\">.a .b .c &#123;</div><div class=\"line\">  color: yellow;</div><div class=\"line\">&#125;</div><div class=\"line\">.d &#123;</div><div class=\"line\">  color: green;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>@debug 在 Sass 中是用来调试的，当你的在 Sass 的源码中使用了 @debug 指令之后，Sass 代码在编译出错时，在命令终端会输出你设置的提示 Bug</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">debug</span> <span class=\"number\">10em</span> + <span class=\"number\">12em</span>;</div><div class=\"line\">会输出：</div><div class=\"line\"><span class=\"selector-tag\">Line</span> 1 <span class=\"selector-tag\">DEBUG</span>: 22<span class=\"selector-tag\">em</span></div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><p>@warn 和 @debug 功能类似，用来帮助我们更好的调试 Sass。</p>\n</li>\n<li><p>@error 和 @warn、@debug 功能是如出一辙。</p>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">@mixin error($x)&#123;</div><div class=\"line\">  @if $x &lt; 10 &#123;</div><div class=\"line\">    width: $x * 10px;</div><div class=\"line\">  &#125; @else if $x == 10 &#123;</div><div class=\"line\">    width: $x;</div><div class=\"line\">  &#125; @else &#123;</div><div class=\"line\">    @error \"你需要将#&#123;$x&#125;值设置在10以内的数\";</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">.test &#123;</div><div class=\"line\">  @include error(15);</div><div class=\"line\">&#125;</div><div class=\"line\">//编译结果</div><div class=\"line\">=&gt; 你需要将15值设置在10以内的数 on line 7 at column 5</div></pre></td></tr></table></figure>","excerpt":"","more":"<h3 id=\"scss-规则\"><a href=\"#scss-规则\" class=\"headerlink\" title=\"scss @规则\"></a>scss @规则</h3><blockquote>\n<ul>\n<li>@import</li>\n</ul>\n</blockquote>\n<ol>\n<li>Sass 扩展了 CSS 的 @import 规则，让它能够引入 SCSS 和 Sass 文件。 所有引入的 SCSS 和 Sass 文件都会被合并并输出一个单一的 CSS 文件。</li>\n<li>引入多个文件 @import “rounded-corners”, “text-shadow”;</li>\n<li>嵌套引入</li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">//假设要引入的样式文件`example.scss`文件中包含这样的代码：</div><div class=\"line\">.example &#123;</div><div class=\"line\">  color: red;</div><div class=\"line\">&#125;</div><div class=\"line\">//然后这样引用：</div><div class=\"line\"></div><div class=\"line\">#main &#123;</div><div class=\"line\">  @import \"example\";</div><div class=\"line\">&#125;</div><div class=\"line\">//编译出来的 CSS：</div><div class=\"line\">#main .example &#123;</div><div class=\"line\">  color: red;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>@media 指令和 CSS 的使用规则一样的简单，但它有另外一个功能，可以嵌套在 CSS 规则中。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">.sidebar &#123;</div><div class=\"line\">  width: 300px;</div><div class=\"line\">  @media screen and (orientation: landscape) &#123;</div><div class=\"line\">    width: 500px;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">//编译出来：</div><div class=\"line\">.sidebar &#123;</div><div class=\"line\">  width: 300px; </div><div class=\"line\">&#125;</div><div class=\"line\">@media screen and (orientation: landscape) &#123;</div><div class=\"line\">    .sidebar &#123;</div><div class=\"line\">      width: 500px; </div><div class=\"line\">    &#125; </div><div class=\"line\">&#125;</div><div class=\"line\">//@media 也可以嵌套 @media：</div><div class=\"line\">@media screen &#123;</div><div class=\"line\">  .sidebar &#123;</div><div class=\"line\">    @media (orientation: landscape) &#123;</div><div class=\"line\">      width: 500px;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">//此时编译出来：</div><div class=\"line\">@media screen and (orientation: landscape) &#123;</div><div class=\"line\">  .sidebar &#123;</div><div class=\"line\">    width: 500px; &#125; &#125;</div><div class=\"line\">//在使用 @media 时，还可以使用插件#&#123;&#125;:</div><div class=\"line\">$media: screen;</div><div class=\"line\">$feature: -webkit-min-device-pixel-ratio;</div><div class=\"line\">$value: 1.5;</div><div class=\"line\">@media #&#123;$media&#125; and ($feature: $value) &#123;</div><div class=\"line\">  .sidebar &#123;</div><div class=\"line\">    width: 500px;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">//编译出来的 CSS：</div><div class=\"line\">@media screen and (-webkit-min-device-pixel-ratio: 1.5) &#123;</div><div class=\"line\">  .sidebar &#123;</div><div class=\"line\">    width: 500px; </div><div class=\"line\">  &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>@extend 是用来扩展选择器或占位符</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">.error &#123;</div><div class=\"line\">  border: 1px #f00;</div><div class=\"line\">  background-color: #fdd;</div><div class=\"line\">&#125;</div><div class=\"line\">.error.intrusion &#123;</div><div class=\"line\">  background-image: url(\"/image/hacked.png\");</div><div class=\"line\">&#125;</div><div class=\"line\">.seriousError &#123;</div><div class=\"line\">  @extend .error;</div><div class=\"line\">  border-width: 3px;</div><div class=\"line\">&#125;</div><div class=\"line\">//编译结果</div><div class=\"line\">.error, .seriousError &#123;</div><div class=\"line\">  border: 1px #f00;</div><div class=\"line\">  background-color: #fdd; &#125;</div><div class=\"line\">.error.intrusion, .seriousError.intrusion &#123;</div><div class=\"line\">  background-image: url(\"/image/hacked.png\"); </div><div class=\"line\">&#125;</div><div class=\"line\">.seriousError &#123;</div><div class=\"line\">  border-width: 3px; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>@at-root 从字面上解释就是跳出根元素</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">.a &#123;</div><div class=\"line\">  color: red;</div><div class=\"line\">  .b &#123;</div><div class=\"line\">    color: orange;</div><div class=\"line\">    .c &#123;</div><div class=\"line\">      color: yellow;</div><div class=\"line\">      @at-root .d &#123;</div><div class=\"line\">        color: green;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;</div><div class=\"line\">//编译结果</div><div class=\"line\">.a &#123;</div><div class=\"line\">  color: red;</div><div class=\"line\">&#125;</div><div class=\"line\">.a .b &#123;</div><div class=\"line\">  color: orange;</div><div class=\"line\">&#125;</div><div class=\"line\">.a .b .c &#123;</div><div class=\"line\">  color: yellow;</div><div class=\"line\">&#125;</div><div class=\"line\">.d &#123;</div><div class=\"line\">  color: green;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>@debug 在 Sass 中是用来调试的，当你的在 Sass 的源码中使用了 @debug 指令之后，Sass 代码在编译出错时，在命令终端会输出你设置的提示 Bug</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">debug</span> <span class=\"number\">10em</span> + <span class=\"number\">12em</span>;</div><div class=\"line\">会输出：</div><div class=\"line\"><span class=\"selector-tag\">Line</span> 1 <span class=\"selector-tag\">DEBUG</span>: 22<span class=\"selector-tag\">em</span></div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><p>@warn 和 @debug 功能类似，用来帮助我们更好的调试 Sass。</p>\n</li>\n<li><p>@error 和 @warn、@debug 功能是如出一辙。</p>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">@mixin error($x)&#123;</div><div class=\"line\">  @if $x &lt; 10 &#123;</div><div class=\"line\">    width: $x * 10px;</div><div class=\"line\">  &#125; @else if $x == 10 &#123;</div><div class=\"line\">    width: $x;</div><div class=\"line\">  &#125; @else &#123;</div><div class=\"line\">    @error \"你需要将#&#123;$x&#125;值设置在10以内的数\";</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">.test &#123;</div><div class=\"line\">  @include error(15);</div><div class=\"line\">&#125;</div><div class=\"line\">//编译结果</div><div class=\"line\">=&gt; 你需要将15值设置在10以内的数 on line 7 at column 5</div></pre></td></tr></table></figure>"},{"title":"react总结","date":"2017-08-03T08:03:02.000Z","_content":"\n# react 总结\n\n[react-ppt下载](/img/react.ppt)\n\n## react 中的坑\n\n1. 获取store \n    \n   在子组件中通过设置 contextTypes ,然后在生命周期中通过 this.context.store 获取对应的 state dispatch subscribe 等方法\n   \n2. 父子组件通信\n\n   1). 可以通过props进行页面传值\n   \n   2). 可以通过context进行传值  (可以跨级传递数据)\n        \n        (1). 在父组件声明子组件的contextTypes接收类型的值 (childContextTypes)\n         \n         ```\n            FundManageDetail.childContextTypes = {\n                funding_doc:PropTypes.array,\n                props:PropTypes.object,\n            }\n         ```\n        (2). 在父组件中设置子组件的值 (getChildContext()) , getChildContext 该方法将funding_doc的值放在context中,同时必须声明了childrenContextTypes,这样子组件就可以获取了\n       \n        ```\n            getChildContext(){\n                return {\n                    funding_doc:this.state.funding_doc,\n                    props:this.props,\n                }\n            }\n        ```\n        \n        (3). 子组件通过获取父组件 childContextTypes 对象中设置对应子页面的字段类型的contextTypes\n        \n        (4). 子组件中就可以通过 this.context 获取到父组件传过来的值\n\n3. componentWillUpdate生命周期造成死循环(在组件接收到新的props或者state但还没有render时被调用)\n   \n   造成死循环的原因: 该生命周期在接收到新的props会被触发,但是在这里setState的话,也会触发该生命周期,因此造成死循环\n   \n   解决办法: 1). 可以直接在render里进行逻辑处理\n            \n            2). 通过 shouldComponentUpdate 生命周期进行判断是否需要触发render的更新\n            \n            3). 通过 componentWillReceiveProps 生命周期 (在组件接收到一个新的prop时被调用)\n            \n4. 在项目中同时使用 antd-mobeil 和 rcTable 的时候的一些坑\n\n    1). 可以滚动的 rcTable 嵌套在 tab 里面时,会造成 rcTable 的滚动条失效 \n        \n        解决办法: 将tab选项卡的 prop swipeable 改为 {false}\n         \n    2). 在使用 Popup 弹出层的时候,因为第一个参数为html结构,因此在弹出来以后,如果里面有个文本框在修改内容的时候,通过setState不会把值立马显示出来,\n        原因是因为需要再次Popup.show 这样才会显示\n        \n        解决办法: 将html结构写为一个组件,这样在输入的时候,其实改变的是html结构里的state,这样就会实时更新了\n        \n        官网事例:\n        \n        ```\n            import { Popup, List, Button, InputItem } from 'antd-mobile';\n            \n            class PopupContent extends React.Component {\n              state = {\n                sel: '',\n              };\n              onSel = (sel) => {\n                this.setState({ sel });\n                this.props.onClose();\n              };\n              render() {\n                return (\n                  <List renderHeader={() => `账户总览，选择了：${this.state.sel}`}>\n                    <List.Item\n                      thumb=\"https://zos.alipayobjects.com/rmsportal/dNuvNrtqUztHCwM.png\"\n                      onClick={() => { this.onSel('东吴证券'); }}\n                    >东吴证券</List.Item>\n                    <List.Item\n                      thumb=\"https://zos.alipayobjects.com/rmsportal/UmbJMbWOejVOpxe.png\"\n                      onClick={() => { this.onSel('西吴证券'); }}\n                    >西吴证券</List.Item>\n                    <InputItem value={this.state.val} onChange={val => this.setState({ val })}>输入内容</InputItem>\n                  </List>\n                );\n              }\n            }\n            \n            const Test = () => {\n              const onMaskClose = () => {\n                console.log('onMaskClose');\n                // also support Promise\n                // return new Promise((resolve) => {\n                //   console.log('1000ms 后关闭');\n                //   setTimeout(resolve, 1000);\n                // });\n              };\n              const onClick = (e) => {\n                e.preventDefault(); // 修复 Android 上点击穿透\n                Popup.show(<PopupContent onClose={() => Popup.hide()} />, { onMaskClose });\n              };\n              // newInstance() {\n              //  const ins = Popup.newInstance();\n              //  ins.show(<Button onClick={() => ins.hide()}>关闭</Button>);\n              // },\n              return (\n                <div style={{ padding: '0.3rem' }}>\n                  <Button onClick={onClick}>显示</Button>\n                </div>\n              );\n            };\n            \n            ReactDOM.render(<Test />, mountNode);\n        ```\n\n5. webpack中的一个坑,使用es6写完代码,打包的过程中,有些方法低级浏览器不可以识别,造成页面报错\n\n   例如: \"caicai\".repeat(3)  //es6写法  include some 等方法在低级浏览器都会报错\n         => //转化以后\n         \"caicai\".repeat(3)\n         \n   原因是因为没有配置:babel-polyfill  \n   \n   解决办法: 在webpack的入口处配置\n   \n   ```javascript 1.8\n        module.exports = {\n            entry: [\n                   require.resolve('webpack-dev-server/client') + '?/',\n                   require.resolve('webpack/hot/dev-server'),\n                   \"babel-polyfill\",// 垫片,加入是为了使用某个浏览器或者其他执行环境不支持的函数或者对象能够使用而添加的原型方法，或者第三方库\n                   paths.appIndexJs //入口文件\n               ]\n        } \n   ```\n   \n6. refs 可以通过设置 ref 属性获取对应的dom结构 this.refs.属性值\n\n7. 全局获取store 引入store.js (import store from '@/store/store.js') 通过 store.getState() 获取对应的store信息\n\n\n## 参考链接\n\n[react环境搭建](/file/react.txt)\n","source":"_posts/react总结.md","raw":"---\ntitle: react总结\ndate: 2017-08-03 16:03:02\ncategories: Javascript\ntags:\n    - Javascript\n---\n\n# react 总结\n\n[react-ppt下载](/img/react.ppt)\n\n## react 中的坑\n\n1. 获取store \n    \n   在子组件中通过设置 contextTypes ,然后在生命周期中通过 this.context.store 获取对应的 state dispatch subscribe 等方法\n   \n2. 父子组件通信\n\n   1). 可以通过props进行页面传值\n   \n   2). 可以通过context进行传值  (可以跨级传递数据)\n        \n        (1). 在父组件声明子组件的contextTypes接收类型的值 (childContextTypes)\n         \n         ```\n            FundManageDetail.childContextTypes = {\n                funding_doc:PropTypes.array,\n                props:PropTypes.object,\n            }\n         ```\n        (2). 在父组件中设置子组件的值 (getChildContext()) , getChildContext 该方法将funding_doc的值放在context中,同时必须声明了childrenContextTypes,这样子组件就可以获取了\n       \n        ```\n            getChildContext(){\n                return {\n                    funding_doc:this.state.funding_doc,\n                    props:this.props,\n                }\n            }\n        ```\n        \n        (3). 子组件通过获取父组件 childContextTypes 对象中设置对应子页面的字段类型的contextTypes\n        \n        (4). 子组件中就可以通过 this.context 获取到父组件传过来的值\n\n3. componentWillUpdate生命周期造成死循环(在组件接收到新的props或者state但还没有render时被调用)\n   \n   造成死循环的原因: 该生命周期在接收到新的props会被触发,但是在这里setState的话,也会触发该生命周期,因此造成死循环\n   \n   解决办法: 1). 可以直接在render里进行逻辑处理\n            \n            2). 通过 shouldComponentUpdate 生命周期进行判断是否需要触发render的更新\n            \n            3). 通过 componentWillReceiveProps 生命周期 (在组件接收到一个新的prop时被调用)\n            \n4. 在项目中同时使用 antd-mobeil 和 rcTable 的时候的一些坑\n\n    1). 可以滚动的 rcTable 嵌套在 tab 里面时,会造成 rcTable 的滚动条失效 \n        \n        解决办法: 将tab选项卡的 prop swipeable 改为 {false}\n         \n    2). 在使用 Popup 弹出层的时候,因为第一个参数为html结构,因此在弹出来以后,如果里面有个文本框在修改内容的时候,通过setState不会把值立马显示出来,\n        原因是因为需要再次Popup.show 这样才会显示\n        \n        解决办法: 将html结构写为一个组件,这样在输入的时候,其实改变的是html结构里的state,这样就会实时更新了\n        \n        官网事例:\n        \n        ```\n            import { Popup, List, Button, InputItem } from 'antd-mobile';\n            \n            class PopupContent extends React.Component {\n              state = {\n                sel: '',\n              };\n              onSel = (sel) => {\n                this.setState({ sel });\n                this.props.onClose();\n              };\n              render() {\n                return (\n                  <List renderHeader={() => `账户总览，选择了：${this.state.sel}`}>\n                    <List.Item\n                      thumb=\"https://zos.alipayobjects.com/rmsportal/dNuvNrtqUztHCwM.png\"\n                      onClick={() => { this.onSel('东吴证券'); }}\n                    >东吴证券</List.Item>\n                    <List.Item\n                      thumb=\"https://zos.alipayobjects.com/rmsportal/UmbJMbWOejVOpxe.png\"\n                      onClick={() => { this.onSel('西吴证券'); }}\n                    >西吴证券</List.Item>\n                    <InputItem value={this.state.val} onChange={val => this.setState({ val })}>输入内容</InputItem>\n                  </List>\n                );\n              }\n            }\n            \n            const Test = () => {\n              const onMaskClose = () => {\n                console.log('onMaskClose');\n                // also support Promise\n                // return new Promise((resolve) => {\n                //   console.log('1000ms 后关闭');\n                //   setTimeout(resolve, 1000);\n                // });\n              };\n              const onClick = (e) => {\n                e.preventDefault(); // 修复 Android 上点击穿透\n                Popup.show(<PopupContent onClose={() => Popup.hide()} />, { onMaskClose });\n              };\n              // newInstance() {\n              //  const ins = Popup.newInstance();\n              //  ins.show(<Button onClick={() => ins.hide()}>关闭</Button>);\n              // },\n              return (\n                <div style={{ padding: '0.3rem' }}>\n                  <Button onClick={onClick}>显示</Button>\n                </div>\n              );\n            };\n            \n            ReactDOM.render(<Test />, mountNode);\n        ```\n\n5. webpack中的一个坑,使用es6写完代码,打包的过程中,有些方法低级浏览器不可以识别,造成页面报错\n\n   例如: \"caicai\".repeat(3)  //es6写法  include some 等方法在低级浏览器都会报错\n         => //转化以后\n         \"caicai\".repeat(3)\n         \n   原因是因为没有配置:babel-polyfill  \n   \n   解决办法: 在webpack的入口处配置\n   \n   ```javascript 1.8\n        module.exports = {\n            entry: [\n                   require.resolve('webpack-dev-server/client') + '?/',\n                   require.resolve('webpack/hot/dev-server'),\n                   \"babel-polyfill\",// 垫片,加入是为了使用某个浏览器或者其他执行环境不支持的函数或者对象能够使用而添加的原型方法，或者第三方库\n                   paths.appIndexJs //入口文件\n               ]\n        } \n   ```\n   \n6. refs 可以通过设置 ref 属性获取对应的dom结构 this.refs.属性值\n\n7. 全局获取store 引入store.js (import store from '@/store/store.js') 通过 store.getState() 获取对应的store信息\n\n\n## 参考链接\n\n[react环境搭建](/file/react.txt)\n","slug":"react总结","published":1,"updated":"2017-08-21T01:06:43.360Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb1u1p8x001j0sq9ar13l0zu","content":"<h1 id=\"react-总结\"><a href=\"#react-总结\" class=\"headerlink\" title=\"react 总结\"></a>react 总结</h1><p><a href=\"/img/react.ppt\">react-ppt下载</a></p>\n<h2 id=\"react-中的坑\"><a href=\"#react-中的坑\" class=\"headerlink\" title=\"react 中的坑\"></a>react 中的坑</h2><ol>\n<li><p>获取store </p>\n<p>在子组件中通过设置 contextTypes ,然后在生命周期中通过 this.context.store 获取对应的 state dispatch subscribe 等方法</p>\n</li>\n<li><p>父子组件通信</p>\n<p>1). 可以通过props进行页面传值</p>\n<p>2). 可以通过context进行传值  (可以跨级传递数据)</p>\n<pre><code>(1). 在父组件声明子组件的contextTypes接收类型的值 (childContextTypes)\n\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">FundManageDetail.childContextTypes = &#123;</div><div class=\"line\">    funding_doc:PropTypes.array,</div><div class=\"line\">    props:PropTypes.object,</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n(2). 在父组件中设置子组件的值 (getChildContext()) , getChildContext 该方法将funding_doc的值放在context中,同时必须声明了childrenContextTypes,这样子组件就可以获取了\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">getChildContext()&#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">        funding_doc:this.state.funding_doc,</div><div class=\"line\">        props:this.props,</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre></li>\n</ol>\n<pre><code>(3). 子组件通过获取父组件 childContextTypes 对象中设置对应子页面的字段类型的contextTypes\n\n(4). 子组件中就可以通过 this.context 获取到父组件传过来的值\n</code></pre><ol>\n<li><p>componentWillUpdate生命周期造成死循环(在组件接收到新的props或者state但还没有render时被调用)</p>\n<p>造成死循环的原因: 该生命周期在接收到新的props会被触发,但是在这里setState的话,也会触发该生命周期,因此造成死循环</p>\n<p>解决办法: 1). 可以直接在render里进行逻辑处理</p>\n<pre><code>2). 通过 shouldComponentUpdate 生命周期进行判断是否需要触发render的更新\n\n3). 通过 componentWillReceiveProps 生命周期 (在组件接收到一个新的prop时被调用)\n</code></pre></li>\n<li><p>在项目中同时使用 antd-mobeil 和 rcTable 的时候的一些坑</p>\n<p> 1). 可以滚动的 rcTable 嵌套在 tab 里面时,会造成 rcTable 的滚动条失效 </p>\n<pre><code>解决办法: 将tab选项卡的 prop swipeable 改为 {false}\n</code></pre><p> 2). 在使用 Popup 弹出层的时候,因为第一个参数为html结构,因此在弹出来以后,如果里面有个文本框在修改内容的时候,通过setState不会把值立马显示出来,</p>\n<pre><code>原因是因为需要再次Popup.show 这样才会显示\n\n解决办法: 将html结构写为一个组件,这样在输入的时候,其实改变的是html结构里的state,这样就会实时更新了\n\n官网事例:\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; Popup, List, Button, InputItem &#125; from &apos;antd-mobile&apos;;</div><div class=\"line\"></div><div class=\"line\">class PopupContent extends React.Component &#123;</div><div class=\"line\">  state = &#123;</div><div class=\"line\">    sel: &apos;&apos;,</div><div class=\"line\">  &#125;;</div><div class=\"line\">  onSel = (sel) =&gt; &#123;</div><div class=\"line\">    this.setState(&#123; sel &#125;);</div><div class=\"line\">    this.props.onClose();</div><div class=\"line\">  &#125;;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      &lt;List renderHeader=&#123;() =&gt; `账户总览，选择了：$&#123;this.state.sel&#125;`&#125;&gt;</div><div class=\"line\">        &lt;List.Item</div><div class=\"line\">          thumb=&quot;https://zos.alipayobjects.com/rmsportal/dNuvNrtqUztHCwM.png&quot;</div><div class=\"line\">          onClick=&#123;() =&gt; &#123; this.onSel(&apos;东吴证券&apos;); &#125;&#125;</div><div class=\"line\">        &gt;东吴证券&lt;/List.Item&gt;</div><div class=\"line\">        &lt;List.Item</div><div class=\"line\">          thumb=&quot;https://zos.alipayobjects.com/rmsportal/UmbJMbWOejVOpxe.png&quot;</div><div class=\"line\">          onClick=&#123;() =&gt; &#123; this.onSel(&apos;西吴证券&apos;); &#125;&#125;</div><div class=\"line\">        &gt;西吴证券&lt;/List.Item&gt;</div><div class=\"line\">        &lt;InputItem value=&#123;this.state.val&#125; onChange=&#123;val =&gt; this.setState(&#123; val &#125;)&#125;&gt;输入内容&lt;/InputItem&gt;</div><div class=\"line\">      &lt;/List&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">const Test = () =&gt; &#123;</div><div class=\"line\">  const onMaskClose = () =&gt; &#123;</div><div class=\"line\">    console.log(&apos;onMaskClose&apos;);</div><div class=\"line\">    // also support Promise</div><div class=\"line\">    // return new Promise((resolve) =&gt; &#123;</div><div class=\"line\">    //   console.log(&apos;1000ms 后关闭&apos;);</div><div class=\"line\">    //   setTimeout(resolve, 1000);</div><div class=\"line\">    // &#125;);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  const onClick = (e) =&gt; &#123;</div><div class=\"line\">    e.preventDefault(); // 修复 Android 上点击穿透</div><div class=\"line\">    Popup.show(&lt;PopupContent onClose=&#123;() =&gt; Popup.hide()&#125; /&gt;, &#123; onMaskClose &#125;);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  // newInstance() &#123;</div><div class=\"line\">  //  const ins = Popup.newInstance();</div><div class=\"line\">  //  ins.show(&lt;Button onClick=&#123;() =&gt; ins.hide()&#125;&gt;关闭&lt;/Button&gt;);</div><div class=\"line\">  // &#125;,</div><div class=\"line\">  return (</div><div class=\"line\">    &lt;div style=&#123;&#123; padding: &apos;0.3rem&apos; &#125;&#125;&gt;</div><div class=\"line\">      &lt;Button onClick=&#123;onClick&#125;&gt;显示&lt;/Button&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  );</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(&lt;Test /&gt;, mountNode);</div></pre></td></tr></table></figure>\n</code></pre></li>\n<li><p>webpack中的一个坑,使用es6写完代码,打包的过程中,有些方法低级浏览器不可以识别,造成页面报错</p>\n<p>例如: “caicai”.repeat(3)  //es6写法  include some 等方法在低级浏览器都会报错</p>\n<pre><code>=&gt; //转化以后\n&quot;caicai&quot;.repeat(3)\n</code></pre><p>原因是因为没有配置:babel-polyfill  </p>\n<p>解决办法: 在webpack的入口处配置</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    <span class=\"attr\">entry</span>: [</div><div class=\"line\">           <span class=\"built_in\">require</span>.resolve(<span class=\"string\">'webpack-dev-server/client'</span>) + <span class=\"string\">'?/'</span>,</div><div class=\"line\">           <span class=\"built_in\">require</span>.resolve(<span class=\"string\">'webpack/hot/dev-server'</span>),</div><div class=\"line\">           <span class=\"string\">\"babel-polyfill\"</span>,<span class=\"comment\">// 垫片,加入是为了使用某个浏览器或者其他执行环境不支持的函数或者对象能够使用而添加的原型方法，或者第三方库</span></div><div class=\"line\">           paths.appIndexJs <span class=\"comment\">//入口文件</span></div><div class=\"line\">       ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol>\n<li><p>refs 可以通过设置 ref 属性获取对应的dom结构 this.refs.属性值</p>\n</li>\n<li><p>全局获取store 引入store.js (import store from ‘@/store/store.js’) 通过 store.getState() 获取对应的store信息</p>\n</li>\n</ol>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"/file/react.txt\">react环境搭建</a></p>\n","excerpt":"","more":"<h1 id=\"react-总结\"><a href=\"#react-总结\" class=\"headerlink\" title=\"react 总结\"></a>react 总结</h1><p><a href=\"/img/react.ppt\">react-ppt下载</a></p>\n<h2 id=\"react-中的坑\"><a href=\"#react-中的坑\" class=\"headerlink\" title=\"react 中的坑\"></a>react 中的坑</h2><ol>\n<li><p>获取store </p>\n<p>在子组件中通过设置 contextTypes ,然后在生命周期中通过 this.context.store 获取对应的 state dispatch subscribe 等方法</p>\n</li>\n<li><p>父子组件通信</p>\n<p>1). 可以通过props进行页面传值</p>\n<p>2). 可以通过context进行传值  (可以跨级传递数据)</p>\n<pre><code>(1). 在父组件声明子组件的contextTypes接收类型的值 (childContextTypes)\n\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">FundManageDetail.childContextTypes = &#123;</div><div class=\"line\">    funding_doc:PropTypes.array,</div><div class=\"line\">    props:PropTypes.object,</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n(2). 在父组件中设置子组件的值 (getChildContext()) , getChildContext 该方法将funding_doc的值放在context中,同时必须声明了childrenContextTypes,这样子组件就可以获取了\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">getChildContext()&#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">        funding_doc:this.state.funding_doc,</div><div class=\"line\">        props:this.props,</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre></li>\n</ol>\n<pre><code>(3). 子组件通过获取父组件 childContextTypes 对象中设置对应子页面的字段类型的contextTypes\n\n(4). 子组件中就可以通过 this.context 获取到父组件传过来的值\n</code></pre><ol>\n<li><p>componentWillUpdate生命周期造成死循环(在组件接收到新的props或者state但还没有render时被调用)</p>\n<p>造成死循环的原因: 该生命周期在接收到新的props会被触发,但是在这里setState的话,也会触发该生命周期,因此造成死循环</p>\n<p>解决办法: 1). 可以直接在render里进行逻辑处理</p>\n<pre><code>2). 通过 shouldComponentUpdate 生命周期进行判断是否需要触发render的更新\n\n3). 通过 componentWillReceiveProps 生命周期 (在组件接收到一个新的prop时被调用)\n</code></pre></li>\n<li><p>在项目中同时使用 antd-mobeil 和 rcTable 的时候的一些坑</p>\n<p> 1). 可以滚动的 rcTable 嵌套在 tab 里面时,会造成 rcTable 的滚动条失效 </p>\n<pre><code>解决办法: 将tab选项卡的 prop swipeable 改为 {false}\n</code></pre><p> 2). 在使用 Popup 弹出层的时候,因为第一个参数为html结构,因此在弹出来以后,如果里面有个文本框在修改内容的时候,通过setState不会把值立马显示出来,</p>\n<pre><code>原因是因为需要再次Popup.show 这样才会显示\n\n解决办法: 将html结构写为一个组件,这样在输入的时候,其实改变的是html结构里的state,这样就会实时更新了\n\n官网事例:\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; Popup, List, Button, InputItem &#125; from &apos;antd-mobile&apos;;</div><div class=\"line\"></div><div class=\"line\">class PopupContent extends React.Component &#123;</div><div class=\"line\">  state = &#123;</div><div class=\"line\">    sel: &apos;&apos;,</div><div class=\"line\">  &#125;;</div><div class=\"line\">  onSel = (sel) =&gt; &#123;</div><div class=\"line\">    this.setState(&#123; sel &#125;);</div><div class=\"line\">    this.props.onClose();</div><div class=\"line\">  &#125;;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      &lt;List renderHeader=&#123;() =&gt; `账户总览，选择了：$&#123;this.state.sel&#125;`&#125;&gt;</div><div class=\"line\">        &lt;List.Item</div><div class=\"line\">          thumb=&quot;https://zos.alipayobjects.com/rmsportal/dNuvNrtqUztHCwM.png&quot;</div><div class=\"line\">          onClick=&#123;() =&gt; &#123; this.onSel(&apos;东吴证券&apos;); &#125;&#125;</div><div class=\"line\">        &gt;东吴证券&lt;/List.Item&gt;</div><div class=\"line\">        &lt;List.Item</div><div class=\"line\">          thumb=&quot;https://zos.alipayobjects.com/rmsportal/UmbJMbWOejVOpxe.png&quot;</div><div class=\"line\">          onClick=&#123;() =&gt; &#123; this.onSel(&apos;西吴证券&apos;); &#125;&#125;</div><div class=\"line\">        &gt;西吴证券&lt;/List.Item&gt;</div><div class=\"line\">        &lt;InputItem value=&#123;this.state.val&#125; onChange=&#123;val =&gt; this.setState(&#123; val &#125;)&#125;&gt;输入内容&lt;/InputItem&gt;</div><div class=\"line\">      &lt;/List&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">const Test = () =&gt; &#123;</div><div class=\"line\">  const onMaskClose = () =&gt; &#123;</div><div class=\"line\">    console.log(&apos;onMaskClose&apos;);</div><div class=\"line\">    // also support Promise</div><div class=\"line\">    // return new Promise((resolve) =&gt; &#123;</div><div class=\"line\">    //   console.log(&apos;1000ms 后关闭&apos;);</div><div class=\"line\">    //   setTimeout(resolve, 1000);</div><div class=\"line\">    // &#125;);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  const onClick = (e) =&gt; &#123;</div><div class=\"line\">    e.preventDefault(); // 修复 Android 上点击穿透</div><div class=\"line\">    Popup.show(&lt;PopupContent onClose=&#123;() =&gt; Popup.hide()&#125; /&gt;, &#123; onMaskClose &#125;);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  // newInstance() &#123;</div><div class=\"line\">  //  const ins = Popup.newInstance();</div><div class=\"line\">  //  ins.show(&lt;Button onClick=&#123;() =&gt; ins.hide()&#125;&gt;关闭&lt;/Button&gt;);</div><div class=\"line\">  // &#125;,</div><div class=\"line\">  return (</div><div class=\"line\">    &lt;div style=&#123;&#123; padding: &apos;0.3rem&apos; &#125;&#125;&gt;</div><div class=\"line\">      &lt;Button onClick=&#123;onClick&#125;&gt;显示&lt;/Button&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  );</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(&lt;Test /&gt;, mountNode);</div></pre></td></tr></table></figure>\n</code></pre></li>\n<li><p>webpack中的一个坑,使用es6写完代码,打包的过程中,有些方法低级浏览器不可以识别,造成页面报错</p>\n<p>例如: “caicai”.repeat(3)  //es6写法  include some 等方法在低级浏览器都会报错</p>\n<pre><code>=&gt; //转化以后\n&quot;caicai&quot;.repeat(3)\n</code></pre><p>原因是因为没有配置:babel-polyfill  </p>\n<p>解决办法: 在webpack的入口处配置</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    <span class=\"attr\">entry</span>: [</div><div class=\"line\">           <span class=\"built_in\">require</span>.resolve(<span class=\"string\">'webpack-dev-server/client'</span>) + <span class=\"string\">'?/'</span>,</div><div class=\"line\">           <span class=\"built_in\">require</span>.resolve(<span class=\"string\">'webpack/hot/dev-server'</span>),</div><div class=\"line\">           <span class=\"string\">\"babel-polyfill\"</span>,<span class=\"comment\">// 垫片,加入是为了使用某个浏览器或者其他执行环境不支持的函数或者对象能够使用而添加的原型方法，或者第三方库</span></div><div class=\"line\">           paths.appIndexJs <span class=\"comment\">//入口文件</span></div><div class=\"line\">       ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol>\n<li><p>refs 可以通过设置 ref 属性获取对应的dom结构 this.refs.属性值</p>\n</li>\n<li><p>全局获取store 引入store.js (import store from ‘@/store/store.js’) 通过 store.getState() 获取对应的store信息</p>\n</li>\n</ol>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"/file/react.txt\">react环境搭建</a></p>\n"},{"title":"Mysql 简易学习","date":"2017-04-15T07:20:33.000Z","_content":"\n## mysql 连接到mysql服务器\n\n```\nmysql -u user -p password\n```\n## 管理MySQL的命令\n\n> - SHOW DATABASES; 列出 MySQL 数据库管理系统的数据库列表。 \n> - SHOW TABLES;显示指定数据库的所有表，使用该命令前需要使用 use 命令来选择要操作的数据库。\n> - SHOW COLUMNS FROM 数据表;显示数据表的属性，属性类型，主键信息 ，是否为 NULL，默认值等其他信息。\n> - SHOW INDEX FROM 数据表;显示数据表的详细索引信息，包括PRIMARY KEY（主键）。\n> - USE 数据库名；选择要操作的Mysql数据库，使用该命令后所有Mysql命令都只针对该数据库。\n\n## MySQL 创建数据库\n```\ncreate database 数据库名;\n```\n## MySQL 删除数据库\n```\ndrop database 数据库名;\n```\n## MySQL 创建数据表\n```\ncrate table tablename(\n  id int not null auto_increment,\n  name varchar(80) not null,\n  primary key(id)\n);\n```\n## MySQL 删除数据表\n```\ndrop table tablename;\n```\n## MySQL 清空数据表\n```\ntruncate 数据库名;\n```\n## MySQL 插入数据\n```\ninsert into tablename (field1, field2,...fieldN ) VALUES ( value1, value2,...valueN );\n```\n## MySQL where 子句\n```\nSELECT field1, field2,...fieldN FROM table_name1, table_name2... \n[WHERE condition1 [AND [OR]] condition2.....\n```\n## MySQL UPDATE 查询\n```\nUPDATE table_name SET field1=new-value1, field2=new-value2 [WHERE Clause]\n```\n\n> - 你可以同时更新一个或多个字段。\n> - 你可以在 WHERE 子句中指定任何条件。\n> - 你可以在一个单独表中同时更新数据。\n\n## MySQL DELETE 语句\n```\nDELETE FROM table_name [WHERE Clause]\n```\n## MySQL LIKE 子句\n\n```\nSELECT field1, field2,...fieldN from table_name1, table_name2... \nWHERE field1 LIKE condition1 [AND [OR]] filed2 = 'somevalue'\n\nselect name from user where name like \"%cai%\"\n```\n## MySQL UNION 操作符\n\n```\nMySQL UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中。多个 SELECT 语句会删除重复的数据。\nSELECT expression1, expression2, ... expression_n \nFROM tables [WHERE conditions]\nUNION [ALL | DISTINCT]\n\nSELECT expression1, expression2, ... expression_n FROM tables [WHERE conditions];\n\nSELECT country FROM Websites UNION SELECT country FROM apps ORDER BY country;\n```\n## MySQL 排序\n\n```\nSELECT field1, field2,...fieldN \nfrom table_name1, table_name2... \nORDER BY field1, [field2...] [ASC [DESC]]\n\nselect * from user order by name asc\n```\n## MySQL GROUP BY 语句\n\n```\nSELECT column_name, function(column_name)\nFROM table_name\nWHERE column_name operator value\nGROUP BY column_name;\n\nmysql> select * from user;\n+----+---------+------------+\n| id | name    | time_count |\n+----+---------+------------+\n|  1 | caicai2 |          1 |\n|  2 | caicai3 |          2 |\n|  3 | caicai3 |          3 |\n|  5 | caicai5 |          5 |\n|  6 | caicai5 |          5 |\n+----+---------+------------+\n\nmysql> select name,sum(time_count) from user group by name;　name字段对应的名字出现的总次数的和\n+---------+-----------------+\n| name    | sum(time_count) |\n+---------+-----------------+\n| caicai2 |               1 |\n| caicai3 |               5 |\n| caicai5 |              10 |\n+---------+-----------------+\n\nmysql> select name,count(time_count) from user group by name;　name字段对应的名字出现的次数　\n+---------+-------------------+\n| name    | count(time_count) |\n+---------+-------------------+\n| caicai2 |                 1 |\n| caicai3 |                 2 |\n| caicai5 |                 2 |\n+---------+-------------------+\n\n```\n## Mysql 连接的使用\n\n> - INNER JOIN（内连接,或等值连接）：获取两个表中字段匹配关系的记录。\n> - LEFT JOIN（左连接）：获取左表所有记录，即使右表没有对应匹配的记录。\n> - RIGHT JOIN（右连接）： 与 LEFT JOIN 相反，用于获取右表所有记录，即使左表没有对应匹配的记录。\n\n```\nmysql> SELECT * FROM tcount_tbl;\n+-----------------+----------------+\n| runoob_author | runoob_count |\n+-----------------+----------------+\n| mahran          |             20 |\n| mahnaz          |           NULL |\n| Jen             |           NULL |\n| Gill            |             20 |\n| John Poul       |              1 |\n| Sanjay          |              1 |\n+-----------------+----------------+\nmysql> SELECT * from runoob_tbl;\n+-------------+----------------+-----------------+-----------------+\n| runoob_id | runoob_title | runoob_author | submission_date |\n+-------------+----------------+-----------------+-----------------+\n|           1 | Learn PHP      | John Poul       | 2007-05-24      |\n|           2 | Learn MySQL    | Abdul S         | 2007-05-24      |\n|           3 | JAVA Tutorial  | Sanjay          | 2007-05-06      |\n+-------------+----------------+-----------------+-----------------+\n```\n### 内连接 INNER JOIN\n```\nmysql> SELECT a.runoob_id, a.runoob_author, b.runoob_count \nFROM runoob_tbl a \nINNER JOIN tcount_tbl b \nON a.runoob_author = b.runoob_author;\n\n+-----------+---------------+--------------+\n| runoob_id | runoob_author | runoob_count |\n+-----------+---------------+--------------+\n|         1 | John Poul     |            1 |\n|         3 | Sanjay        |            1 |\n+-----------+---------------+--------------+\n等价于\nmysql> SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a, tcount_tbl b WHERE a.runoob_author = b.runoob_author;\n+-------------+-----------------+----------------+\n| runoob_id | runoob_author | runoob_count |\n+-------------+-----------------+----------------+\n|           1 | John Poul       |              1 |\n|           3 | Sanjay          |              1 |\n+-------------+-----------------+----------------+\n```\n### 左连接 LEFT JOIN\n```\nmysql> SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a LEFT JOIN tcount_tbl b ON a.runoob_author = b.runoob_author;\n+-------------+-----------------+----------------+\n| runoob_id | runoob_author | runoob_count |\n+-------------+-----------------+----------------+\n|           1 | John Poul       |              1 |\n|           2 | Abdul S         |           NULL |\n|           3 | Sanjay          |              1 |\n+-------------+-----------------+----------------+\nLEFT JOIN，该语句会读取左边的数据表runoob_tbl的所有选取的字段数据，即便在右侧表tcount_tbl中没有对应的runoob_author字段值\n```\n### 右连接 RIGHT JOIN\n```\nmysql> SELECT b.runoob_id, b.runoob_author, a.runoob_count FROM tcount_tbl a LEFT JOIN runoob_tbl b ON a.runoob_author = b.runoob_author;\n+-------------+-----------------+----------------+\n| runoob_id | runoob_author | runoob_count |\n+-------------+-----------------+----------------+\n|           1 | John Poul       |              1 |\n|           2 | Abdul S         |           NULL |\n|           3 | Sanjay          |              1 |\n+-------------+-----------------+----------------+\nRIGHT JOIN，该语句会读取右边的数据表 runoob_tbl 的所有选取的字段数据，即便在左侧表tcount_tbl中没有对应的runoob_author字段值。\n```\n## MySQL NULL 值处理\n> - is null 　查询包括null的数据　\n\n```\nmysql> SELECT * FROM tcount_tbl WHERE runoob_count IS NULL;\n+-----------------+----------------+\n| runoob_author | runoob_count |\n+-----------------+----------------+\n| mahnaz          |           NULL |\n| Jen             |           NULL |\n+-----------------+----------------+\nmysql> SELECT * FROM tcount_tbl WHERE runoob_count = NULL;\nEmpty set (0.00 sec)\n```\n\n> - is not null 查询不包括null的数据\n\n```\nmysql> SELECT * from tcount_tbl \n       WHERE runoob_count IS NOT NULL;\n+-----------------+----------------+\n| runoob_author | runoob_count |\n+-----------------+----------------+\n| mahran          |             20 |\n| Gill            |             20 |\n+-----------------+----------------+\nmysql> SELECT * FROM tcount_tbl WHERE runoob_count != NULL;\nEmpty set (0.01 sec)\n```\n## MySQL 正则表达式 REGEXP\n\n```\n查找name字段中以'st'为开头的所有数据：\nmysql> SELECT name FROM person_tbl WHERE name REGEXP '^st';\n查找name字段中以'ok'为结尾的所有数据：\nmysql> SELECT name FROM person_tbl WHERE name REGEXP 'ok$';\n查找name字段中包含'mar'字符串的所有数据：\nmysql> SELECT name FROM person_tbl WHERE name REGEXP 'mar';\n查找name字段中以元音字符开头或以'ok'字符串结尾的所有数据：\nmysql> SELECT name FROM person_tbl WHERE name REGEXP '^[aeiou]|ok$';\n```\n## MySQL ALTER命令\n### 删除，添加字段\n\n```\nmysql> ALTER TABLE testalter_tbl  DROP i; 删除表的ｉ字段\nmysql> ALTER TABLE testalter_tbl ADD i INT;　添加表的ｉ字段并且为int型\n```\n### 修改字段类型及名称 在ALTER命令中使用 MODIFY 或 CHANGE 子句 。\n\n```\nmysql> ALTER TABLE testalter_tbl MODIFY c CHAR(10); 把字段 c 的类型从 CHAR(1) 改为 CHAR(10)\n\nmysql> ALTER TABLE testalter_tbl CHANGE j j INT; \n使用 CHANGE 子句, 语法有很大的不同。 在 CHANGE 关键字之后，紧跟着的是你要修改的字段名，然后指定新字段名及类型。\n```\n### 修改表名\n```\nALTER TABLE testalter_tbl RENAME TO alter_tbl; 将数据表 testalter_tbl 重命名为 alter_tbl\n```\n","source":"_posts/mysql.md","raw":"---\ntitle: Mysql 简易学习\ndate: 2017-04-15 15:20:33\ncategories: Mysql\ntags:\n     - Mysql\n---\n\n## mysql 连接到mysql服务器\n\n```\nmysql -u user -p password\n```\n## 管理MySQL的命令\n\n> - SHOW DATABASES; 列出 MySQL 数据库管理系统的数据库列表。 \n> - SHOW TABLES;显示指定数据库的所有表，使用该命令前需要使用 use 命令来选择要操作的数据库。\n> - SHOW COLUMNS FROM 数据表;显示数据表的属性，属性类型，主键信息 ，是否为 NULL，默认值等其他信息。\n> - SHOW INDEX FROM 数据表;显示数据表的详细索引信息，包括PRIMARY KEY（主键）。\n> - USE 数据库名；选择要操作的Mysql数据库，使用该命令后所有Mysql命令都只针对该数据库。\n\n## MySQL 创建数据库\n```\ncreate database 数据库名;\n```\n## MySQL 删除数据库\n```\ndrop database 数据库名;\n```\n## MySQL 创建数据表\n```\ncrate table tablename(\n  id int not null auto_increment,\n  name varchar(80) not null,\n  primary key(id)\n);\n```\n## MySQL 删除数据表\n```\ndrop table tablename;\n```\n## MySQL 清空数据表\n```\ntruncate 数据库名;\n```\n## MySQL 插入数据\n```\ninsert into tablename (field1, field2,...fieldN ) VALUES ( value1, value2,...valueN );\n```\n## MySQL where 子句\n```\nSELECT field1, field2,...fieldN FROM table_name1, table_name2... \n[WHERE condition1 [AND [OR]] condition2.....\n```\n## MySQL UPDATE 查询\n```\nUPDATE table_name SET field1=new-value1, field2=new-value2 [WHERE Clause]\n```\n\n> - 你可以同时更新一个或多个字段。\n> - 你可以在 WHERE 子句中指定任何条件。\n> - 你可以在一个单独表中同时更新数据。\n\n## MySQL DELETE 语句\n```\nDELETE FROM table_name [WHERE Clause]\n```\n## MySQL LIKE 子句\n\n```\nSELECT field1, field2,...fieldN from table_name1, table_name2... \nWHERE field1 LIKE condition1 [AND [OR]] filed2 = 'somevalue'\n\nselect name from user where name like \"%cai%\"\n```\n## MySQL UNION 操作符\n\n```\nMySQL UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中。多个 SELECT 语句会删除重复的数据。\nSELECT expression1, expression2, ... expression_n \nFROM tables [WHERE conditions]\nUNION [ALL | DISTINCT]\n\nSELECT expression1, expression2, ... expression_n FROM tables [WHERE conditions];\n\nSELECT country FROM Websites UNION SELECT country FROM apps ORDER BY country;\n```\n## MySQL 排序\n\n```\nSELECT field1, field2,...fieldN \nfrom table_name1, table_name2... \nORDER BY field1, [field2...] [ASC [DESC]]\n\nselect * from user order by name asc\n```\n## MySQL GROUP BY 语句\n\n```\nSELECT column_name, function(column_name)\nFROM table_name\nWHERE column_name operator value\nGROUP BY column_name;\n\nmysql> select * from user;\n+----+---------+------------+\n| id | name    | time_count |\n+----+---------+------------+\n|  1 | caicai2 |          1 |\n|  2 | caicai3 |          2 |\n|  3 | caicai3 |          3 |\n|  5 | caicai5 |          5 |\n|  6 | caicai5 |          5 |\n+----+---------+------------+\n\nmysql> select name,sum(time_count) from user group by name;　name字段对应的名字出现的总次数的和\n+---------+-----------------+\n| name    | sum(time_count) |\n+---------+-----------------+\n| caicai2 |               1 |\n| caicai3 |               5 |\n| caicai5 |              10 |\n+---------+-----------------+\n\nmysql> select name,count(time_count) from user group by name;　name字段对应的名字出现的次数　\n+---------+-------------------+\n| name    | count(time_count) |\n+---------+-------------------+\n| caicai2 |                 1 |\n| caicai3 |                 2 |\n| caicai5 |                 2 |\n+---------+-------------------+\n\n```\n## Mysql 连接的使用\n\n> - INNER JOIN（内连接,或等值连接）：获取两个表中字段匹配关系的记录。\n> - LEFT JOIN（左连接）：获取左表所有记录，即使右表没有对应匹配的记录。\n> - RIGHT JOIN（右连接）： 与 LEFT JOIN 相反，用于获取右表所有记录，即使左表没有对应匹配的记录。\n\n```\nmysql> SELECT * FROM tcount_tbl;\n+-----------------+----------------+\n| runoob_author | runoob_count |\n+-----------------+----------------+\n| mahran          |             20 |\n| mahnaz          |           NULL |\n| Jen             |           NULL |\n| Gill            |             20 |\n| John Poul       |              1 |\n| Sanjay          |              1 |\n+-----------------+----------------+\nmysql> SELECT * from runoob_tbl;\n+-------------+----------------+-----------------+-----------------+\n| runoob_id | runoob_title | runoob_author | submission_date |\n+-------------+----------------+-----------------+-----------------+\n|           1 | Learn PHP      | John Poul       | 2007-05-24      |\n|           2 | Learn MySQL    | Abdul S         | 2007-05-24      |\n|           3 | JAVA Tutorial  | Sanjay          | 2007-05-06      |\n+-------------+----------------+-----------------+-----------------+\n```\n### 内连接 INNER JOIN\n```\nmysql> SELECT a.runoob_id, a.runoob_author, b.runoob_count \nFROM runoob_tbl a \nINNER JOIN tcount_tbl b \nON a.runoob_author = b.runoob_author;\n\n+-----------+---------------+--------------+\n| runoob_id | runoob_author | runoob_count |\n+-----------+---------------+--------------+\n|         1 | John Poul     |            1 |\n|         3 | Sanjay        |            1 |\n+-----------+---------------+--------------+\n等价于\nmysql> SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a, tcount_tbl b WHERE a.runoob_author = b.runoob_author;\n+-------------+-----------------+----------------+\n| runoob_id | runoob_author | runoob_count |\n+-------------+-----------------+----------------+\n|           1 | John Poul       |              1 |\n|           3 | Sanjay          |              1 |\n+-------------+-----------------+----------------+\n```\n### 左连接 LEFT JOIN\n```\nmysql> SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a LEFT JOIN tcount_tbl b ON a.runoob_author = b.runoob_author;\n+-------------+-----------------+----------------+\n| runoob_id | runoob_author | runoob_count |\n+-------------+-----------------+----------------+\n|           1 | John Poul       |              1 |\n|           2 | Abdul S         |           NULL |\n|           3 | Sanjay          |              1 |\n+-------------+-----------------+----------------+\nLEFT JOIN，该语句会读取左边的数据表runoob_tbl的所有选取的字段数据，即便在右侧表tcount_tbl中没有对应的runoob_author字段值\n```\n### 右连接 RIGHT JOIN\n```\nmysql> SELECT b.runoob_id, b.runoob_author, a.runoob_count FROM tcount_tbl a LEFT JOIN runoob_tbl b ON a.runoob_author = b.runoob_author;\n+-------------+-----------------+----------------+\n| runoob_id | runoob_author | runoob_count |\n+-------------+-----------------+----------------+\n|           1 | John Poul       |              1 |\n|           2 | Abdul S         |           NULL |\n|           3 | Sanjay          |              1 |\n+-------------+-----------------+----------------+\nRIGHT JOIN，该语句会读取右边的数据表 runoob_tbl 的所有选取的字段数据，即便在左侧表tcount_tbl中没有对应的runoob_author字段值。\n```\n## MySQL NULL 值处理\n> - is null 　查询包括null的数据　\n\n```\nmysql> SELECT * FROM tcount_tbl WHERE runoob_count IS NULL;\n+-----------------+----------------+\n| runoob_author | runoob_count |\n+-----------------+----------------+\n| mahnaz          |           NULL |\n| Jen             |           NULL |\n+-----------------+----------------+\nmysql> SELECT * FROM tcount_tbl WHERE runoob_count = NULL;\nEmpty set (0.00 sec)\n```\n\n> - is not null 查询不包括null的数据\n\n```\nmysql> SELECT * from tcount_tbl \n       WHERE runoob_count IS NOT NULL;\n+-----------------+----------------+\n| runoob_author | runoob_count |\n+-----------------+----------------+\n| mahran          |             20 |\n| Gill            |             20 |\n+-----------------+----------------+\nmysql> SELECT * FROM tcount_tbl WHERE runoob_count != NULL;\nEmpty set (0.01 sec)\n```\n## MySQL 正则表达式 REGEXP\n\n```\n查找name字段中以'st'为开头的所有数据：\nmysql> SELECT name FROM person_tbl WHERE name REGEXP '^st';\n查找name字段中以'ok'为结尾的所有数据：\nmysql> SELECT name FROM person_tbl WHERE name REGEXP 'ok$';\n查找name字段中包含'mar'字符串的所有数据：\nmysql> SELECT name FROM person_tbl WHERE name REGEXP 'mar';\n查找name字段中以元音字符开头或以'ok'字符串结尾的所有数据：\nmysql> SELECT name FROM person_tbl WHERE name REGEXP '^[aeiou]|ok$';\n```\n## MySQL ALTER命令\n### 删除，添加字段\n\n```\nmysql> ALTER TABLE testalter_tbl  DROP i; 删除表的ｉ字段\nmysql> ALTER TABLE testalter_tbl ADD i INT;　添加表的ｉ字段并且为int型\n```\n### 修改字段类型及名称 在ALTER命令中使用 MODIFY 或 CHANGE 子句 。\n\n```\nmysql> ALTER TABLE testalter_tbl MODIFY c CHAR(10); 把字段 c 的类型从 CHAR(1) 改为 CHAR(10)\n\nmysql> ALTER TABLE testalter_tbl CHANGE j j INT; \n使用 CHANGE 子句, 语法有很大的不同。 在 CHANGE 关键字之后，紧跟着的是你要修改的字段名，然后指定新字段名及类型。\n```\n### 修改表名\n```\nALTER TABLE testalter_tbl RENAME TO alter_tbl; 将数据表 testalter_tbl 重命名为 alter_tbl\n```\n","slug":"mysql","published":1,"updated":"2017-04-22T10:15:08.706Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb1u1p96001o0sq97r27fxoo","content":"<h2 id=\"mysql-连接到mysql服务器\"><a href=\"#mysql-连接到mysql服务器\" class=\"headerlink\" title=\"mysql 连接到mysql服务器\"></a>mysql 连接到mysql服务器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql -u user -p password</div></pre></td></tr></table></figure>\n<h2 id=\"管理MySQL的命令\"><a href=\"#管理MySQL的命令\" class=\"headerlink\" title=\"管理MySQL的命令\"></a>管理MySQL的命令</h2><blockquote>\n<ul>\n<li>SHOW DATABASES; 列出 MySQL 数据库管理系统的数据库列表。 </li>\n<li>SHOW TABLES;显示指定数据库的所有表，使用该命令前需要使用 use 命令来选择要操作的数据库。</li>\n<li>SHOW COLUMNS FROM 数据表;显示数据表的属性，属性类型，主键信息 ，是否为 NULL，默认值等其他信息。</li>\n<li>SHOW INDEX FROM 数据表;显示数据表的详细索引信息，包括PRIMARY KEY（主键）。</li>\n<li>USE 数据库名；选择要操作的Mysql数据库，使用该命令后所有Mysql命令都只针对该数据库。</li>\n</ul>\n</blockquote>\n<h2 id=\"MySQL-创建数据库\"><a href=\"#MySQL-创建数据库\" class=\"headerlink\" title=\"MySQL 创建数据库\"></a>MySQL 创建数据库</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">create database 数据库名;</div></pre></td></tr></table></figure>\n<h2 id=\"MySQL-删除数据库\"><a href=\"#MySQL-删除数据库\" class=\"headerlink\" title=\"MySQL 删除数据库\"></a>MySQL 删除数据库</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">drop database 数据库名;</div></pre></td></tr></table></figure>\n<h2 id=\"MySQL-创建数据表\"><a href=\"#MySQL-创建数据表\" class=\"headerlink\" title=\"MySQL 创建数据表\"></a>MySQL 创建数据表</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">crate table tablename(</div><div class=\"line\">  id int not null auto_increment,</div><div class=\"line\">  name varchar(80) not null,</div><div class=\"line\">  primary key(id)</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h2 id=\"MySQL-删除数据表\"><a href=\"#MySQL-删除数据表\" class=\"headerlink\" title=\"MySQL 删除数据表\"></a>MySQL 删除数据表</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">drop table tablename;</div></pre></td></tr></table></figure>\n<h2 id=\"MySQL-清空数据表\"><a href=\"#MySQL-清空数据表\" class=\"headerlink\" title=\"MySQL 清空数据表\"></a>MySQL 清空数据表</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">truncate 数据库名;</div></pre></td></tr></table></figure>\n<h2 id=\"MySQL-插入数据\"><a href=\"#MySQL-插入数据\" class=\"headerlink\" title=\"MySQL 插入数据\"></a>MySQL 插入数据</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">insert into tablename (field1, field2,...fieldN ) VALUES ( value1, value2,...valueN );</div></pre></td></tr></table></figure>\n<h2 id=\"MySQL-where-子句\"><a href=\"#MySQL-where-子句\" class=\"headerlink\" title=\"MySQL where 子句\"></a>MySQL where 子句</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT field1, field2,...fieldN FROM table_name1, table_name2... </div><div class=\"line\">[WHERE condition1 [AND [OR]] condition2.....</div></pre></td></tr></table></figure>\n<h2 id=\"MySQL-UPDATE-查询\"><a href=\"#MySQL-UPDATE-查询\" class=\"headerlink\" title=\"MySQL UPDATE 查询\"></a>MySQL UPDATE 查询</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">UPDATE table_name SET field1=new-value1, field2=new-value2 [WHERE Clause]</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>你可以同时更新一个或多个字段。</li>\n<li>你可以在 WHERE 子句中指定任何条件。</li>\n<li>你可以在一个单独表中同时更新数据。</li>\n</ul>\n</blockquote>\n<h2 id=\"MySQL-DELETE-语句\"><a href=\"#MySQL-DELETE-语句\" class=\"headerlink\" title=\"MySQL DELETE 语句\"></a>MySQL DELETE 语句</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">DELETE FROM table_name [WHERE Clause]</div></pre></td></tr></table></figure>\n<h2 id=\"MySQL-LIKE-子句\"><a href=\"#MySQL-LIKE-子句\" class=\"headerlink\" title=\"MySQL LIKE 子句\"></a>MySQL LIKE 子句</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT field1, field2,...fieldN from table_name1, table_name2... </div><div class=\"line\">WHERE field1 LIKE condition1 [AND [OR]] filed2 = &apos;somevalue&apos;</div><div class=\"line\"></div><div class=\"line\">select name from user where name like &quot;%cai%&quot;</div></pre></td></tr></table></figure>\n<h2 id=\"MySQL-UNION-操作符\"><a href=\"#MySQL-UNION-操作符\" class=\"headerlink\" title=\"MySQL UNION 操作符\"></a>MySQL UNION 操作符</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">MySQL UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中。多个 SELECT 语句会删除重复的数据。</div><div class=\"line\">SELECT expression1, expression2, ... expression_n </div><div class=\"line\">FROM tables [WHERE conditions]</div><div class=\"line\">UNION [ALL | DISTINCT]</div><div class=\"line\"></div><div class=\"line\">SELECT expression1, expression2, ... expression_n FROM tables [WHERE conditions];</div><div class=\"line\"></div><div class=\"line\">SELECT country FROM Websites UNION SELECT country FROM apps ORDER BY country;</div></pre></td></tr></table></figure>\n<h2 id=\"MySQL-排序\"><a href=\"#MySQL-排序\" class=\"headerlink\" title=\"MySQL 排序\"></a>MySQL 排序</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT field1, field2,...fieldN </div><div class=\"line\">from table_name1, table_name2... </div><div class=\"line\">ORDER BY field1, [field2...] [ASC [DESC]]</div><div class=\"line\"></div><div class=\"line\">select * from user order by name asc</div></pre></td></tr></table></figure>\n<h2 id=\"MySQL-GROUP-BY-语句\"><a href=\"#MySQL-GROUP-BY-语句\" class=\"headerlink\" title=\"MySQL GROUP BY 语句\"></a>MySQL GROUP BY 语句</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT column_name, function(column_name)</div><div class=\"line\">FROM table_name</div><div class=\"line\">WHERE column_name operator value</div><div class=\"line\">GROUP BY column_name;</div><div class=\"line\"></div><div class=\"line\">mysql&gt; select * from user;</div><div class=\"line\">+----+---------+------------+</div><div class=\"line\">| id | name    | time_count |</div><div class=\"line\">+----+---------+------------+</div><div class=\"line\">|  1 | caicai2 |          1 |</div><div class=\"line\">|  2 | caicai3 |          2 |</div><div class=\"line\">|  3 | caicai3 |          3 |</div><div class=\"line\">|  5 | caicai5 |          5 |</div><div class=\"line\">|  6 | caicai5 |          5 |</div><div class=\"line\">+----+---------+------------+</div><div class=\"line\"></div><div class=\"line\">mysql&gt; select name,sum(time_count) from user group by name;　name字段对应的名字出现的总次数的和</div><div class=\"line\">+---------+-----------------+</div><div class=\"line\">| name    | sum(time_count) |</div><div class=\"line\">+---------+-----------------+</div><div class=\"line\">| caicai2 |               1 |</div><div class=\"line\">| caicai3 |               5 |</div><div class=\"line\">| caicai5 |              10 |</div><div class=\"line\">+---------+-----------------+</div><div class=\"line\"></div><div class=\"line\">mysql&gt; select name,count(time_count) from user group by name;　name字段对应的名字出现的次数　</div><div class=\"line\">+---------+-------------------+</div><div class=\"line\">| name    | count(time_count) |</div><div class=\"line\">+---------+-------------------+</div><div class=\"line\">| caicai2 |                 1 |</div><div class=\"line\">| caicai3 |                 2 |</div><div class=\"line\">| caicai5 |                 2 |</div><div class=\"line\">+---------+-------------------+</div></pre></td></tr></table></figure>\n<h2 id=\"Mysql-连接的使用\"><a href=\"#Mysql-连接的使用\" class=\"headerlink\" title=\"Mysql 连接的使用\"></a>Mysql 连接的使用</h2><blockquote>\n<ul>\n<li>INNER JOIN（内连接,或等值连接）：获取两个表中字段匹配关系的记录。</li>\n<li>LEFT JOIN（左连接）：获取左表所有记录，即使右表没有对应匹配的记录。</li>\n<li>RIGHT JOIN（右连接）： 与 LEFT JOIN 相反，用于获取右表所有记录，即使左表没有对应匹配的记录。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; SELECT * FROM tcount_tbl;</div><div class=\"line\">+-----------------+----------------+</div><div class=\"line\">| runoob_author | runoob_count |</div><div class=\"line\">+-----------------+----------------+</div><div class=\"line\">| mahran          |             20 |</div><div class=\"line\">| mahnaz          |           NULL |</div><div class=\"line\">| Jen             |           NULL |</div><div class=\"line\">| Gill            |             20 |</div><div class=\"line\">| John Poul       |              1 |</div><div class=\"line\">| Sanjay          |              1 |</div><div class=\"line\">+-----------------+----------------+</div><div class=\"line\">mysql&gt; SELECT * from runoob_tbl;</div><div class=\"line\">+-------------+----------------+-----------------+-----------------+</div><div class=\"line\">| runoob_id | runoob_title | runoob_author | submission_date |</div><div class=\"line\">+-------------+----------------+-----------------+-----------------+</div><div class=\"line\">|           1 | Learn PHP      | John Poul       | 2007-05-24      |</div><div class=\"line\">|           2 | Learn MySQL    | Abdul S         | 2007-05-24      |</div><div class=\"line\">|           3 | JAVA Tutorial  | Sanjay          | 2007-05-06      |</div><div class=\"line\">+-------------+----------------+-----------------+-----------------+</div></pre></td></tr></table></figure>\n<h3 id=\"内连接-INNER-JOIN\"><a href=\"#内连接-INNER-JOIN\" class=\"headerlink\" title=\"内连接 INNER JOIN\"></a>内连接 INNER JOIN</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; SELECT a.runoob_id, a.runoob_author, b.runoob_count </div><div class=\"line\">FROM runoob_tbl a </div><div class=\"line\">INNER JOIN tcount_tbl b </div><div class=\"line\">ON a.runoob_author = b.runoob_author;</div><div class=\"line\"></div><div class=\"line\">+-----------+---------------+--------------+</div><div class=\"line\">| runoob_id | runoob_author | runoob_count |</div><div class=\"line\">+-----------+---------------+--------------+</div><div class=\"line\">|         1 | John Poul     |            1 |</div><div class=\"line\">|         3 | Sanjay        |            1 |</div><div class=\"line\">+-----------+---------------+--------------+</div><div class=\"line\">等价于</div><div class=\"line\">mysql&gt; SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a, tcount_tbl b WHERE a.runoob_author = b.runoob_author;</div><div class=\"line\">+-------------+-----------------+----------------+</div><div class=\"line\">| runoob_id | runoob_author | runoob_count |</div><div class=\"line\">+-------------+-----------------+----------------+</div><div class=\"line\">|           1 | John Poul       |              1 |</div><div class=\"line\">|           3 | Sanjay          |              1 |</div><div class=\"line\">+-------------+-----------------+----------------+</div></pre></td></tr></table></figure>\n<h3 id=\"左连接-LEFT-JOIN\"><a href=\"#左连接-LEFT-JOIN\" class=\"headerlink\" title=\"左连接 LEFT JOIN\"></a>左连接 LEFT JOIN</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a LEFT JOIN tcount_tbl b ON a.runoob_author = b.runoob_author;</div><div class=\"line\">+-------------+-----------------+----------------+</div><div class=\"line\">| runoob_id | runoob_author | runoob_count |</div><div class=\"line\">+-------------+-----------------+----------------+</div><div class=\"line\">|           1 | John Poul       |              1 |</div><div class=\"line\">|           2 | Abdul S         |           NULL |</div><div class=\"line\">|           3 | Sanjay          |              1 |</div><div class=\"line\">+-------------+-----------------+----------------+</div><div class=\"line\">LEFT JOIN，该语句会读取左边的数据表runoob_tbl的所有选取的字段数据，即便在右侧表tcount_tbl中没有对应的runoob_author字段值</div></pre></td></tr></table></figure>\n<h3 id=\"右连接-RIGHT-JOIN\"><a href=\"#右连接-RIGHT-JOIN\" class=\"headerlink\" title=\"右连接 RIGHT JOIN\"></a>右连接 RIGHT JOIN</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; SELECT b.runoob_id, b.runoob_author, a.runoob_count FROM tcount_tbl a LEFT JOIN runoob_tbl b ON a.runoob_author = b.runoob_author;</div><div class=\"line\">+-------------+-----------------+----------------+</div><div class=\"line\">| runoob_id | runoob_author | runoob_count |</div><div class=\"line\">+-------------+-----------------+----------------+</div><div class=\"line\">|           1 | John Poul       |              1 |</div><div class=\"line\">|           2 | Abdul S         |           NULL |</div><div class=\"line\">|           3 | Sanjay          |              1 |</div><div class=\"line\">+-------------+-----------------+----------------+</div><div class=\"line\">RIGHT JOIN，该语句会读取右边的数据表 runoob_tbl 的所有选取的字段数据，即便在左侧表tcount_tbl中没有对应的runoob_author字段值。</div></pre></td></tr></table></figure>\n<h2 id=\"MySQL-NULL-值处理\"><a href=\"#MySQL-NULL-值处理\" class=\"headerlink\" title=\"MySQL NULL 值处理\"></a>MySQL NULL 值处理</h2><blockquote>\n<ul>\n<li>is null 　查询包括null的数据　</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; SELECT * FROM tcount_tbl WHERE runoob_count IS NULL;</div><div class=\"line\">+-----------------+----------------+</div><div class=\"line\">| runoob_author | runoob_count |</div><div class=\"line\">+-----------------+----------------+</div><div class=\"line\">| mahnaz          |           NULL |</div><div class=\"line\">| Jen             |           NULL |</div><div class=\"line\">+-----------------+----------------+</div><div class=\"line\">mysql&gt; SELECT * FROM tcount_tbl WHERE runoob_count = NULL;</div><div class=\"line\">Empty set (0.00 sec)</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>is not null 查询不包括null的数据</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; SELECT * from tcount_tbl </div><div class=\"line\">       WHERE runoob_count IS NOT NULL;</div><div class=\"line\">+-----------------+----------------+</div><div class=\"line\">| runoob_author | runoob_count |</div><div class=\"line\">+-----------------+----------------+</div><div class=\"line\">| mahran          |             20 |</div><div class=\"line\">| Gill            |             20 |</div><div class=\"line\">+-----------------+----------------+</div><div class=\"line\">mysql&gt; SELECT * FROM tcount_tbl WHERE runoob_count != NULL;</div><div class=\"line\">Empty set (0.01 sec)</div></pre></td></tr></table></figure>\n<h2 id=\"MySQL-正则表达式-REGEXP\"><a href=\"#MySQL-正则表达式-REGEXP\" class=\"headerlink\" title=\"MySQL 正则表达式 REGEXP\"></a>MySQL 正则表达式 REGEXP</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">查找name字段中以&apos;st&apos;为开头的所有数据：</div><div class=\"line\">mysql&gt; SELECT name FROM person_tbl WHERE name REGEXP &apos;^st&apos;;</div><div class=\"line\">查找name字段中以&apos;ok&apos;为结尾的所有数据：</div><div class=\"line\">mysql&gt; SELECT name FROM person_tbl WHERE name REGEXP &apos;ok$&apos;;</div><div class=\"line\">查找name字段中包含&apos;mar&apos;字符串的所有数据：</div><div class=\"line\">mysql&gt; SELECT name FROM person_tbl WHERE name REGEXP &apos;mar&apos;;</div><div class=\"line\">查找name字段中以元音字符开头或以&apos;ok&apos;字符串结尾的所有数据：</div><div class=\"line\">mysql&gt; SELECT name FROM person_tbl WHERE name REGEXP &apos;^[aeiou]|ok$&apos;;</div></pre></td></tr></table></figure>\n<h2 id=\"MySQL-ALTER命令\"><a href=\"#MySQL-ALTER命令\" class=\"headerlink\" title=\"MySQL ALTER命令\"></a>MySQL ALTER命令</h2><h3 id=\"删除，添加字段\"><a href=\"#删除，添加字段\" class=\"headerlink\" title=\"删除，添加字段\"></a>删除，添加字段</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; ALTER TABLE testalter_tbl  DROP i; 删除表的ｉ字段</div><div class=\"line\">mysql&gt; ALTER TABLE testalter_tbl ADD i INT;　添加表的ｉ字段并且为int型</div></pre></td></tr></table></figure>\n<h3 id=\"修改字段类型及名称-在ALTER命令中使用-MODIFY-或-CHANGE-子句-。\"><a href=\"#修改字段类型及名称-在ALTER命令中使用-MODIFY-或-CHANGE-子句-。\" class=\"headerlink\" title=\"修改字段类型及名称 在ALTER命令中使用 MODIFY 或 CHANGE 子句 。\"></a>修改字段类型及名称 在ALTER命令中使用 MODIFY 或 CHANGE 子句 。</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; ALTER TABLE testalter_tbl MODIFY c CHAR(10); 把字段 c 的类型从 CHAR(1) 改为 CHAR(10)</div><div class=\"line\"></div><div class=\"line\">mysql&gt; ALTER TABLE testalter_tbl CHANGE j j INT; </div><div class=\"line\">使用 CHANGE 子句, 语法有很大的不同。 在 CHANGE 关键字之后，紧跟着的是你要修改的字段名，然后指定新字段名及类型。</div></pre></td></tr></table></figure>\n<h3 id=\"修改表名\"><a href=\"#修改表名\" class=\"headerlink\" title=\"修改表名\"></a>修改表名</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ALTER TABLE testalter_tbl RENAME TO alter_tbl; 将数据表 testalter_tbl 重命名为 alter_tbl</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"mysql-连接到mysql服务器\"><a href=\"#mysql-连接到mysql服务器\" class=\"headerlink\" title=\"mysql 连接到mysql服务器\"></a>mysql 连接到mysql服务器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql -u user -p password</div></pre></td></tr></table></figure>\n<h2 id=\"管理MySQL的命令\"><a href=\"#管理MySQL的命令\" class=\"headerlink\" title=\"管理MySQL的命令\"></a>管理MySQL的命令</h2><blockquote>\n<ul>\n<li>SHOW DATABASES; 列出 MySQL 数据库管理系统的数据库列表。 </li>\n<li>SHOW TABLES;显示指定数据库的所有表，使用该命令前需要使用 use 命令来选择要操作的数据库。</li>\n<li>SHOW COLUMNS FROM 数据表;显示数据表的属性，属性类型，主键信息 ，是否为 NULL，默认值等其他信息。</li>\n<li>SHOW INDEX FROM 数据表;显示数据表的详细索引信息，包括PRIMARY KEY（主键）。</li>\n<li>USE 数据库名；选择要操作的Mysql数据库，使用该命令后所有Mysql命令都只针对该数据库。</li>\n</ul>\n</blockquote>\n<h2 id=\"MySQL-创建数据库\"><a href=\"#MySQL-创建数据库\" class=\"headerlink\" title=\"MySQL 创建数据库\"></a>MySQL 创建数据库</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">create database 数据库名;</div></pre></td></tr></table></figure>\n<h2 id=\"MySQL-删除数据库\"><a href=\"#MySQL-删除数据库\" class=\"headerlink\" title=\"MySQL 删除数据库\"></a>MySQL 删除数据库</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">drop database 数据库名;</div></pre></td></tr></table></figure>\n<h2 id=\"MySQL-创建数据表\"><a href=\"#MySQL-创建数据表\" class=\"headerlink\" title=\"MySQL 创建数据表\"></a>MySQL 创建数据表</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">crate table tablename(</div><div class=\"line\">  id int not null auto_increment,</div><div class=\"line\">  name varchar(80) not null,</div><div class=\"line\">  primary key(id)</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h2 id=\"MySQL-删除数据表\"><a href=\"#MySQL-删除数据表\" class=\"headerlink\" title=\"MySQL 删除数据表\"></a>MySQL 删除数据表</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">drop table tablename;</div></pre></td></tr></table></figure>\n<h2 id=\"MySQL-清空数据表\"><a href=\"#MySQL-清空数据表\" class=\"headerlink\" title=\"MySQL 清空数据表\"></a>MySQL 清空数据表</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">truncate 数据库名;</div></pre></td></tr></table></figure>\n<h2 id=\"MySQL-插入数据\"><a href=\"#MySQL-插入数据\" class=\"headerlink\" title=\"MySQL 插入数据\"></a>MySQL 插入数据</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">insert into tablename (field1, field2,...fieldN ) VALUES ( value1, value2,...valueN );</div></pre></td></tr></table></figure>\n<h2 id=\"MySQL-where-子句\"><a href=\"#MySQL-where-子句\" class=\"headerlink\" title=\"MySQL where 子句\"></a>MySQL where 子句</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT field1, field2,...fieldN FROM table_name1, table_name2... </div><div class=\"line\">[WHERE condition1 [AND [OR]] condition2.....</div></pre></td></tr></table></figure>\n<h2 id=\"MySQL-UPDATE-查询\"><a href=\"#MySQL-UPDATE-查询\" class=\"headerlink\" title=\"MySQL UPDATE 查询\"></a>MySQL UPDATE 查询</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">UPDATE table_name SET field1=new-value1, field2=new-value2 [WHERE Clause]</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>你可以同时更新一个或多个字段。</li>\n<li>你可以在 WHERE 子句中指定任何条件。</li>\n<li>你可以在一个单独表中同时更新数据。</li>\n</ul>\n</blockquote>\n<h2 id=\"MySQL-DELETE-语句\"><a href=\"#MySQL-DELETE-语句\" class=\"headerlink\" title=\"MySQL DELETE 语句\"></a>MySQL DELETE 语句</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">DELETE FROM table_name [WHERE Clause]</div></pre></td></tr></table></figure>\n<h2 id=\"MySQL-LIKE-子句\"><a href=\"#MySQL-LIKE-子句\" class=\"headerlink\" title=\"MySQL LIKE 子句\"></a>MySQL LIKE 子句</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT field1, field2,...fieldN from table_name1, table_name2... </div><div class=\"line\">WHERE field1 LIKE condition1 [AND [OR]] filed2 = &apos;somevalue&apos;</div><div class=\"line\"></div><div class=\"line\">select name from user where name like &quot;%cai%&quot;</div></pre></td></tr></table></figure>\n<h2 id=\"MySQL-UNION-操作符\"><a href=\"#MySQL-UNION-操作符\" class=\"headerlink\" title=\"MySQL UNION 操作符\"></a>MySQL UNION 操作符</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">MySQL UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中。多个 SELECT 语句会删除重复的数据。</div><div class=\"line\">SELECT expression1, expression2, ... expression_n </div><div class=\"line\">FROM tables [WHERE conditions]</div><div class=\"line\">UNION [ALL | DISTINCT]</div><div class=\"line\"></div><div class=\"line\">SELECT expression1, expression2, ... expression_n FROM tables [WHERE conditions];</div><div class=\"line\"></div><div class=\"line\">SELECT country FROM Websites UNION SELECT country FROM apps ORDER BY country;</div></pre></td></tr></table></figure>\n<h2 id=\"MySQL-排序\"><a href=\"#MySQL-排序\" class=\"headerlink\" title=\"MySQL 排序\"></a>MySQL 排序</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT field1, field2,...fieldN </div><div class=\"line\">from table_name1, table_name2... </div><div class=\"line\">ORDER BY field1, [field2...] [ASC [DESC]]</div><div class=\"line\"></div><div class=\"line\">select * from user order by name asc</div></pre></td></tr></table></figure>\n<h2 id=\"MySQL-GROUP-BY-语句\"><a href=\"#MySQL-GROUP-BY-语句\" class=\"headerlink\" title=\"MySQL GROUP BY 语句\"></a>MySQL GROUP BY 语句</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT column_name, function(column_name)</div><div class=\"line\">FROM table_name</div><div class=\"line\">WHERE column_name operator value</div><div class=\"line\">GROUP BY column_name;</div><div class=\"line\"></div><div class=\"line\">mysql&gt; select * from user;</div><div class=\"line\">+----+---------+------------+</div><div class=\"line\">| id | name    | time_count |</div><div class=\"line\">+----+---------+------------+</div><div class=\"line\">|  1 | caicai2 |          1 |</div><div class=\"line\">|  2 | caicai3 |          2 |</div><div class=\"line\">|  3 | caicai3 |          3 |</div><div class=\"line\">|  5 | caicai5 |          5 |</div><div class=\"line\">|  6 | caicai5 |          5 |</div><div class=\"line\">+----+---------+------------+</div><div class=\"line\"></div><div class=\"line\">mysql&gt; select name,sum(time_count) from user group by name;　name字段对应的名字出现的总次数的和</div><div class=\"line\">+---------+-----------------+</div><div class=\"line\">| name    | sum(time_count) |</div><div class=\"line\">+---------+-----------------+</div><div class=\"line\">| caicai2 |               1 |</div><div class=\"line\">| caicai3 |               5 |</div><div class=\"line\">| caicai5 |              10 |</div><div class=\"line\">+---------+-----------------+</div><div class=\"line\"></div><div class=\"line\">mysql&gt; select name,count(time_count) from user group by name;　name字段对应的名字出现的次数　</div><div class=\"line\">+---------+-------------------+</div><div class=\"line\">| name    | count(time_count) |</div><div class=\"line\">+---------+-------------------+</div><div class=\"line\">| caicai2 |                 1 |</div><div class=\"line\">| caicai3 |                 2 |</div><div class=\"line\">| caicai5 |                 2 |</div><div class=\"line\">+---------+-------------------+</div></pre></td></tr></table></figure>\n<h2 id=\"Mysql-连接的使用\"><a href=\"#Mysql-连接的使用\" class=\"headerlink\" title=\"Mysql 连接的使用\"></a>Mysql 连接的使用</h2><blockquote>\n<ul>\n<li>INNER JOIN（内连接,或等值连接）：获取两个表中字段匹配关系的记录。</li>\n<li>LEFT JOIN（左连接）：获取左表所有记录，即使右表没有对应匹配的记录。</li>\n<li>RIGHT JOIN（右连接）： 与 LEFT JOIN 相反，用于获取右表所有记录，即使左表没有对应匹配的记录。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; SELECT * FROM tcount_tbl;</div><div class=\"line\">+-----------------+----------------+</div><div class=\"line\">| runoob_author | runoob_count |</div><div class=\"line\">+-----------------+----------------+</div><div class=\"line\">| mahran          |             20 |</div><div class=\"line\">| mahnaz          |           NULL |</div><div class=\"line\">| Jen             |           NULL |</div><div class=\"line\">| Gill            |             20 |</div><div class=\"line\">| John Poul       |              1 |</div><div class=\"line\">| Sanjay          |              1 |</div><div class=\"line\">+-----------------+----------------+</div><div class=\"line\">mysql&gt; SELECT * from runoob_tbl;</div><div class=\"line\">+-------------+----------------+-----------------+-----------------+</div><div class=\"line\">| runoob_id | runoob_title | runoob_author | submission_date |</div><div class=\"line\">+-------------+----------------+-----------------+-----------------+</div><div class=\"line\">|           1 | Learn PHP      | John Poul       | 2007-05-24      |</div><div class=\"line\">|           2 | Learn MySQL    | Abdul S         | 2007-05-24      |</div><div class=\"line\">|           3 | JAVA Tutorial  | Sanjay          | 2007-05-06      |</div><div class=\"line\">+-------------+----------------+-----------------+-----------------+</div></pre></td></tr></table></figure>\n<h3 id=\"内连接-INNER-JOIN\"><a href=\"#内连接-INNER-JOIN\" class=\"headerlink\" title=\"内连接 INNER JOIN\"></a>内连接 INNER JOIN</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; SELECT a.runoob_id, a.runoob_author, b.runoob_count </div><div class=\"line\">FROM runoob_tbl a </div><div class=\"line\">INNER JOIN tcount_tbl b </div><div class=\"line\">ON a.runoob_author = b.runoob_author;</div><div class=\"line\"></div><div class=\"line\">+-----------+---------------+--------------+</div><div class=\"line\">| runoob_id | runoob_author | runoob_count |</div><div class=\"line\">+-----------+---------------+--------------+</div><div class=\"line\">|         1 | John Poul     |            1 |</div><div class=\"line\">|         3 | Sanjay        |            1 |</div><div class=\"line\">+-----------+---------------+--------------+</div><div class=\"line\">等价于</div><div class=\"line\">mysql&gt; SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a, tcount_tbl b WHERE a.runoob_author = b.runoob_author;</div><div class=\"line\">+-------------+-----------------+----------------+</div><div class=\"line\">| runoob_id | runoob_author | runoob_count |</div><div class=\"line\">+-------------+-----------------+----------------+</div><div class=\"line\">|           1 | John Poul       |              1 |</div><div class=\"line\">|           3 | Sanjay          |              1 |</div><div class=\"line\">+-------------+-----------------+----------------+</div></pre></td></tr></table></figure>\n<h3 id=\"左连接-LEFT-JOIN\"><a href=\"#左连接-LEFT-JOIN\" class=\"headerlink\" title=\"左连接 LEFT JOIN\"></a>左连接 LEFT JOIN</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a LEFT JOIN tcount_tbl b ON a.runoob_author = b.runoob_author;</div><div class=\"line\">+-------------+-----------------+----------------+</div><div class=\"line\">| runoob_id | runoob_author | runoob_count |</div><div class=\"line\">+-------------+-----------------+----------------+</div><div class=\"line\">|           1 | John Poul       |              1 |</div><div class=\"line\">|           2 | Abdul S         |           NULL |</div><div class=\"line\">|           3 | Sanjay          |              1 |</div><div class=\"line\">+-------------+-----------------+----------------+</div><div class=\"line\">LEFT JOIN，该语句会读取左边的数据表runoob_tbl的所有选取的字段数据，即便在右侧表tcount_tbl中没有对应的runoob_author字段值</div></pre></td></tr></table></figure>\n<h3 id=\"右连接-RIGHT-JOIN\"><a href=\"#右连接-RIGHT-JOIN\" class=\"headerlink\" title=\"右连接 RIGHT JOIN\"></a>右连接 RIGHT JOIN</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; SELECT b.runoob_id, b.runoob_author, a.runoob_count FROM tcount_tbl a LEFT JOIN runoob_tbl b ON a.runoob_author = b.runoob_author;</div><div class=\"line\">+-------------+-----------------+----------------+</div><div class=\"line\">| runoob_id | runoob_author | runoob_count |</div><div class=\"line\">+-------------+-----------------+----------------+</div><div class=\"line\">|           1 | John Poul       |              1 |</div><div class=\"line\">|           2 | Abdul S         |           NULL |</div><div class=\"line\">|           3 | Sanjay          |              1 |</div><div class=\"line\">+-------------+-----------------+----------------+</div><div class=\"line\">RIGHT JOIN，该语句会读取右边的数据表 runoob_tbl 的所有选取的字段数据，即便在左侧表tcount_tbl中没有对应的runoob_author字段值。</div></pre></td></tr></table></figure>\n<h2 id=\"MySQL-NULL-值处理\"><a href=\"#MySQL-NULL-值处理\" class=\"headerlink\" title=\"MySQL NULL 值处理\"></a>MySQL NULL 值处理</h2><blockquote>\n<ul>\n<li>is null 　查询包括null的数据　</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; SELECT * FROM tcount_tbl WHERE runoob_count IS NULL;</div><div class=\"line\">+-----------------+----------------+</div><div class=\"line\">| runoob_author | runoob_count |</div><div class=\"line\">+-----------------+----------------+</div><div class=\"line\">| mahnaz          |           NULL |</div><div class=\"line\">| Jen             |           NULL |</div><div class=\"line\">+-----------------+----------------+</div><div class=\"line\">mysql&gt; SELECT * FROM tcount_tbl WHERE runoob_count = NULL;</div><div class=\"line\">Empty set (0.00 sec)</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>is not null 查询不包括null的数据</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; SELECT * from tcount_tbl </div><div class=\"line\">       WHERE runoob_count IS NOT NULL;</div><div class=\"line\">+-----------------+----------------+</div><div class=\"line\">| runoob_author | runoob_count |</div><div class=\"line\">+-----------------+----------------+</div><div class=\"line\">| mahran          |             20 |</div><div class=\"line\">| Gill            |             20 |</div><div class=\"line\">+-----------------+----------------+</div><div class=\"line\">mysql&gt; SELECT * FROM tcount_tbl WHERE runoob_count != NULL;</div><div class=\"line\">Empty set (0.01 sec)</div></pre></td></tr></table></figure>\n<h2 id=\"MySQL-正则表达式-REGEXP\"><a href=\"#MySQL-正则表达式-REGEXP\" class=\"headerlink\" title=\"MySQL 正则表达式 REGEXP\"></a>MySQL 正则表达式 REGEXP</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">查找name字段中以&apos;st&apos;为开头的所有数据：</div><div class=\"line\">mysql&gt; SELECT name FROM person_tbl WHERE name REGEXP &apos;^st&apos;;</div><div class=\"line\">查找name字段中以&apos;ok&apos;为结尾的所有数据：</div><div class=\"line\">mysql&gt; SELECT name FROM person_tbl WHERE name REGEXP &apos;ok$&apos;;</div><div class=\"line\">查找name字段中包含&apos;mar&apos;字符串的所有数据：</div><div class=\"line\">mysql&gt; SELECT name FROM person_tbl WHERE name REGEXP &apos;mar&apos;;</div><div class=\"line\">查找name字段中以元音字符开头或以&apos;ok&apos;字符串结尾的所有数据：</div><div class=\"line\">mysql&gt; SELECT name FROM person_tbl WHERE name REGEXP &apos;^[aeiou]|ok$&apos;;</div></pre></td></tr></table></figure>\n<h2 id=\"MySQL-ALTER命令\"><a href=\"#MySQL-ALTER命令\" class=\"headerlink\" title=\"MySQL ALTER命令\"></a>MySQL ALTER命令</h2><h3 id=\"删除，添加字段\"><a href=\"#删除，添加字段\" class=\"headerlink\" title=\"删除，添加字段\"></a>删除，添加字段</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; ALTER TABLE testalter_tbl  DROP i; 删除表的ｉ字段</div><div class=\"line\">mysql&gt; ALTER TABLE testalter_tbl ADD i INT;　添加表的ｉ字段并且为int型</div></pre></td></tr></table></figure>\n<h3 id=\"修改字段类型及名称-在ALTER命令中使用-MODIFY-或-CHANGE-子句-。\"><a href=\"#修改字段类型及名称-在ALTER命令中使用-MODIFY-或-CHANGE-子句-。\" class=\"headerlink\" title=\"修改字段类型及名称 在ALTER命令中使用 MODIFY 或 CHANGE 子句 。\"></a>修改字段类型及名称 在ALTER命令中使用 MODIFY 或 CHANGE 子句 。</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; ALTER TABLE testalter_tbl MODIFY c CHAR(10); 把字段 c 的类型从 CHAR(1) 改为 CHAR(10)</div><div class=\"line\"></div><div class=\"line\">mysql&gt; ALTER TABLE testalter_tbl CHANGE j j INT; </div><div class=\"line\">使用 CHANGE 子句, 语法有很大的不同。 在 CHANGE 关键字之后，紧跟着的是你要修改的字段名，然后指定新字段名及类型。</div></pre></td></tr></table></figure>\n<h3 id=\"修改表名\"><a href=\"#修改表名\" class=\"headerlink\" title=\"修改表名\"></a>修改表名</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ALTER TABLE testalter_tbl RENAME TO alter_tbl; 将数据表 testalter_tbl 重命名为 alter_tbl</div></pre></td></tr></table></figure>\n"},{"title":"sass函数","date":"2017-07-01T09:52:54.000Z","_content":"## scss 函数\n\n### 字符串函数\n\n> * unquote()函数 删除字符串中的引号,没有引号，返回原字符串\n\n```css\n.test1 {\n    content:  unquote('Hello Sass!') ;\n}\n.test2 {\n    content: unquote(\"'Hello Sass!\");\n/*编译结果*/\n.test1 {\n  content: Hello Sass!; }\n.test2 {\n  content: 'Hello Sass!; }\n\n```\n\n> * quote()函数 主要用来给字符串添加引号。如果字符串，自身带有引号会统一换成双引号 \"\"\n\n```css\n.test2 {\n    content: quote(\"Hello Sass!\");\n}\n.test3 {\n    content: quote(ImWebDesigner);\n}\n/*编译结果*/\n.test2 {\n  content: \"Hello Sass!\";\n}\n.test3 {\n  content: \"ImWebDesigner\";\n}\n```\n\n> * To-upper-case() 函数将字符串小写字母转换成大写字母\n\n```css\n.test {\n  text: to-upper-case(aaaaa);\n  text: to-upper-case(aA-aAAA-aaa);\n}\n/*编译结果*/\n//CSS\n.test {\n  text: AAAAA;\n  text: AA-AAAA-AAA;\n}\n```\n\n> * To-lower-case() 将字符串转换成小写字母\n\n```css\n//SCSS\n.test {\n  text: to-lower-case(AAAAA);\n  text: to-lower-case(aA-aAAA-aaa);\n}\n//编译出来的 css 代码\n.test {\n  text: aaaaa;\n  text: aa-aaaa-aaa;\n}\n```\n\n### 数字函数\n\n> * percentage() 要是将一个不带单位的数字转换成百分比形式\n\n```css \n.footer{\n    width : percentage(.2)\n}\n// 编译结果\n.footer{\n    width : 20%\n}\n```\n\n> * round() 函数可以将一个数四舍五入为一个最接近的整数\n\n```css\n.footer {\n   width:round(12.3px)\n}\n//编译结果\n.footer {\n  width: 12px;\n}\n```\n\n> * ceil() 函数将一个数转换成最接近于自己的整数\n\n```css\n.footer {\n   width:ceil(12.3px);\n}\n//编译结果\n.footer {\n  width: 13px;\n}\n```\n\n> * floor() 函数将一个数去除其小数部分\n\n```css\n.footer {\n   width:floor(12.3px);\n}\n//编译结果\n.footer {\n  width: 12px;\n}\n```\n\n> *  abs( ) 函数会返回一个数的绝对值\n\n```css\n.footer {\n   width:abs(-12.3px);\n}\n//编译结果\n.footer {\n  width: 12.3px;\n}\n```\n\n> * min() 函数功能主要是在多个数之中找到最小的一个\n\n```css\nbody {\n    width:min(1,2,1%,3,300%)\n}\n// 编译结果\nbody {\n  width: 1%; }\n```\n\n> * max() 函数用来获取一系列数中的最大那个值\n\n```css\nbody {\n    width:max(1,2,1%,3,300%)\n}\n//编译结果\nbody {\n  width: 300%; }\n```\n\n> * random() 函数用来获取一个随机数\n\n```css\nbody{\n    width: ceil(random()*100)px\n}\n//编译结果\nbody {\n  width: 35 px; }\n```\n\n### 列表函数\n\n> * length()函数 返回一个列表中的长度\n\n```css\nlength(10px,20px,(border 1px solid),2em)\n=> 4 \n```\n\n> * nth($list,$n) 函数用来指定列表中某个位置的值。不过在 Sass 中，nth() 函数和其他语言不同，1 是指列表中的第一个标签值，2 是指列给中的第二个标签值\n\n```css\nbody{\n    width: nth(10px 20px 30px,1);\n}\n//编译结果\nbody{\n    width: 10px;\n}\n```\n\n> * join() 函数是将两个列表连接合并成一个列表,最多两个列表\n\n```css\njoin((blue,red),(#abc,#def))\n=> (#0000ff, #ff0000, #aabbcc, #ddeeff)\n```\n\n> * append() 函数是用来将某个值插入到列表中，并且处于最末位\n\n```css\nappend(10px 20px ,30px)\n=> (10px 20px 30px)\n```\n\n> * zip()函数将多个列表值转成一个多维的列表\n\n```css\nzip(1px 2px 3px,solid dashed dotted,green blue red)\n=> ((1px \"solid\" #008000), (2px \"dashed\" #0000ff), (3px \"dotted\" #ff0000))\n```\n\n> * index() 函数类似于索引一样，主要让你找到某个值在列表中所处的位置\n\n```css \nindex(1px solid red, solid)\n=> 2\n```\n","source":"_posts/sass函数.md","raw":"---\ntitle: sass函数\ndate: 2017-07-01 17:52:54\ntags:\n    - Sass\ncategories: Sass\n---\n## scss 函数\n\n### 字符串函数\n\n> * unquote()函数 删除字符串中的引号,没有引号，返回原字符串\n\n```css\n.test1 {\n    content:  unquote('Hello Sass!') ;\n}\n.test2 {\n    content: unquote(\"'Hello Sass!\");\n/*编译结果*/\n.test1 {\n  content: Hello Sass!; }\n.test2 {\n  content: 'Hello Sass!; }\n\n```\n\n> * quote()函数 主要用来给字符串添加引号。如果字符串，自身带有引号会统一换成双引号 \"\"\n\n```css\n.test2 {\n    content: quote(\"Hello Sass!\");\n}\n.test3 {\n    content: quote(ImWebDesigner);\n}\n/*编译结果*/\n.test2 {\n  content: \"Hello Sass!\";\n}\n.test3 {\n  content: \"ImWebDesigner\";\n}\n```\n\n> * To-upper-case() 函数将字符串小写字母转换成大写字母\n\n```css\n.test {\n  text: to-upper-case(aaaaa);\n  text: to-upper-case(aA-aAAA-aaa);\n}\n/*编译结果*/\n//CSS\n.test {\n  text: AAAAA;\n  text: AA-AAAA-AAA;\n}\n```\n\n> * To-lower-case() 将字符串转换成小写字母\n\n```css\n//SCSS\n.test {\n  text: to-lower-case(AAAAA);\n  text: to-lower-case(aA-aAAA-aaa);\n}\n//编译出来的 css 代码\n.test {\n  text: aaaaa;\n  text: aa-aaaa-aaa;\n}\n```\n\n### 数字函数\n\n> * percentage() 要是将一个不带单位的数字转换成百分比形式\n\n```css \n.footer{\n    width : percentage(.2)\n}\n// 编译结果\n.footer{\n    width : 20%\n}\n```\n\n> * round() 函数可以将一个数四舍五入为一个最接近的整数\n\n```css\n.footer {\n   width:round(12.3px)\n}\n//编译结果\n.footer {\n  width: 12px;\n}\n```\n\n> * ceil() 函数将一个数转换成最接近于自己的整数\n\n```css\n.footer {\n   width:ceil(12.3px);\n}\n//编译结果\n.footer {\n  width: 13px;\n}\n```\n\n> * floor() 函数将一个数去除其小数部分\n\n```css\n.footer {\n   width:floor(12.3px);\n}\n//编译结果\n.footer {\n  width: 12px;\n}\n```\n\n> *  abs( ) 函数会返回一个数的绝对值\n\n```css\n.footer {\n   width:abs(-12.3px);\n}\n//编译结果\n.footer {\n  width: 12.3px;\n}\n```\n\n> * min() 函数功能主要是在多个数之中找到最小的一个\n\n```css\nbody {\n    width:min(1,2,1%,3,300%)\n}\n// 编译结果\nbody {\n  width: 1%; }\n```\n\n> * max() 函数用来获取一系列数中的最大那个值\n\n```css\nbody {\n    width:max(1,2,1%,3,300%)\n}\n//编译结果\nbody {\n  width: 300%; }\n```\n\n> * random() 函数用来获取一个随机数\n\n```css\nbody{\n    width: ceil(random()*100)px\n}\n//编译结果\nbody {\n  width: 35 px; }\n```\n\n### 列表函数\n\n> * length()函数 返回一个列表中的长度\n\n```css\nlength(10px,20px,(border 1px solid),2em)\n=> 4 \n```\n\n> * nth($list,$n) 函数用来指定列表中某个位置的值。不过在 Sass 中，nth() 函数和其他语言不同，1 是指列表中的第一个标签值，2 是指列给中的第二个标签值\n\n```css\nbody{\n    width: nth(10px 20px 30px,1);\n}\n//编译结果\nbody{\n    width: 10px;\n}\n```\n\n> * join() 函数是将两个列表连接合并成一个列表,最多两个列表\n\n```css\njoin((blue,red),(#abc,#def))\n=> (#0000ff, #ff0000, #aabbcc, #ddeeff)\n```\n\n> * append() 函数是用来将某个值插入到列表中，并且处于最末位\n\n```css\nappend(10px 20px ,30px)\n=> (10px 20px 30px)\n```\n\n> * zip()函数将多个列表值转成一个多维的列表\n\n```css\nzip(1px 2px 3px,solid dashed dotted,green blue red)\n=> ((1px \"solid\" #008000), (2px \"dashed\" #0000ff), (3px \"dotted\" #ff0000))\n```\n\n> * index() 函数类似于索引一样，主要让你找到某个值在列表中所处的位置\n\n```css \nindex(1px solid red, solid)\n=> 2\n```\n","slug":"sass函数","published":1,"updated":"2017-07-01T10:24:33.285Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb1u1p9d001r0sq9tshv83n8","content":"<h2 id=\"scss-函数\"><a href=\"#scss-函数\" class=\"headerlink\" title=\"scss 函数\"></a>scss 函数</h2><h3 id=\"字符串函数\"><a href=\"#字符串函数\" class=\"headerlink\" title=\"字符串函数\"></a>字符串函数</h3><blockquote>\n<ul>\n<li>unquote()函数 删除字符串中的引号,没有引号，返回原字符串</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">.test1 &#123;</div><div class=\"line\">    content:  unquote('Hello Sass!') ;</div><div class=\"line\">&#125;</div><div class=\"line\">.test2 &#123;</div><div class=\"line\">    content: unquote(\"'Hello Sass!\");</div><div class=\"line\">/*编译结果*/</div><div class=\"line\">.test1 &#123;</div><div class=\"line\">  content: Hello Sass!; &#125;</div><div class=\"line\">.test2 &#123;</div><div class=\"line\">  content: 'Hello Sass!; &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>quote()函数 主要用来给字符串添加引号。如果字符串，自身带有引号会统一换成双引号 “”</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.test2</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">quote</span>(<span class=\"string\">\"Hello Sass!\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.test3</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">quote</span>(ImWebDesigner);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/*编译结果*/</span></div><div class=\"line\"><span class=\"selector-class\">.test2</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">\"Hello Sass!\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.test3</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">\"ImWebDesigner\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>To-upper-case() 函数将字符串小写字母转换成大写字母</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">.test &#123;</div><div class=\"line\">  text: to-upper-case(aaaaa);</div><div class=\"line\">  text: to-upper-case(aA-aAAA-aaa);</div><div class=\"line\">&#125;</div><div class=\"line\">/*编译结果*/</div><div class=\"line\">//CSS</div><div class=\"line\">.test &#123;</div><div class=\"line\">  text: AAAAA;</div><div class=\"line\">  text: AA-AAAA-AAA;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>To-lower-case() 将字符串转换成小写字母</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">//SCSS</div><div class=\"line\">.test &#123;</div><div class=\"line\">  text: to-lower-case(AAAAA);</div><div class=\"line\">  text: to-lower-case(aA-aAAA-aaa);</div><div class=\"line\">&#125;</div><div class=\"line\">//编译出来的 css 代码</div><div class=\"line\">.test &#123;</div><div class=\"line\">  text: aaaaa;</div><div class=\"line\">  text: aa-aaaa-aaa;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"数字函数\"><a href=\"#数字函数\" class=\"headerlink\" title=\"数字函数\"></a>数字函数</h3><blockquote>\n<ul>\n<li>percentage() 要是将一个不带单位的数字转换成百分比形式</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">.footer&#123;</div><div class=\"line\">    width : percentage(.2)</div><div class=\"line\">&#125;</div><div class=\"line\">// 编译结果</div><div class=\"line\">.footer&#123;</div><div class=\"line\">    width : 20%</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>round() 函数可以将一个数四舍五入为一个最接近的整数</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">.footer &#123;</div><div class=\"line\">   width:round(12.3px)</div><div class=\"line\">&#125;</div><div class=\"line\">//编译结果</div><div class=\"line\">.footer &#123;</div><div class=\"line\">  width: 12px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>ceil() 函数将一个数转换成最接近于自己的整数</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">.footer &#123;</div><div class=\"line\">   width:ceil(12.3px);</div><div class=\"line\">&#125;</div><div class=\"line\">//编译结果</div><div class=\"line\">.footer &#123;</div><div class=\"line\">  width: 13px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>floor() 函数将一个数去除其小数部分</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">.footer &#123;</div><div class=\"line\">   width:floor(12.3px);</div><div class=\"line\">&#125;</div><div class=\"line\">//编译结果</div><div class=\"line\">.footer &#123;</div><div class=\"line\">  width: 12px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>abs( ) 函数会返回一个数的绝对值</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">.footer &#123;</div><div class=\"line\">   width:abs(-12.3px);</div><div class=\"line\">&#125;</div><div class=\"line\">//编译结果</div><div class=\"line\">.footer &#123;</div><div class=\"line\">  width: 12.3px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>min() 函数功能主要是在多个数之中找到最小的一个</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">body &#123;</div><div class=\"line\">    width:min(1,2,1%,3,300%)</div><div class=\"line\">&#125;</div><div class=\"line\">// 编译结果</div><div class=\"line\">body &#123;</div><div class=\"line\">  width: 1%; &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>max() 函数用来获取一系列数中的最大那个值</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">body &#123;</div><div class=\"line\">    width:max(1,2,1%,3,300%)</div><div class=\"line\">&#125;</div><div class=\"line\">//编译结果</div><div class=\"line\">body &#123;</div><div class=\"line\">  width: 300%; &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>random() 函数用来获取一个随机数</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">body&#123;</div><div class=\"line\">    width: ceil(random()*100)px</div><div class=\"line\">&#125;</div><div class=\"line\">//编译结果</div><div class=\"line\">body &#123;</div><div class=\"line\">  width: 35 px; &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"列表函数\"><a href=\"#列表函数\" class=\"headerlink\" title=\"列表函数\"></a>列表函数</h3><blockquote>\n<ul>\n<li>length()函数 返回一个列表中的长度</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">length(10px,20px,(border 1px solid),2em)</div><div class=\"line\">=&gt; 4</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>nth($list,$n) 函数用来指定列表中某个位置的值。不过在 Sass 中，nth() 函数和其他语言不同，1 是指列表中的第一个标签值，2 是指列给中的第二个标签值</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">body&#123;</div><div class=\"line\">    width: nth(10px 20px 30px,1);</div><div class=\"line\">&#125;</div><div class=\"line\">//编译结果</div><div class=\"line\">body&#123;</div><div class=\"line\">    width: 10px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>join() 函数是将两个列表连接合并成一个列表,最多两个列表</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">join((blue,red),(#abc,#def))</div><div class=\"line\">=&gt; (#0000ff, #ff0000, #aabbcc, #ddeeff)</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>append() 函数是用来将某个值插入到列表中，并且处于最末位</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">append(10px 20px ,30px)</div><div class=\"line\">=&gt; (10px 20px 30px)</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>zip()函数将多个列表值转成一个多维的列表</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">zip(1px 2px 3px,solid dashed dotted,green blue red)</div><div class=\"line\">=&gt; ((1px \"solid\" #008000), (2px \"dashed\" #0000ff), (3px \"dotted\" #ff0000))</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>index() 函数类似于索引一样，主要让你找到某个值在列表中所处的位置</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">index(1px solid red, solid)</div><div class=\"line\">=&gt; 2</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"scss-函数\"><a href=\"#scss-函数\" class=\"headerlink\" title=\"scss 函数\"></a>scss 函数</h2><h3 id=\"字符串函数\"><a href=\"#字符串函数\" class=\"headerlink\" title=\"字符串函数\"></a>字符串函数</h3><blockquote>\n<ul>\n<li>unquote()函数 删除字符串中的引号,没有引号，返回原字符串</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">.test1 &#123;</div><div class=\"line\">    content:  unquote('Hello Sass!') ;</div><div class=\"line\">&#125;</div><div class=\"line\">.test2 &#123;</div><div class=\"line\">    content: unquote(\"'Hello Sass!\");</div><div class=\"line\">/*编译结果*/</div><div class=\"line\">.test1 &#123;</div><div class=\"line\">  content: Hello Sass!; &#125;</div><div class=\"line\">.test2 &#123;</div><div class=\"line\">  content: 'Hello Sass!; &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>quote()函数 主要用来给字符串添加引号。如果字符串，自身带有引号会统一换成双引号 “”</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.test2</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">quote</span>(<span class=\"string\">\"Hello Sass!\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.test3</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">quote</span>(ImWebDesigner);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/*编译结果*/</span></div><div class=\"line\"><span class=\"selector-class\">.test2</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">\"Hello Sass!\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.test3</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">\"ImWebDesigner\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>To-upper-case() 函数将字符串小写字母转换成大写字母</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">.test &#123;</div><div class=\"line\">  text: to-upper-case(aaaaa);</div><div class=\"line\">  text: to-upper-case(aA-aAAA-aaa);</div><div class=\"line\">&#125;</div><div class=\"line\">/*编译结果*/</div><div class=\"line\">//CSS</div><div class=\"line\">.test &#123;</div><div class=\"line\">  text: AAAAA;</div><div class=\"line\">  text: AA-AAAA-AAA;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>To-lower-case() 将字符串转换成小写字母</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">//SCSS</div><div class=\"line\">.test &#123;</div><div class=\"line\">  text: to-lower-case(AAAAA);</div><div class=\"line\">  text: to-lower-case(aA-aAAA-aaa);</div><div class=\"line\">&#125;</div><div class=\"line\">//编译出来的 css 代码</div><div class=\"line\">.test &#123;</div><div class=\"line\">  text: aaaaa;</div><div class=\"line\">  text: aa-aaaa-aaa;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"数字函数\"><a href=\"#数字函数\" class=\"headerlink\" title=\"数字函数\"></a>数字函数</h3><blockquote>\n<ul>\n<li>percentage() 要是将一个不带单位的数字转换成百分比形式</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">.footer&#123;</div><div class=\"line\">    width : percentage(.2)</div><div class=\"line\">&#125;</div><div class=\"line\">// 编译结果</div><div class=\"line\">.footer&#123;</div><div class=\"line\">    width : 20%</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>round() 函数可以将一个数四舍五入为一个最接近的整数</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">.footer &#123;</div><div class=\"line\">   width:round(12.3px)</div><div class=\"line\">&#125;</div><div class=\"line\">//编译结果</div><div class=\"line\">.footer &#123;</div><div class=\"line\">  width: 12px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>ceil() 函数将一个数转换成最接近于自己的整数</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">.footer &#123;</div><div class=\"line\">   width:ceil(12.3px);</div><div class=\"line\">&#125;</div><div class=\"line\">//编译结果</div><div class=\"line\">.footer &#123;</div><div class=\"line\">  width: 13px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>floor() 函数将一个数去除其小数部分</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">.footer &#123;</div><div class=\"line\">   width:floor(12.3px);</div><div class=\"line\">&#125;</div><div class=\"line\">//编译结果</div><div class=\"line\">.footer &#123;</div><div class=\"line\">  width: 12px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>abs( ) 函数会返回一个数的绝对值</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">.footer &#123;</div><div class=\"line\">   width:abs(-12.3px);</div><div class=\"line\">&#125;</div><div class=\"line\">//编译结果</div><div class=\"line\">.footer &#123;</div><div class=\"line\">  width: 12.3px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>min() 函数功能主要是在多个数之中找到最小的一个</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">body &#123;</div><div class=\"line\">    width:min(1,2,1%,3,300%)</div><div class=\"line\">&#125;</div><div class=\"line\">// 编译结果</div><div class=\"line\">body &#123;</div><div class=\"line\">  width: 1%; &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>max() 函数用来获取一系列数中的最大那个值</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">body &#123;</div><div class=\"line\">    width:max(1,2,1%,3,300%)</div><div class=\"line\">&#125;</div><div class=\"line\">//编译结果</div><div class=\"line\">body &#123;</div><div class=\"line\">  width: 300%; &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>random() 函数用来获取一个随机数</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">body&#123;</div><div class=\"line\">    width: ceil(random()*100)px</div><div class=\"line\">&#125;</div><div class=\"line\">//编译结果</div><div class=\"line\">body &#123;</div><div class=\"line\">  width: 35 px; &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"列表函数\"><a href=\"#列表函数\" class=\"headerlink\" title=\"列表函数\"></a>列表函数</h3><blockquote>\n<ul>\n<li>length()函数 返回一个列表中的长度</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">length(10px,20px,(border 1px solid),2em)</div><div class=\"line\">=&gt; 4</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>nth($list,$n) 函数用来指定列表中某个位置的值。不过在 Sass 中，nth() 函数和其他语言不同，1 是指列表中的第一个标签值，2 是指列给中的第二个标签值</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">body&#123;</div><div class=\"line\">    width: nth(10px 20px 30px,1);</div><div class=\"line\">&#125;</div><div class=\"line\">//编译结果</div><div class=\"line\">body&#123;</div><div class=\"line\">    width: 10px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>join() 函数是将两个列表连接合并成一个列表,最多两个列表</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">join((blue,red),(#abc,#def))</div><div class=\"line\">=&gt; (#0000ff, #ff0000, #aabbcc, #ddeeff)</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>append() 函数是用来将某个值插入到列表中，并且处于最末位</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">append(10px 20px ,30px)</div><div class=\"line\">=&gt; (10px 20px 30px)</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>zip()函数将多个列表值转成一个多维的列表</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">zip(1px 2px 3px,solid dashed dotted,green blue red)</div><div class=\"line\">=&gt; ((1px \"solid\" #008000), (2px \"dashed\" #0000ff), (3px \"dotted\" #ff0000))</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>index() 函数类似于索引一样，主要让你找到某个值在列表中所处的位置</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">index(1px solid red, solid)</div><div class=\"line\">=&gt; 2</div></pre></td></tr></table></figure>\n"},{"title":"ubuntu中的命令","date":"2016-08-01T13:18:17.000Z","_content":"\n# ubuntu中的命令\n### 1. 全局安装的包目录在 /usr/local/nodejs/lib/node_modules/ 下边\n### 2. /usr/local/bin 环境变量的配置\n### 3. cp xxx.js xxx.js 目标目录  复制文件到目标目录\n### 4. rm -rf xxx.js 删除文件\n### 5. mv xxx.js 目标目录  移动文件到目标目录","source":"_posts/ubuntu中的命令.md","raw":"---\ntitle: ubuntu中的命令\ndate: 2016-08-01 21:18:17\ncategories: ubuntu\ntags:\n    - ubuntu\n---\n\n# ubuntu中的命令\n### 1. 全局安装的包目录在 /usr/local/nodejs/lib/node_modules/ 下边\n### 2. /usr/local/bin 环境变量的配置\n### 3. cp xxx.js xxx.js 目标目录  复制文件到目标目录\n### 4. rm -rf xxx.js 删除文件\n### 5. mv xxx.js 目标目录  移动文件到目标目录","slug":"ubuntu中的命令","published":1,"updated":"2016-11-05T13:19:54.939Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb1u1p9o001w0sq9l0zhs7j6","content":"<h1 id=\"ubuntu中的命令\"><a href=\"#ubuntu中的命令\" class=\"headerlink\" title=\"ubuntu中的命令\"></a>ubuntu中的命令</h1><h3 id=\"1-全局安装的包目录在-usr-local-nodejs-lib-node-modules-下边\"><a href=\"#1-全局安装的包目录在-usr-local-nodejs-lib-node-modules-下边\" class=\"headerlink\" title=\"1. 全局安装的包目录在 /usr/local/nodejs/lib/node_modules/ 下边\"></a>1. 全局安装的包目录在 /usr/local/nodejs/lib/node_modules/ 下边</h3><h3 id=\"2-usr-local-bin-环境变量的配置\"><a href=\"#2-usr-local-bin-环境变量的配置\" class=\"headerlink\" title=\"2. /usr/local/bin 环境变量的配置\"></a>2. /usr/local/bin 环境变量的配置</h3><h3 id=\"3-cp-xxx-js-xxx-js-目标目录-复制文件到目标目录\"><a href=\"#3-cp-xxx-js-xxx-js-目标目录-复制文件到目标目录\" class=\"headerlink\" title=\"3. cp xxx.js xxx.js 目标目录  复制文件到目标目录\"></a>3. cp xxx.js xxx.js 目标目录  复制文件到目标目录</h3><h3 id=\"4-rm-rf-xxx-js-删除文件\"><a href=\"#4-rm-rf-xxx-js-删除文件\" class=\"headerlink\" title=\"4. rm -rf xxx.js 删除文件\"></a>4. rm -rf xxx.js 删除文件</h3><h3 id=\"5-mv-xxx-js-目标目录-移动文件到目标目录\"><a href=\"#5-mv-xxx-js-目标目录-移动文件到目标目录\" class=\"headerlink\" title=\"5. mv xxx.js 目标目录  移动文件到目标目录\"></a>5. mv xxx.js 目标目录  移动文件到目标目录</h3>","excerpt":"","more":"<h1 id=\"ubuntu中的命令\"><a href=\"#ubuntu中的命令\" class=\"headerlink\" title=\"ubuntu中的命令\"></a>ubuntu中的命令</h1><h3 id=\"1-全局安装的包目录在-usr-local-nodejs-lib-node-modules-下边\"><a href=\"#1-全局安装的包目录在-usr-local-nodejs-lib-node-modules-下边\" class=\"headerlink\" title=\"1. 全局安装的包目录在 /usr/local/nodejs/lib/node_modules/ 下边\"></a>1. 全局安装的包目录在 /usr/local/nodejs/lib/node_modules/ 下边</h3><h3 id=\"2-usr-local-bin-环境变量的配置\"><a href=\"#2-usr-local-bin-环境变量的配置\" class=\"headerlink\" title=\"2. /usr/local/bin 环境变量的配置\"></a>2. /usr/local/bin 环境变量的配置</h3><h3 id=\"3-cp-xxx-js-xxx-js-目标目录-复制文件到目标目录\"><a href=\"#3-cp-xxx-js-xxx-js-目标目录-复制文件到目标目录\" class=\"headerlink\" title=\"3. cp xxx.js xxx.js 目标目录  复制文件到目标目录\"></a>3. cp xxx.js xxx.js 目标目录  复制文件到目标目录</h3><h3 id=\"4-rm-rf-xxx-js-删除文件\"><a href=\"#4-rm-rf-xxx-js-删除文件\" class=\"headerlink\" title=\"4. rm -rf xxx.js 删除文件\"></a>4. rm -rf xxx.js 删除文件</h3><h3 id=\"5-mv-xxx-js-目标目录-移动文件到目标目录\"><a href=\"#5-mv-xxx-js-目标目录-移动文件到目标目录\" class=\"headerlink\" title=\"5. mv xxx.js 目标目录  移动文件到目标目录\"></a>5. mv xxx.js 目标目录  移动文件到目标目录</h3>"},{"title":"sass基本用法","date":"2017-07-01T07:06:31.000Z","_content":"## 选择器嵌套\n\n假设我们有一段这样的结构：\n\n```css\n<header>\n    <nav>\n        <a href=\"#\">Home</a>\n        <a href=\"#\">About</a>\n        <a href=\"#\">Blog</a>\n    </nav>\n<header>\n/*css写法*/\nnav a {\n  color:red;\n}\nheader nav a {\n  color:green;\n}\n/*scss写法*/\nnav {\n  a {\n    color: red;\n    header & {\n      color:green;\n    }\n  }  \n}\n```\n## 属性嵌套\n```css\n/*css写法*/\n.box {\n    border-top: 1px solid red;\n    border-bottom: 1px solid green;\n}\n/*scss写法*/\n.box{\n    border:{\n        top: 1px solid red;\n        bottom:1px solid green;\n    }\n}\n```\n## 伪类嵌套\n```css\n/*css写法*/\n.clearfix:before, .clearfix:after {\n  content: \"\";\n  display: table;\n}\n.clearfix:after {\n  clear: both;\n  overflow: hidden;\n}\n/*scss写法*/\n.clearfix {\n    &:before,&:after{\n        content: \"\";\n        display: table;\n    }\n    &:after{\n        overflow: hidden;\n        clear: both;\n    }\n}\n```\n## 混合宏  @mixin\n* 优点:将共用的代码块定义为宏，直接引用\n* 缺点:会生成冗余的代码块，不会合并在一起\n```css\n/*声明混合宏*/\n@mixin border-radius($raidus:5px){ \n    //单个参数加默认值($radius:5px) \n    //多个参数用逗号隔开($radius,$width,$height)\n    //多个参数还可以用[...]表示($shadows...)\n    border-radius: $radius;\n}\n/*调用混合宏*/\ndiv{\n    @include border-radius(10px);\n}\n/*多个参数使用...为参数*/\n@mixin box-shadow($shadows...){\n  @if length($shadows) >= 1 {\n    -webkit-box-shadow: $shadows;\n    box-shadow: $shadows;\n  } @else {\n    $shadows: 0 0 2px rgba(#000,.25); // 默认参数  如果没有传 就用这个  传了就用传过来的参数\n    -webkit-box-shadow: $shadow;\n    box-shadow: $shadow;\n  }\n}\n/*调用宏*/\n.box {\n  @include box-shadow(0 0 1px rgba(#000,.5),0 0 2px rgba(#000,.2));\n}\n/*编译结果*/\n.box {\n  -webkit-box-shadow: 0 0 1px rgba(0, 0, 0, 0.5), 0 0 2px rgba(0, 0, 0, 0.2);\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0.5), 0 0 2px rgba(0, 0, 0, 0.2);\n}\n```\n## 继承 @extend 可以将公用的代码合并在一起\n```css\n/*scss写法*/\n.btn {\n  border: 1px solid #ccc;\n  padding: 6px 10px;\n  font-size: 14px;\n}\n\n.btn-primary {\n  background-color: #f36;\n  color: #fff;\n  @extend .btn;\n}\n\n.btn-second {\n  background-color: orange;\n  color: #fff;\n  @extend .btn;\n}\n/*编译结果*/\n.btn, .btn-primary, .btn-second {\n  border: 1px solid #ccc;\n  padding: 6px 10px;\n  font-size: 14px;\n}\n\n.btn-primary {\n  background-color: #f36;\n  color: #fff;\n}\n\n.btn-second {\n  background-clor: orange;\n  color: #fff;\n}\n```\n## 占位符 %placeholder 编译出来的代码会将相同的代码合并在一起\n* %placeholder 功能是一个很强大，很实用的一个功能，\n他可以取代以前 CSS 中的基类造成的代码冗余的情形,\n因为 %placeholder 声明的代码，如果不被 @extend 调用的话，\n不会产生任何代码。因此，需要配合@extend使用\n```css\n/*占位符代码*/\n%mt5 {\n  margin-top: 5px;\n}\n%pt5{\n  padding-top: 5px;\n}\n/*继承占位符*/\n.btn {\n  @extend %mt5;\n  @extend %pt5;\n}\n\n.block {\n  @extend %mt5;\n\n  span {\n    @extend %pt5;\n  }\n}\n/*编译结果*/\n.btn, .block {\n  margin-top: 5px;\n}\n\n.btn, .block span {\n  padding-top: 5px;\n}\n```\n## 混合宏 VS 继承 VS 占位符\n\n![](/img/scss.jpg)\n\n## 插值#{} 为了使让变量和属性工作的很完美\n\n```css\n/*scss*/\n$properties: (margin, padding);\n@mixin set-value($side, $value) {\n    @each $prop in $properties {\n        #{$prop}-#{$side}: $value;\n    }\n}\n.login-box {\n    @include set-value(top, 14px);\n}\n\n@mixin generate-sizes($class, $small, $medium, $big) {\n    .#{$class}-small { font-size: $small; }\n    .#{$class}-medium { font-size: $medium; }\n    .#{$class}-big { font-size: $big; }\n}\n@include generate-sizes(\"header-text\", 12px, 20px, 40px);\n\n\n/*编译结果*/\n.login-box {\n    margin-top: 14px;\n    padding-top: 14px;\n}\n.header-text-small { font-size: 12px; }\n.header-text-medium { font-size: 20px; }\n.header-text-big { font-size: 40px; }\n\n```\n## scss中的注释\n\n1、类似 CSS 的注释方式，使用 \"/* \"开头，结属使用 \"*/ \"\n\n2、类似 JavaScript 的注释方式，使用\"//\"\n\n<p style=\"color:red\">区别</p>\n\n前者会在编译出来的 CSS 显示，后者在编译出来的 CSS 中不会显示，来看一个示例：\n\n## Sass运算\n\n* 加法运算 单位必须相同\n```css\nbody{\n    width: 100px + 100px;\n}\n```\n* 减法运算 单位必须相同\n```css\nbody{\n    width: 100px - 10px;\n}\n```\n* 乘法运算 单位必须相同且数值只能有一个单位\n```css\n/*scss写法*/\nbody{\n     width: 10px * 3;\n}\n$list: twitter,facebook,github,weibo;\n\n@for $i from 1 through length($list){\n  .icon-#{nth($list,$i)}{\n    background-postion: 0 - 20px * $i;\n  }\n}\n/*编译结果*/\nbody{\n    width: 30px;\n}\n.icon-twitter {\n  background-postion: -20px; }\n.icon-facebook {\n  background-postion: -40px; }\n.icon-github {\n  background-postion: -60px; }\n.icon-weibo {\n  background-postion: -80px; }\n```\n* 除法运算\n\n    <p style=\"color:red\">\"/\" 符号被当作除法运算符时有以下几种情况：</p>\n    \n    •    如果数值或它的任意部分是存储在一个变量中或是函数的返回值。\n    \n    •    如果数值被圆括号包围。\n    \n    •    如果数值是另一个数学表达式的一部分。\n```css\nbody{\n  font: 10px/8px;             // 纯 CSS，不是除法运算\n  $width: 1000px;\n  width: $width/2;            // 使用了变量，是除法运算\n  width: round(1.5)/2;        // 使用了函数，是除法运算\n  height: (500px/2);          // 使用了圆括号，是除法运算\n  margin-left: 5px + 8px/2px; // 使用了加（+）号，是除法运算\n}\n```\n","source":"_posts/sass基本用法.md","raw":"---\ntitle: sass基本用法\ndate: 2017-07-01 15:06:31\ntags:\n    - Sass\ncategories: Sass\n---\n## 选择器嵌套\n\n假设我们有一段这样的结构：\n\n```css\n<header>\n    <nav>\n        <a href=\"#\">Home</a>\n        <a href=\"#\">About</a>\n        <a href=\"#\">Blog</a>\n    </nav>\n<header>\n/*css写法*/\nnav a {\n  color:red;\n}\nheader nav a {\n  color:green;\n}\n/*scss写法*/\nnav {\n  a {\n    color: red;\n    header & {\n      color:green;\n    }\n  }  \n}\n```\n## 属性嵌套\n```css\n/*css写法*/\n.box {\n    border-top: 1px solid red;\n    border-bottom: 1px solid green;\n}\n/*scss写法*/\n.box{\n    border:{\n        top: 1px solid red;\n        bottom:1px solid green;\n    }\n}\n```\n## 伪类嵌套\n```css\n/*css写法*/\n.clearfix:before, .clearfix:after {\n  content: \"\";\n  display: table;\n}\n.clearfix:after {\n  clear: both;\n  overflow: hidden;\n}\n/*scss写法*/\n.clearfix {\n    &:before,&:after{\n        content: \"\";\n        display: table;\n    }\n    &:after{\n        overflow: hidden;\n        clear: both;\n    }\n}\n```\n## 混合宏  @mixin\n* 优点:将共用的代码块定义为宏，直接引用\n* 缺点:会生成冗余的代码块，不会合并在一起\n```css\n/*声明混合宏*/\n@mixin border-radius($raidus:5px){ \n    //单个参数加默认值($radius:5px) \n    //多个参数用逗号隔开($radius,$width,$height)\n    //多个参数还可以用[...]表示($shadows...)\n    border-radius: $radius;\n}\n/*调用混合宏*/\ndiv{\n    @include border-radius(10px);\n}\n/*多个参数使用...为参数*/\n@mixin box-shadow($shadows...){\n  @if length($shadows) >= 1 {\n    -webkit-box-shadow: $shadows;\n    box-shadow: $shadows;\n  } @else {\n    $shadows: 0 0 2px rgba(#000,.25); // 默认参数  如果没有传 就用这个  传了就用传过来的参数\n    -webkit-box-shadow: $shadow;\n    box-shadow: $shadow;\n  }\n}\n/*调用宏*/\n.box {\n  @include box-shadow(0 0 1px rgba(#000,.5),0 0 2px rgba(#000,.2));\n}\n/*编译结果*/\n.box {\n  -webkit-box-shadow: 0 0 1px rgba(0, 0, 0, 0.5), 0 0 2px rgba(0, 0, 0, 0.2);\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0.5), 0 0 2px rgba(0, 0, 0, 0.2);\n}\n```\n## 继承 @extend 可以将公用的代码合并在一起\n```css\n/*scss写法*/\n.btn {\n  border: 1px solid #ccc;\n  padding: 6px 10px;\n  font-size: 14px;\n}\n\n.btn-primary {\n  background-color: #f36;\n  color: #fff;\n  @extend .btn;\n}\n\n.btn-second {\n  background-color: orange;\n  color: #fff;\n  @extend .btn;\n}\n/*编译结果*/\n.btn, .btn-primary, .btn-second {\n  border: 1px solid #ccc;\n  padding: 6px 10px;\n  font-size: 14px;\n}\n\n.btn-primary {\n  background-color: #f36;\n  color: #fff;\n}\n\n.btn-second {\n  background-clor: orange;\n  color: #fff;\n}\n```\n## 占位符 %placeholder 编译出来的代码会将相同的代码合并在一起\n* %placeholder 功能是一个很强大，很实用的一个功能，\n他可以取代以前 CSS 中的基类造成的代码冗余的情形,\n因为 %placeholder 声明的代码，如果不被 @extend 调用的话，\n不会产生任何代码。因此，需要配合@extend使用\n```css\n/*占位符代码*/\n%mt5 {\n  margin-top: 5px;\n}\n%pt5{\n  padding-top: 5px;\n}\n/*继承占位符*/\n.btn {\n  @extend %mt5;\n  @extend %pt5;\n}\n\n.block {\n  @extend %mt5;\n\n  span {\n    @extend %pt5;\n  }\n}\n/*编译结果*/\n.btn, .block {\n  margin-top: 5px;\n}\n\n.btn, .block span {\n  padding-top: 5px;\n}\n```\n## 混合宏 VS 继承 VS 占位符\n\n![](/img/scss.jpg)\n\n## 插值#{} 为了使让变量和属性工作的很完美\n\n```css\n/*scss*/\n$properties: (margin, padding);\n@mixin set-value($side, $value) {\n    @each $prop in $properties {\n        #{$prop}-#{$side}: $value;\n    }\n}\n.login-box {\n    @include set-value(top, 14px);\n}\n\n@mixin generate-sizes($class, $small, $medium, $big) {\n    .#{$class}-small { font-size: $small; }\n    .#{$class}-medium { font-size: $medium; }\n    .#{$class}-big { font-size: $big; }\n}\n@include generate-sizes(\"header-text\", 12px, 20px, 40px);\n\n\n/*编译结果*/\n.login-box {\n    margin-top: 14px;\n    padding-top: 14px;\n}\n.header-text-small { font-size: 12px; }\n.header-text-medium { font-size: 20px; }\n.header-text-big { font-size: 40px; }\n\n```\n## scss中的注释\n\n1、类似 CSS 的注释方式，使用 \"/* \"开头，结属使用 \"*/ \"\n\n2、类似 JavaScript 的注释方式，使用\"//\"\n\n<p style=\"color:red\">区别</p>\n\n前者会在编译出来的 CSS 显示，后者在编译出来的 CSS 中不会显示，来看一个示例：\n\n## Sass运算\n\n* 加法运算 单位必须相同\n```css\nbody{\n    width: 100px + 100px;\n}\n```\n* 减法运算 单位必须相同\n```css\nbody{\n    width: 100px - 10px;\n}\n```\n* 乘法运算 单位必须相同且数值只能有一个单位\n```css\n/*scss写法*/\nbody{\n     width: 10px * 3;\n}\n$list: twitter,facebook,github,weibo;\n\n@for $i from 1 through length($list){\n  .icon-#{nth($list,$i)}{\n    background-postion: 0 - 20px * $i;\n  }\n}\n/*编译结果*/\nbody{\n    width: 30px;\n}\n.icon-twitter {\n  background-postion: -20px; }\n.icon-facebook {\n  background-postion: -40px; }\n.icon-github {\n  background-postion: -60px; }\n.icon-weibo {\n  background-postion: -80px; }\n```\n* 除法运算\n\n    <p style=\"color:red\">\"/\" 符号被当作除法运算符时有以下几种情况：</p>\n    \n    •    如果数值或它的任意部分是存储在一个变量中或是函数的返回值。\n    \n    •    如果数值被圆括号包围。\n    \n    •    如果数值是另一个数学表达式的一部分。\n```css\nbody{\n  font: 10px/8px;             // 纯 CSS，不是除法运算\n  $width: 1000px;\n  width: $width/2;            // 使用了变量，是除法运算\n  width: round(1.5)/2;        // 使用了函数，是除法运算\n  height: (500px/2);          // 使用了圆括号，是除法运算\n  margin-left: 5px + 8px/2px; // 使用了加（+）号，是除法运算\n}\n```\n","slug":"sass基本用法","published":1,"updated":"2017-07-01T09:56:39.456Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb1u1p9t001z0sq9bk8razdp","content":"<h2 id=\"选择器嵌套\"><a href=\"#选择器嵌套\" class=\"headerlink\" title=\"选择器嵌套\"></a>选择器嵌套</h2><p>假设我们有一段这样的结构：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;header&gt;</div><div class=\"line\">    &lt;nav&gt;</div><div class=\"line\">        &lt;a href=\"#\"&gt;Home&lt;/a&gt;</div><div class=\"line\">        &lt;a href=\"#\"&gt;About&lt;/a&gt;</div><div class=\"line\">        &lt;a href=\"#\"&gt;Blog&lt;/a&gt;</div><div class=\"line\">    &lt;/nav&gt;</div><div class=\"line\">&lt;header&gt;</div><div class=\"line\">/*css写法*/</div><div class=\"line\">nav a &#123;</div><div class=\"line\">  color:red;</div><div class=\"line\">&#125;</div><div class=\"line\">header nav a &#123;</div><div class=\"line\">  color:green;</div><div class=\"line\">&#125;</div><div class=\"line\">/*scss写法*/</div><div class=\"line\">nav &#123;</div><div class=\"line\">  a &#123;</div><div class=\"line\">    color: red;</div><div class=\"line\">    header &amp; &#123;</div><div class=\"line\">      color:green;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"属性嵌套\"><a href=\"#属性嵌套\" class=\"headerlink\" title=\"属性嵌套\"></a>属性嵌套</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*css写法*/</span></div><div class=\"line\"><span class=\"selector-class\">.box</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">1px</span> solid red;</div><div class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid green;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/*scss写法*/</span></div><div class=\"line\"><span class=\"selector-class\">.box</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">border</span>:&#123;</div><div class=\"line\">        top: <span class=\"number\">1px</span> solid red;</div><div class=\"line\">        <span class=\"attribute\">bottom</span>:<span class=\"number\">1px</span> solid green;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"伪类嵌套\"><a href=\"#伪类嵌套\" class=\"headerlink\" title=\"伪类嵌套\"></a>伪类嵌套</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*css写法*/</div><div class=\"line\">.clearfix:before, .clearfix:after &#123;</div><div class=\"line\">  content: \"\";</div><div class=\"line\">  display: table;</div><div class=\"line\">&#125;</div><div class=\"line\">.clearfix:after &#123;</div><div class=\"line\">  clear: both;</div><div class=\"line\">  overflow: hidden;</div><div class=\"line\">&#125;</div><div class=\"line\">/*scss写法*/</div><div class=\"line\">.clearfix &#123;</div><div class=\"line\">    &amp;:before,&amp;:after&#123;</div><div class=\"line\">        content: \"\";</div><div class=\"line\">        display: table;</div><div class=\"line\">    &#125;</div><div class=\"line\">    &amp;:after&#123;</div><div class=\"line\">        overflow: hidden;</div><div class=\"line\">        clear: both;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"混合宏-mixin\"><a href=\"#混合宏-mixin\" class=\"headerlink\" title=\"混合宏  @mixin\"></a>混合宏  @mixin</h2><ul>\n<li>优点:将共用的代码块定义为宏，直接引用</li>\n<li>缺点:会生成冗余的代码块，不会合并在一起<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*声明混合宏*/</div><div class=\"line\">@mixin border-radius($raidus:5px)&#123; </div><div class=\"line\">    //单个参数加默认值($radius:5px) </div><div class=\"line\">    //多个参数用逗号隔开($radius,$width,$height)</div><div class=\"line\">    //多个参数还可以用[...]表示($shadows...)</div><div class=\"line\">    border-radius: $radius;</div><div class=\"line\">&#125;</div><div class=\"line\">/*调用混合宏*/</div><div class=\"line\">div&#123;</div><div class=\"line\">    @include border-radius(10px);</div><div class=\"line\">&#125;</div><div class=\"line\">/*多个参数使用...为参数*/</div><div class=\"line\">@mixin box-shadow($shadows...)&#123;</div><div class=\"line\">  @if length($shadows) &gt;= 1 &#123;</div><div class=\"line\">    -webkit-box-shadow: $shadows;</div><div class=\"line\">    box-shadow: $shadows;</div><div class=\"line\">  &#125; @else &#123;</div><div class=\"line\">    $shadows: 0 0 2px rgba(#000,.25); // 默认参数  如果没有传 就用这个  传了就用传过来的参数</div><div class=\"line\">    -webkit-box-shadow: $shadow;</div><div class=\"line\">    box-shadow: $shadow;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">/*调用宏*/</div><div class=\"line\">.box &#123;</div><div class=\"line\">  @include box-shadow(0 0 1px rgba(#000,.5),0 0 2px rgba(#000,.2));</div><div class=\"line\">&#125;</div><div class=\"line\">/*编译结果*/</div><div class=\"line\">.box &#123;</div><div class=\"line\">  -webkit-box-shadow: 0 0 1px rgba(0, 0, 0, 0.5), 0 0 2px rgba(0, 0, 0, 0.2);</div><div class=\"line\">  box-shadow: 0 0 1px rgba(0, 0, 0, 0.5), 0 0 2px rgba(0, 0, 0, 0.2);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"继承-extend-可以将公用的代码合并在一起\"><a href=\"#继承-extend-可以将公用的代码合并在一起\" class=\"headerlink\" title=\"继承 @extend 可以将公用的代码合并在一起\"></a>继承 @extend 可以将公用的代码合并在一起</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*scss写法*/</div><div class=\"line\">.btn &#123;</div><div class=\"line\">  border: 1px solid #ccc;</div><div class=\"line\">  padding: 6px 10px;</div><div class=\"line\">  font-size: 14px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn-primary &#123;</div><div class=\"line\">  background-color: #f36;</div><div class=\"line\">  color: #fff;</div><div class=\"line\">  @extend .btn;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn-second &#123;</div><div class=\"line\">  background-color: orange;</div><div class=\"line\">  color: #fff;</div><div class=\"line\">  @extend .btn;</div><div class=\"line\">&#125;</div><div class=\"line\">/*编译结果*/</div><div class=\"line\">.btn, .btn-primary, .btn-second &#123;</div><div class=\"line\">  border: 1px solid #ccc;</div><div class=\"line\">  padding: 6px 10px;</div><div class=\"line\">  font-size: 14px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn-primary &#123;</div><div class=\"line\">  background-color: #f36;</div><div class=\"line\">  color: #fff;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn-second &#123;</div><div class=\"line\">  background-clor: orange;</div><div class=\"line\">  color: #fff;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"占位符-placeholder-编译出来的代码会将相同的代码合并在一起\"><a href=\"#占位符-placeholder-编译出来的代码会将相同的代码合并在一起\" class=\"headerlink\" title=\"占位符 %placeholder 编译出来的代码会将相同的代码合并在一起\"></a>占位符 %placeholder 编译出来的代码会将相同的代码合并在一起</h2><ul>\n<li>%placeholder 功能是一个很强大，很实用的一个功能，<br>他可以取代以前 CSS 中的基类造成的代码冗余的情形,<br>因为 %placeholder 声明的代码，如果不被 @extend 调用的话，<br>不会产生任何代码。因此，需要配合@extend使用<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*占位符代码*/</div><div class=\"line\">%mt5 &#123;</div><div class=\"line\">  margin-top: 5px;</div><div class=\"line\">&#125;</div><div class=\"line\">%pt5&#123;</div><div class=\"line\">  padding-top: 5px;</div><div class=\"line\">&#125;</div><div class=\"line\">/*继承占位符*/</div><div class=\"line\">.btn &#123;</div><div class=\"line\">  @extend %mt5;</div><div class=\"line\">  @extend %pt5;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.block &#123;</div><div class=\"line\">  @extend %mt5;</div><div class=\"line\"></div><div class=\"line\">  span &#123;</div><div class=\"line\">    @extend %pt5;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">/*编译结果*/</div><div class=\"line\">.btn, .block &#123;</div><div class=\"line\">  margin-top: 5px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn, .block span &#123;</div><div class=\"line\">  padding-top: 5px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"混合宏-VS-继承-VS-占位符\"><a href=\"#混合宏-VS-继承-VS-占位符\" class=\"headerlink\" title=\"混合宏 VS 继承 VS 占位符\"></a>混合宏 VS 继承 VS 占位符</h2><p><img src=\"/img/scss.jpg\" alt=\"\"></p>\n<h2 id=\"插值-为了使让变量和属性工作的很完美\"><a href=\"#插值-为了使让变量和属性工作的很完美\" class=\"headerlink\" title=\"插值#{} 为了使让变量和属性工作的很完美\"></a>插值#{} 为了使让变量和属性工作的很完美</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*scss*/</div><div class=\"line\">$properties: (margin, padding);</div><div class=\"line\">@mixin set-value($side, $value) &#123;</div><div class=\"line\">    @each $prop in $properties &#123;</div><div class=\"line\">        #&#123;$prop&#125;-#&#123;$side&#125;: $value;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">.login-box &#123;</div><div class=\"line\">    @include set-value(top, 14px);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@mixin generate-sizes($class, $small, $medium, $big) &#123;</div><div class=\"line\">    .#&#123;$class&#125;-small &#123; font-size: $small; &#125;</div><div class=\"line\">    .#&#123;$class&#125;-medium &#123; font-size: $medium; &#125;</div><div class=\"line\">    .#&#123;$class&#125;-big &#123; font-size: $big; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">@include generate-sizes(\"header-text\", 12px, 20px, 40px);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/*编译结果*/</div><div class=\"line\">.login-box &#123;</div><div class=\"line\">    margin-top: 14px;</div><div class=\"line\">    padding-top: 14px;</div><div class=\"line\">&#125;</div><div class=\"line\">.header-text-small &#123; font-size: 12px; &#125;</div><div class=\"line\">.header-text-medium &#123; font-size: 20px; &#125;</div><div class=\"line\">.header-text-big &#123; font-size: 40px; &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"scss中的注释\"><a href=\"#scss中的注释\" class=\"headerlink\" title=\"scss中的注释\"></a>scss中的注释</h2><p>1、类似 CSS 的注释方式，使用 “/<em> “开头，结属使用 “</em>/ “</p>\n<p>2、类似 JavaScript 的注释方式，使用”//“</p>\n<p style=\"color:red\">区别</p>\n\n<p>前者会在编译出来的 CSS 显示，后者在编译出来的 CSS 中不会显示，来看一个示例：</p>\n<h2 id=\"Sass运算\"><a href=\"#Sass运算\" class=\"headerlink\" title=\"Sass运算\"></a>Sass运算</h2><ul>\n<li><p>加法运算 单位必须相同</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">body</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span> + <span class=\"number\">100px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>减法运算 单位必须相同</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">body</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span> - <span class=\"number\">10px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>乘法运算 单位必须相同且数值只能有一个单位</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*scss写法*/</div><div class=\"line\">body&#123;</div><div class=\"line\">     width: 10px * 3;</div><div class=\"line\">&#125;</div><div class=\"line\">$list: twitter,facebook,github,weibo;</div><div class=\"line\"></div><div class=\"line\">@for $i from 1 through length($list)&#123;</div><div class=\"line\">  .icon-#&#123;nth($list,$i)&#125;&#123;</div><div class=\"line\">    background-postion: 0 - 20px * $i;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">/*编译结果*/</div><div class=\"line\">body&#123;</div><div class=\"line\">    width: 30px;</div><div class=\"line\">&#125;</div><div class=\"line\">.icon-twitter &#123;</div><div class=\"line\">  background-postion: -20px; &#125;</div><div class=\"line\">.icon-facebook &#123;</div><div class=\"line\">  background-postion: -40px; &#125;</div><div class=\"line\">.icon-github &#123;</div><div class=\"line\">  background-postion: -60px; &#125;</div><div class=\"line\">.icon-weibo &#123;</div><div class=\"line\">  background-postion: -80px; &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>除法运算</p>\n  <p style=\"color:red\">“/“ 符号被当作除法运算符时有以下几种情况：</p>\n\n<p>  •    如果数值或它的任意部分是存储在一个变量中或是函数的返回值。</p>\n<p>  •    如果数值被圆括号包围。</p>\n<p>  •    如果数值是另一个数学表达式的一部分。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">body&#123;</div><div class=\"line\">  font: 10px/8px;             // 纯 CSS，不是除法运算</div><div class=\"line\">  $width: 1000px;</div><div class=\"line\">  width: $width/2;            // 使用了变量，是除法运算</div><div class=\"line\">  width: round(1.5)/2;        // 使用了函数，是除法运算</div><div class=\"line\">  height: (500px/2);          // 使用了圆括号，是除法运算</div><div class=\"line\">  margin-left: 5px + 8px/2px; // 使用了加（+）号，是除法运算</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"选择器嵌套\"><a href=\"#选择器嵌套\" class=\"headerlink\" title=\"选择器嵌套\"></a>选择器嵌套</h2><p>假设我们有一段这样的结构：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;header&gt;</div><div class=\"line\">    &lt;nav&gt;</div><div class=\"line\">        &lt;a href=\"#\"&gt;Home&lt;/a&gt;</div><div class=\"line\">        &lt;a href=\"#\"&gt;About&lt;/a&gt;</div><div class=\"line\">        &lt;a href=\"#\"&gt;Blog&lt;/a&gt;</div><div class=\"line\">    &lt;/nav&gt;</div><div class=\"line\">&lt;header&gt;</div><div class=\"line\">/*css写法*/</div><div class=\"line\">nav a &#123;</div><div class=\"line\">  color:red;</div><div class=\"line\">&#125;</div><div class=\"line\">header nav a &#123;</div><div class=\"line\">  color:green;</div><div class=\"line\">&#125;</div><div class=\"line\">/*scss写法*/</div><div class=\"line\">nav &#123;</div><div class=\"line\">  a &#123;</div><div class=\"line\">    color: red;</div><div class=\"line\">    header &amp; &#123;</div><div class=\"line\">      color:green;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"属性嵌套\"><a href=\"#属性嵌套\" class=\"headerlink\" title=\"属性嵌套\"></a>属性嵌套</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*css写法*/</span></div><div class=\"line\"><span class=\"selector-class\">.box</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">1px</span> solid red;</div><div class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid green;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/*scss写法*/</span></div><div class=\"line\"><span class=\"selector-class\">.box</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">border</span>:&#123;</div><div class=\"line\">        top: <span class=\"number\">1px</span> solid red;</div><div class=\"line\">        <span class=\"attribute\">bottom</span>:<span class=\"number\">1px</span> solid green;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"伪类嵌套\"><a href=\"#伪类嵌套\" class=\"headerlink\" title=\"伪类嵌套\"></a>伪类嵌套</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*css写法*/</div><div class=\"line\">.clearfix:before, .clearfix:after &#123;</div><div class=\"line\">  content: \"\";</div><div class=\"line\">  display: table;</div><div class=\"line\">&#125;</div><div class=\"line\">.clearfix:after &#123;</div><div class=\"line\">  clear: both;</div><div class=\"line\">  overflow: hidden;</div><div class=\"line\">&#125;</div><div class=\"line\">/*scss写法*/</div><div class=\"line\">.clearfix &#123;</div><div class=\"line\">    &amp;:before,&amp;:after&#123;</div><div class=\"line\">        content: \"\";</div><div class=\"line\">        display: table;</div><div class=\"line\">    &#125;</div><div class=\"line\">    &amp;:after&#123;</div><div class=\"line\">        overflow: hidden;</div><div class=\"line\">        clear: both;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"混合宏-mixin\"><a href=\"#混合宏-mixin\" class=\"headerlink\" title=\"混合宏  @mixin\"></a>混合宏  @mixin</h2><ul>\n<li>优点:将共用的代码块定义为宏，直接引用</li>\n<li>缺点:会生成冗余的代码块，不会合并在一起<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*声明混合宏*/</div><div class=\"line\">@mixin border-radius($raidus:5px)&#123; </div><div class=\"line\">    //单个参数加默认值($radius:5px) </div><div class=\"line\">    //多个参数用逗号隔开($radius,$width,$height)</div><div class=\"line\">    //多个参数还可以用[...]表示($shadows...)</div><div class=\"line\">    border-radius: $radius;</div><div class=\"line\">&#125;</div><div class=\"line\">/*调用混合宏*/</div><div class=\"line\">div&#123;</div><div class=\"line\">    @include border-radius(10px);</div><div class=\"line\">&#125;</div><div class=\"line\">/*多个参数使用...为参数*/</div><div class=\"line\">@mixin box-shadow($shadows...)&#123;</div><div class=\"line\">  @if length($shadows) &gt;= 1 &#123;</div><div class=\"line\">    -webkit-box-shadow: $shadows;</div><div class=\"line\">    box-shadow: $shadows;</div><div class=\"line\">  &#125; @else &#123;</div><div class=\"line\">    $shadows: 0 0 2px rgba(#000,.25); // 默认参数  如果没有传 就用这个  传了就用传过来的参数</div><div class=\"line\">    -webkit-box-shadow: $shadow;</div><div class=\"line\">    box-shadow: $shadow;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">/*调用宏*/</div><div class=\"line\">.box &#123;</div><div class=\"line\">  @include box-shadow(0 0 1px rgba(#000,.5),0 0 2px rgba(#000,.2));</div><div class=\"line\">&#125;</div><div class=\"line\">/*编译结果*/</div><div class=\"line\">.box &#123;</div><div class=\"line\">  -webkit-box-shadow: 0 0 1px rgba(0, 0, 0, 0.5), 0 0 2px rgba(0, 0, 0, 0.2);</div><div class=\"line\">  box-shadow: 0 0 1px rgba(0, 0, 0, 0.5), 0 0 2px rgba(0, 0, 0, 0.2);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"继承-extend-可以将公用的代码合并在一起\"><a href=\"#继承-extend-可以将公用的代码合并在一起\" class=\"headerlink\" title=\"继承 @extend 可以将公用的代码合并在一起\"></a>继承 @extend 可以将公用的代码合并在一起</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*scss写法*/</div><div class=\"line\">.btn &#123;</div><div class=\"line\">  border: 1px solid #ccc;</div><div class=\"line\">  padding: 6px 10px;</div><div class=\"line\">  font-size: 14px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn-primary &#123;</div><div class=\"line\">  background-color: #f36;</div><div class=\"line\">  color: #fff;</div><div class=\"line\">  @extend .btn;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn-second &#123;</div><div class=\"line\">  background-color: orange;</div><div class=\"line\">  color: #fff;</div><div class=\"line\">  @extend .btn;</div><div class=\"line\">&#125;</div><div class=\"line\">/*编译结果*/</div><div class=\"line\">.btn, .btn-primary, .btn-second &#123;</div><div class=\"line\">  border: 1px solid #ccc;</div><div class=\"line\">  padding: 6px 10px;</div><div class=\"line\">  font-size: 14px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn-primary &#123;</div><div class=\"line\">  background-color: #f36;</div><div class=\"line\">  color: #fff;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn-second &#123;</div><div class=\"line\">  background-clor: orange;</div><div class=\"line\">  color: #fff;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"占位符-placeholder-编译出来的代码会将相同的代码合并在一起\"><a href=\"#占位符-placeholder-编译出来的代码会将相同的代码合并在一起\" class=\"headerlink\" title=\"占位符 %placeholder 编译出来的代码会将相同的代码合并在一起\"></a>占位符 %placeholder 编译出来的代码会将相同的代码合并在一起</h2><ul>\n<li>%placeholder 功能是一个很强大，很实用的一个功能，<br>他可以取代以前 CSS 中的基类造成的代码冗余的情形,<br>因为 %placeholder 声明的代码，如果不被 @extend 调用的话，<br>不会产生任何代码。因此，需要配合@extend使用<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*占位符代码*/</div><div class=\"line\">%mt5 &#123;</div><div class=\"line\">  margin-top: 5px;</div><div class=\"line\">&#125;</div><div class=\"line\">%pt5&#123;</div><div class=\"line\">  padding-top: 5px;</div><div class=\"line\">&#125;</div><div class=\"line\">/*继承占位符*/</div><div class=\"line\">.btn &#123;</div><div class=\"line\">  @extend %mt5;</div><div class=\"line\">  @extend %pt5;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.block &#123;</div><div class=\"line\">  @extend %mt5;</div><div class=\"line\"></div><div class=\"line\">  span &#123;</div><div class=\"line\">    @extend %pt5;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">/*编译结果*/</div><div class=\"line\">.btn, .block &#123;</div><div class=\"line\">  margin-top: 5px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn, .block span &#123;</div><div class=\"line\">  padding-top: 5px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"混合宏-VS-继承-VS-占位符\"><a href=\"#混合宏-VS-继承-VS-占位符\" class=\"headerlink\" title=\"混合宏 VS 继承 VS 占位符\"></a>混合宏 VS 继承 VS 占位符</h2><p><img src=\"/img/scss.jpg\" alt=\"\"></p>\n<h2 id=\"插值-为了使让变量和属性工作的很完美\"><a href=\"#插值-为了使让变量和属性工作的很完美\" class=\"headerlink\" title=\"插值#{} 为了使让变量和属性工作的很完美\"></a>插值#{} 为了使让变量和属性工作的很完美</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*scss*/</div><div class=\"line\">$properties: (margin, padding);</div><div class=\"line\">@mixin set-value($side, $value) &#123;</div><div class=\"line\">    @each $prop in $properties &#123;</div><div class=\"line\">        #&#123;$prop&#125;-#&#123;$side&#125;: $value;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">.login-box &#123;</div><div class=\"line\">    @include set-value(top, 14px);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@mixin generate-sizes($class, $small, $medium, $big) &#123;</div><div class=\"line\">    .#&#123;$class&#125;-small &#123; font-size: $small; &#125;</div><div class=\"line\">    .#&#123;$class&#125;-medium &#123; font-size: $medium; &#125;</div><div class=\"line\">    .#&#123;$class&#125;-big &#123; font-size: $big; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">@include generate-sizes(\"header-text\", 12px, 20px, 40px);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/*编译结果*/</div><div class=\"line\">.login-box &#123;</div><div class=\"line\">    margin-top: 14px;</div><div class=\"line\">    padding-top: 14px;</div><div class=\"line\">&#125;</div><div class=\"line\">.header-text-small &#123; font-size: 12px; &#125;</div><div class=\"line\">.header-text-medium &#123; font-size: 20px; &#125;</div><div class=\"line\">.header-text-big &#123; font-size: 40px; &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"scss中的注释\"><a href=\"#scss中的注释\" class=\"headerlink\" title=\"scss中的注释\"></a>scss中的注释</h2><p>1、类似 CSS 的注释方式，使用 “/<em> “开头，结属使用 “</em>/ “</p>\n<p>2、类似 JavaScript 的注释方式，使用”//“</p>\n<p style=\"color:red\">区别</p>\n\n<p>前者会在编译出来的 CSS 显示，后者在编译出来的 CSS 中不会显示，来看一个示例：</p>\n<h2 id=\"Sass运算\"><a href=\"#Sass运算\" class=\"headerlink\" title=\"Sass运算\"></a>Sass运算</h2><ul>\n<li><p>加法运算 单位必须相同</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">body</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span> + <span class=\"number\">100px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>减法运算 单位必须相同</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">body</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span> - <span class=\"number\">10px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>乘法运算 单位必须相同且数值只能有一个单位</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*scss写法*/</div><div class=\"line\">body&#123;</div><div class=\"line\">     width: 10px * 3;</div><div class=\"line\">&#125;</div><div class=\"line\">$list: twitter,facebook,github,weibo;</div><div class=\"line\"></div><div class=\"line\">@for $i from 1 through length($list)&#123;</div><div class=\"line\">  .icon-#&#123;nth($list,$i)&#125;&#123;</div><div class=\"line\">    background-postion: 0 - 20px * $i;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">/*编译结果*/</div><div class=\"line\">body&#123;</div><div class=\"line\">    width: 30px;</div><div class=\"line\">&#125;</div><div class=\"line\">.icon-twitter &#123;</div><div class=\"line\">  background-postion: -20px; &#125;</div><div class=\"line\">.icon-facebook &#123;</div><div class=\"line\">  background-postion: -40px; &#125;</div><div class=\"line\">.icon-github &#123;</div><div class=\"line\">  background-postion: -60px; &#125;</div><div class=\"line\">.icon-weibo &#123;</div><div class=\"line\">  background-postion: -80px; &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>除法运算</p>\n  <p style=\"color:red\">“/“ 符号被当作除法运算符时有以下几种情况：</p>\n\n<p>  •    如果数值或它的任意部分是存储在一个变量中或是函数的返回值。</p>\n<p>  •    如果数值被圆括号包围。</p>\n<p>  •    如果数值是另一个数学表达式的一部分。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">body&#123;</div><div class=\"line\">  font: 10px/8px;             // 纯 CSS，不是除法运算</div><div class=\"line\">  $width: 1000px;</div><div class=\"line\">  width: $width/2;            // 使用了变量，是除法运算</div><div class=\"line\">  width: round(1.5)/2;        // 使用了函数，是除法运算</div><div class=\"line\">  height: (500px/2);          // 使用了圆括号，是除法运算</div><div class=\"line\">  margin-left: 5px + 8px/2px; // 使用了加（+）号，是除法运算</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"sass控制命令","date":"2017-07-01T07:06:31.000Z","_content":"\n## scss控制命令\n\n> * @if\n\n```css\n/*scss写法*/\n@mixin blockOrHidden($boolean:true) {\n  @if $boolean {\n      @debug \"$boolean is #{$boolean}\";\n      display: block;\n    }\n  @else {\n      @debug \"$boolean is #{$boolean}\";\n      display: none;\n    }\n}\n\n.block {\n  @include blockOrHidden;\n}\n\n.hidden{\n  @include blockOrHidden(false);\n}\n/*编译结果*/\n.block {\n  display: block;\n}\n\n.hidden {\n  display: none;\n}\n```\n\n```css\n/*scss写法*/\n$num:10;\n\n@mixin size($num){\n    @if $num > 5  and $num < 8{\n        width:$num * 10px;\n    }\n    @else if $num < 5{\n        width:$num * $num * 10px;\n    }\n    @else{\n        width:#{$num}px\n    }\n}\n\nbody{\n    //@include size(7) \n    //@include size(10)\n    @include size(3)\n}\n/*编译结果*/\nbody{\n    //width:70px;\n    //width:10px;\n    width:90px;\n}\n```\n\n> * @for \n\n1.@for $i from <start> through <end>\n\n2.@for $i from <start> to <end>\n\n$i 表示变量 start 表示起始值 end 表示结束值\n\n两个的区别是关键字 through 表示包括 end 这个数，而 to 则不包括 end 这个数\n\n```css\n$col:8.33%;\n//through\n@for $i from  1 through 2 {\n    .col-xs-#{$i} {\n        width: $i * $col;\n    }\n} \n\n\n//to\n@for $i from  1 to 2 {\n    .col-md-#{$i} {\n        width: $i * $col;\n    }\n} \n/*编译结果*/\n.col-xs-1 {\n  width: 8.33%; }\n.col-xs-2 {\n  width: 16.66%; }\n.col-md-1 {\n  width: 8.33%; }\n```\n\n> * @while \n\n```css\n$types: 4;\n$type-width: 20px;\n\n@while $types > 0 {\n    .while-#{$types} {\n        width: $type-width + $types;\n    }\n    $types: $types - 1;\n}\n/*编译结果*/\n.while-4 {\n  width: 24px;\n}\n.while-3 {\n  width: 23px;\n}\n.while-2 {\n  width: 22px;\n}\n.while-1 {\n  width: 21px;\n}\n```\n\n> * @each \n\n@each $var in <list>\n\n```css\n$list: adam john wynn mason kuroir;\n@mixin author-images {\n    @each $author in $list {\n        .photo-#{$author} {\n            background: url(\"/images/avatars/#{$author}.png\") no-repeat;\n        }\n    }\n}\n\n.author-bio {\n    @include author-images;\n}\n/*编译结果*/\n.author-bio .photo-adam {\n  background: url(\"/images/avatars/adam.png\") no-repeat; }\n.author-bio .photo-john {\n  background: url(\"/images/avatars/john.png\") no-repeat; }\n.author-bio .photo-wynn {\n  background: url(\"/images/avatars/wynn.png\") no-repeat; }\n.author-bio .photo-mason {\n  background: url(\"/images/avatars/mason.png\") no-repeat; }\n.author-bio .photo-kuroir {\n  background: url(\"/images/avatars/kuroir.png\") no-repeat; }\n```\n","source":"_posts/sass控制命令.md","raw":"---\ntitle: sass控制命令\ndate: 2017-07-01 15:06:31\ntags:\n    - Sass\ncategories: Sass\n---\n\n## scss控制命令\n\n> * @if\n\n```css\n/*scss写法*/\n@mixin blockOrHidden($boolean:true) {\n  @if $boolean {\n      @debug \"$boolean is #{$boolean}\";\n      display: block;\n    }\n  @else {\n      @debug \"$boolean is #{$boolean}\";\n      display: none;\n    }\n}\n\n.block {\n  @include blockOrHidden;\n}\n\n.hidden{\n  @include blockOrHidden(false);\n}\n/*编译结果*/\n.block {\n  display: block;\n}\n\n.hidden {\n  display: none;\n}\n```\n\n```css\n/*scss写法*/\n$num:10;\n\n@mixin size($num){\n    @if $num > 5  and $num < 8{\n        width:$num * 10px;\n    }\n    @else if $num < 5{\n        width:$num * $num * 10px;\n    }\n    @else{\n        width:#{$num}px\n    }\n}\n\nbody{\n    //@include size(7) \n    //@include size(10)\n    @include size(3)\n}\n/*编译结果*/\nbody{\n    //width:70px;\n    //width:10px;\n    width:90px;\n}\n```\n\n> * @for \n\n1.@for $i from <start> through <end>\n\n2.@for $i from <start> to <end>\n\n$i 表示变量 start 表示起始值 end 表示结束值\n\n两个的区别是关键字 through 表示包括 end 这个数，而 to 则不包括 end 这个数\n\n```css\n$col:8.33%;\n//through\n@for $i from  1 through 2 {\n    .col-xs-#{$i} {\n        width: $i * $col;\n    }\n} \n\n\n//to\n@for $i from  1 to 2 {\n    .col-md-#{$i} {\n        width: $i * $col;\n    }\n} \n/*编译结果*/\n.col-xs-1 {\n  width: 8.33%; }\n.col-xs-2 {\n  width: 16.66%; }\n.col-md-1 {\n  width: 8.33%; }\n```\n\n> * @while \n\n```css\n$types: 4;\n$type-width: 20px;\n\n@while $types > 0 {\n    .while-#{$types} {\n        width: $type-width + $types;\n    }\n    $types: $types - 1;\n}\n/*编译结果*/\n.while-4 {\n  width: 24px;\n}\n.while-3 {\n  width: 23px;\n}\n.while-2 {\n  width: 22px;\n}\n.while-1 {\n  width: 21px;\n}\n```\n\n> * @each \n\n@each $var in <list>\n\n```css\n$list: adam john wynn mason kuroir;\n@mixin author-images {\n    @each $author in $list {\n        .photo-#{$author} {\n            background: url(\"/images/avatars/#{$author}.png\") no-repeat;\n        }\n    }\n}\n\n.author-bio {\n    @include author-images;\n}\n/*编译结果*/\n.author-bio .photo-adam {\n  background: url(\"/images/avatars/adam.png\") no-repeat; }\n.author-bio .photo-john {\n  background: url(\"/images/avatars/john.png\") no-repeat; }\n.author-bio .photo-wynn {\n  background: url(\"/images/avatars/wynn.png\") no-repeat; }\n.author-bio .photo-mason {\n  background: url(\"/images/avatars/mason.png\") no-repeat; }\n.author-bio .photo-kuroir {\n  background: url(\"/images/avatars/kuroir.png\") no-repeat; }\n```\n","slug":"sass控制命令","published":1,"updated":"2017-07-01T10:21:00.578Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb1u1pab00230sq9f4q8op5x","content":"<h2 id=\"scss控制命令\"><a href=\"#scss控制命令\" class=\"headerlink\" title=\"scss控制命令\"></a>scss控制命令</h2><blockquote>\n<ul>\n<li>@if</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*scss写法*/</div><div class=\"line\">@mixin blockOrHidden($boolean:true) &#123;</div><div class=\"line\">  @if $boolean &#123;</div><div class=\"line\">      @debug \"$boolean is #&#123;$boolean&#125;\";</div><div class=\"line\">      display: block;</div><div class=\"line\">    &#125;</div><div class=\"line\">  @else &#123;</div><div class=\"line\">      @debug \"$boolean is #&#123;$boolean&#125;\";</div><div class=\"line\">      display: none;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.block &#123;</div><div class=\"line\">  @include blockOrHidden;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.hidden&#123;</div><div class=\"line\">  @include blockOrHidden(false);</div><div class=\"line\">&#125;</div><div class=\"line\">/*编译结果*/</div><div class=\"line\">.block &#123;</div><div class=\"line\">  display: block;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.hidden &#123;</div><div class=\"line\">  display: none;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*scss写法*/</div><div class=\"line\">$num:10;</div><div class=\"line\"></div><div class=\"line\">@mixin size($num)&#123;</div><div class=\"line\">    @if $num &gt; 5  and $num &lt; 8&#123;</div><div class=\"line\">        width:$num * 10px;</div><div class=\"line\">    &#125;</div><div class=\"line\">    @else if $num &lt; 5&#123;</div><div class=\"line\">        width:$num * $num * 10px;</div><div class=\"line\">    &#125;</div><div class=\"line\">    @else&#123;</div><div class=\"line\">        width:#&#123;$num&#125;px</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">body&#123;</div><div class=\"line\">    //@include size(7) </div><div class=\"line\">    //@include size(10)</div><div class=\"line\">    @include size(3)</div><div class=\"line\">&#125;</div><div class=\"line\">/*编译结果*/</div><div class=\"line\">body&#123;</div><div class=\"line\">    //width:70px;</div><div class=\"line\">    //width:10px;</div><div class=\"line\">    width:90px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>@for </li>\n</ul>\n</blockquote>\n<p>1.@for $i from <start> through <end></end></start></p>\n<p>2.@for $i from <start> to <end></end></start></p>\n<p>$i 表示变量 start 表示起始值 end 表示结束值</p>\n<p>两个的区别是关键字 through 表示包括 end 这个数，而 to 则不包括 end 这个数</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">$col:8.33%;</div><div class=\"line\">//through</div><div class=\"line\">@for $i from  1 through 2 &#123;</div><div class=\"line\">    .col-xs-#&#123;$i&#125; &#123;</div><div class=\"line\">        width: $i * $col;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//to</div><div class=\"line\">@for $i from  1 to 2 &#123;</div><div class=\"line\">    .col-md-#&#123;$i&#125; &#123;</div><div class=\"line\">        width: $i * $col;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; </div><div class=\"line\">/*编译结果*/</div><div class=\"line\">.col-xs-1 &#123;</div><div class=\"line\">  width: 8.33%; &#125;</div><div class=\"line\">.col-xs-2 &#123;</div><div class=\"line\">  width: 16.66%; &#125;</div><div class=\"line\">.col-md-1 &#123;</div><div class=\"line\">  width: 8.33%; &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>@while </li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">$types: 4;</div><div class=\"line\">$type-width: 20px;</div><div class=\"line\"></div><div class=\"line\">@while $types &gt; 0 &#123;</div><div class=\"line\">    .while-#&#123;$types&#125; &#123;</div><div class=\"line\">        width: $type-width + $types;</div><div class=\"line\">    &#125;</div><div class=\"line\">    $types: $types - 1;</div><div class=\"line\">&#125;</div><div class=\"line\">/*编译结果*/</div><div class=\"line\">.while-4 &#123;</div><div class=\"line\">  width: 24px;</div><div class=\"line\">&#125;</div><div class=\"line\">.while-3 &#123;</div><div class=\"line\">  width: 23px;</div><div class=\"line\">&#125;</div><div class=\"line\">.while-2 &#123;</div><div class=\"line\">  width: 22px;</div><div class=\"line\">&#125;</div><div class=\"line\">.while-1 &#123;</div><div class=\"line\">  width: 21px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>@each </li>\n</ul>\n</blockquote>\n<p>@each $var in <list></list></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">$list: adam john wynn mason kuroir;</div><div class=\"line\">@mixin author-images &#123;</div><div class=\"line\">    @each $author in $list &#123;</div><div class=\"line\">        .photo-#&#123;$author&#125; &#123;</div><div class=\"line\">            background: url(\"/images/avatars/#&#123;$author&#125;.png\") no-repeat;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.author-bio &#123;</div><div class=\"line\">    @include author-images;</div><div class=\"line\">&#125;</div><div class=\"line\">/*编译结果*/</div><div class=\"line\">.author-bio .photo-adam &#123;</div><div class=\"line\">  background: url(\"/images/avatars/adam.png\") no-repeat; &#125;</div><div class=\"line\">.author-bio .photo-john &#123;</div><div class=\"line\">  background: url(\"/images/avatars/john.png\") no-repeat; &#125;</div><div class=\"line\">.author-bio .photo-wynn &#123;</div><div class=\"line\">  background: url(\"/images/avatars/wynn.png\") no-repeat; &#125;</div><div class=\"line\">.author-bio .photo-mason &#123;</div><div class=\"line\">  background: url(\"/images/avatars/mason.png\") no-repeat; &#125;</div><div class=\"line\">.author-bio .photo-kuroir &#123;</div><div class=\"line\">  background: url(\"/images/avatars/kuroir.png\") no-repeat; &#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"scss控制命令\"><a href=\"#scss控制命令\" class=\"headerlink\" title=\"scss控制命令\"></a>scss控制命令</h2><blockquote>\n<ul>\n<li>@if</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*scss写法*/</div><div class=\"line\">@mixin blockOrHidden($boolean:true) &#123;</div><div class=\"line\">  @if $boolean &#123;</div><div class=\"line\">      @debug \"$boolean is #&#123;$boolean&#125;\";</div><div class=\"line\">      display: block;</div><div class=\"line\">    &#125;</div><div class=\"line\">  @else &#123;</div><div class=\"line\">      @debug \"$boolean is #&#123;$boolean&#125;\";</div><div class=\"line\">      display: none;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.block &#123;</div><div class=\"line\">  @include blockOrHidden;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.hidden&#123;</div><div class=\"line\">  @include blockOrHidden(false);</div><div class=\"line\">&#125;</div><div class=\"line\">/*编译结果*/</div><div class=\"line\">.block &#123;</div><div class=\"line\">  display: block;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.hidden &#123;</div><div class=\"line\">  display: none;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*scss写法*/</div><div class=\"line\">$num:10;</div><div class=\"line\"></div><div class=\"line\">@mixin size($num)&#123;</div><div class=\"line\">    @if $num &gt; 5  and $num &lt; 8&#123;</div><div class=\"line\">        width:$num * 10px;</div><div class=\"line\">    &#125;</div><div class=\"line\">    @else if $num &lt; 5&#123;</div><div class=\"line\">        width:$num * $num * 10px;</div><div class=\"line\">    &#125;</div><div class=\"line\">    @else&#123;</div><div class=\"line\">        width:#&#123;$num&#125;px</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">body&#123;</div><div class=\"line\">    //@include size(7) </div><div class=\"line\">    //@include size(10)</div><div class=\"line\">    @include size(3)</div><div class=\"line\">&#125;</div><div class=\"line\">/*编译结果*/</div><div class=\"line\">body&#123;</div><div class=\"line\">    //width:70px;</div><div class=\"line\">    //width:10px;</div><div class=\"line\">    width:90px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>@for </li>\n</ul>\n</blockquote>\n<p>1.@for $i from <start> through <end></p>\n<p>2.@for $i from <start> to <end></p>\n<p>$i 表示变量 start 表示起始值 end 表示结束值</p>\n<p>两个的区别是关键字 through 表示包括 end 这个数，而 to 则不包括 end 这个数</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">$col:8.33%;</div><div class=\"line\">//through</div><div class=\"line\">@for $i from  1 through 2 &#123;</div><div class=\"line\">    .col-xs-#&#123;$i&#125; &#123;</div><div class=\"line\">        width: $i * $col;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//to</div><div class=\"line\">@for $i from  1 to 2 &#123;</div><div class=\"line\">    .col-md-#&#123;$i&#125; &#123;</div><div class=\"line\">        width: $i * $col;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; </div><div class=\"line\">/*编译结果*/</div><div class=\"line\">.col-xs-1 &#123;</div><div class=\"line\">  width: 8.33%; &#125;</div><div class=\"line\">.col-xs-2 &#123;</div><div class=\"line\">  width: 16.66%; &#125;</div><div class=\"line\">.col-md-1 &#123;</div><div class=\"line\">  width: 8.33%; &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>@while </li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">$types: 4;</div><div class=\"line\">$type-width: 20px;</div><div class=\"line\"></div><div class=\"line\">@while $types &gt; 0 &#123;</div><div class=\"line\">    .while-#&#123;$types&#125; &#123;</div><div class=\"line\">        width: $type-width + $types;</div><div class=\"line\">    &#125;</div><div class=\"line\">    $types: $types - 1;</div><div class=\"line\">&#125;</div><div class=\"line\">/*编译结果*/</div><div class=\"line\">.while-4 &#123;</div><div class=\"line\">  width: 24px;</div><div class=\"line\">&#125;</div><div class=\"line\">.while-3 &#123;</div><div class=\"line\">  width: 23px;</div><div class=\"line\">&#125;</div><div class=\"line\">.while-2 &#123;</div><div class=\"line\">  width: 22px;</div><div class=\"line\">&#125;</div><div class=\"line\">.while-1 &#123;</div><div class=\"line\">  width: 21px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>@each </li>\n</ul>\n</blockquote>\n<p>@each $var in <list></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">$list: adam john wynn mason kuroir;</div><div class=\"line\">@mixin author-images &#123;</div><div class=\"line\">    @each $author in $list &#123;</div><div class=\"line\">        .photo-#&#123;$author&#125; &#123;</div><div class=\"line\">            background: url(\"/images/avatars/#&#123;$author&#125;.png\") no-repeat;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.author-bio &#123;</div><div class=\"line\">    @include author-images;</div><div class=\"line\">&#125;</div><div class=\"line\">/*编译结果*/</div><div class=\"line\">.author-bio .photo-adam &#123;</div><div class=\"line\">  background: url(\"/images/avatars/adam.png\") no-repeat; &#125;</div><div class=\"line\">.author-bio .photo-john &#123;</div><div class=\"line\">  background: url(\"/images/avatars/john.png\") no-repeat; &#125;</div><div class=\"line\">.author-bio .photo-wynn &#123;</div><div class=\"line\">  background: url(\"/images/avatars/wynn.png\") no-repeat; &#125;</div><div class=\"line\">.author-bio .photo-mason &#123;</div><div class=\"line\">  background: url(\"/images/avatars/mason.png\") no-repeat; &#125;</div><div class=\"line\">.author-bio .photo-kuroir &#123;</div><div class=\"line\">  background: url(\"/images/avatars/kuroir.png\") no-repeat; &#125;</div></pre></td></tr></table></figure>\n"},{"title":"正则表达式","date":"2016-11-27T13:06:33.000Z","_content":"\n--------\n## 元字符\n\n([{+*?.$^\\|\n\n## 字符类\n\n>  简单类\n\n原则上正则的一个字符对应一个字符，我们可以用[]把它们括起来，让[　]这个整体对应***一个字符***。\n```\n/caicai/.test(\"caicai\") //true\n/[ca]i/.test(\"caicai\") //true\n\"caicai\".match(/[ca]i/) // [\"ai\"] 因此说明匹配不了cai整个字符，只能匹配［］中的一个字符和外边的ｉ想对应\n```\n\n> 预定义类\n\n还是在那个中括号里面做文章，不过它好像已经走到尽头了。由于是中括号的马甲，因此它们还是对应一个字符。\n\n<table><tr><td>字符</td><td>等同于</td><td>描述</td></tr><tr><td>.</td><td>[^\\n\\r]</td><td>一个除了换行和回车外的所有字符</td></tr><tr><td>\\d</td><td>[0-9]</td><td>一个数字字符</td></tr><tr><td>\\D</td><td>[^0-9]</td><td>一个非数字字符</td></tr><tr><td>\\w</td><td>[a-zA-Z0-9_]</td><td>一个单词字符(所有的字母)</td></tr><tr><td>\\W</td><td>[^a-zA-Z0-9_]</td><td>一个非单词字符</td></tr><tr><td>\\s</td><td>[\\t\\n\\x0B\\f\\r]</td><td>一个空白字符</td></tr><tr><td>\\S</td><td>[^\\t\\n\\x0B\\f\\r]</td><td>一个非空白字符</td></tr></table>\n\n```\nalert(/\\d/.test(\"3\"))//true\nalert(/\\d/.test(\"w\"))//false\nalert(/\\D/.test(\"w\"))//true\nalert(/\\w/.test(\"w\"))//true\nalert(/\\w/.test(\"菜\"))//false\nalert(/\\W/.test(\"菜\"))//true\nalert(/\\s/.test(\" \"))//true\nalert(/\\S/.test(\" \"))//false\nalert(/\\S/.test(\"菜菜\"))//true\nalert(/./.test(\"菜\"))//true\nalert(/./.test(\"  \"))//true\nvar a = \"\\n\\\n      \"\nalert(/./.test(a))//true\n/[\\u4e00-\\u9fa5]/用于匹配单个汉字。\n/[\\u4e00-\\u9fa5]{4}/.test(\"菜菜菜鸟\")　//true\n```\n\n## 量词\n\n<table><thead><tr><td>代码</td><td>类型</td><td>描述</td></tr></thead><tbody><tr><td>?</td><td>软性量词</td><td>出现零次或一次</td></tr><tr><td>*</td><td>软性量词</td><td>出现零次或多次(任意次)</td></tr><tr><td>+</td><td>软性量词</td><td>出现一次或多次（至少一次）</td></tr><tr><td>{n}</td><td>硬性量词</td><td>对应零次或者n次</td></tr><tr><td>{n,m}</td><td>软性量词</td><td>至少出现n次但不超过m次</td></tr><tr><td>{n,}</td><td>软性量词</td><td>至少出现n次(+的升级版)</td></tr></tbody></table>\n\n## 分组\n\n到目前为止，我们只能一个字符到匹配，虽然量词的出现，能帮助我们处理一排密紧密相连的同类型字符。但这是不够的，下面该轮到小括号出场了，***中括号表示范围内选择［］，大括号表示重复次数｛｝。小括号允许我们重复多个字符（）***。\n\n```\n/(cai){2}/.test(\"caicai\") //true\n/13(\\d)(\\d{8})/.test(\"13595687859\") //true\n//RegExp.$n　n为匹配最近的n个正则表达式的匹配结果,以上面电话号码为例:$1=(\\d) $2=(\\d{8})\nconsole.log(RegExp.$1) //会匹配到上面的第一个正则　此例为５　\nconsole.log(RegExp.$2) //会匹配到上面的第二个正则　此例为95687859\n```\n\n继续在分组上做文章。在分组中插入管道符（“|”），把它划分为两个或多个候多项。\n\n```\nvar reg = /(red|black|yellow)!!/;\nconsole.log(reg.test(\"red!!\"))//true\nconsole.log(reg.test(\"black!!\"))//true\nconsole.log(reg.test(\"yellow!!\"))//true\n//将＜＞括号和里面的都替换为空\nvar html = \"<p><a href='http://www.cnblogs.com/rubylouvre/'>caicai</a>by <em>asas</em></p>\";\nvar text = html.replace(/<(.)*?>/g, \"\");\nconsole.log(text) //caicai asas\n```\n","source":"_posts/正则表达式.md","raw":"---\ntitle: 正则表达式\ndate: 2016-11-27 21:06:33\ncategories: Javascript\ntags:\n     - Javascript\n---\n\n--------\n## 元字符\n\n([{+*?.$^\\|\n\n## 字符类\n\n>  简单类\n\n原则上正则的一个字符对应一个字符，我们可以用[]把它们括起来，让[　]这个整体对应***一个字符***。\n```\n/caicai/.test(\"caicai\") //true\n/[ca]i/.test(\"caicai\") //true\n\"caicai\".match(/[ca]i/) // [\"ai\"] 因此说明匹配不了cai整个字符，只能匹配［］中的一个字符和外边的ｉ想对应\n```\n\n> 预定义类\n\n还是在那个中括号里面做文章，不过它好像已经走到尽头了。由于是中括号的马甲，因此它们还是对应一个字符。\n\n<table><tr><td>字符</td><td>等同于</td><td>描述</td></tr><tr><td>.</td><td>[^\\n\\r]</td><td>一个除了换行和回车外的所有字符</td></tr><tr><td>\\d</td><td>[0-9]</td><td>一个数字字符</td></tr><tr><td>\\D</td><td>[^0-9]</td><td>一个非数字字符</td></tr><tr><td>\\w</td><td>[a-zA-Z0-9_]</td><td>一个单词字符(所有的字母)</td></tr><tr><td>\\W</td><td>[^a-zA-Z0-9_]</td><td>一个非单词字符</td></tr><tr><td>\\s</td><td>[\\t\\n\\x0B\\f\\r]</td><td>一个空白字符</td></tr><tr><td>\\S</td><td>[^\\t\\n\\x0B\\f\\r]</td><td>一个非空白字符</td></tr></table>\n\n```\nalert(/\\d/.test(\"3\"))//true\nalert(/\\d/.test(\"w\"))//false\nalert(/\\D/.test(\"w\"))//true\nalert(/\\w/.test(\"w\"))//true\nalert(/\\w/.test(\"菜\"))//false\nalert(/\\W/.test(\"菜\"))//true\nalert(/\\s/.test(\" \"))//true\nalert(/\\S/.test(\" \"))//false\nalert(/\\S/.test(\"菜菜\"))//true\nalert(/./.test(\"菜\"))//true\nalert(/./.test(\"  \"))//true\nvar a = \"\\n\\\n      \"\nalert(/./.test(a))//true\n/[\\u4e00-\\u9fa5]/用于匹配单个汉字。\n/[\\u4e00-\\u9fa5]{4}/.test(\"菜菜菜鸟\")　//true\n```\n\n## 量词\n\n<table><thead><tr><td>代码</td><td>类型</td><td>描述</td></tr></thead><tbody><tr><td>?</td><td>软性量词</td><td>出现零次或一次</td></tr><tr><td>*</td><td>软性量词</td><td>出现零次或多次(任意次)</td></tr><tr><td>+</td><td>软性量词</td><td>出现一次或多次（至少一次）</td></tr><tr><td>{n}</td><td>硬性量词</td><td>对应零次或者n次</td></tr><tr><td>{n,m}</td><td>软性量词</td><td>至少出现n次但不超过m次</td></tr><tr><td>{n,}</td><td>软性量词</td><td>至少出现n次(+的升级版)</td></tr></tbody></table>\n\n## 分组\n\n到目前为止，我们只能一个字符到匹配，虽然量词的出现，能帮助我们处理一排密紧密相连的同类型字符。但这是不够的，下面该轮到小括号出场了，***中括号表示范围内选择［］，大括号表示重复次数｛｝。小括号允许我们重复多个字符（）***。\n\n```\n/(cai){2}/.test(\"caicai\") //true\n/13(\\d)(\\d{8})/.test(\"13595687859\") //true\n//RegExp.$n　n为匹配最近的n个正则表达式的匹配结果,以上面电话号码为例:$1=(\\d) $2=(\\d{8})\nconsole.log(RegExp.$1) //会匹配到上面的第一个正则　此例为５　\nconsole.log(RegExp.$2) //会匹配到上面的第二个正则　此例为95687859\n```\n\n继续在分组上做文章。在分组中插入管道符（“|”），把它划分为两个或多个候多项。\n\n```\nvar reg = /(red|black|yellow)!!/;\nconsole.log(reg.test(\"red!!\"))//true\nconsole.log(reg.test(\"black!!\"))//true\nconsole.log(reg.test(\"yellow!!\"))//true\n//将＜＞括号和里面的都替换为空\nvar html = \"<p><a href='http://www.cnblogs.com/rubylouvre/'>caicai</a>by <em>asas</em></p>\";\nvar text = html.replace(/<(.)*?>/g, \"\");\nconsole.log(text) //caicai asas\n```\n","slug":"正则表达式","published":1,"updated":"2017-02-28T14:39:40.035Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb1u1pag00250sq9kxz9hr0h","content":"<hr>\n<h2 id=\"元字符\"><a href=\"#元字符\" class=\"headerlink\" title=\"元字符\"></a>元字符</h2><p>([{+*?.$^|</p>\n<h2 id=\"字符类\"><a href=\"#字符类\" class=\"headerlink\" title=\"字符类\"></a>字符类</h2><blockquote>\n<p> 简单类</p>\n</blockquote>\n<p>原则上正则的一个字符对应一个字符，我们可以用[]把它们括起来，让[　]这个整体对应<strong><em>一个字符</em></strong>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">/caicai/.test(&quot;caicai&quot;) //true</div><div class=\"line\">/[ca]i/.test(&quot;caicai&quot;) //true</div><div class=\"line\">&quot;caicai&quot;.match(/[ca]i/) // [&quot;ai&quot;] 因此说明匹配不了cai整个字符，只能匹配［］中的一个字符和外边的ｉ想对应</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>预定义类</p>\n</blockquote>\n<p>还是在那个中括号里面做文章，不过它好像已经走到尽头了。由于是中括号的马甲，因此它们还是对应一个字符。</p>\n<table><tr><td>字符</td><td>等同于</td><td>描述</td></tr><tr><td>.</td><td>[^\\n\\r]</td><td>一个除了换行和回车外的所有字符</td></tr><tr><td>\\d</td><td>[0-9]</td><td>一个数字字符</td></tr><tr><td>\\D</td><td>[^0-9]</td><td>一个非数字字符</td></tr><tr><td>\\w</td><td>[a-zA-Z0-9<em>]</em></td><td>一个单词字符(所有的字母)</td></tr><tr><td>\\W</td><td>[^a-zA-Z0-9]</td><td>一个非单词字符</td></tr><tr><td>\\s</td><td>[\\t\\n\\x0B\\f\\r]</td><td>一个空白字符</td></tr><tr><td>\\S</td><td>[^\\t\\n\\x0B\\f\\r]</td><td>一个非空白字符</td></tr></table>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(/\\d/.test(&quot;3&quot;))//true</div><div class=\"line\">alert(/\\d/.test(&quot;w&quot;))//false</div><div class=\"line\">alert(/\\D/.test(&quot;w&quot;))//true</div><div class=\"line\">alert(/\\w/.test(&quot;w&quot;))//true</div><div class=\"line\">alert(/\\w/.test(&quot;菜&quot;))//false</div><div class=\"line\">alert(/\\W/.test(&quot;菜&quot;))//true</div><div class=\"line\">alert(/\\s/.test(&quot; &quot;))//true</div><div class=\"line\">alert(/\\S/.test(&quot; &quot;))//false</div><div class=\"line\">alert(/\\S/.test(&quot;菜菜&quot;))//true</div><div class=\"line\">alert(/./.test(&quot;菜&quot;))//true</div><div class=\"line\">alert(/./.test(&quot;  &quot;))//true</div><div class=\"line\">var a = &quot;\\n\\</div><div class=\"line\">      &quot;</div><div class=\"line\">alert(/./.test(a))//true</div><div class=\"line\">/[\\u4e00-\\u9fa5]/用于匹配单个汉字。</div><div class=\"line\">/[\\u4e00-\\u9fa5]&#123;4&#125;/.test(&quot;菜菜菜鸟&quot;)　//true</div></pre></td></tr></table></figure>\n<h2 id=\"量词\"><a href=\"#量词\" class=\"headerlink\" title=\"量词\"></a>量词</h2><table><thead><tr><td>代码</td><td>类型</td><td>描述</td></tr></thead><tbody><tr><td>?</td><td>软性量词</td><td>出现零次或一次</td></tr><tr><td>*</td><td>软性量词</td><td>出现零次或多次(任意次)</td></tr><tr><td>+</td><td>软性量词</td><td>出现一次或多次（至少一次）</td></tr><tr><td>{n}</td><td>硬性量词</td><td>对应零次或者n次</td></tr><tr><td>{n,m}</td><td>软性量词</td><td>至少出现n次但不超过m次</td></tr><tr><td>{n,}</td><td>软性量词</td><td>至少出现n次(+的升级版)</td></tr></tbody></table>\n\n<h2 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h2><p>到目前为止，我们只能一个字符到匹配，虽然量词的出现，能帮助我们处理一排密紧密相连的同类型字符。但这是不够的，下面该轮到小括号出场了，<strong><em>中括号表示范围内选择［］，大括号表示重复次数｛｝。小括号允许我们重复多个字符（）</em></strong>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">/(cai)&#123;2&#125;/.test(&quot;caicai&quot;) //true</div><div class=\"line\">/13(\\d)(\\d&#123;8&#125;)/.test(&quot;13595687859&quot;) //true</div><div class=\"line\">//RegExp.$n　n为匹配最近的n个正则表达式的匹配结果,以上面电话号码为例:$1=(\\d) $2=(\\d&#123;8&#125;)</div><div class=\"line\">console.log(RegExp.$1) //会匹配到上面的第一个正则　此例为５　</div><div class=\"line\">console.log(RegExp.$2) //会匹配到上面的第二个正则　此例为95687859</div></pre></td></tr></table></figure>\n<p>继续在分组上做文章。在分组中插入管道符（“|”），把它划分为两个或多个候多项。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var reg = /(red|black|yellow)!!/;</div><div class=\"line\">console.log(reg.test(&quot;red!!&quot;))//true</div><div class=\"line\">console.log(reg.test(&quot;black!!&quot;))//true</div><div class=\"line\">console.log(reg.test(&quot;yellow!!&quot;))//true</div><div class=\"line\">//将＜＞括号和里面的都替换为空</div><div class=\"line\">var html = &quot;&lt;p&gt;&lt;a href=&apos;http://www.cnblogs.com/rubylouvre/&apos;&gt;caicai&lt;/a&gt;by &lt;em&gt;asas&lt;/em&gt;&lt;/p&gt;&quot;;</div><div class=\"line\">var text = html.replace(/&lt;(.)*?&gt;/g, &quot;&quot;);</div><div class=\"line\">console.log(text) //caicai asas</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<hr>\n<h2 id=\"元字符\"><a href=\"#元字符\" class=\"headerlink\" title=\"元字符\"></a>元字符</h2><p>([{+*?.$^|</p>\n<h2 id=\"字符类\"><a href=\"#字符类\" class=\"headerlink\" title=\"字符类\"></a>字符类</h2><blockquote>\n<p> 简单类</p>\n</blockquote>\n<p>原则上正则的一个字符对应一个字符，我们可以用[]把它们括起来，让[　]这个整体对应<strong><em>一个字符</em></strong>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">/caicai/.test(&quot;caicai&quot;) //true</div><div class=\"line\">/[ca]i/.test(&quot;caicai&quot;) //true</div><div class=\"line\">&quot;caicai&quot;.match(/[ca]i/) // [&quot;ai&quot;] 因此说明匹配不了cai整个字符，只能匹配［］中的一个字符和外边的ｉ想对应</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>预定义类</p>\n</blockquote>\n<p>还是在那个中括号里面做文章，不过它好像已经走到尽头了。由于是中括号的马甲，因此它们还是对应一个字符。</p>\n<table><tr><td>字符</td><td>等同于</td><td>描述</td></tr><tr><td>.</td><td>[^\\n\\r]</td><td>一个除了换行和回车外的所有字符</td></tr><tr><td>\\d</td><td>[0-9]</td><td>一个数字字符</td></tr><tr><td>\\D</td><td>[^0-9]</td><td>一个非数字字符</td></tr><tr><td>\\w</td><td>[a-zA-Z0-9<em>]</td><td>一个单词字符(所有的字母)</td></tr><tr><td>\\W</td><td>[^a-zA-Z0-9</em>]</td><td>一个非单词字符</td></tr><tr><td>\\s</td><td>[\\t\\n\\x0B\\f\\r]</td><td>一个空白字符</td></tr><tr><td>\\S</td><td>[^\\t\\n\\x0B\\f\\r]</td><td>一个非空白字符</td></tr></table>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(/\\d/.test(&quot;3&quot;))//true</div><div class=\"line\">alert(/\\d/.test(&quot;w&quot;))//false</div><div class=\"line\">alert(/\\D/.test(&quot;w&quot;))//true</div><div class=\"line\">alert(/\\w/.test(&quot;w&quot;))//true</div><div class=\"line\">alert(/\\w/.test(&quot;菜&quot;))//false</div><div class=\"line\">alert(/\\W/.test(&quot;菜&quot;))//true</div><div class=\"line\">alert(/\\s/.test(&quot; &quot;))//true</div><div class=\"line\">alert(/\\S/.test(&quot; &quot;))//false</div><div class=\"line\">alert(/\\S/.test(&quot;菜菜&quot;))//true</div><div class=\"line\">alert(/./.test(&quot;菜&quot;))//true</div><div class=\"line\">alert(/./.test(&quot;  &quot;))//true</div><div class=\"line\">var a = &quot;\\n\\</div><div class=\"line\">      &quot;</div><div class=\"line\">alert(/./.test(a))//true</div><div class=\"line\">/[\\u4e00-\\u9fa5]/用于匹配单个汉字。</div><div class=\"line\">/[\\u4e00-\\u9fa5]&#123;4&#125;/.test(&quot;菜菜菜鸟&quot;)　//true</div></pre></td></tr></table></figure>\n<h2 id=\"量词\"><a href=\"#量词\" class=\"headerlink\" title=\"量词\"></a>量词</h2><table><thead><tr><td>代码</td><td>类型</td><td>描述</td></tr></thead><tbody><tr><td>?</td><td>软性量词</td><td>出现零次或一次</td></tr><tr><td>*</td><td>软性量词</td><td>出现零次或多次(任意次)</td></tr><tr><td>+</td><td>软性量词</td><td>出现一次或多次（至少一次）</td></tr><tr><td>{n}</td><td>硬性量词</td><td>对应零次或者n次</td></tr><tr><td>{n,m}</td><td>软性量词</td><td>至少出现n次但不超过m次</td></tr><tr><td>{n,}</td><td>软性量词</td><td>至少出现n次(+的升级版)</td></tr></tbody></table>\n\n<h2 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h2><p>到目前为止，我们只能一个字符到匹配，虽然量词的出现，能帮助我们处理一排密紧密相连的同类型字符。但这是不够的，下面该轮到小括号出场了，<strong><em>中括号表示范围内选择［］，大括号表示重复次数｛｝。小括号允许我们重复多个字符（）</em></strong>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">/(cai)&#123;2&#125;/.test(&quot;caicai&quot;) //true</div><div class=\"line\">/13(\\d)(\\d&#123;8&#125;)/.test(&quot;13595687859&quot;) //true</div><div class=\"line\">//RegExp.$n　n为匹配最近的n个正则表达式的匹配结果,以上面电话号码为例:$1=(\\d) $2=(\\d&#123;8&#125;)</div><div class=\"line\">console.log(RegExp.$1) //会匹配到上面的第一个正则　此例为５　</div><div class=\"line\">console.log(RegExp.$2) //会匹配到上面的第二个正则　此例为95687859</div></pre></td></tr></table></figure>\n<p>继续在分组上做文章。在分组中插入管道符（“|”），把它划分为两个或多个候多项。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var reg = /(red|black|yellow)!!/;</div><div class=\"line\">console.log(reg.test(&quot;red!!&quot;))//true</div><div class=\"line\">console.log(reg.test(&quot;black!!&quot;))//true</div><div class=\"line\">console.log(reg.test(&quot;yellow!!&quot;))//true</div><div class=\"line\">//将＜＞括号和里面的都替换为空</div><div class=\"line\">var html = &quot;&lt;p&gt;&lt;a href=&apos;http://www.cnblogs.com/rubylouvre/&apos;&gt;caicai&lt;/a&gt;by &lt;em&gt;asas&lt;/em&gt;&lt;/p&gt;&quot;;</div><div class=\"line\">var text = html.replace(/&lt;(.)*?&gt;/g, &quot;&quot;);</div><div class=\"line\">console.log(text) //caicai asas</div></pre></td></tr></table></figure>\n"},{"title":"跨域","date":"2016-12-21T14:58:34.000Z","_content":"\n对于web开发来讲，由于浏览器的同源策略，我们需要经常使用一些hack的方法去跨域获取资源，但是hack的方法总归是hack。直到W3C出了一个标准－CORS－”跨域资源共享”（Cross-origin resource sharing）。\n它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。\n\n## jsonp跨域\n\n-------\n\njsonp 是最常用的一种解决跨域的方式，但是只能发送get请求，并且需要前端和服务端限制好格式，写法相当丑陋，下面介绍下jsonp的用法：\n\n前端：\n首先全局编写一个函数，记住这个函数名字，并且这个函数接受一个参数，这个参数就是服务端返回给前端的数据，函数体就是处理返回给前端数据的具体实现。 \n然后动态生成一个script 标签，src为：请求资源的地址＋获取函数的字段名＋回调函数名称，这里的获取函数的字段名是要和服务端约定好的，是为了让服务端拿到回调函数名称。（如：www.xxx.com?callbackName=resolveJson）。\n```\n//前端全局函数\nfunction resolveJosn(result) {\n\tconsole.log(result.name);\n}\n//访问后台代码\nvar jsonpScript= document.createElement(\"script\");\njsonpScript.type = \"text/javascript\";\njsonpScript.src = \"http://www.xxx.com?callbackName=resolveJson\";\ndocument.getElementsByTagName(\"head\")[0].appendChild(jsonpScript);\n\n```\n\n服务端\n在接受到浏览器端 script的请求之后，从url的query的callbackName获取到回调函数的名字，例子中是resolveJson。\n然后动态生成一段javascript片段去给这个函数传入参数执行这个函数。比如：\nresolveJson({name: 'xxx'});\n执行服务端返回这个 script 之后，浏览器端获取到 script 资源，然后会立即执行这个 javascript，也就是上面那个片段。这样就能根据之前写好的回调函数处理这些数据了。","source":"_posts/跨域.md","raw":"---\ntitle: 跨域\ndate: 2016-12-21 22:58:34\ncategories: Javascript\ntags:\n     - Javascript\n---\n\n对于web开发来讲，由于浏览器的同源策略，我们需要经常使用一些hack的方法去跨域获取资源，但是hack的方法总归是hack。直到W3C出了一个标准－CORS－”跨域资源共享”（Cross-origin resource sharing）。\n它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。\n\n## jsonp跨域\n\n-------\n\njsonp 是最常用的一种解决跨域的方式，但是只能发送get请求，并且需要前端和服务端限制好格式，写法相当丑陋，下面介绍下jsonp的用法：\n\n前端：\n首先全局编写一个函数，记住这个函数名字，并且这个函数接受一个参数，这个参数就是服务端返回给前端的数据，函数体就是处理返回给前端数据的具体实现。 \n然后动态生成一个script 标签，src为：请求资源的地址＋获取函数的字段名＋回调函数名称，这里的获取函数的字段名是要和服务端约定好的，是为了让服务端拿到回调函数名称。（如：www.xxx.com?callbackName=resolveJson）。\n```\n//前端全局函数\nfunction resolveJosn(result) {\n\tconsole.log(result.name);\n}\n//访问后台代码\nvar jsonpScript= document.createElement(\"script\");\njsonpScript.type = \"text/javascript\";\njsonpScript.src = \"http://www.xxx.com?callbackName=resolveJson\";\ndocument.getElementsByTagName(\"head\")[0].appendChild(jsonpScript);\n\n```\n\n服务端\n在接受到浏览器端 script的请求之后，从url的query的callbackName获取到回调函数的名字，例子中是resolveJson。\n然后动态生成一段javascript片段去给这个函数传入参数执行这个函数。比如：\nresolveJson({name: 'xxx'});\n执行服务端返回这个 script 之后，浏览器端获取到 script 资源，然后会立即执行这个 javascript，也就是上面那个片段。这样就能根据之前写好的回调函数处理这些数据了。","slug":"跨域","published":1,"updated":"2017-02-28T14:39:40.043Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb1u1pao002a0sq9lea1d3sj","content":"<p>对于web开发来讲，由于浏览器的同源策略，我们需要经常使用一些hack的方法去跨域获取资源，但是hack的方法总归是hack。直到W3C出了一个标准－CORS－”跨域资源共享”（Cross-origin resource sharing）。<br>它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。</p>\n<h2 id=\"jsonp跨域\"><a href=\"#jsonp跨域\" class=\"headerlink\" title=\"jsonp跨域\"></a>jsonp跨域</h2><hr>\n<p>jsonp 是最常用的一种解决跨域的方式，但是只能发送get请求，并且需要前端和服务端限制好格式，写法相当丑陋，下面介绍下jsonp的用法：</p>\n<p>前端：<br>首先全局编写一个函数，记住这个函数名字，并且这个函数接受一个参数，这个参数就是服务端返回给前端的数据，函数体就是处理返回给前端数据的具体实现。<br>然后动态生成一个script 标签，src为：请求资源的地址＋获取函数的字段名＋回调函数名称，这里的获取函数的字段名是要和服务端约定好的，是为了让服务端拿到回调函数名称。（如：www.xxx.com?callbackName=resolveJson）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">//前端全局函数</div><div class=\"line\">function resolveJosn(result) &#123;</div><div class=\"line\">\tconsole.log(result.name);</div><div class=\"line\">&#125;</div><div class=\"line\">//访问后台代码</div><div class=\"line\">var jsonpScript= document.createElement(&quot;script&quot;);</div><div class=\"line\">jsonpScript.type = &quot;text/javascript&quot;;</div><div class=\"line\">jsonpScript.src = &quot;http://www.xxx.com?callbackName=resolveJson&quot;;</div><div class=\"line\">document.getElementsByTagName(&quot;head&quot;)[0].appendChild(jsonpScript);</div></pre></td></tr></table></figure></p>\n<p>服务端<br>在接受到浏览器端 script的请求之后，从url的query的callbackName获取到回调函数的名字，例子中是resolveJson。<br>然后动态生成一段javascript片段去给这个函数传入参数执行这个函数。比如：<br>resolveJson({name: ‘xxx’});<br>执行服务端返回这个 script 之后，浏览器端获取到 script 资源，然后会立即执行这个 javascript，也就是上面那个片段。这样就能根据之前写好的回调函数处理这些数据了。</p>\n","excerpt":"","more":"<p>对于web开发来讲，由于浏览器的同源策略，我们需要经常使用一些hack的方法去跨域获取资源，但是hack的方法总归是hack。直到W3C出了一个标准－CORS－”跨域资源共享”（Cross-origin resource sharing）。<br>它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。</p>\n<h2 id=\"jsonp跨域\"><a href=\"#jsonp跨域\" class=\"headerlink\" title=\"jsonp跨域\"></a>jsonp跨域</h2><hr>\n<p>jsonp 是最常用的一种解决跨域的方式，但是只能发送get请求，并且需要前端和服务端限制好格式，写法相当丑陋，下面介绍下jsonp的用法：</p>\n<p>前端：<br>首先全局编写一个函数，记住这个函数名字，并且这个函数接受一个参数，这个参数就是服务端返回给前端的数据，函数体就是处理返回给前端数据的具体实现。<br>然后动态生成一个script 标签，src为：请求资源的地址＋获取函数的字段名＋回调函数名称，这里的获取函数的字段名是要和服务端约定好的，是为了让服务端拿到回调函数名称。（如：www.xxx.com?callbackName=resolveJson）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">//前端全局函数</div><div class=\"line\">function resolveJosn(result) &#123;</div><div class=\"line\">\tconsole.log(result.name);</div><div class=\"line\">&#125;</div><div class=\"line\">//访问后台代码</div><div class=\"line\">var jsonpScript= document.createElement(&quot;script&quot;);</div><div class=\"line\">jsonpScript.type = &quot;text/javascript&quot;;</div><div class=\"line\">jsonpScript.src = &quot;http://www.xxx.com?callbackName=resolveJson&quot;;</div><div class=\"line\">document.getElementsByTagName(&quot;head&quot;)[0].appendChild(jsonpScript);</div></pre></td></tr></table></figure></p>\n<p>服务端<br>在接受到浏览器端 script的请求之后，从url的query的callbackName获取到回调函数的名字，例子中是resolveJson。<br>然后动态生成一段javascript片段去给这个函数传入参数执行这个函数。比如：<br>resolveJson({name: ‘xxx’});<br>执行服务端返回这个 script 之后，浏览器端获取到 script 资源，然后会立即执行这个 javascript，也就是上面那个片段。这样就能根据之前写好的回调函数处理这些数据了。</p>\n"},{"title":"sass中的Map","date":"2017-07-01T09:54:17.000Z","_content":"### Map\n\n> * map 常常被称为数据地图，也有人称其为数组，因为他总是以 key:value 成对的出现\n\n```css\n// 以下为一个map\n$map:(\n    $key:value,\n    ...\n)\n$theme-color: (\n    default: (\n        bgcolor: #fff,\n        text-color: #444,\n        link-color: #39f\n    ),\n    primary:(\n        bgcolor: #000,\n        text-color:#fff,\n        link-color: #93f\n    ),\n    negative: (\n        bgcolor: #f36,\n        text-color: #fefefe,\n        link-color: #d4e\n    )\n);\n```\n\n> * map-get($map,$key) 根据 $key 参数，返回 $key 在 $map 中对应的 value 值。如果 $key 不存在 $map中，将返回 null 值。\n\n```css\n$social-colors: (\n    dribble: #ea4c89,\n    facebook: #3b5998,\n    github: #171515,\n    google: #db4437,\n    twitter: #55acee\n);\n.btn-dribble{\n  color: map-get($social-colors,facebook);\n}\n//编译结果\n.btn-dribble {\n  color: #3b5998; }\n```\n\n> * map-has-key($map,$key) 函数将返回一个布尔值。当 $map 中有这个 $key，则函数返回 true，否则返回 false\n\n```css\n$social-colors: (\n    dribble: #ea4c89,\n    facebook: #3b5998,\n    github: #171515,\n    google: #db4437,\n    twitter: #55acee\n);\n@function colors($color){\n    @if not map-has-key($social-colors,$color){\n        @warn \"No color found for `#{$color}` in $social-colors map. Property omitted.\";\n    }\n    @return map-get($social-colors,$color);\n}\n.btn-dribble {\n    color: colors(dribble);\n}\n.btn-facebook {\n    color: colors(facebook);\n}\n.btn-github {\n    color: colors(github);\n}\n.btn-google {\n    color: colors(google);\n}\n.btn-twitter {\n    color: colors(twitter);\n}\n.btn-weibo {\n    color: colors(weibo);\n}\n//编译结果\nWARNING: No color found for `weibo` in $social-colors map. Property omitted.\n         on line 10 of ./8457/5JPS/index.scss\n.btn-dribble {\n  color: #ea4c89; }\n.btn-facebook {\n  color: #3b5998; }\n.btn-github {\n  color: #171515; }\n.btn-google {\n  color: #db4437; }\n.btn-twitter {\n  color: #55acee; }\n```\n\n> * map-keys($map) 函数将会返回 $map 中的所有 key。这些值赋予给一个变量，那他就是一个列表\n\n```css\n$social-colors: (\n    dribble: #ea4c89,\n    facebook: #3b5998,\n    github: #171515,\n    google: #db4437,\n    twitter: #55acee\n);\nmap-keys($social-colors);\n= > \"dribble\",\"facebook\",\"github\",\"google\",\"twitter\"\n```\n\n> * map-values($map) 类似于 map-keys($map) 功能，不同的是 map-values($map )获取的是 $map 的所有 value 值\n\n```css\n$social-colors: (\n    dribble: #ea4c89,\n    facebook: #3b5998,\n    github: #171515,\n    google: #db4437,\n    twitter: #55acee\n);\nmap-values($social-colors);\n= > #ea4c89,#3b5998,#171515,#db4437,#55acee\n```\n\n> * map-merge($map1,$map2) 函数是将 $map1 和 $map2 合并，然后得到一个新的 $map\n\n```css\n$color: (\n    text: #f36,\n    link: #f63,\n    border: #ddd,\n    backround: #fff\n);\n$typo:(\n    font-size: 12px,\n    line-height: 1.6\n);\n$newmap: map-merge($color,$typo);\n=> $newmap:(\n       text: #f36,\n       link: #f63,\n       border: #ddd,\n       background: #fff,\n       font-size: 12px,\n       line-height: 1.6\n   );\n```\n\n> * map-remove($map,$key) \n\n1. map-remove($map,$key) 函数是用来删除当前 $map 中的某一个 $key，从而得到一个新的 map。其返回的值还是一个 map。他并不能直接从一个 map 中删除另一个 map，仅能通过删除 map 中的某个 key 得到新 map。\n2. 如果删除的 key 并不存在于 $map 中，那么 map-remove() 函数返回的新 map 和以前的 map 一样。 \n\n```css\n$social-colors: (\n    dribble: #ea4c89,\n    facebook: #3b5998,\n    github: #171515,\n    google: #db4437,\n    twitter: #55acee\n);\n$map:map-remove($social-colors,dribble);\n=> $map:(\n       facebook: #3b5998,\n       github: #171515,\n       google: #db4437,\n       twitter: #55acee\n   );\n```\n","source":"_posts/sass中的Map.md","raw":"---\ntitle: sass中的Map\ndate: 2017-07-01 17:54:17\ntags:\n    - Sass\ncategories: Sass\n---\n### Map\n\n> * map 常常被称为数据地图，也有人称其为数组，因为他总是以 key:value 成对的出现\n\n```css\n// 以下为一个map\n$map:(\n    $key:value,\n    ...\n)\n$theme-color: (\n    default: (\n        bgcolor: #fff,\n        text-color: #444,\n        link-color: #39f\n    ),\n    primary:(\n        bgcolor: #000,\n        text-color:#fff,\n        link-color: #93f\n    ),\n    negative: (\n        bgcolor: #f36,\n        text-color: #fefefe,\n        link-color: #d4e\n    )\n);\n```\n\n> * map-get($map,$key) 根据 $key 参数，返回 $key 在 $map 中对应的 value 值。如果 $key 不存在 $map中，将返回 null 值。\n\n```css\n$social-colors: (\n    dribble: #ea4c89,\n    facebook: #3b5998,\n    github: #171515,\n    google: #db4437,\n    twitter: #55acee\n);\n.btn-dribble{\n  color: map-get($social-colors,facebook);\n}\n//编译结果\n.btn-dribble {\n  color: #3b5998; }\n```\n\n> * map-has-key($map,$key) 函数将返回一个布尔值。当 $map 中有这个 $key，则函数返回 true，否则返回 false\n\n```css\n$social-colors: (\n    dribble: #ea4c89,\n    facebook: #3b5998,\n    github: #171515,\n    google: #db4437,\n    twitter: #55acee\n);\n@function colors($color){\n    @if not map-has-key($social-colors,$color){\n        @warn \"No color found for `#{$color}` in $social-colors map. Property omitted.\";\n    }\n    @return map-get($social-colors,$color);\n}\n.btn-dribble {\n    color: colors(dribble);\n}\n.btn-facebook {\n    color: colors(facebook);\n}\n.btn-github {\n    color: colors(github);\n}\n.btn-google {\n    color: colors(google);\n}\n.btn-twitter {\n    color: colors(twitter);\n}\n.btn-weibo {\n    color: colors(weibo);\n}\n//编译结果\nWARNING: No color found for `weibo` in $social-colors map. Property omitted.\n         on line 10 of ./8457/5JPS/index.scss\n.btn-dribble {\n  color: #ea4c89; }\n.btn-facebook {\n  color: #3b5998; }\n.btn-github {\n  color: #171515; }\n.btn-google {\n  color: #db4437; }\n.btn-twitter {\n  color: #55acee; }\n```\n\n> * map-keys($map) 函数将会返回 $map 中的所有 key。这些值赋予给一个变量，那他就是一个列表\n\n```css\n$social-colors: (\n    dribble: #ea4c89,\n    facebook: #3b5998,\n    github: #171515,\n    google: #db4437,\n    twitter: #55acee\n);\nmap-keys($social-colors);\n= > \"dribble\",\"facebook\",\"github\",\"google\",\"twitter\"\n```\n\n> * map-values($map) 类似于 map-keys($map) 功能，不同的是 map-values($map )获取的是 $map 的所有 value 值\n\n```css\n$social-colors: (\n    dribble: #ea4c89,\n    facebook: #3b5998,\n    github: #171515,\n    google: #db4437,\n    twitter: #55acee\n);\nmap-values($social-colors);\n= > #ea4c89,#3b5998,#171515,#db4437,#55acee\n```\n\n> * map-merge($map1,$map2) 函数是将 $map1 和 $map2 合并，然后得到一个新的 $map\n\n```css\n$color: (\n    text: #f36,\n    link: #f63,\n    border: #ddd,\n    backround: #fff\n);\n$typo:(\n    font-size: 12px,\n    line-height: 1.6\n);\n$newmap: map-merge($color,$typo);\n=> $newmap:(\n       text: #f36,\n       link: #f63,\n       border: #ddd,\n       background: #fff,\n       font-size: 12px,\n       line-height: 1.6\n   );\n```\n\n> * map-remove($map,$key) \n\n1. map-remove($map,$key) 函数是用来删除当前 $map 中的某一个 $key，从而得到一个新的 map。其返回的值还是一个 map。他并不能直接从一个 map 中删除另一个 map，仅能通过删除 map 中的某个 key 得到新 map。\n2. 如果删除的 key 并不存在于 $map 中，那么 map-remove() 函数返回的新 map 和以前的 map 一样。 \n\n```css\n$social-colors: (\n    dribble: #ea4c89,\n    facebook: #3b5998,\n    github: #171515,\n    google: #db4437,\n    twitter: #55acee\n);\n$map:map-remove($social-colors,dribble);\n=> $map:(\n       facebook: #3b5998,\n       github: #171515,\n       google: #db4437,\n       twitter: #55acee\n   );\n```\n","slug":"sass中的Map","published":1,"updated":"2017-07-01T10:25:25.391Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb1u1pat002d0sq9fivzh343","content":"<h3 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h3><blockquote>\n<ul>\n<li>map 常常被称为数据地图，也有人称其为数组，因为他总是以 key:value 成对的出现</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 以下为一个map</div><div class=\"line\">$map:(</div><div class=\"line\">    $key:value,</div><div class=\"line\">    ...</div><div class=\"line\">)</div><div class=\"line\">$theme-color: (</div><div class=\"line\">    default: (</div><div class=\"line\">        bgcolor: #fff,</div><div class=\"line\">        text-color: #444,</div><div class=\"line\">        link-color: #39f</div><div class=\"line\">    ),</div><div class=\"line\">    primary:(</div><div class=\"line\">        bgcolor: #000,</div><div class=\"line\">        text-color:#fff,</div><div class=\"line\">        link-color: #93f</div><div class=\"line\">    ),</div><div class=\"line\">    negative: (</div><div class=\"line\">        bgcolor: #f36,</div><div class=\"line\">        text-color: #fefefe,</div><div class=\"line\">        link-color: #d4e</div><div class=\"line\">    )</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>map-get($map,$key) 根据 $key 参数，返回 $key 在 $map 中对应的 value 值。如果 $key 不存在 $map中，将返回 null 值。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">$social-colors: (</div><div class=\"line\">    dribble: #ea4c89,</div><div class=\"line\">    facebook: #3b5998,</div><div class=\"line\">    github: #171515,</div><div class=\"line\">    google: #db4437,</div><div class=\"line\">    twitter: #55acee</div><div class=\"line\">);</div><div class=\"line\">.btn-dribble&#123;</div><div class=\"line\">  color: map-get($social-colors,facebook);</div><div class=\"line\">&#125;</div><div class=\"line\">//编译结果</div><div class=\"line\">.btn-dribble &#123;</div><div class=\"line\">  color: #3b5998; &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>map-has-key($map,$key) 函数将返回一个布尔值。当 $map 中有这个 $key，则函数返回 true，否则返回 false</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">$social-colors: (</div><div class=\"line\">    dribble: #ea4c89,</div><div class=\"line\">    facebook: #3b5998,</div><div class=\"line\">    github: #171515,</div><div class=\"line\">    google: #db4437,</div><div class=\"line\">    twitter: #55acee</div><div class=\"line\">);</div><div class=\"line\">@function colors($color)&#123;</div><div class=\"line\">    @if not map-has-key($social-colors,$color)&#123;</div><div class=\"line\">        @warn \"No color found for `#&#123;$color&#125;` in $social-colors map. Property omitted.\";</div><div class=\"line\">    &#125;</div><div class=\"line\">    @return map-get($social-colors,$color);</div><div class=\"line\">&#125;</div><div class=\"line\">.btn-dribble &#123;</div><div class=\"line\">    color: colors(dribble);</div><div class=\"line\">&#125;</div><div class=\"line\">.btn-facebook &#123;</div><div class=\"line\">    color: colors(facebook);</div><div class=\"line\">&#125;</div><div class=\"line\">.btn-github &#123;</div><div class=\"line\">    color: colors(github);</div><div class=\"line\">&#125;</div><div class=\"line\">.btn-google &#123;</div><div class=\"line\">    color: colors(google);</div><div class=\"line\">&#125;</div><div class=\"line\">.btn-twitter &#123;</div><div class=\"line\">    color: colors(twitter);</div><div class=\"line\">&#125;</div><div class=\"line\">.btn-weibo &#123;</div><div class=\"line\">    color: colors(weibo);</div><div class=\"line\">&#125;</div><div class=\"line\">//编译结果</div><div class=\"line\">WARNING: No color found for `weibo` in $social-colors map. Property omitted.</div><div class=\"line\">         on line 10 of ./8457/5JPS/index.scss</div><div class=\"line\">.btn-dribble &#123;</div><div class=\"line\">  color: #ea4c89; &#125;</div><div class=\"line\">.btn-facebook &#123;</div><div class=\"line\">  color: #3b5998; &#125;</div><div class=\"line\">.btn-github &#123;</div><div class=\"line\">  color: #171515; &#125;</div><div class=\"line\">.btn-google &#123;</div><div class=\"line\">  color: #db4437; &#125;</div><div class=\"line\">.btn-twitter &#123;</div><div class=\"line\">  color: #55acee; &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>map-keys($map) 函数将会返回 $map 中的所有 key。这些值赋予给一个变量，那他就是一个列表</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$social-colors: (</div><div class=\"line\">    dribble: #ea4c89,</div><div class=\"line\">    facebook: #3b5998,</div><div class=\"line\">    github: #171515,</div><div class=\"line\">    google: #db4437,</div><div class=\"line\">    twitter: #55acee</div><div class=\"line\">);</div><div class=\"line\">map-keys($social-colors);</div><div class=\"line\">= &gt; \"dribble\",\"facebook\",\"github\",\"google\",\"twitter\"</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>map-values($map) 类似于 map-keys($map) 功能，不同的是 map-values($map )获取的是 $map 的所有 value 值</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$social-colors: (</div><div class=\"line\">    dribble: #ea4c89,</div><div class=\"line\">    facebook: #3b5998,</div><div class=\"line\">    github: #171515,</div><div class=\"line\">    google: #db4437,</div><div class=\"line\">    twitter: #55acee</div><div class=\"line\">);</div><div class=\"line\">map-values($social-colors);</div><div class=\"line\">= &gt; #ea4c89,#3b5998,#171515,#db4437,#55acee</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>map-merge($map1,$map2) 函数是将 $map1 和 $map2 合并，然后得到一个新的 $map</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">$color: (</div><div class=\"line\">    text: #f36,</div><div class=\"line\">    link: #f63,</div><div class=\"line\">    border: #ddd,</div><div class=\"line\">    backround: #fff</div><div class=\"line\">);</div><div class=\"line\">$typo:(</div><div class=\"line\">    font-size: 12px,</div><div class=\"line\">    line-height: 1.6</div><div class=\"line\">);</div><div class=\"line\">$newmap: map-merge($color,$typo);</div><div class=\"line\">=&gt; $newmap:(</div><div class=\"line\">       text: #f36,</div><div class=\"line\">       link: #f63,</div><div class=\"line\">       border: #ddd,</div><div class=\"line\">       background: #fff,</div><div class=\"line\">       font-size: 12px,</div><div class=\"line\">       line-height: 1.6</div><div class=\"line\">   );</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>map-remove($map,$key) </li>\n</ul>\n</blockquote>\n<ol>\n<li>map-remove($map,$key) 函数是用来删除当前 $map 中的某一个 $key，从而得到一个新的 map。其返回的值还是一个 map。他并不能直接从一个 map 中删除另一个 map，仅能通过删除 map 中的某个 key 得到新 map。</li>\n<li>如果删除的 key 并不存在于 $map 中，那么 map-remove() 函数返回的新 map 和以前的 map 一样。 </li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">$social-colors: (</div><div class=\"line\">    dribble: #ea4c89,</div><div class=\"line\">    facebook: #3b5998,</div><div class=\"line\">    github: #171515,</div><div class=\"line\">    google: #db4437,</div><div class=\"line\">    twitter: #55acee</div><div class=\"line\">);</div><div class=\"line\">$map:map-remove($social-colors,dribble);</div><div class=\"line\">=&gt; $map:(</div><div class=\"line\">       facebook: #3b5998,</div><div class=\"line\">       github: #171515,</div><div class=\"line\">       google: #db4437,</div><div class=\"line\">       twitter: #55acee</div><div class=\"line\">   );</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h3 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h3><blockquote>\n<ul>\n<li>map 常常被称为数据地图，也有人称其为数组，因为他总是以 key:value 成对的出现</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 以下为一个map</div><div class=\"line\">$map:(</div><div class=\"line\">    $key:value,</div><div class=\"line\">    ...</div><div class=\"line\">)</div><div class=\"line\">$theme-color: (</div><div class=\"line\">    default: (</div><div class=\"line\">        bgcolor: #fff,</div><div class=\"line\">        text-color: #444,</div><div class=\"line\">        link-color: #39f</div><div class=\"line\">    ),</div><div class=\"line\">    primary:(</div><div class=\"line\">        bgcolor: #000,</div><div class=\"line\">        text-color:#fff,</div><div class=\"line\">        link-color: #93f</div><div class=\"line\">    ),</div><div class=\"line\">    negative: (</div><div class=\"line\">        bgcolor: #f36,</div><div class=\"line\">        text-color: #fefefe,</div><div class=\"line\">        link-color: #d4e</div><div class=\"line\">    )</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>map-get($map,$key) 根据 $key 参数，返回 $key 在 $map 中对应的 value 值。如果 $key 不存在 $map中，将返回 null 值。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">$social-colors: (</div><div class=\"line\">    dribble: #ea4c89,</div><div class=\"line\">    facebook: #3b5998,</div><div class=\"line\">    github: #171515,</div><div class=\"line\">    google: #db4437,</div><div class=\"line\">    twitter: #55acee</div><div class=\"line\">);</div><div class=\"line\">.btn-dribble&#123;</div><div class=\"line\">  color: map-get($social-colors,facebook);</div><div class=\"line\">&#125;</div><div class=\"line\">//编译结果</div><div class=\"line\">.btn-dribble &#123;</div><div class=\"line\">  color: #3b5998; &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>map-has-key($map,$key) 函数将返回一个布尔值。当 $map 中有这个 $key，则函数返回 true，否则返回 false</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">$social-colors: (</div><div class=\"line\">    dribble: #ea4c89,</div><div class=\"line\">    facebook: #3b5998,</div><div class=\"line\">    github: #171515,</div><div class=\"line\">    google: #db4437,</div><div class=\"line\">    twitter: #55acee</div><div class=\"line\">);</div><div class=\"line\">@function colors($color)&#123;</div><div class=\"line\">    @if not map-has-key($social-colors,$color)&#123;</div><div class=\"line\">        @warn \"No color found for `#&#123;$color&#125;` in $social-colors map. Property omitted.\";</div><div class=\"line\">    &#125;</div><div class=\"line\">    @return map-get($social-colors,$color);</div><div class=\"line\">&#125;</div><div class=\"line\">.btn-dribble &#123;</div><div class=\"line\">    color: colors(dribble);</div><div class=\"line\">&#125;</div><div class=\"line\">.btn-facebook &#123;</div><div class=\"line\">    color: colors(facebook);</div><div class=\"line\">&#125;</div><div class=\"line\">.btn-github &#123;</div><div class=\"line\">    color: colors(github);</div><div class=\"line\">&#125;</div><div class=\"line\">.btn-google &#123;</div><div class=\"line\">    color: colors(google);</div><div class=\"line\">&#125;</div><div class=\"line\">.btn-twitter &#123;</div><div class=\"line\">    color: colors(twitter);</div><div class=\"line\">&#125;</div><div class=\"line\">.btn-weibo &#123;</div><div class=\"line\">    color: colors(weibo);</div><div class=\"line\">&#125;</div><div class=\"line\">//编译结果</div><div class=\"line\">WARNING: No color found for `weibo` in $social-colors map. Property omitted.</div><div class=\"line\">         on line 10 of ./8457/5JPS/index.scss</div><div class=\"line\">.btn-dribble &#123;</div><div class=\"line\">  color: #ea4c89; &#125;</div><div class=\"line\">.btn-facebook &#123;</div><div class=\"line\">  color: #3b5998; &#125;</div><div class=\"line\">.btn-github &#123;</div><div class=\"line\">  color: #171515; &#125;</div><div class=\"line\">.btn-google &#123;</div><div class=\"line\">  color: #db4437; &#125;</div><div class=\"line\">.btn-twitter &#123;</div><div class=\"line\">  color: #55acee; &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>map-keys($map) 函数将会返回 $map 中的所有 key。这些值赋予给一个变量，那他就是一个列表</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$social-colors: (</div><div class=\"line\">    dribble: #ea4c89,</div><div class=\"line\">    facebook: #3b5998,</div><div class=\"line\">    github: #171515,</div><div class=\"line\">    google: #db4437,</div><div class=\"line\">    twitter: #55acee</div><div class=\"line\">);</div><div class=\"line\">map-keys($social-colors);</div><div class=\"line\">= &gt; \"dribble\",\"facebook\",\"github\",\"google\",\"twitter\"</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>map-values($map) 类似于 map-keys($map) 功能，不同的是 map-values($map )获取的是 $map 的所有 value 值</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$social-colors: (</div><div class=\"line\">    dribble: #ea4c89,</div><div class=\"line\">    facebook: #3b5998,</div><div class=\"line\">    github: #171515,</div><div class=\"line\">    google: #db4437,</div><div class=\"line\">    twitter: #55acee</div><div class=\"line\">);</div><div class=\"line\">map-values($social-colors);</div><div class=\"line\">= &gt; #ea4c89,#3b5998,#171515,#db4437,#55acee</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>map-merge($map1,$map2) 函数是将 $map1 和 $map2 合并，然后得到一个新的 $map</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">$color: (</div><div class=\"line\">    text: #f36,</div><div class=\"line\">    link: #f63,</div><div class=\"line\">    border: #ddd,</div><div class=\"line\">    backround: #fff</div><div class=\"line\">);</div><div class=\"line\">$typo:(</div><div class=\"line\">    font-size: 12px,</div><div class=\"line\">    line-height: 1.6</div><div class=\"line\">);</div><div class=\"line\">$newmap: map-merge($color,$typo);</div><div class=\"line\">=&gt; $newmap:(</div><div class=\"line\">       text: #f36,</div><div class=\"line\">       link: #f63,</div><div class=\"line\">       border: #ddd,</div><div class=\"line\">       background: #fff,</div><div class=\"line\">       font-size: 12px,</div><div class=\"line\">       line-height: 1.6</div><div class=\"line\">   );</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>map-remove($map,$key) </li>\n</ul>\n</blockquote>\n<ol>\n<li>map-remove($map,$key) 函数是用来删除当前 $map 中的某一个 $key，从而得到一个新的 map。其返回的值还是一个 map。他并不能直接从一个 map 中删除另一个 map，仅能通过删除 map 中的某个 key 得到新 map。</li>\n<li>如果删除的 key 并不存在于 $map 中，那么 map-remove() 函数返回的新 map 和以前的 map 一样。 </li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">$social-colors: (</div><div class=\"line\">    dribble: #ea4c89,</div><div class=\"line\">    facebook: #3b5998,</div><div class=\"line\">    github: #171515,</div><div class=\"line\">    google: #db4437,</div><div class=\"line\">    twitter: #55acee</div><div class=\"line\">);</div><div class=\"line\">$map:map-remove($social-colors,dribble);</div><div class=\"line\">=&gt; $map:(</div><div class=\"line\">       facebook: #3b5998,</div><div class=\"line\">       github: #171515,</div><div class=\"line\">       google: #db4437,</div><div class=\"line\">       twitter: #55acee</div><div class=\"line\">   );</div></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjb1u1p4w00000sq9o4tj9fuz","category_id":"cjb1u1p5g00040sq9z6szrsmy","_id":"cjb1u1p6o000e0sq9ix0noh92"},{"post_id":"cjb1u1p5800020sq9nm8tfvdj","category_id":"cjb1u1p6g000a0sq9z1tmhyy4","_id":"cjb1u1p74000l0sq9f5it40iw"},{"post_id":"cjb1u1p6x000i0sq9dw6bwnf2","category_id":"cjb1u1p6t000g0sq94xtjq5gt","_id":"cjb1u1p7g000q0sq945341v2d"},{"post_id":"cjb1u1p5s00060sq9oa023hnh","category_id":"cjb1u1p6t000g0sq94xtjq5gt","_id":"cjb1u1p7w000v0sq9hctx94cj"},{"post_id":"cjb1u1p71000k0sq9eyx7ht3m","category_id":"cjb1u1p6t000g0sq94xtjq5gt","_id":"cjb1u1p81000y0sq9gnfmd39c"},{"post_id":"cjb1u1p6200080sq9rm6vulei","category_id":"cjb1u1p6t000g0sq94xtjq5gt","_id":"cjb1u1p8500110sq9bramorwb"},{"post_id":"cjb1u1p7h000s0sq9ncji2er2","category_id":"cjb1u1p6t000g0sq94xtjq5gt","_id":"cjb1u1p8900160sq9i239wa4x"},{"post_id":"cjb1u1p6e00090sq9i5piiwy5","category_id":"cjb1u1p7s000t0sq9qrigtdn7","_id":"cjb1u1p8b00190sq9bqnjajqc"},{"post_id":"cjb1u1p8700150sq9bwqttcrj","category_id":"cjb1u1p6t000g0sq94xtjq5gt","_id":"cjb1u1p8l001e0sq9krq5unad"},{"post_id":"cjb1u1p8900180sq90muwm55b","category_id":"cjb1u1p6t000g0sq94xtjq5gt","_id":"cjb1u1p8w001h0sq9x9r6bu90"},{"post_id":"cjb1u1p6l000d0sq9fk81wx4q","category_id":"cjb1u1p8600130sq9ii0xjw5f","_id":"cjb1u1p95001m0sq9gggy3sj5"},{"post_id":"cjb1u1p8c001b0sq9lcvznx3g","category_id":"cjb1u1p6t000g0sq94xtjq5gt","_id":"cjb1u1p99001p0sq9atfv5cob"},{"post_id":"cjb1u1p6q000f0sq95botmr11","category_id":"cjb1u1p6t000g0sq94xtjq5gt","_id":"cjb1u1p9m001u0sq9ywgyngrz"},{"post_id":"cjb1u1p8x001j0sq9ar13l0zu","category_id":"cjb1u1p6t000g0sq94xtjq5gt","_id":"cjb1u1p9r001x0sq9dy4gg1mu"},{"post_id":"cjb1u1p7d000p0sq99yexz417","category_id":"cjb1u1p90001k0sq9sf59qspp","_id":"cjb1u1pa900220sq9mujsp02y"},{"post_id":"cjb1u1p7z000x0sq911ej9j4g","category_id":"cjb1u1p8600130sq9ii0xjw5f","_id":"cjb1u1pak00260sq9kns6ee7m"},{"post_id":"cjb1u1pab00230sq9f4q8op5x","category_id":"cjb1u1pa700200sq90gandnt3","_id":"cjb1u1pas002b0sq9mcxtbbbz"},{"post_id":"cjb1u1p8r001g0sq9z57scvvz","category_id":"cjb1u1pa700200sq90gandnt3","_id":"cjb1u1paw002e0sq9kvh230f7"},{"post_id":"cjb1u1pag00250sq9kxz9hr0h","category_id":"cjb1u1p6t000g0sq94xtjq5gt","_id":"cjb1u1paz002i0sq92cu92zmr"},{"post_id":"cjb1u1pao002a0sq9lea1d3sj","category_id":"cjb1u1p6t000g0sq94xtjq5gt","_id":"cjb1u1pb0002k0sq9289lk3ik"},{"post_id":"cjb1u1p96001o0sq97r27fxoo","category_id":"cjb1u1pam00270sq9zanhuha4","_id":"cjb1u1pb3002o0sq9zzasfxe4"},{"post_id":"cjb1u1pat002d0sq9fivzh343","category_id":"cjb1u1pa700200sq90gandnt3","_id":"cjb1u1pb5002q0sq9olgvbpn3"},{"post_id":"cjb1u1p9d001r0sq9tshv83n8","category_id":"cjb1u1pa700200sq90gandnt3","_id":"cjb1u1pb7002u0sq9n0rvtnuf"},{"post_id":"cjb1u1p9o001w0sq9l0zhs7j6","category_id":"cjb1u1pb1002m0sq9ku6ulof8","_id":"cjb1u1pbb002w0sq9zweajpos"},{"post_id":"cjb1u1p9t001z0sq9bk8razdp","category_id":"cjb1u1pa700200sq90gandnt3","_id":"cjb1u1pbd002y0sq9jvttl0pa"}],"PostTag":[{"post_id":"cjb1u1p4w00000sq9o4tj9fuz","tag_id":"cjb1u1p5m00050sq9o6m6zehq","_id":"cjb1u1p6k000c0sq93yvkiut5"},{"post_id":"cjb1u1p5800020sq9nm8tfvdj","tag_id":"cjb1u1p6h000b0sq98hipkn5h","_id":"cjb1u1p70000j0sq9edmsrjgh"},{"post_id":"cjb1u1p6x000i0sq9dw6bwnf2","tag_id":"cjb1u1p6v000h0sq9xlh7mpw8","_id":"cjb1u1p7a000o0sq93v8q960w"},{"post_id":"cjb1u1p5s00060sq9oa023hnh","tag_id":"cjb1u1p6v000h0sq9xlh7mpw8","_id":"cjb1u1p7g000r0sq9adcny6jk"},{"post_id":"cjb1u1p71000k0sq9eyx7ht3m","tag_id":"cjb1u1p6v000h0sq9xlh7mpw8","_id":"cjb1u1p7w000w0sq9kl9ajrru"},{"post_id":"cjb1u1p6200080sq9rm6vulei","tag_id":"cjb1u1p6v000h0sq9xlh7mpw8","_id":"cjb1u1p82000z0sq9653gf6cx"},{"post_id":"cjb1u1p7h000s0sq9ncji2er2","tag_id":"cjb1u1p6v000h0sq9xlh7mpw8","_id":"cjb1u1p8600120sq9wpfcjpb7"},{"post_id":"cjb1u1p6e00090sq9i5piiwy5","tag_id":"cjb1u1p7v000u0sq9nn1ievfc","_id":"cjb1u1p8900170sq9ezs1fyqq"},{"post_id":"cjb1u1p8700150sq9bwqttcrj","tag_id":"cjb1u1p6v000h0sq9xlh7mpw8","_id":"cjb1u1p8c001a0sq9zzwvku4r"},{"post_id":"cjb1u1p8900180sq90muwm55b","tag_id":"cjb1u1p6v000h0sq9xlh7mpw8","_id":"cjb1u1p8n001f0sq97tp9f9mp"},{"post_id":"cjb1u1p6l000d0sq9fk81wx4q","tag_id":"cjb1u1p8600140sq9bg462upg","_id":"cjb1u1p8w001i0sq9cvcic0m5"},{"post_id":"cjb1u1p8c001b0sq9lcvznx3g","tag_id":"cjb1u1p6v000h0sq9xlh7mpw8","_id":"cjb1u1p95001n0sq9xdqq3eky"},{"post_id":"cjb1u1p6q000f0sq95botmr11","tag_id":"cjb1u1p6v000h0sq9xlh7mpw8","_id":"cjb1u1p9c001q0sq9re7h9g0o"},{"post_id":"cjb1u1p8x001j0sq9ar13l0zu","tag_id":"cjb1u1p6v000h0sq9xlh7mpw8","_id":"cjb1u1p9n001v0sq9kmfsvawn"},{"post_id":"cjb1u1p7d000p0sq99yexz417","tag_id":"cjb1u1p91001l0sq9epi9ut7g","_id":"cjb1u1p9s001y0sq9o63ruyb9"},{"post_id":"cjb1u1p7z000x0sq911ej9j4g","tag_id":"cjb1u1p8600140sq9bg462upg","_id":"cjb1u1pae00240sq9uw6rp59u"},{"post_id":"cjb1u1pab00230sq9f4q8op5x","tag_id":"cjb1u1pa800210sq9p24gc1tq","_id":"cjb1u1pan00290sq9qmd57hv9"},{"post_id":"cjb1u1p8r001g0sq9z57scvvz","tag_id":"cjb1u1pa800210sq9p24gc1tq","_id":"cjb1u1pas002c0sq9tu4l8ne2"},{"post_id":"cjb1u1pag00250sq9kxz9hr0h","tag_id":"cjb1u1p6v000h0sq9xlh7mpw8","_id":"cjb1u1paw002f0sq98yigdt9w"},{"post_id":"cjb1u1pao002a0sq9lea1d3sj","tag_id":"cjb1u1p6v000h0sq9xlh7mpw8","_id":"cjb1u1paz002j0sq9utqkstcy"},{"post_id":"cjb1u1p96001o0sq97r27fxoo","tag_id":"cjb1u1pan00280sq9g22328d6","_id":"cjb1u1pb1002l0sq9z7a15mop"},{"post_id":"cjb1u1pat002d0sq9fivzh343","tag_id":"cjb1u1pa800210sq9p24gc1tq","_id":"cjb1u1pb3002p0sq9zry3k2n5"},{"post_id":"cjb1u1p9d001r0sq9tshv83n8","tag_id":"cjb1u1pa800210sq9p24gc1tq","_id":"cjb1u1pb5002r0sq9x2srbesx"},{"post_id":"cjb1u1p9o001w0sq9l0zhs7j6","tag_id":"cjb1u1pb2002n0sq9ueeuppz6","_id":"cjb1u1pb9002v0sq9b9nepfpg"},{"post_id":"cjb1u1p9t001z0sq9bk8razdp","tag_id":"cjb1u1pa800210sq9p24gc1tq","_id":"cjb1u1pbc002x0sq9ym2k0ty3"}],"Tag":[{"name":"Django","_id":"cjb1u1p5m00050sq9o6m6zehq"},{"name":"TypeScript","_id":"cjb1u1p6h000b0sq98hipkn5h"},{"name":"Javascript","_id":"cjb1u1p6v000h0sq9xlh7mpw8"},{"name":"MVC","_id":"cjb1u1p7v000u0sq9nn1ievfc"},{"name":"hexo","_id":"cjb1u1p8600140sq9bg462upg"},{"name":"ES6","_id":"cjb1u1p91001l0sq9epi9ut7g"},{"name":"Sass","_id":"cjb1u1pa800210sq9p24gc1tq"},{"name":"Mysql","_id":"cjb1u1pan00280sq9g22328d6"},{"name":"ubuntu","_id":"cjb1u1pb2002n0sq9ueeuppz6"}]}}