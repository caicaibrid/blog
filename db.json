{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/README.MDOWN","path":"README.MDOWN","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/img/fuck.jpg","path":"img/fuck.jpg","modified":1,"renderable":0},{"_id":"source/img/prototype.jpg","path":"img/prototype.jpg","modified":1,"renderable":0},{"_id":"source/img/scss.jpg","path":"img/scss.jpg","modified":1,"renderable":0},{"_id":"source/img/vue.jpeg","path":"img/vue.jpeg","modified":1,"renderable":0},{"_id":"source/file/react-native环境搭建.txt","path":"file/react-native环境搭建.txt","modified":1,"renderable":0},{"_id":"source/file/react.txt","path":"file/react.txt","modified":1,"renderable":0},{"_id":"themes/next/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"source/img/debug.png","path":"img/debug.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/head.gif","path":"images/head.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/uploads/wx.jpg","path":"uploads/wx.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/uploads/zfb.jpg","path":"uploads/zfb.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/uploads/head.gif","path":"uploads/head.gif","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"source/img/react.ppt","path":"img/react.ppt","modified":1,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1584961523940},{"_id":"source/README.MDOWN","hash":"1cb7d4a42e5fa5fe7274b20dbdbe195872c4c72d","modified":1584961523940},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1584961523980},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1584961523980},{"_id":"themes/next/.javascript_ignore","hash":"de73037693881ad2626e2962e8c5ab243f7b24d0","modified":1584961523980},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1584961523980},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1584961523980},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1584961523980},{"_id":"themes/next/_config.yml","hash":"e4211478c650995ac25801efa699d08c3cbf98e5","modified":1602834176542},{"_id":"themes/next/bower.json","hash":"023b5b945bc45c205129a18e26d304fb9caa15c7","modified":1584961523981},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1584961523981},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1584961523994},{"_id":"source/favicon.ico","hash":"696540c09858a334ebb6d190eb1fc9b1cde4524a","modified":1584961523949},{"_id":"source/_posts/Django.md","hash":"59c1eec3fb1159b41c8cab8e7b82a7d554872e45","modified":1584961523940},{"_id":"source/_posts/Jquery-ready函数的实现.md","hash":"af5bb267614cb88502d72d131adf0792869a76be","modified":1584961523940},{"_id":"source/_posts/MVC的理解.md","hash":"ed62be569512e962730a7d09703bc33cd1eda645","modified":1584961523940},{"_id":"source/_posts/URL到展现页面的全过程.md","hash":"a84ae87014480874698187f86f0cddddf220bf18","modified":1584961523941},{"_id":"source/_posts/TypeScript.md","hash":"6b5c389036263db91b3caeed1976979da87e5257","modified":1584961523941},{"_id":"source/_posts/Vue项目总结.md","hash":"8f2979b4392a7fefd53fd62cdcb8e5df792e4950","modified":1602834508849},{"_id":"source/_posts/apply-call-bind用法.md","hash":"1fb83d17d30332a1dd658d21061b8d8cac17a4eb","modified":1584961523941},{"_id":"source/_posts/axios提交form表单.md","hash":"324b0a6e93f383f008e28f5483e2148d50b25045","modified":1584961523941},{"_id":"source/_posts/dom-js.md","hash":"0e467b4f8000bf84a889f864e502534e8d7a41eb","modified":1584961523941},{"_id":"source/_posts/dom.md","hash":"dd4a92b2ca81af7c79618217ce444490aafa1457","modified":1584961523942},{"_id":"source/_posts/es6-async解析.md","hash":"c480895f75f9a1e0f586c8ce782a7acc6ded3d8f","modified":1584961523942},{"_id":"source/_posts/git基本操作.md","hash":"a28b746c36f9e304be184c0907a4d08ab3bd56d2","modified":1584961523942},{"_id":"source/_posts/hexo常用命令.md","hash":"5e0381afe87bef4c560522aa5c496910c2666d2a","modified":1584961523942},{"_id":"source/_posts/hexo部署出现404找不到js的解决方案.md","hash":"eb464afe92858b75f2cd85226ff4fc804278542a","modified":1584961523942},{"_id":"source/_posts/javascript-Date-对象.md","hash":"e69521505d4988dd69ffda75aa3de107b724ffa3","modified":1584961523942},{"_id":"source/_posts/javascript内存泄漏.md","hash":"f7b454d4f3a55ca7af427ea574beabd64141d978","modified":1584961523942},{"_id":"source/_posts/javascript排序.md","hash":"f0b79c2f2a8132f0a92787da8801991b8e82bcd4","modified":1584961523943},{"_id":"source/_posts/javascript数组遍历之间的区别.md","hash":"7c331321d58f51085e4a96317689bc507d5ca93b","modified":1584961523943},{"_id":"source/_posts/javascript设计模式.md","hash":"4cc338edc39f8f7def8b530cdfb3c5042c572355","modified":1584961523943},{"_id":"source/_posts/js高程-第三版-兼容问题和注意事项.md","hash":"0eb019d02d782aab328376ccbc26519d241601c5","modified":1584961523944},{"_id":"source/_posts/module-exports和exports的区别.md","hash":"f99cbde5efdb6eed54dc4c20b2c2b09acbc0d5fd","modified":1584961523944},{"_id":"source/_posts/mongoDB.md","hash":"29a7d599076e895458d5b9474dc0927057c94fe0","modified":1584961523944},{"_id":"source/_posts/mysql.md","hash":"3698a5ec954feb926820decd4f66695ba991cb4e","modified":1584961523945},{"_id":"source/_posts/nodeJS开发指南.md","hash":"b421343275211bb46926264a22e3c11d0936dcd7","modified":1584961523945},{"_id":"source/_posts/react总结.md","hash":"8b5d7337ea6e34dcca5780274ed5ed9f8c850061","modified":1584961523945},{"_id":"source/_posts/sass中的Map.md","hash":"7f80b55020ba1cefd019ab0e737ae85816fbf337","modified":1584961523945},{"_id":"source/_posts/sass中的规则.md","hash":"1c8ecfe92e2197e6288c7cb7663aa940d6adea04","modified":1584961523945},{"_id":"source/_posts/sass函数.md","hash":"fe5ca4a0e54882d3b06b808ec7b8d2df8766d2dc","modified":1584961523946},{"_id":"source/_posts/sass基本用法.md","hash":"1c97043bf8096b41880307d53863f727a05c7bcc","modified":1584961523946},{"_id":"source/_posts/sass控制命令.md","hash":"0c2ed12d36643b77a065a1e4de82c8042e7f265f","modified":1584961523946},{"_id":"source/_posts/ubuntu中的命令.md","hash":"873108dd11480da0ad520a7056e569f047f1f770","modified":1584961523946},{"_id":"source/_posts/vue编译原理、渲染过程.md","hash":"85df2da2862c2fafc88c90cdfd1e879b5883eb82","modified":1602834448775},{"_id":"source/_posts/vue非父子之间的通信.md","hash":"1d024d7e121bbb6a8eee8c3c006f73870330b72f","modified":1584961523947},{"_id":"source/_posts/微信小程序-JS调用组件.md","hash":"9f0a245d6b22f58e92ef937c6e91e6ef9d20970e","modified":1602834656739},{"_id":"source/_posts/正则表达式.md","hash":"de654488feba5f0a9ce24ae3129402b1af346cdf","modified":1584961523947},{"_id":"source/_posts/算法.md","hash":"df0b3d98de3f716f58c2d029df9f972a25e7fd5d","modified":1584961523947},{"_id":"source/_posts/跨域.md","hash":"87881749e63bd4fa1038297edf4c3b5957ac377c","modified":1584961523947},{"_id":"source/_posts/进制转换.md","hash":"0a34c6d61a7913259a4b7a99ff14e14c2b9c48ac","modified":1584961523948},{"_id":"source/_posts/面试宝典.md","hash":"f1c4ec47038121508631e85d4f3ca2f92166a4a4","modified":1584961523948},{"_id":"source/about/index.md","hash":"be3fb358a340b542f917b39c4842b7e60258b1ea","modified":1584961523948},{"_id":"source/categories/index.md","hash":"84909c28d402bc61bfab39a8ab3004b1d959eb81","modified":1584961523948},{"_id":"source/img/fuck.jpg","hash":"d8d376a616d3061bd495c9e4f4b69c94249d5c69","modified":1584961523950},{"_id":"source/img/prototype.jpg","hash":"bb5fddec630c7286c5e849d351e31270c246d245","modified":1584961523951},{"_id":"source/img/scss.jpg","hash":"90f0fea8d94ff642844ff8368246069dc03c2b8f","modified":1584961523956},{"_id":"source/img/vue.jpeg","hash":"3bf663513ea52da41a57e0e7c5578b14e649cce5","modified":1602833340793},{"_id":"source/file/react-native环境搭建.txt","hash":"20b683f1f9dd38ba5fb88278edad06d283d907c8","modified":1584961523949},{"_id":"source/file/react.txt","hash":"a0590cc25a3a36a57cf52f8fae74010e1b42a33c","modified":1584961523949},{"_id":"source/tags/index.md","hash":"7ed6416ceee3d256892f2ede0973dbead5cc6779","modified":1584961523956},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1584961523981},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1584961523982},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1584961523982},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1584961523982},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1584961523982},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1584961523983},{"_id":"themes/next/languages/ko.yml","hash":"ce8b047c89daae77c03482fc76f16ffec6bdbf2d","modified":1584961523983},{"_id":"themes/next/languages/pt-BR.yml","hash":"462aa865ca3d479bcf6b363cba61247b50f230ff","modified":1584961523983},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1584961523983},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1584961523983},{"_id":"themes/next/languages/zh-Hans.yml","hash":"32c67bcc32c62670e3065c5a10441825643f3678","modified":1584961523984},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1584961523984},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1584961523984},{"_id":"themes/next/layout/_layout.swig","hash":"74157f6cfd679ea11febec632542793f37c5e5d4","modified":1584961523984},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1584961523993},{"_id":"themes/next/layout/category.swig","hash":"1012fd00db68d994199cfba9e42a15b05c6a059d","modified":1584961523994},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1584961523994},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1584961523994},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1584961523994},{"_id":"themes/next/layout/tag.swig","hash":"4d58969362b0eb0f78eaec91bd03d76698da4d7f","modified":1584961523994},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1584961523995},{"_id":"themes/next/source/404.html","hash":"2b2e5bd645efb48649c620f98c8dfe018d50661f","modified":1584961523996},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1584961524042},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1584961524042},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1584961524042},{"_id":"source/img/debug.png","hash":"5d6a8826045033e3f2482cd14a4851c6b39b7c13","modified":1584961523950},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1584961524016},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1584961523984},{"_id":"themes/next/layout/_macro/post.swig","hash":"f3895bf44a9fb7c462f2e57b9a914703c2f152ba","modified":1584961523985},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1584961523985},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1a77843ce5eac62151dc3d38f0a36c43e19e1a74","modified":1584961523985},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1584961523985},{"_id":"themes/next/layout/_partials/comments.swig","hash":"58fd826ca75b0cbc48b61a58da4b841e2fa34403","modified":1584961523986},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1584961523986},{"_id":"themes/next/layout/_partials/footer.swig","hash":"a079081444f119d54d73f45f0e0ad3ad20024574","modified":1584961523986},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b0c495b8154ef8b2d2cb0a554e164ff22cdc962","modified":1584961523986},{"_id":"themes/next/layout/_partials/header.swig","hash":"eb028685cb3c329537bbced06c063d23e6a33817","modified":1584961523987},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1584961523987},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1584961523987},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1584961523989},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1584961523989},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1584961523989},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1584961523993},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1584961523995},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1584961523995},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1584961523995},{"_id":"themes/next/source/css/main.styl","hash":"350bed7d000fadbd028be0e9520955df2b84f72e","modified":1584961524016},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1584961524017},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1584961524017},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1584961524017},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1584961524018},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1584961524018},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1584961524018},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1584961524018},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1584961524019},{"_id":"themes/next/source/images/head.gif","hash":"2aa0d9e497c2585c3c6d64efa6aeefe57cbea37e","modified":1584961524019},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1584961524019},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1584961524019},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1584961524019},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1584961524020},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1584961524020},{"_id":"themes/next/source/uploads/wx.jpg","hash":"9d86934b7e840f4a3938fae1f89070e30f1f5c55","modified":1584961524041},{"_id":"themes/next/source/uploads/zfb.jpg","hash":"759d6cf3c4a6ba0b67e8f3bd0c8ec79618df583e","modified":1584961524041},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1584961523990},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1584961523990},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1584961524008},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1584961524008},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1584961524009},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1584961524015},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1584961524016},{"_id":"themes/next/source/uploads/head.gif","hash":"66accb46e7671093813816a6a232dc9bbb3914f4","modified":1584961524041},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1584961523987},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1584961523987},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1584961523987},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1584961523988},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1584961523988},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1584961523988},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1584961523988},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1584961523989},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1584961523989},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1584961523990},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1584961523990},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1584961523992},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1584961523992},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1584961523993},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"7f7148c8f52e4d3cfc070d964160362179fa8e91","modified":1584961523992},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1584961523993},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1584961524008},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1584961524008},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1584961524009},{"_id":"themes/next/source/css/_style/style.styl","hash":"540a32f8920fe789c0cf91cb9da085e9bee6e4e5","modified":1584961524015},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1584961524015},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1584961524016},{"_id":"themes/next/source/css/_variables/base.styl","hash":"17624186f7a1f28daddea258d044f8e03b2f4bea","modified":1584961524016},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1584961524021},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1584961524021},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1584961524021},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1584961524021},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1584961524021},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1584961524022},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1584961524022},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1584961524023},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1584961524023},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1584961524027},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1584961524027},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1584961524027},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1584961524028},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1584961524029},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1584961524029},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1584961524029},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1584961524030},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1584961524030},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1584961524036},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1584961524037},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1584961524037},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1584961524037},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1584961524037},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1584961524037},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1584961524037},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1584961524038},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1584961524038},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1584961524039},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1584961524040},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1584961524040},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1584961524036},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1584961523990},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1584961523990},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"1e3e1c6231408e18e8485a8e0e59e8880349b210","modified":1584961523991},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1584961523991},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1584961523991},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1584961523991},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"696666141cdd204fd8818ac2ad18f05e320f8587","modified":1584961523992},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"bff3b18f56175c53f3bc6d733166c4d998e08732","modified":1584961523992},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1584961523996},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1584961523996},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1584961523997},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1584961523997},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1584961524000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1584961524004},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1584961524006},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1584961524006},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1584961524007},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1584961524007},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1584961524007},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1584961524007},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1584961524009},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1584961524009},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1584961524010},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1584961524010},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1584961524010},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1584961524010},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1584961524010},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1584961524011},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1584961524012},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1584961524012},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1584961524012},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1584961524012},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1584961524013},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1584961524013},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1584961524013},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1584961524014},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1584961524014},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1584961524014},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1584961524014},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1584961524022},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1584961524023},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1584961524023},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1584961524024},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1584961524024},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1584961524024},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1584961524024},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1584961524026},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1584961524026},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1584961524027},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1584961524028},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1584961524029},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1584961524030},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1584961524031},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1584961524031},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1584961524038},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1584961524038},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1584961524033},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1584961524035},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1584961524035},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1584961523997},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1584961523997},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1584961523997},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1584961523998},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1584961523998},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1584961523998},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1584961523998},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1584961523998},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1584961523999},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1584961523999},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1584961523999},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1584961523999},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1584961524000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1584961524000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1584961524000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1584961524001},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1584961524000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1584961524001},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1584961524001},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1584961524001},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1584961524001},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1584961524002},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1584961524001},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1584961524002},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1584961524002},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1584961524002},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1584961524002},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1584961524003},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1584961524003},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1584961524003},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1584961524003},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1584961524004},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1584961524004},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1584961524005},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1584961524004},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1584961524005},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1584961524005},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1584961524005},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1584961524005},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1584961524006},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1584961524006},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1584961524006},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1584961524006},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1584961524011},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1584961524011},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1584961524013},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1584961524025},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1584961524025},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1584961524025},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1584961524025},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1584961524026},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1584961524026},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1584961524032},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1584961524039},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1584961524034},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1584961524034},{"_id":"source/img/react.ppt","hash":"1b25c05555656adcde2f818f284fb376d35007df","modified":1584961523955}],"Category":[{"name":"Python","_id":"ckgbydgmy0004ofo9d3u4u2pr"},{"name":"Javascript","_id":"ckgbydgn5000aofo9lwqr5j3b"},{"name":"MVC","_id":"ckgbydgnd000mofo99hjh38vg"},{"name":"TypeScript","_id":"ckgbydgng000vofo9pig6wwg6"},{"name":"ES6","_id":"ckgbydgnj0013ofo9qlq4c9oc"},{"name":"Git","_id":"ckgbydgnn001cofo9yxcv7esm"},{"name":"hexo","_id":"ckgbydgnp001kofo9hx3gipyi"},{"name":"mongoDB","_id":"ckgbydgo30024ofo9v7z3m2vb"},{"name":"Mysql","_id":"ckgbydgo6002eofo99u634sef"},{"name":"NodeJS","_id":"ckgbydgo8002nofo9tqdzeqsg"},{"name":"Sass","_id":"ckgbydgob002vofo94anineou"},{"name":"ubuntu","_id":"ckgbydgoq003vofo9yidufdot"},{"name":"Vue","_id":"ckgbydgor0042ofo9czdk33ql"},{"name":"面试宝典","_id":"ckgbydgor0048ofo99l59dkaa"},{"name":"微信小程序","_id":"ckgbyfs9k004gofo92vy7zs3u"}],"Data":[],"Page":[{"title":"about","type":"about","comments":0,"date":"2016-09-24T06:11:50.000Z","_content":"## 博客简介\n---\n> * 整理知识，学习笔记\n> * 所见所想\n\n## 个人简介\n---\n> * 昵称：菜菜\n> * 故乡：山西吕梁\n> * 居住地：北京朝阳\n\n## 联系方式\n---\n> * Q Q：835750871\n> * 邮箱：835750871@qq.com","source":"about/index.md","raw":"---\ntitle: about\ntype: \"about\"\ncomments: false\ndate: 2016-09-24 14:11:50\n---\n## 博客简介\n---\n> * 整理知识，学习笔记\n> * 所见所想\n\n## 个人简介\n---\n> * 昵称：菜菜\n> * 故乡：山西吕梁\n> * 居住地：北京朝阳\n\n## 联系方式\n---\n> * Q Q：835750871\n> * 邮箱：835750871@qq.com","updated":"2020-03-23T11:05:23.948Z","path":"about/index.html","layout":"page","_id":"ckgbydgmv0001ofo9h0gipmz2","content":"<h2 id=\"博客简介\"><a href=\"#博客简介\" class=\"headerlink\" title=\"博客简介\"></a>博客简介</h2><hr>\n<blockquote>\n<ul>\n<li>整理知识，学习笔记</li>\n<li>所见所想</li>\n</ul>\n</blockquote>\n<h2 id=\"个人简介\"><a href=\"#个人简介\" class=\"headerlink\" title=\"个人简介\"></a>个人简介</h2><hr>\n<blockquote>\n<ul>\n<li>昵称：菜菜</li>\n<li>故乡：山西吕梁</li>\n<li>居住地：北京朝阳</li>\n</ul>\n</blockquote>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><hr>\n<blockquote>\n<ul>\n<li>Q Q：835750871</li>\n<li>邮箱：<a href=\"mailto:835750871@qq.com\" target=\"_blank\" rel=\"noopener\">835750871@qq.com</a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"博客简介\"><a href=\"#博客简介\" class=\"headerlink\" title=\"博客简介\"></a>博客简介</h2><hr>\n<blockquote>\n<ul>\n<li>整理知识，学习笔记</li>\n<li>所见所想</li>\n</ul>\n</blockquote>\n<h2 id=\"个人简介\"><a href=\"#个人简介\" class=\"headerlink\" title=\"个人简介\"></a>个人简介</h2><hr>\n<blockquote>\n<ul>\n<li>昵称：菜菜</li>\n<li>故乡：山西吕梁</li>\n<li>居住地：北京朝阳</li>\n</ul>\n</blockquote>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><hr>\n<blockquote>\n<ul>\n<li>Q Q：835750871</li>\n<li>邮箱：<a href=\"mailto:835750871@qq.com\" target=\"_blank\" rel=\"noopener\">835750871@qq.com</a></li>\n</ul>\n</blockquote>\n"},{"title":"分类","date":"2016-09-24T06:10:59.000Z","type":"categories","comments":0,"_content":"\n","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2016-09-24 14:10:59\ntype: \"categories\"\ncomments: false\n---\n\n","updated":"2020-03-23T11:05:23.948Z","path":"categories/index.html","layout":"page","_id":"ckgbydgmx0003ofo9rx8q9o0e","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2016-09-24T16:47:48.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-09-25 00:47:48\ntype: \"tags\"\ncomments: false\n---\n","updated":"2020-03-23T11:05:23.956Z","path":"tags/index.html","layout":"page","_id":"ckgbydgn20007ofo9gw6vcesf","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Django","date":"2017-04-13T12:50:33.000Z","_content":"\n# Django 学习\n练习项目：[python django mysql 个人博客](https://github.com/caicaibrid/django_blog_test)\n## django 基本命令\n\n> 1.新建一个django project\n    django-admin.py startproject project-name //project-name项目名称\n\n>2.新建app (模块)\n   python manage.py startapp app-name //一般一个项目有多个app, 当然通用的app也可以在多个项目中使用。\n\n把 app-name 加入到 settings.INSTALLED_APPS中\ndjango就会默认去寻找该模块下面的templates文件夹，可以通过render(request,'templates里的html')直接返回\n\n## django 模板\n\n```\nfrom django.shortcuts import render //返回模板render()\n{% block title%} {% endblock %}\n\n{% extends 'base.html'%}\n\n{% include \"header.html\" %}\n\n{% url \"add2\" 4 5 %} //add2 为路由指定的name 4 5 为参数\n\n模板上得到视图的网址 {% url 'add2' 4 5 %}\n<br>\n获取当前的地址 {{ request.path }}\n<br>\n获取当前的GET参数 {{ request.GET.urlencode }}\n<br>\n获取当前的用户 {{ request.user }}\n\n```\n## django models\n\n```\npython manage.py startapp modelStudy //创建一个模块modelStudy\n然后在该模块下面编辑models.py添加一个Peopele类\n\nclass People(models.Model):\n    name = models.CharField(max_length=30)\n    age = models.IntegerField()\n    def __unicode__(self):\n        return self.name\n\n同步一下数据库（我们使用默认的数据库 SQLite3，无需配置）\npython manage.py syncdb # 进入 manage.py 所在的那个文件夹下输入这个命令\n注意：Django 1.7 及以上的版本需要用以下命令\npython manage.py makemigrations\npython manage.py migrate\n\n上面命令Django生成了一系列的表，也生成了我们新建的modelStudy_people这个表\n\nDjango提供了丰富的API, 下面演示如何使用它。\n$ python manage.py shell\n>>> from people.models import Person\n>>> Person.objects.create(name=\"WeizhongTu\", age=24)\n<Person: Person object>\n\n新建一个对象的方法有以下几种：\n\n1.People.objects.create(name=name,age=age)\n2.p = People(name=\"WZ\", age=23)\n  p.save()\n3.p = People(name=\"TWZ\")\n  p.age = 23\n  p.save()\n4.People.objects.get_or_create(name=\"WZT\", age=23)\n\n这种方法是防止重复很好的方法，但是速度要相对慢些，返回一个元组，第一个为People对象，第二个为True或False, 新建时返回的是True, 已经存在时返回False.\n\n### 获取对象有以下方法：\n\nPerson.objects.all()\n\nPerson.objects.all()[:10] 切片操作，获取10个人，不支持负索引，切片可以节约内存\n\nPerson.objects.get(name=name)\n\nget是用来获取一个对象的，如果需要获取满足条件的一些人，就要用到filter\n\nPerson.objects.filter(name=\"abc\") # 等于Person.objects.filter(name__exact=\"abc\") 名称严格等于 \"abc\" 的人\n\nPerson.objects.filter(name__iexact=\"abc\") # 名称为 abc 但是不区分大小写，可以找到 ABC, Abc, aBC，这些都符合条件\n\nPerson.objects.filter(name__contains=\"abc\") # 名称中包含 \"abc\"的人\n\nPerson.objects.filter(name__icontains=\"abc\") #名称中包含 \"abc\"，且abc不区分大小写\n\nPerson.objects.filter(name__regex=\"^abc\") # 正则表达式查询\n\nPerson.objects.filter(name__iregex=\"^abc\")# 正则表达式不区分大小写\n\nfilter是找出满足条件的，当然也有排除符合某条件的\n\nPerson.objects.exclude(name__contains=\"WZ\") # 排除包含 WZ 的Person对象\n\nPerson.objects.filter(name__contains=\"abc\").exclude(age=23) # 找出名称含有abc, 但是排除年龄是23岁的\n```\n\n# django 模板过滤器\n\n```\n一、形式：小写：  {{ name | lower }}\n\n二、串联：先转义文本到HTML，再转换每行到 <p> 标签： {{ my_text|escape|linebreaks }}\n\n三、过滤器的参数\n\n显示前30个字：{{ bio | truncatewords:\"30\" }}\n\n格式化：{{ pub_date | date:\"F j, Y\" }}\n\n过滤器列表：{{ 123|add:\"5\" }} 给value加上一个数值\n\n{{ \"AB'CD\"|addslashes }}： 单引号加上转义号，一般用于输出到javascript中\n\n{{ \"abcd\"|capfirst }}： 第一个字母大写\n\n{{ \"abcd\"|center:\"50\" }}： 输出指定长度的字符串，并把值对中\n\n{{ \"123spam456spam789\"|cut:\"spam\" }}： 查找删除指定字符串\n\n{{ value|date:\"F j, Y\" }}： 格式化日期\n\n{{ value|default:\"(N/A)\" }}： 值不存在，使用指定值\n\n{{ value|default_if_none:\"(N/A)\" }}： 值是None，使用指定值\n\n{{ 列表变量|dictsort:\"数字\" }} ：排序从小到大\n\n{{ 列表变量|dictsortreversed:\"数字\" }} ：排序从大到小\n\n{% if 92|divisibleby:\"2\" %} ：判断是否整除指定数字\n\n{{ string|escape }} ：转换为html实体\n\n{{ 21984124|filesizeformat }} ：以1024为基数，计算最大值，保留1位小数，增加可读性\n\n{{ list|first }} ：返回列表第一个元素\n\n{{ \"ik23hr&jqwh\"|fix_ampersands }}： &转为&amp;\n\n{{ 13.414121241|floatformat }} ：保留1位小数，可为负数，几种形式\n\n{{ 13.414121241|floatformat:\"2\" }}： 保留2位小数\n\n{{ 23456 |get_digit:\"1\" }} ：从个位数开始截取指定位置的1个数字\n\n{{ list|join:\", \" }} ：用指定分隔符连接列表\n\n{{ list|length }} ：返回列表个数\n\n{% if 列表|length_is:\"3\" %} ：列表个数是否指定数值\n\n{{ \"ABCD\"|linebreaks }}： 用新行用<p> 、 <br /> 标记包裹\n\n{{ \"ABCD\"|linebreaksbr }}： 用新行用<br /> 标记包裹\n\n{{ 变量|linenumbers }}： 为变量中每一行加上行号\n\n{{ \"abcd\"|ljust:\"50\" }}： 把字符串在指定宽度中对左，其它用空格填充\n\n{{ \"ABCD\"|lower }}： 小写\n\n{% for i in \"1abc1\"|make_list %}ABCDE,{% endfor %}： 把字符串或数字的字符个数作为一个列表\n\n{{ \"abcdefghijklmnopqrstuvwxyz\"|phone2numeric }}： 把字符转为可以对应的数字？？\n\n{{ 列表或数字|pluralize }}： 单词的复数形式，如列表字符串个数大于1，返回s，否则返回空串\n\n{{ 列表或数字|pluralize:\"es\" }}： 指定es\n\n{{ 列表或数字|pluralize:\"y,ies\" }}： 指定ies替换为y\n\n{{ object|pprint }}： 显示一个对象的值\n\n{{ 列表|random }}： 返回列表的随机一项\n\n{{ string|removetags:\"br p div\" }}： 删除字符串中指定html标记\n\n{{ string|rjust:\"50\" }}： 把字符串在指定宽度中对右，其它用空格填充\n\n{{ 列表|slice:\":2\" }}： 切片\n\n{{ string|slugify }}： 字符串中留下减号和下划线，其它符号删除，空格用减号替换\n\n{{ 3|stringformat:\"02i\" }}： 字符串格式，使用Python的字符串格式语法\n\n{{ \"E<A>A</A>B<C>C</C>D\"|striptags }}： 剥去[X]HTML语法标记\n\n{{ 时间变量|time:\"P\" }}： 日期的时间部分格式\n\n{{ datetime|timesince }}： 给定日期到现在过去了多少时间\n\n{{ datetime|timesince:\"other_datetime\" }}： 两日期间过去了多少时间\n\n{{ datetime|timeuntil }}： 给定日期到现在过去了多少时间，与上面的区别在于2日期的前后位置。\n\n{{ datetime|timeuntil:\"other_datetime\" }}： 两日期间过去了多少时间\n\n{{ \"abdsadf\"|title }}： 首字母大写\n\n{{ \"A B C D E F\"|truncatewords:\"3\" }}： 截取指定个数的单词\n\n{{ \"<a>1<a>1<a>1</a></a></a>22<a>1</a>\"|truncatewords_html:\"2\" }}： 截取指定个数的html标记，并补完整\n\n{{ list|unordered_list }}：//ul 多重嵌套列表展现为html的无序列表\n\n{{ string|upper }} ：全部大写\n\n<a href=\"{{ link|urlencode }}\">linkage</a>： url编码\n\n{{ string|urlize }}： 将URLs由纯文本变为可点击的链接。（没有实验成功）\n\n{{ string|urlizetrunc:\"30\" }}： 同上，多个截取字符数。（同样没有实验成功）\n\n{{ \"B C D E F\"|wordcount }}： 单词数\n\n{{ \"a b c d e f g h i j k\"|wordwrap:\"5\" }}： 每指定数量的字符就插入回车符\n\n{{ boolean|yesno:\"Yes,No,Perhaps\" }}： 对三种值的返回字符串，对应是 非空,空,None\n\n加法\n{{value|add:10}}\nnote:value=5,则结果返回15\n\n减法\n{{value|add:-10}}\nnote:value=5,则结果返回-5，加一个负数就是减法了\n\n乘法\n{% widthratio 5 1 100%}\nnote:等同于：(5 / 1) * 100 ，结果返回500，withratio需要三个参数，它会使用参数1/参数2*参数3的方式进行运算，进行乘法运算，使「参数2」=1\n\n除法\n{% widthratio 5 100 1%}\nnote:等同于：(5 / 100) * 1,则结果返回0.05,和乘法一样，使「参数3」= 1就是除法了。\n\n### 关闭自动转义\n{% autoescape off %}\n    {{ ele.content |truncatewords_html:\"2\" }}\n{% endautoescape %}\n```","source":"_posts/Django.md","raw":"---\ntitle: Django\ndate: 2017-04-13 20:50:33\ncategories: Python\ntags:\n     - Django\n---\n\n# Django 学习\n练习项目：[python django mysql 个人博客](https://github.com/caicaibrid/django_blog_test)\n## django 基本命令\n\n> 1.新建一个django project\n    django-admin.py startproject project-name //project-name项目名称\n\n>2.新建app (模块)\n   python manage.py startapp app-name //一般一个项目有多个app, 当然通用的app也可以在多个项目中使用。\n\n把 app-name 加入到 settings.INSTALLED_APPS中\ndjango就会默认去寻找该模块下面的templates文件夹，可以通过render(request,'templates里的html')直接返回\n\n## django 模板\n\n```\nfrom django.shortcuts import render //返回模板render()\n{% block title%} {% endblock %}\n\n{% extends 'base.html'%}\n\n{% include \"header.html\" %}\n\n{% url \"add2\" 4 5 %} //add2 为路由指定的name 4 5 为参数\n\n模板上得到视图的网址 {% url 'add2' 4 5 %}\n<br>\n获取当前的地址 {{ request.path }}\n<br>\n获取当前的GET参数 {{ request.GET.urlencode }}\n<br>\n获取当前的用户 {{ request.user }}\n\n```\n## django models\n\n```\npython manage.py startapp modelStudy //创建一个模块modelStudy\n然后在该模块下面编辑models.py添加一个Peopele类\n\nclass People(models.Model):\n    name = models.CharField(max_length=30)\n    age = models.IntegerField()\n    def __unicode__(self):\n        return self.name\n\n同步一下数据库（我们使用默认的数据库 SQLite3，无需配置）\npython manage.py syncdb # 进入 manage.py 所在的那个文件夹下输入这个命令\n注意：Django 1.7 及以上的版本需要用以下命令\npython manage.py makemigrations\npython manage.py migrate\n\n上面命令Django生成了一系列的表，也生成了我们新建的modelStudy_people这个表\n\nDjango提供了丰富的API, 下面演示如何使用它。\n$ python manage.py shell\n>>> from people.models import Person\n>>> Person.objects.create(name=\"WeizhongTu\", age=24)\n<Person: Person object>\n\n新建一个对象的方法有以下几种：\n\n1.People.objects.create(name=name,age=age)\n2.p = People(name=\"WZ\", age=23)\n  p.save()\n3.p = People(name=\"TWZ\")\n  p.age = 23\n  p.save()\n4.People.objects.get_or_create(name=\"WZT\", age=23)\n\n这种方法是防止重复很好的方法，但是速度要相对慢些，返回一个元组，第一个为People对象，第二个为True或False, 新建时返回的是True, 已经存在时返回False.\n\n### 获取对象有以下方法：\n\nPerson.objects.all()\n\nPerson.objects.all()[:10] 切片操作，获取10个人，不支持负索引，切片可以节约内存\n\nPerson.objects.get(name=name)\n\nget是用来获取一个对象的，如果需要获取满足条件的一些人，就要用到filter\n\nPerson.objects.filter(name=\"abc\") # 等于Person.objects.filter(name__exact=\"abc\") 名称严格等于 \"abc\" 的人\n\nPerson.objects.filter(name__iexact=\"abc\") # 名称为 abc 但是不区分大小写，可以找到 ABC, Abc, aBC，这些都符合条件\n\nPerson.objects.filter(name__contains=\"abc\") # 名称中包含 \"abc\"的人\n\nPerson.objects.filter(name__icontains=\"abc\") #名称中包含 \"abc\"，且abc不区分大小写\n\nPerson.objects.filter(name__regex=\"^abc\") # 正则表达式查询\n\nPerson.objects.filter(name__iregex=\"^abc\")# 正则表达式不区分大小写\n\nfilter是找出满足条件的，当然也有排除符合某条件的\n\nPerson.objects.exclude(name__contains=\"WZ\") # 排除包含 WZ 的Person对象\n\nPerson.objects.filter(name__contains=\"abc\").exclude(age=23) # 找出名称含有abc, 但是排除年龄是23岁的\n```\n\n# django 模板过滤器\n\n```\n一、形式：小写：  {{ name | lower }}\n\n二、串联：先转义文本到HTML，再转换每行到 <p> 标签： {{ my_text|escape|linebreaks }}\n\n三、过滤器的参数\n\n显示前30个字：{{ bio | truncatewords:\"30\" }}\n\n格式化：{{ pub_date | date:\"F j, Y\" }}\n\n过滤器列表：{{ 123|add:\"5\" }} 给value加上一个数值\n\n{{ \"AB'CD\"|addslashes }}： 单引号加上转义号，一般用于输出到javascript中\n\n{{ \"abcd\"|capfirst }}： 第一个字母大写\n\n{{ \"abcd\"|center:\"50\" }}： 输出指定长度的字符串，并把值对中\n\n{{ \"123spam456spam789\"|cut:\"spam\" }}： 查找删除指定字符串\n\n{{ value|date:\"F j, Y\" }}： 格式化日期\n\n{{ value|default:\"(N/A)\" }}： 值不存在，使用指定值\n\n{{ value|default_if_none:\"(N/A)\" }}： 值是None，使用指定值\n\n{{ 列表变量|dictsort:\"数字\" }} ：排序从小到大\n\n{{ 列表变量|dictsortreversed:\"数字\" }} ：排序从大到小\n\n{% if 92|divisibleby:\"2\" %} ：判断是否整除指定数字\n\n{{ string|escape }} ：转换为html实体\n\n{{ 21984124|filesizeformat }} ：以1024为基数，计算最大值，保留1位小数，增加可读性\n\n{{ list|first }} ：返回列表第一个元素\n\n{{ \"ik23hr&jqwh\"|fix_ampersands }}： &转为&amp;\n\n{{ 13.414121241|floatformat }} ：保留1位小数，可为负数，几种形式\n\n{{ 13.414121241|floatformat:\"2\" }}： 保留2位小数\n\n{{ 23456 |get_digit:\"1\" }} ：从个位数开始截取指定位置的1个数字\n\n{{ list|join:\", \" }} ：用指定分隔符连接列表\n\n{{ list|length }} ：返回列表个数\n\n{% if 列表|length_is:\"3\" %} ：列表个数是否指定数值\n\n{{ \"ABCD\"|linebreaks }}： 用新行用<p> 、 <br /> 标记包裹\n\n{{ \"ABCD\"|linebreaksbr }}： 用新行用<br /> 标记包裹\n\n{{ 变量|linenumbers }}： 为变量中每一行加上行号\n\n{{ \"abcd\"|ljust:\"50\" }}： 把字符串在指定宽度中对左，其它用空格填充\n\n{{ \"ABCD\"|lower }}： 小写\n\n{% for i in \"1abc1\"|make_list %}ABCDE,{% endfor %}： 把字符串或数字的字符个数作为一个列表\n\n{{ \"abcdefghijklmnopqrstuvwxyz\"|phone2numeric }}： 把字符转为可以对应的数字？？\n\n{{ 列表或数字|pluralize }}： 单词的复数形式，如列表字符串个数大于1，返回s，否则返回空串\n\n{{ 列表或数字|pluralize:\"es\" }}： 指定es\n\n{{ 列表或数字|pluralize:\"y,ies\" }}： 指定ies替换为y\n\n{{ object|pprint }}： 显示一个对象的值\n\n{{ 列表|random }}： 返回列表的随机一项\n\n{{ string|removetags:\"br p div\" }}： 删除字符串中指定html标记\n\n{{ string|rjust:\"50\" }}： 把字符串在指定宽度中对右，其它用空格填充\n\n{{ 列表|slice:\":2\" }}： 切片\n\n{{ string|slugify }}： 字符串中留下减号和下划线，其它符号删除，空格用减号替换\n\n{{ 3|stringformat:\"02i\" }}： 字符串格式，使用Python的字符串格式语法\n\n{{ \"E<A>A</A>B<C>C</C>D\"|striptags }}： 剥去[X]HTML语法标记\n\n{{ 时间变量|time:\"P\" }}： 日期的时间部分格式\n\n{{ datetime|timesince }}： 给定日期到现在过去了多少时间\n\n{{ datetime|timesince:\"other_datetime\" }}： 两日期间过去了多少时间\n\n{{ datetime|timeuntil }}： 给定日期到现在过去了多少时间，与上面的区别在于2日期的前后位置。\n\n{{ datetime|timeuntil:\"other_datetime\" }}： 两日期间过去了多少时间\n\n{{ \"abdsadf\"|title }}： 首字母大写\n\n{{ \"A B C D E F\"|truncatewords:\"3\" }}： 截取指定个数的单词\n\n{{ \"<a>1<a>1<a>1</a></a></a>22<a>1</a>\"|truncatewords_html:\"2\" }}： 截取指定个数的html标记，并补完整\n\n{{ list|unordered_list }}：//ul 多重嵌套列表展现为html的无序列表\n\n{{ string|upper }} ：全部大写\n\n<a href=\"{{ link|urlencode }}\">linkage</a>： url编码\n\n{{ string|urlize }}： 将URLs由纯文本变为可点击的链接。（没有实验成功）\n\n{{ string|urlizetrunc:\"30\" }}： 同上，多个截取字符数。（同样没有实验成功）\n\n{{ \"B C D E F\"|wordcount }}： 单词数\n\n{{ \"a b c d e f g h i j k\"|wordwrap:\"5\" }}： 每指定数量的字符就插入回车符\n\n{{ boolean|yesno:\"Yes,No,Perhaps\" }}： 对三种值的返回字符串，对应是 非空,空,None\n\n加法\n{{value|add:10}}\nnote:value=5,则结果返回15\n\n减法\n{{value|add:-10}}\nnote:value=5,则结果返回-5，加一个负数就是减法了\n\n乘法\n{% widthratio 5 1 100%}\nnote:等同于：(5 / 1) * 100 ，结果返回500，withratio需要三个参数，它会使用参数1/参数2*参数3的方式进行运算，进行乘法运算，使「参数2」=1\n\n除法\n{% widthratio 5 100 1%}\nnote:等同于：(5 / 100) * 1,则结果返回0.05,和乘法一样，使「参数3」= 1就是除法了。\n\n### 关闭自动转义\n{% autoescape off %}\n    {{ ele.content |truncatewords_html:\"2\" }}\n{% endautoescape %}\n```","slug":"Django","published":1,"updated":"2020-03-23T11:05:23.940Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgbydgmr0000ofo9xnos41z8","content":"<h1 id=\"Django-学习\"><a href=\"#Django-学习\" class=\"headerlink\" title=\"Django 学习\"></a>Django 学习</h1><p>练习项目：<a href=\"https://github.com/caicaibrid/django_blog_test\" target=\"_blank\" rel=\"noopener\">python django mysql 个人博客</a></p>\n<h2 id=\"django-基本命令\"><a href=\"#django-基本命令\" class=\"headerlink\" title=\"django 基本命令\"></a>django 基本命令</h2><blockquote>\n<p>1.新建一个django project<br>    django-admin.py startproject project-name //project-name项目名称</p>\n</blockquote>\n<blockquote>\n<p>2.新建app (模块)<br>   python manage.py startapp app-name //一般一个项目有多个app, 当然通用的app也可以在多个项目中使用。</p>\n</blockquote>\n<p>把 app-name 加入到 settings.INSTALLED_APPS中<br>django就会默认去寻找该模块下面的templates文件夹，可以通过render(request,’templates里的html’)直接返回</p>\n<h2 id=\"django-模板\"><a href=\"#django-模板\" class=\"headerlink\" title=\"django 模板\"></a>django 模板</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.shortcuts import render //返回模板render()</span><br><span class=\"line\">&#123;% block title%&#125; &#123;% endblock %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% extends &apos;base.html&apos;%&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% include &quot;header.html&quot; %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% url &quot;add2&quot; 4 5 %&#125; //add2 为路由指定的name 4 5 为参数</span><br><span class=\"line\"></span><br><span class=\"line\">模板上得到视图的网址 &#123;% url &apos;add2&apos; 4 5 %&#125;</span><br><span class=\"line\">&lt;br&gt;</span><br><span class=\"line\">获取当前的地址 &#123;&#123; request.path &#125;&#125;</span><br><span class=\"line\">&lt;br&gt;</span><br><span class=\"line\">获取当前的GET参数 &#123;&#123; request.GET.urlencode &#125;&#125;</span><br><span class=\"line\">&lt;br&gt;</span><br><span class=\"line\">获取当前的用户 &#123;&#123; request.user &#125;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"django-models\"><a href=\"#django-models\" class=\"headerlink\" title=\"django models\"></a>django models</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py startapp modelStudy //创建一个模块modelStudy</span><br><span class=\"line\">然后在该模块下面编辑models.py添加一个Peopele类</span><br><span class=\"line\"></span><br><span class=\"line\">class People(models.Model):</span><br><span class=\"line\">    name = models.CharField(max_length=30)</span><br><span class=\"line\">    age = models.IntegerField()</span><br><span class=\"line\">    def __unicode__(self):</span><br><span class=\"line\">        return self.name</span><br><span class=\"line\"></span><br><span class=\"line\">同步一下数据库（我们使用默认的数据库 SQLite3，无需配置）</span><br><span class=\"line\">python manage.py syncdb # 进入 manage.py 所在的那个文件夹下输入这个命令</span><br><span class=\"line\">注意：Django 1.7 及以上的版本需要用以下命令</span><br><span class=\"line\">python manage.py makemigrations</span><br><span class=\"line\">python manage.py migrate</span><br><span class=\"line\"></span><br><span class=\"line\">上面命令Django生成了一系列的表，也生成了我们新建的modelStudy_people这个表</span><br><span class=\"line\"></span><br><span class=\"line\">Django提供了丰富的API, 下面演示如何使用它。</span><br><span class=\"line\">$ python manage.py shell</span><br><span class=\"line\">&gt;&gt;&gt; from people.models import Person</span><br><span class=\"line\">&gt;&gt;&gt; Person.objects.create(name=&quot;WeizhongTu&quot;, age=24)</span><br><span class=\"line\">&lt;Person: Person object&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">新建一个对象的方法有以下几种：</span><br><span class=\"line\"></span><br><span class=\"line\">1.People.objects.create(name=name,age=age)</span><br><span class=\"line\">2.p = People(name=&quot;WZ&quot;, age=23)</span><br><span class=\"line\">  p.save()</span><br><span class=\"line\">3.p = People(name=&quot;TWZ&quot;)</span><br><span class=\"line\">  p.age = 23</span><br><span class=\"line\">  p.save()</span><br><span class=\"line\">4.People.objects.get_or_create(name=&quot;WZT&quot;, age=23)</span><br><span class=\"line\"></span><br><span class=\"line\">这种方法是防止重复很好的方法，但是速度要相对慢些，返回一个元组，第一个为People对象，第二个为True或False, 新建时返回的是True, 已经存在时返回False.</span><br><span class=\"line\"></span><br><span class=\"line\">### 获取对象有以下方法：</span><br><span class=\"line\"></span><br><span class=\"line\">Person.objects.all()</span><br><span class=\"line\"></span><br><span class=\"line\">Person.objects.all()[:10] 切片操作，获取10个人，不支持负索引，切片可以节约内存</span><br><span class=\"line\"></span><br><span class=\"line\">Person.objects.get(name=name)</span><br><span class=\"line\"></span><br><span class=\"line\">get是用来获取一个对象的，如果需要获取满足条件的一些人，就要用到filter</span><br><span class=\"line\"></span><br><span class=\"line\">Person.objects.filter(name=&quot;abc&quot;) # 等于Person.objects.filter(name__exact=&quot;abc&quot;) 名称严格等于 &quot;abc&quot; 的人</span><br><span class=\"line\"></span><br><span class=\"line\">Person.objects.filter(name__iexact=&quot;abc&quot;) # 名称为 abc 但是不区分大小写，可以找到 ABC, Abc, aBC，这些都符合条件</span><br><span class=\"line\"></span><br><span class=\"line\">Person.objects.filter(name__contains=&quot;abc&quot;) # 名称中包含 &quot;abc&quot;的人</span><br><span class=\"line\"></span><br><span class=\"line\">Person.objects.filter(name__icontains=&quot;abc&quot;) #名称中包含 &quot;abc&quot;，且abc不区分大小写</span><br><span class=\"line\"></span><br><span class=\"line\">Person.objects.filter(name__regex=&quot;^abc&quot;) # 正则表达式查询</span><br><span class=\"line\"></span><br><span class=\"line\">Person.objects.filter(name__iregex=&quot;^abc&quot;)# 正则表达式不区分大小写</span><br><span class=\"line\"></span><br><span class=\"line\">filter是找出满足条件的，当然也有排除符合某条件的</span><br><span class=\"line\"></span><br><span class=\"line\">Person.objects.exclude(name__contains=&quot;WZ&quot;) # 排除包含 WZ 的Person对象</span><br><span class=\"line\"></span><br><span class=\"line\">Person.objects.filter(name__contains=&quot;abc&quot;).exclude(age=23) # 找出名称含有abc, 但是排除年龄是23岁的</span><br></pre></td></tr></table></figure>\n<h1 id=\"django-模板过滤器\"><a href=\"#django-模板过滤器\" class=\"headerlink\" title=\"django 模板过滤器\"></a>django 模板过滤器</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一、形式：小写：  &#123;&#123; name | lower &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">二、串联：先转义文本到HTML，再转换每行到 &lt;p&gt; 标签： &#123;&#123; my_text|escape|linebreaks &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">三、过滤器的参数</span><br><span class=\"line\"></span><br><span class=\"line\">显示前30个字：&#123;&#123; bio | truncatewords:&quot;30&quot; &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">格式化：&#123;&#123; pub_date | date:&quot;F j, Y&quot; &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">过滤器列表：&#123;&#123; 123|add:&quot;5&quot; &#125;&#125; 给value加上一个数值</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; &quot;AB&apos;CD&quot;|addslashes &#125;&#125;： 单引号加上转义号，一般用于输出到javascript中</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; &quot;abcd&quot;|capfirst &#125;&#125;： 第一个字母大写</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; &quot;abcd&quot;|center:&quot;50&quot; &#125;&#125;： 输出指定长度的字符串，并把值对中</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; &quot;123spam456spam789&quot;|cut:&quot;spam&quot; &#125;&#125;： 查找删除指定字符串</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; value|date:&quot;F j, Y&quot; &#125;&#125;： 格式化日期</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; value|default:&quot;(N/A)&quot; &#125;&#125;： 值不存在，使用指定值</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; value|default_if_none:&quot;(N/A)&quot; &#125;&#125;： 值是None，使用指定值</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; 列表变量|dictsort:&quot;数字&quot; &#125;&#125; ：排序从小到大</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; 列表变量|dictsortreversed:&quot;数字&quot; &#125;&#125; ：排序从大到小</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% if 92|divisibleby:&quot;2&quot; %&#125; ：判断是否整除指定数字</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; string|escape &#125;&#125; ：转换为html实体</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; 21984124|filesizeformat &#125;&#125; ：以1024为基数，计算最大值，保留1位小数，增加可读性</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; list|first &#125;&#125; ：返回列表第一个元素</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; &quot;ik23hr&amp;jqwh&quot;|fix_ampersands &#125;&#125;： &amp;转为&amp;amp;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; 13.414121241|floatformat &#125;&#125; ：保留1位小数，可为负数，几种形式</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; 13.414121241|floatformat:&quot;2&quot; &#125;&#125;： 保留2位小数</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; 23456 |get_digit:&quot;1&quot; &#125;&#125; ：从个位数开始截取指定位置的1个数字</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; list|join:&quot;, &quot; &#125;&#125; ：用指定分隔符连接列表</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; list|length &#125;&#125; ：返回列表个数</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% if 列表|length_is:&quot;3&quot; %&#125; ：列表个数是否指定数值</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; &quot;ABCD&quot;|linebreaks &#125;&#125;： 用新行用&lt;p&gt; 、 &lt;br /&gt; 标记包裹</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; &quot;ABCD&quot;|linebreaksbr &#125;&#125;： 用新行用&lt;br /&gt; 标记包裹</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; 变量|linenumbers &#125;&#125;： 为变量中每一行加上行号</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; &quot;abcd&quot;|ljust:&quot;50&quot; &#125;&#125;： 把字符串在指定宽度中对左，其它用空格填充</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; &quot;ABCD&quot;|lower &#125;&#125;： 小写</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% for i in &quot;1abc1&quot;|make_list %&#125;ABCDE,&#123;% endfor %&#125;： 把字符串或数字的字符个数作为一个列表</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; &quot;abcdefghijklmnopqrstuvwxyz&quot;|phone2numeric &#125;&#125;： 把字符转为可以对应的数字？？</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; 列表或数字|pluralize &#125;&#125;： 单词的复数形式，如列表字符串个数大于1，返回s，否则返回空串</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; 列表或数字|pluralize:&quot;es&quot; &#125;&#125;： 指定es</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; 列表或数字|pluralize:&quot;y,ies&quot; &#125;&#125;： 指定ies替换为y</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; object|pprint &#125;&#125;： 显示一个对象的值</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; 列表|random &#125;&#125;： 返回列表的随机一项</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; string|removetags:&quot;br p div&quot; &#125;&#125;： 删除字符串中指定html标记</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; string|rjust:&quot;50&quot; &#125;&#125;： 把字符串在指定宽度中对右，其它用空格填充</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; 列表|slice:&quot;:2&quot; &#125;&#125;： 切片</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; string|slugify &#125;&#125;： 字符串中留下减号和下划线，其它符号删除，空格用减号替换</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; 3|stringformat:&quot;02i&quot; &#125;&#125;： 字符串格式，使用Python的字符串格式语法</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; &quot;E&lt;A&gt;A&lt;/A&gt;B&lt;C&gt;C&lt;/C&gt;D&quot;|striptags &#125;&#125;： 剥去[X]HTML语法标记</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; 时间变量|time:&quot;P&quot; &#125;&#125;： 日期的时间部分格式</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; datetime|timesince &#125;&#125;： 给定日期到现在过去了多少时间</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; datetime|timesince:&quot;other_datetime&quot; &#125;&#125;： 两日期间过去了多少时间</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; datetime|timeuntil &#125;&#125;： 给定日期到现在过去了多少时间，与上面的区别在于2日期的前后位置。</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; datetime|timeuntil:&quot;other_datetime&quot; &#125;&#125;： 两日期间过去了多少时间</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; &quot;abdsadf&quot;|title &#125;&#125;： 首字母大写</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; &quot;A B C D E F&quot;|truncatewords:&quot;3&quot; &#125;&#125;： 截取指定个数的单词</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; &quot;&lt;a&gt;1&lt;a&gt;1&lt;a&gt;1&lt;/a&gt;&lt;/a&gt;&lt;/a&gt;22&lt;a&gt;1&lt;/a&gt;&quot;|truncatewords_html:&quot;2&quot; &#125;&#125;： 截取指定个数的html标记，并补完整</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; list|unordered_list &#125;&#125;：//ul 多重嵌套列表展现为html的无序列表</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; string|upper &#125;&#125; ：全部大写</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;a href=&quot;&#123;&#123; link|urlencode &#125;&#125;&quot;&gt;linkage&lt;/a&gt;： url编码</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; string|urlize &#125;&#125;： 将URLs由纯文本变为可点击的链接。（没有实验成功）</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; string|urlizetrunc:&quot;30&quot; &#125;&#125;： 同上，多个截取字符数。（同样没有实验成功）</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; &quot;B C D E F&quot;|wordcount &#125;&#125;： 单词数</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; &quot;a b c d e f g h i j k&quot;|wordwrap:&quot;5&quot; &#125;&#125;： 每指定数量的字符就插入回车符</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; boolean|yesno:&quot;Yes,No,Perhaps&quot; &#125;&#125;： 对三种值的返回字符串，对应是 非空,空,None</span><br><span class=\"line\"></span><br><span class=\"line\">加法</span><br><span class=\"line\">&#123;&#123;value|add:10&#125;&#125;</span><br><span class=\"line\">note:value=5,则结果返回15</span><br><span class=\"line\"></span><br><span class=\"line\">减法</span><br><span class=\"line\">&#123;&#123;value|add:-10&#125;&#125;</span><br><span class=\"line\">note:value=5,则结果返回-5，加一个负数就是减法了</span><br><span class=\"line\"></span><br><span class=\"line\">乘法</span><br><span class=\"line\">&#123;% widthratio 5 1 100%&#125;</span><br><span class=\"line\">note:等同于：(5 / 1) * 100 ，结果返回500，withratio需要三个参数，它会使用参数1/参数2*参数3的方式进行运算，进行乘法运算，使「参数2」=1</span><br><span class=\"line\"></span><br><span class=\"line\">除法</span><br><span class=\"line\">&#123;% widthratio 5 100 1%&#125;</span><br><span class=\"line\">note:等同于：(5 / 100) * 1,则结果返回0.05,和乘法一样，使「参数3」= 1就是除法了。</span><br><span class=\"line\"></span><br><span class=\"line\">### 关闭自动转义</span><br><span class=\"line\">&#123;% autoescape off %&#125;</span><br><span class=\"line\">    &#123;&#123; ele.content |truncatewords_html:&quot;2&quot; &#125;&#125;</span><br><span class=\"line\">&#123;% endautoescape %&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Django-学习\"><a href=\"#Django-学习\" class=\"headerlink\" title=\"Django 学习\"></a>Django 学习</h1><p>练习项目：<a href=\"https://github.com/caicaibrid/django_blog_test\" target=\"_blank\" rel=\"noopener\">python django mysql 个人博客</a></p>\n<h2 id=\"django-基本命令\"><a href=\"#django-基本命令\" class=\"headerlink\" title=\"django 基本命令\"></a>django 基本命令</h2><blockquote>\n<p>1.新建一个django project<br>    django-admin.py startproject project-name //project-name项目名称</p>\n</blockquote>\n<blockquote>\n<p>2.新建app (模块)<br>   python manage.py startapp app-name //一般一个项目有多个app, 当然通用的app也可以在多个项目中使用。</p>\n</blockquote>\n<p>把 app-name 加入到 settings.INSTALLED_APPS中<br>django就会默认去寻找该模块下面的templates文件夹，可以通过render(request,’templates里的html’)直接返回</p>\n<h2 id=\"django-模板\"><a href=\"#django-模板\" class=\"headerlink\" title=\"django 模板\"></a>django 模板</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.shortcuts import render //返回模板render()</span><br><span class=\"line\">&#123;% block title%&#125; &#123;% endblock %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% extends &apos;base.html&apos;%&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% include &quot;header.html&quot; %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% url &quot;add2&quot; 4 5 %&#125; //add2 为路由指定的name 4 5 为参数</span><br><span class=\"line\"></span><br><span class=\"line\">模板上得到视图的网址 &#123;% url &apos;add2&apos; 4 5 %&#125;</span><br><span class=\"line\">&lt;br&gt;</span><br><span class=\"line\">获取当前的地址 &#123;&#123; request.path &#125;&#125;</span><br><span class=\"line\">&lt;br&gt;</span><br><span class=\"line\">获取当前的GET参数 &#123;&#123; request.GET.urlencode &#125;&#125;</span><br><span class=\"line\">&lt;br&gt;</span><br><span class=\"line\">获取当前的用户 &#123;&#123; request.user &#125;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"django-models\"><a href=\"#django-models\" class=\"headerlink\" title=\"django models\"></a>django models</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py startapp modelStudy //创建一个模块modelStudy</span><br><span class=\"line\">然后在该模块下面编辑models.py添加一个Peopele类</span><br><span class=\"line\"></span><br><span class=\"line\">class People(models.Model):</span><br><span class=\"line\">    name = models.CharField(max_length=30)</span><br><span class=\"line\">    age = models.IntegerField()</span><br><span class=\"line\">    def __unicode__(self):</span><br><span class=\"line\">        return self.name</span><br><span class=\"line\"></span><br><span class=\"line\">同步一下数据库（我们使用默认的数据库 SQLite3，无需配置）</span><br><span class=\"line\">python manage.py syncdb # 进入 manage.py 所在的那个文件夹下输入这个命令</span><br><span class=\"line\">注意：Django 1.7 及以上的版本需要用以下命令</span><br><span class=\"line\">python manage.py makemigrations</span><br><span class=\"line\">python manage.py migrate</span><br><span class=\"line\"></span><br><span class=\"line\">上面命令Django生成了一系列的表，也生成了我们新建的modelStudy_people这个表</span><br><span class=\"line\"></span><br><span class=\"line\">Django提供了丰富的API, 下面演示如何使用它。</span><br><span class=\"line\">$ python manage.py shell</span><br><span class=\"line\">&gt;&gt;&gt; from people.models import Person</span><br><span class=\"line\">&gt;&gt;&gt; Person.objects.create(name=&quot;WeizhongTu&quot;, age=24)</span><br><span class=\"line\">&lt;Person: Person object&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">新建一个对象的方法有以下几种：</span><br><span class=\"line\"></span><br><span class=\"line\">1.People.objects.create(name=name,age=age)</span><br><span class=\"line\">2.p = People(name=&quot;WZ&quot;, age=23)</span><br><span class=\"line\">  p.save()</span><br><span class=\"line\">3.p = People(name=&quot;TWZ&quot;)</span><br><span class=\"line\">  p.age = 23</span><br><span class=\"line\">  p.save()</span><br><span class=\"line\">4.People.objects.get_or_create(name=&quot;WZT&quot;, age=23)</span><br><span class=\"line\"></span><br><span class=\"line\">这种方法是防止重复很好的方法，但是速度要相对慢些，返回一个元组，第一个为People对象，第二个为True或False, 新建时返回的是True, 已经存在时返回False.</span><br><span class=\"line\"></span><br><span class=\"line\">### 获取对象有以下方法：</span><br><span class=\"line\"></span><br><span class=\"line\">Person.objects.all()</span><br><span class=\"line\"></span><br><span class=\"line\">Person.objects.all()[:10] 切片操作，获取10个人，不支持负索引，切片可以节约内存</span><br><span class=\"line\"></span><br><span class=\"line\">Person.objects.get(name=name)</span><br><span class=\"line\"></span><br><span class=\"line\">get是用来获取一个对象的，如果需要获取满足条件的一些人，就要用到filter</span><br><span class=\"line\"></span><br><span class=\"line\">Person.objects.filter(name=&quot;abc&quot;) # 等于Person.objects.filter(name__exact=&quot;abc&quot;) 名称严格等于 &quot;abc&quot; 的人</span><br><span class=\"line\"></span><br><span class=\"line\">Person.objects.filter(name__iexact=&quot;abc&quot;) # 名称为 abc 但是不区分大小写，可以找到 ABC, Abc, aBC，这些都符合条件</span><br><span class=\"line\"></span><br><span class=\"line\">Person.objects.filter(name__contains=&quot;abc&quot;) # 名称中包含 &quot;abc&quot;的人</span><br><span class=\"line\"></span><br><span class=\"line\">Person.objects.filter(name__icontains=&quot;abc&quot;) #名称中包含 &quot;abc&quot;，且abc不区分大小写</span><br><span class=\"line\"></span><br><span class=\"line\">Person.objects.filter(name__regex=&quot;^abc&quot;) # 正则表达式查询</span><br><span class=\"line\"></span><br><span class=\"line\">Person.objects.filter(name__iregex=&quot;^abc&quot;)# 正则表达式不区分大小写</span><br><span class=\"line\"></span><br><span class=\"line\">filter是找出满足条件的，当然也有排除符合某条件的</span><br><span class=\"line\"></span><br><span class=\"line\">Person.objects.exclude(name__contains=&quot;WZ&quot;) # 排除包含 WZ 的Person对象</span><br><span class=\"line\"></span><br><span class=\"line\">Person.objects.filter(name__contains=&quot;abc&quot;).exclude(age=23) # 找出名称含有abc, 但是排除年龄是23岁的</span><br></pre></td></tr></table></figure>\n<h1 id=\"django-模板过滤器\"><a href=\"#django-模板过滤器\" class=\"headerlink\" title=\"django 模板过滤器\"></a>django 模板过滤器</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一、形式：小写：  &#123;&#123; name | lower &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">二、串联：先转义文本到HTML，再转换每行到 &lt;p&gt; 标签： &#123;&#123; my_text|escape|linebreaks &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">三、过滤器的参数</span><br><span class=\"line\"></span><br><span class=\"line\">显示前30个字：&#123;&#123; bio | truncatewords:&quot;30&quot; &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">格式化：&#123;&#123; pub_date | date:&quot;F j, Y&quot; &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">过滤器列表：&#123;&#123; 123|add:&quot;5&quot; &#125;&#125; 给value加上一个数值</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; &quot;AB&apos;CD&quot;|addslashes &#125;&#125;： 单引号加上转义号，一般用于输出到javascript中</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; &quot;abcd&quot;|capfirst &#125;&#125;： 第一个字母大写</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; &quot;abcd&quot;|center:&quot;50&quot; &#125;&#125;： 输出指定长度的字符串，并把值对中</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; &quot;123spam456spam789&quot;|cut:&quot;spam&quot; &#125;&#125;： 查找删除指定字符串</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; value|date:&quot;F j, Y&quot; &#125;&#125;： 格式化日期</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; value|default:&quot;(N/A)&quot; &#125;&#125;： 值不存在，使用指定值</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; value|default_if_none:&quot;(N/A)&quot; &#125;&#125;： 值是None，使用指定值</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; 列表变量|dictsort:&quot;数字&quot; &#125;&#125; ：排序从小到大</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; 列表变量|dictsortreversed:&quot;数字&quot; &#125;&#125; ：排序从大到小</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% if 92|divisibleby:&quot;2&quot; %&#125; ：判断是否整除指定数字</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; string|escape &#125;&#125; ：转换为html实体</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; 21984124|filesizeformat &#125;&#125; ：以1024为基数，计算最大值，保留1位小数，增加可读性</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; list|first &#125;&#125; ：返回列表第一个元素</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; &quot;ik23hr&amp;jqwh&quot;|fix_ampersands &#125;&#125;： &amp;转为&amp;amp;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; 13.414121241|floatformat &#125;&#125; ：保留1位小数，可为负数，几种形式</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; 13.414121241|floatformat:&quot;2&quot; &#125;&#125;： 保留2位小数</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; 23456 |get_digit:&quot;1&quot; &#125;&#125; ：从个位数开始截取指定位置的1个数字</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; list|join:&quot;, &quot; &#125;&#125; ：用指定分隔符连接列表</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; list|length &#125;&#125; ：返回列表个数</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% if 列表|length_is:&quot;3&quot; %&#125; ：列表个数是否指定数值</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; &quot;ABCD&quot;|linebreaks &#125;&#125;： 用新行用&lt;p&gt; 、 &lt;br /&gt; 标记包裹</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; &quot;ABCD&quot;|linebreaksbr &#125;&#125;： 用新行用&lt;br /&gt; 标记包裹</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; 变量|linenumbers &#125;&#125;： 为变量中每一行加上行号</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; &quot;abcd&quot;|ljust:&quot;50&quot; &#125;&#125;： 把字符串在指定宽度中对左，其它用空格填充</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; &quot;ABCD&quot;|lower &#125;&#125;： 小写</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% for i in &quot;1abc1&quot;|make_list %&#125;ABCDE,&#123;% endfor %&#125;： 把字符串或数字的字符个数作为一个列表</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; &quot;abcdefghijklmnopqrstuvwxyz&quot;|phone2numeric &#125;&#125;： 把字符转为可以对应的数字？？</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; 列表或数字|pluralize &#125;&#125;： 单词的复数形式，如列表字符串个数大于1，返回s，否则返回空串</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; 列表或数字|pluralize:&quot;es&quot; &#125;&#125;： 指定es</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; 列表或数字|pluralize:&quot;y,ies&quot; &#125;&#125;： 指定ies替换为y</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; object|pprint &#125;&#125;： 显示一个对象的值</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; 列表|random &#125;&#125;： 返回列表的随机一项</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; string|removetags:&quot;br p div&quot; &#125;&#125;： 删除字符串中指定html标记</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; string|rjust:&quot;50&quot; &#125;&#125;： 把字符串在指定宽度中对右，其它用空格填充</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; 列表|slice:&quot;:2&quot; &#125;&#125;： 切片</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; string|slugify &#125;&#125;： 字符串中留下减号和下划线，其它符号删除，空格用减号替换</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; 3|stringformat:&quot;02i&quot; &#125;&#125;： 字符串格式，使用Python的字符串格式语法</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; &quot;E&lt;A&gt;A&lt;/A&gt;B&lt;C&gt;C&lt;/C&gt;D&quot;|striptags &#125;&#125;： 剥去[X]HTML语法标记</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; 时间变量|time:&quot;P&quot; &#125;&#125;： 日期的时间部分格式</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; datetime|timesince &#125;&#125;： 给定日期到现在过去了多少时间</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; datetime|timesince:&quot;other_datetime&quot; &#125;&#125;： 两日期间过去了多少时间</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; datetime|timeuntil &#125;&#125;： 给定日期到现在过去了多少时间，与上面的区别在于2日期的前后位置。</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; datetime|timeuntil:&quot;other_datetime&quot; &#125;&#125;： 两日期间过去了多少时间</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; &quot;abdsadf&quot;|title &#125;&#125;： 首字母大写</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; &quot;A B C D E F&quot;|truncatewords:&quot;3&quot; &#125;&#125;： 截取指定个数的单词</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; &quot;&lt;a&gt;1&lt;a&gt;1&lt;a&gt;1&lt;/a&gt;&lt;/a&gt;&lt;/a&gt;22&lt;a&gt;1&lt;/a&gt;&quot;|truncatewords_html:&quot;2&quot; &#125;&#125;： 截取指定个数的html标记，并补完整</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; list|unordered_list &#125;&#125;：//ul 多重嵌套列表展现为html的无序列表</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; string|upper &#125;&#125; ：全部大写</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;a href=&quot;&#123;&#123; link|urlencode &#125;&#125;&quot;&gt;linkage&lt;/a&gt;： url编码</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; string|urlize &#125;&#125;： 将URLs由纯文本变为可点击的链接。（没有实验成功）</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; string|urlizetrunc:&quot;30&quot; &#125;&#125;： 同上，多个截取字符数。（同样没有实验成功）</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; &quot;B C D E F&quot;|wordcount &#125;&#125;： 单词数</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; &quot;a b c d e f g h i j k&quot;|wordwrap:&quot;5&quot; &#125;&#125;： 每指定数量的字符就插入回车符</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; boolean|yesno:&quot;Yes,No,Perhaps&quot; &#125;&#125;： 对三种值的返回字符串，对应是 非空,空,None</span><br><span class=\"line\"></span><br><span class=\"line\">加法</span><br><span class=\"line\">&#123;&#123;value|add:10&#125;&#125;</span><br><span class=\"line\">note:value=5,则结果返回15</span><br><span class=\"line\"></span><br><span class=\"line\">减法</span><br><span class=\"line\">&#123;&#123;value|add:-10&#125;&#125;</span><br><span class=\"line\">note:value=5,则结果返回-5，加一个负数就是减法了</span><br><span class=\"line\"></span><br><span class=\"line\">乘法</span><br><span class=\"line\">&#123;% widthratio 5 1 100%&#125;</span><br><span class=\"line\">note:等同于：(5 / 1) * 100 ，结果返回500，withratio需要三个参数，它会使用参数1/参数2*参数3的方式进行运算，进行乘法运算，使「参数2」=1</span><br><span class=\"line\"></span><br><span class=\"line\">除法</span><br><span class=\"line\">&#123;% widthratio 5 100 1%&#125;</span><br><span class=\"line\">note:等同于：(5 / 100) * 1,则结果返回0.05,和乘法一样，使「参数3」= 1就是除法了。</span><br><span class=\"line\"></span><br><span class=\"line\">### 关闭自动转义</span><br><span class=\"line\">&#123;% autoescape off %&#125;</span><br><span class=\"line\">    &#123;&#123; ele.content |truncatewords_html:&quot;2&quot; &#125;&#125;</span><br><span class=\"line\">&#123;% endautoescape %&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Jquery ready函数的实现","date":"2017-12-08T01:47:40.000Z","_content":"\n## ready和onload函数的区别\n\n- 运行时间\n\nonload函数必须等到页面里所有东西加载完,ready函数则为渲染完dom结构就会执行\n\n- 编写个数\n\nwindow.onload只能写一个(写多个的话,只会执行一个)$(document).ready()可以写多个 \n\n- 简化写法\n\nwindow.onload没有简写,$(document).ready()可以简写为$(function(){})\n\n## 怎样用javascript实现jquery的ready函数呢?\n\n标准浏览器可以监听DOMContentLoaded,ie浏览器可以监听onreadystatechange\n\n具体代码实现:\n\n```javascript 1.8\nfunction ready(callback) {\n  if(document.addEventListener){\n      document.addEventListener(\"DOMContentLoaded\",function() {\n        document.removeEventListener(\"DOMContentLoaded\",arguments.callee,false);\n        callback();\n      })\n  }else if(document.attanchEvent){\n       document.attanchEvent(\"onreadystatechange\",function() {\n         if(document.readyState === \"complete\"){\n             document.detanchEvent(\"DOMContentLoaded\",arguments.callee);\n             callback();\n         }\n       })\n  }\n}\n```","source":"_posts/Jquery-ready函数的实现.md","raw":"---\ntitle: Jquery ready函数的实现\ndate: 2017-12-08 09:47:40\ncategories: Javascript\ntags:\n     - Javascript\n---\n\n## ready和onload函数的区别\n\n- 运行时间\n\nonload函数必须等到页面里所有东西加载完,ready函数则为渲染完dom结构就会执行\n\n- 编写个数\n\nwindow.onload只能写一个(写多个的话,只会执行一个)$(document).ready()可以写多个 \n\n- 简化写法\n\nwindow.onload没有简写,$(document).ready()可以简写为$(function(){})\n\n## 怎样用javascript实现jquery的ready函数呢?\n\n标准浏览器可以监听DOMContentLoaded,ie浏览器可以监听onreadystatechange\n\n具体代码实现:\n\n```javascript 1.8\nfunction ready(callback) {\n  if(document.addEventListener){\n      document.addEventListener(\"DOMContentLoaded\",function() {\n        document.removeEventListener(\"DOMContentLoaded\",arguments.callee,false);\n        callback();\n      })\n  }else if(document.attanchEvent){\n       document.attanchEvent(\"onreadystatechange\",function() {\n         if(document.readyState === \"complete\"){\n             document.detanchEvent(\"DOMContentLoaded\",arguments.callee);\n             callback();\n         }\n       })\n  }\n}\n```","slug":"Jquery-ready函数的实现","published":1,"updated":"2020-03-23T11:05:23.940Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgbydgmw0002ofo9b3ql3opw","content":"<h2 id=\"ready和onload函数的区别\"><a href=\"#ready和onload函数的区别\" class=\"headerlink\" title=\"ready和onload函数的区别\"></a>ready和onload函数的区别</h2><ul>\n<li>运行时间</li>\n</ul>\n<p>onload函数必须等到页面里所有东西加载完,ready函数则为渲染完dom结构就会执行</p>\n<ul>\n<li>编写个数</li>\n</ul>\n<p>window.onload只能写一个(写多个的话,只会执行一个)$(document).ready()可以写多个 </p>\n<ul>\n<li>简化写法</li>\n</ul>\n<p>window.onload没有简写,$(document).ready()可以简写为$(function(){})</p>\n<h2 id=\"怎样用javascript实现jquery的ready函数呢\"><a href=\"#怎样用javascript实现jquery的ready函数呢\" class=\"headerlink\" title=\"怎样用javascript实现jquery的ready函数呢?\"></a>怎样用javascript实现jquery的ready函数呢?</h2><p>标准浏览器可以监听DOMContentLoaded,ie浏览器可以监听onreadystatechange</p>\n<p>具体代码实现:</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ready</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.addEventListener)&#123;</span><br><span class=\"line\">      <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"DOMContentLoaded\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.removeEventListener(<span class=\"string\">\"DOMContentLoaded\"</span>,<span class=\"built_in\">arguments</span>.callee,<span class=\"literal\">false</span>);</span><br><span class=\"line\">        callback();</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.attanchEvent)&#123;</span><br><span class=\"line\">       <span class=\"built_in\">document</span>.attanchEvent(<span class=\"string\">\"onreadystatechange\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.readyState === <span class=\"string\">\"complete\"</span>)&#123;</span><br><span class=\"line\">             <span class=\"built_in\">document</span>.detanchEvent(<span class=\"string\">\"DOMContentLoaded\"</span>,<span class=\"built_in\">arguments</span>.callee);</span><br><span class=\"line\">             callback();</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"ready和onload函数的区别\"><a href=\"#ready和onload函数的区别\" class=\"headerlink\" title=\"ready和onload函数的区别\"></a>ready和onload函数的区别</h2><ul>\n<li>运行时间</li>\n</ul>\n<p>onload函数必须等到页面里所有东西加载完,ready函数则为渲染完dom结构就会执行</p>\n<ul>\n<li>编写个数</li>\n</ul>\n<p>window.onload只能写一个(写多个的话,只会执行一个)$(document).ready()可以写多个 </p>\n<ul>\n<li>简化写法</li>\n</ul>\n<p>window.onload没有简写,$(document).ready()可以简写为$(function(){})</p>\n<h2 id=\"怎样用javascript实现jquery的ready函数呢\"><a href=\"#怎样用javascript实现jquery的ready函数呢\" class=\"headerlink\" title=\"怎样用javascript实现jquery的ready函数呢?\"></a>怎样用javascript实现jquery的ready函数呢?</h2><p>标准浏览器可以监听DOMContentLoaded,ie浏览器可以监听onreadystatechange</p>\n<p>具体代码实现:</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ready</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.addEventListener)&#123;</span><br><span class=\"line\">      <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"DOMContentLoaded\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.removeEventListener(<span class=\"string\">\"DOMContentLoaded\"</span>,<span class=\"built_in\">arguments</span>.callee,<span class=\"literal\">false</span>);</span><br><span class=\"line\">        callback();</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.attanchEvent)&#123;</span><br><span class=\"line\">       <span class=\"built_in\">document</span>.attanchEvent(<span class=\"string\">\"onreadystatechange\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.readyState === <span class=\"string\">\"complete\"</span>)&#123;</span><br><span class=\"line\">             <span class=\"built_in\">document</span>.detanchEvent(<span class=\"string\">\"DOMContentLoaded\"</span>,<span class=\"built_in\">arguments</span>.callee);</span><br><span class=\"line\">             callback();</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"URL到展现页面的全过程","date":"2016-12-28T14:28:47.000Z","_content":"\n---------------------\n\n## url到页面展现的过程   \n\n[原文地址](http://www.cnblogs.com/strick/p/5494869.html)\n\n1.域名解析 \t-> \t\tDNS（Domain Name System）位于应用层，提供域名和IP地址之间的解析服务。\n2.建立tcp连接 \t\t传输控制协议\n3.发起http请求\n4.服务器响应http请求\n5.浏览器渲染页面\n\n## TCP/IP分为4层:\n\n应用层（HTTP客户端）、传输层（tcp）、网络层（ip）、链路层（网络）\n\nHTTP（Hyper Text Transfer Protocol），超文本传输协议，由请求和响应构成。\n\n## 3次握手\n\n1）.发送端发送一个带SYN标志的数据包给对方\n2）.接收端回传一个带SYN（握手信号）和ACK（确认字符）标志的数据包以示传达确认信息\n3）.发送端再回传一个带ACK标志的数据包，代表握手结束\n\n## 状态码:\n\n1xx 信息性状态码，接收的请求正在处理\n2xx 成功状态码，请求正常处理完毕\n3xx 重定向状态码，需要进行附加操作以完成请求\n4xx 客户端错误状态码，服务器无法处理请求\n5xx 服务端错误状态码，服务器处理请求出错\n\n## html解析过程\n\n解析HTML以构建DOM树 -> 构建Render（渲染）树 -> 布局Render树 -> 绘制Render树\n\n## 网页优化\n\n[毫秒必争，前端网页性能最佳实践](http://www.cnblogs.com/developersupport/p/3248695.html)\n","source":"_posts/URL到展现页面的全过程.md","raw":"---\ntitle: URL到展现页面的全过程\ndate: 2016-12-28 22:28:47\ncategories: Javascript\ntags:\n     - Javascript\n---\n\n---------------------\n\n## url到页面展现的过程   \n\n[原文地址](http://www.cnblogs.com/strick/p/5494869.html)\n\n1.域名解析 \t-> \t\tDNS（Domain Name System）位于应用层，提供域名和IP地址之间的解析服务。\n2.建立tcp连接 \t\t传输控制协议\n3.发起http请求\n4.服务器响应http请求\n5.浏览器渲染页面\n\n## TCP/IP分为4层:\n\n应用层（HTTP客户端）、传输层（tcp）、网络层（ip）、链路层（网络）\n\nHTTP（Hyper Text Transfer Protocol），超文本传输协议，由请求和响应构成。\n\n## 3次握手\n\n1）.发送端发送一个带SYN标志的数据包给对方\n2）.接收端回传一个带SYN（握手信号）和ACK（确认字符）标志的数据包以示传达确认信息\n3）.发送端再回传一个带ACK标志的数据包，代表握手结束\n\n## 状态码:\n\n1xx 信息性状态码，接收的请求正在处理\n2xx 成功状态码，请求正常处理完毕\n3xx 重定向状态码，需要进行附加操作以完成请求\n4xx 客户端错误状态码，服务器无法处理请求\n5xx 服务端错误状态码，服务器处理请求出错\n\n## html解析过程\n\n解析HTML以构建DOM树 -> 构建Render（渲染）树 -> 布局Render树 -> 绘制Render树\n\n## 网页优化\n\n[毫秒必争，前端网页性能最佳实践](http://www.cnblogs.com/developersupport/p/3248695.html)\n","slug":"URL到展现页面的全过程","published":1,"updated":"2020-03-23T11:05:23.941Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgbydgn00006ofo93g3oiqul","content":"<hr>\n<h2 id=\"url到页面展现的过程\"><a href=\"#url到页面展现的过程\" class=\"headerlink\" title=\"url到页面展现的过程\"></a>url到页面展现的过程</h2><p><a href=\"http://www.cnblogs.com/strick/p/5494869.html\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n<p>1.域名解析     -&gt;         DNS（Domain Name System）位于应用层，提供域名和IP地址之间的解析服务。<br>2.建立tcp连接         传输控制协议<br>3.发起http请求<br>4.服务器响应http请求<br>5.浏览器渲染页面</p>\n<h2 id=\"TCP-IP分为4层\"><a href=\"#TCP-IP分为4层\" class=\"headerlink\" title=\"TCP/IP分为4层:\"></a>TCP/IP分为4层:</h2><p>应用层（HTTP客户端）、传输层（tcp）、网络层（ip）、链路层（网络）</p>\n<p>HTTP（Hyper Text Transfer Protocol），超文本传输协议，由请求和响应构成。</p>\n<h2 id=\"3次握手\"><a href=\"#3次握手\" class=\"headerlink\" title=\"3次握手\"></a>3次握手</h2><p>1）.发送端发送一个带SYN标志的数据包给对方<br>2）.接收端回传一个带SYN（握手信号）和ACK（确认字符）标志的数据包以示传达确认信息<br>3）.发送端再回传一个带ACK标志的数据包，代表握手结束</p>\n<h2 id=\"状态码\"><a href=\"#状态码\" class=\"headerlink\" title=\"状态码:\"></a>状态码:</h2><p>1xx 信息性状态码，接收的请求正在处理<br>2xx 成功状态码，请求正常处理完毕<br>3xx 重定向状态码，需要进行附加操作以完成请求<br>4xx 客户端错误状态码，服务器无法处理请求<br>5xx 服务端错误状态码，服务器处理请求出错</p>\n<h2 id=\"html解析过程\"><a href=\"#html解析过程\" class=\"headerlink\" title=\"html解析过程\"></a>html解析过程</h2><p>解析HTML以构建DOM树 -&gt; 构建Render（渲染）树 -&gt; 布局Render树 -&gt; 绘制Render树</p>\n<h2 id=\"网页优化\"><a href=\"#网页优化\" class=\"headerlink\" title=\"网页优化\"></a>网页优化</h2><p><a href=\"http://www.cnblogs.com/developersupport/p/3248695.html\" target=\"_blank\" rel=\"noopener\">毫秒必争，前端网页性能最佳实践</a></p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<h2 id=\"url到页面展现的过程\"><a href=\"#url到页面展现的过程\" class=\"headerlink\" title=\"url到页面展现的过程\"></a>url到页面展现的过程</h2><p><a href=\"http://www.cnblogs.com/strick/p/5494869.html\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n<p>1.域名解析     -&gt;         DNS（Domain Name System）位于应用层，提供域名和IP地址之间的解析服务。<br>2.建立tcp连接         传输控制协议<br>3.发起http请求<br>4.服务器响应http请求<br>5.浏览器渲染页面</p>\n<h2 id=\"TCP-IP分为4层\"><a href=\"#TCP-IP分为4层\" class=\"headerlink\" title=\"TCP/IP分为4层:\"></a>TCP/IP分为4层:</h2><p>应用层（HTTP客户端）、传输层（tcp）、网络层（ip）、链路层（网络）</p>\n<p>HTTP（Hyper Text Transfer Protocol），超文本传输协议，由请求和响应构成。</p>\n<h2 id=\"3次握手\"><a href=\"#3次握手\" class=\"headerlink\" title=\"3次握手\"></a>3次握手</h2><p>1）.发送端发送一个带SYN标志的数据包给对方<br>2）.接收端回传一个带SYN（握手信号）和ACK（确认字符）标志的数据包以示传达确认信息<br>3）.发送端再回传一个带ACK标志的数据包，代表握手结束</p>\n<h2 id=\"状态码\"><a href=\"#状态码\" class=\"headerlink\" title=\"状态码:\"></a>状态码:</h2><p>1xx 信息性状态码，接收的请求正在处理<br>2xx 成功状态码，请求正常处理完毕<br>3xx 重定向状态码，需要进行附加操作以完成请求<br>4xx 客户端错误状态码，服务器无法处理请求<br>5xx 服务端错误状态码，服务器处理请求出错</p>\n<h2 id=\"html解析过程\"><a href=\"#html解析过程\" class=\"headerlink\" title=\"html解析过程\"></a>html解析过程</h2><p>解析HTML以构建DOM树 -&gt; 构建Render（渲染）树 -&gt; 布局Render树 -&gt; 绘制Render树</p>\n<h2 id=\"网页优化\"><a href=\"#网页优化\" class=\"headerlink\" title=\"网页优化\"></a>网页优化</h2><p><a href=\"http://www.cnblogs.com/developersupport/p/3248695.html\" target=\"_blank\" rel=\"noopener\">毫秒必争，前端网页性能最佳实践</a></p>\n"},{"title":"MVC 的理解","date":"2016-07-23T02:00:33.000Z","_content":"# MVC \n## View层\n与页面上元素直接相关的部分都属于View，包括html，CSS和一部分直接控制页面元素的JS。可以从Model中得到数据，并将其显示到页面上。而关于数据的变更与请求，则统统交给Controller处理\n## Controller层:\n作为Model和View的粘合剂，Controller将View方面的请求转发给合适的 Model，在必要时也会去更新View。而Controller本身也可以作为Model的观察者，获取Model的变更。而作为Controller 本身，就不应该有涉及到页面元素的代码了。\n## Model层:\n与后端的沟通、AJAX请求以及对数据的处理都属于Model的工作。Model本身不知道谁是View，谁是Controller。它只提供一些方法供View和Controller调用，并且将变更通知给它的观察者View或Controller。显 然，Model与页面元素之间也解耦了\n        \n### 知己知彼，对症下药\n在前端框架和类库越来越丰富的今天。选择一款对的框架或类库就显得尤为重要了，我觉得没必要盲目跟风，看见什么框架火就屁颠屁颠跑去啃一个星期，然后因为项目工作上用不到，几个月之后又全忘光了。所以我觉得重要的是把基础打扎实，重点是去了解各个类库与框架的作用，某类框架着重用于解决什么问题，然后在项目需要用到时候再去研读API才是上策。最后，我们要清楚MVC在前端开发中的应用具有的局限性，简单的项目如果使用MVC框架会可能导致项目变得更加复杂。当然随着Web前端的复杂度不断增加，前端MVC框架的不断发展，相信在未来的应用软件类复杂产品当中，MVC框架一定会给前端工作带来效率上的飞跃。\n","source":"_posts/MVC的理解.md","raw":"---\ntitle: MVC 的理解\ndate: 2016-07-23 10:00:33\ncategories: MVC\ntags:\n     - MVC\n---\n# MVC \n## View层\n与页面上元素直接相关的部分都属于View，包括html，CSS和一部分直接控制页面元素的JS。可以从Model中得到数据，并将其显示到页面上。而关于数据的变更与请求，则统统交给Controller处理\n## Controller层:\n作为Model和View的粘合剂，Controller将View方面的请求转发给合适的 Model，在必要时也会去更新View。而Controller本身也可以作为Model的观察者，获取Model的变更。而作为Controller 本身，就不应该有涉及到页面元素的代码了。\n## Model层:\n与后端的沟通、AJAX请求以及对数据的处理都属于Model的工作。Model本身不知道谁是View，谁是Controller。它只提供一些方法供View和Controller调用，并且将变更通知给它的观察者View或Controller。显 然，Model与页面元素之间也解耦了\n        \n### 知己知彼，对症下药\n在前端框架和类库越来越丰富的今天。选择一款对的框架或类库就显得尤为重要了，我觉得没必要盲目跟风，看见什么框架火就屁颠屁颠跑去啃一个星期，然后因为项目工作上用不到，几个月之后又全忘光了。所以我觉得重要的是把基础打扎实，重点是去了解各个类库与框架的作用，某类框架着重用于解决什么问题，然后在项目需要用到时候再去研读API才是上策。最后，我们要清楚MVC在前端开发中的应用具有的局限性，简单的项目如果使用MVC框架会可能导致项目变得更加复杂。当然随着Web前端的复杂度不断增加，前端MVC框架的不断发展，相信在未来的应用软件类复杂产品当中，MVC框架一定会给前端工作带来效率上的飞跃。\n","slug":"MVC的理解","published":1,"updated":"2020-03-23T11:05:23.940Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgbydgn30008ofo9ro9rzta4","content":"<h1 id=\"MVC\"><a href=\"#MVC\" class=\"headerlink\" title=\"MVC\"></a>MVC</h1><h2 id=\"View层\"><a href=\"#View层\" class=\"headerlink\" title=\"View层\"></a>View层</h2><p>与页面上元素直接相关的部分都属于View，包括html，CSS和一部分直接控制页面元素的JS。可以从Model中得到数据，并将其显示到页面上。而关于数据的变更与请求，则统统交给Controller处理</p>\n<h2 id=\"Controller层\"><a href=\"#Controller层\" class=\"headerlink\" title=\"Controller层:\"></a>Controller层:</h2><p>作为Model和View的粘合剂，Controller将View方面的请求转发给合适的 Model，在必要时也会去更新View。而Controller本身也可以作为Model的观察者，获取Model的变更。而作为Controller 本身，就不应该有涉及到页面元素的代码了。</p>\n<h2 id=\"Model层\"><a href=\"#Model层\" class=\"headerlink\" title=\"Model层:\"></a>Model层:</h2><p>与后端的沟通、AJAX请求以及对数据的处理都属于Model的工作。Model本身不知道谁是View，谁是Controller。它只提供一些方法供View和Controller调用，并且将变更通知给它的观察者View或Controller。显 然，Model与页面元素之间也解耦了</p>\n<h3 id=\"知己知彼，对症下药\"><a href=\"#知己知彼，对症下药\" class=\"headerlink\" title=\"知己知彼，对症下药\"></a>知己知彼，对症下药</h3><p>在前端框架和类库越来越丰富的今天。选择一款对的框架或类库就显得尤为重要了，我觉得没必要盲目跟风，看见什么框架火就屁颠屁颠跑去啃一个星期，然后因为项目工作上用不到，几个月之后又全忘光了。所以我觉得重要的是把基础打扎实，重点是去了解各个类库与框架的作用，某类框架着重用于解决什么问题，然后在项目需要用到时候再去研读API才是上策。最后，我们要清楚MVC在前端开发中的应用具有的局限性，简单的项目如果使用MVC框架会可能导致项目变得更加复杂。当然随着Web前端的复杂度不断增加，前端MVC框架的不断发展，相信在未来的应用软件类复杂产品当中，MVC框架一定会给前端工作带来效率上的飞跃。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"MVC\"><a href=\"#MVC\" class=\"headerlink\" title=\"MVC\"></a>MVC</h1><h2 id=\"View层\"><a href=\"#View层\" class=\"headerlink\" title=\"View层\"></a>View层</h2><p>与页面上元素直接相关的部分都属于View，包括html，CSS和一部分直接控制页面元素的JS。可以从Model中得到数据，并将其显示到页面上。而关于数据的变更与请求，则统统交给Controller处理</p>\n<h2 id=\"Controller层\"><a href=\"#Controller层\" class=\"headerlink\" title=\"Controller层:\"></a>Controller层:</h2><p>作为Model和View的粘合剂，Controller将View方面的请求转发给合适的 Model，在必要时也会去更新View。而Controller本身也可以作为Model的观察者，获取Model的变更。而作为Controller 本身，就不应该有涉及到页面元素的代码了。</p>\n<h2 id=\"Model层\"><a href=\"#Model层\" class=\"headerlink\" title=\"Model层:\"></a>Model层:</h2><p>与后端的沟通、AJAX请求以及对数据的处理都属于Model的工作。Model本身不知道谁是View，谁是Controller。它只提供一些方法供View和Controller调用，并且将变更通知给它的观察者View或Controller。显 然，Model与页面元素之间也解耦了</p>\n<h3 id=\"知己知彼，对症下药\"><a href=\"#知己知彼，对症下药\" class=\"headerlink\" title=\"知己知彼，对症下药\"></a>知己知彼，对症下药</h3><p>在前端框架和类库越来越丰富的今天。选择一款对的框架或类库就显得尤为重要了，我觉得没必要盲目跟风，看见什么框架火就屁颠屁颠跑去啃一个星期，然后因为项目工作上用不到，几个月之后又全忘光了。所以我觉得重要的是把基础打扎实，重点是去了解各个类库与框架的作用，某类框架着重用于解决什么问题，然后在项目需要用到时候再去研读API才是上策。最后，我们要清楚MVC在前端开发中的应用具有的局限性，简单的项目如果使用MVC框架会可能导致项目变得更加复杂。当然随着Web前端的复杂度不断增加，前端MVC框架的不断发展，相信在未来的应用软件类复杂产品当中，MVC框架一定会给前端工作带来效率上的飞跃。</p>\n"},{"title":"TypeScript","date":"2017-08-06T05:15:40.000Z","_content":"\n# TypeScript\n\n## 原则\n\nTypeScript的核心原则之一是对值所具有的结构进行类型检查\n\n# 数据类型\n\n* ## boolean\n\n```TypeScript\nlet flag:boolean = true;\n```\n\n* ## string\n\n```TypeScript\nlet str:string = \"caicai\";\n```\n\n* ## number\n\n```TypeScript\nlet num:number = 10;\n```\n\n* ## Array\n\n> 定义类型两种方式: \n>1. 第一种,可以在元素类型后面接上 [],表示由此类型元素组成的一个数组\n>2. 第二种,使用数组泛型\n\n```TypeScript\n//以下两种等价\nlet arr:number[] = [1,2,3,4];\nlet arr:Array<number> = [1,2,3,4];\n```\n\n* ## 元组\n\n元组类型允许表示一个已知<span style=\"color:red\">__元素数量和类型的数组__</span>，各元素的类型不必相同,可以直接赋值,但是必须为申明的类型\n\n```TypeScript\nlet list:[string,number]=[\"1\",2];\nlist[5] = 100;\nconsole.log(list) //[\"1\",2,undefined,undefined,undefined,100]\n```\n\n* ## 枚举\n\nenum类型是对JavaScript标准数据类型的一个补充。 像C#等其它语言一样，使用枚举类型可以为一组数值赋予友好的名字,值为0,1,2,...\n\n```TypeScript\nenum Color{\n    red,\n    green,\n    blue\n}\nlet c: Color = Color.red;\nlet cName:string = Color[1];\nconsole.log(cName) //red\nconsole.log(c) //c\n```\n\n* ## any\n\nany为任意类型,既可以赋任何值(可以理解为es5里声明的变量都为any类型,__eg:var sum = 100__)\n\n```typescript\nlet a:any=1\nlet a:any=\"2\"\n```\n\n* ## null undefined void\n\n>1. void 类型与any类型相反,即为没有任何类型,在函数中没写,默认返回void类型\n>2. undefined和null两者各自有自己的类型分别叫做undefined和null\n\n```typescript\nfunction method():void{ //返回值为void类型,return就会报错\n    \n}\nlet u:undefined = undefined;\nlet n:null = null;\n```\n\n## interface \n\n接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约(相当于定义数据类型)\n\n可以用interface进行定义,传入的参数必须全部定义,然后区分是否只读 是否可选\n\n* ## 简单接口\n\n```typescript\nfunction func(name:string,age:number = 10){\n    console.log(name,age) //name age为必传字段\n}\n```\n\n* ## 可选属性\n\n接口里的属性不全都是必需的,有些是只在某些条件下存在，或者根本不存在。即给函数传入的参数对象中只有部分属性赋值了。\n\n> 两种方式\n>1. 在可选属性后面加?\n>2. 可以给参数设置默认值(自己亲测有效,官网没写,有待继续测试)\n\n```typescript\nfunction func(name:string,age?:number){\n    console.log(name,age) //caicai,undefined\n}\nfunction func(name:string,age:number = 10){\n    console.log(name,age) //caicai,10\n}\nfunc(\"caicai\")\n```\n\n* ## 只读属性 readonly\n\n一些对象属性只能在对象刚刚创建的时候修改其值。 你可以在属性名前用 readonly来指定只读属性\n\n```typescript\ninterface Point{\n    readonly x:number,\n    readonly y:number\n}\n\nlet p:Point = {x:5,y:10}\np.x=100;//error\n```\n\n* ## readonly vs const\n\n最简单判断该用readonly还是const的方法是看要把它做为变量使用还是做为一个属性。 做为变量使用的话用 const，若做为属性则使用readonly。\n\n* ## 额外的属性检查\n\n以上定义接口的时候,约定的参数为必传属性,在生活中一般会存在一些不存在的属性需要传入,因此,我们总不能都写到interface里声明一遍(不声明就会报错),\n因此我们需要绕开这些检查,最简单的办法:\n\n1. 使用断言\n\n```typescript\ninterface Point{\n    x:number,\n    y: number\n}\n\nfunction p(config: Point) {\n    console.log(config) //{x:10,y:20,z:100}\n}\n\np({x:10,y:20,z:100} as Point)\n```\n\n2. 添加一个字符串索引签名\n\n```typescript\ninterface Point{\n    x:number,\n    y: number,\n   [propName: string]: any //字符串签名,这样就可以传入任何参数了\n}\n\nfunction p(config: Point) {\n    console.log(config) //{x:10,y:20,z:100}\n}\n\np({x:10,y:20,z:100})\n```\n\n* ## 函数类型\n\n接口能够描述JavaScript中对象拥有的各种各样的外形。 除了描述带有属性的普通对象外，接口也可以描述函数类型。\n\n```typescript\ninterface SearchFunc { //申明一个函数类型(传入参数有两个,返回值的类型为boolean)\n  (source: string, subString: string): boolean;\n}\nlet mySearch: SearchFunc;\nmySearch = function(source: string, subString: string) {\n  let result = source.search(subString);\n  return result > -1;\n}\n```\n\n* ## 可索引的类型\n\n描述那些能够“通过索引得到”的类型 可索引类型具有一个 索引签名，它描述了对象索引的类型，还有相应的索引返回值类型\n\n```typescript\ninterface StringArray {\n  [index: number]: string;\n}\n\nlet myArray: StringArray;\nmyArray = [\"Bob\", \"Fred\"];\n\nlet myStr: string = myArray[0];\n```\n\n* ## 类类型\n\n> 实现接口\n\n```typescript\ninterface ClockInterface {\n    currentTime: Date;//属性\n    setTime(d: Date);//方法\n}\n\nclass Clock implements ClockInterface {//在类里实现\n    currentTime: Date;\n    setTime(d: Date) {\n        this.currentTime = d;\n    }\n    constructor(h: number, m: number) { }\n}\n```\n\n# 类\n\n传统的JavaScript程序使用函数和基于原型的继承来创建可重用的组件,ECMAScript 6开始，JavaScript程序员将能够使用基于类的面向对象的方式\n\n* ##  简单事例\n\n```typescript\nclass Greeter {\n    greeting: string;\n    constructor(message: string) {\n        this.greeting = message;\n    }\n    greet() {\n        return \"Hello, \" + this.greeting;\n    }\n}\n\nlet greeter = new Greeter(\"world\");\n```\n\n以上声明了一个 Greeter类。这个类有3个成员：一个叫做greeting的属性，一个构造函数和一个greet方法\n\n在引用任何一个类成员的时候都用了this。 它表示我们访问的是类的成员。\n\n最后一行，我们使用new构造了Greeter类的一个实例。 它会调用之前定义的构造函数，创建一个 Greeter类型的新对象，并执行构造函数初始化它\n\n* ## 继承\n\n```typescript\nclass Animal {\n    name:string;\n    constructor(theName: string) { this.name = theName; }\n    move(distanceInMeters: number = 0) {\n        console.log(`${this.name} moved ${distanceInMeters}m.`);\n    }\n}\n\nclass Snake extends Animal {\n    constructor(name: string) { super(name); }\n    move(distanceInMeters = 5) {\n        console.log(\"Slithering...\");\n        super.move(distanceInMeters);\n    }\n}\n\nclass Horse extends Animal {\n    constructor(name: string) { super(name); }\n    move(distanceInMeters = 45) {\n        console.log(\"Galloping...\");\n        super.move(distanceInMeters);\n    }\n}\n\nlet sam = new Snake(\"Sammy the Python\");\nlet tom: Animal = new Horse(\"Tommy the Palomino\");\n\nsam.move();\ntom.move(34);\n//运行结果:\n//Slithering...\n//Sammy the Python moved 5m.\n//Galloping...\n//Tommy the Palomino moved 34m.\n```\n\n我们使用 extends关键字来创建子类。你可以看到Horse和Snake类是基类Animal的子类，并且可以访问其属性和方法,并且重写了父类的方法\n\n* ## 公共，私有与受保护的修饰符\n\n* ### 默认为public (可加可不加)\n\n```typescript\nclass Animal {\n    public name: string;\n    public constructor(theName: string) { this.name = theName; }\n    public move(distanceInMeters: number) {\n        console.log(`${this.name} moved ${distanceInMeters}m.`);\n    }\n}\n```\n\n* ### private\n\n当成员被标记成private时，它就不能在声明它的类的外部访问。private成员在派生类中仍然可以访问\n\n```typescript\nclass Animal {\n    private name: string;\n    constructor(theName: string) { this.name = theName; }\n}\n\nnew Animal(\"Cat\").name; // Error: 'name' is private;\n```\n\n* ### protected\n\nprotected修饰符与private修饰符的行为很相似，但有一点不同，protected成员在派生类中仍然可以访问\n\n```typescript\nclass Person {\n    protected name: string;\n    constructor(name: string) { this.name = name; }\n}\n\nclass Employee extends Person {\n    private department: string;\n\n    constructor(name: string, department: string) {\n        super(name)\n        this.department = department;\n    }\n\n    public getElevatorPitch() {\n        return `Hello, my name is ${this.name} and I work in ${this.department}.`;\n    }\n}\n\nlet howard = new Employee(\"Howard\", \"Sales\");\nconsole.log(howard.getElevatorPitch());\nconsole.log(howard.name);\n```\n\n# 函数\n\n## 函数类型\n\n* ### 为函数定义类型\n\n```typescript\nfunction add(x: number, y: number): number {\n    return x + y;\n}\n\nlet myAdd = function(x: number, y: number): number { return x+y; };//返回值为number类型\n```\n\n* ### 书写完整函数类型\n\n```typescript\nlet myAdd: (x:number, y:number) => number =\n    function(x: number, y: number): number { return x+y; };\n```\n\n* ### 推断类型\n\n```typescript\nlet myAdd = function(x: number, y: number): number { return x + y; };\n//=> typescript会自动推断出函数的类型\nlet myAdd: (baseValue:number, increment:number) => number =\n    function(x, y) { return x + y; };\n```\n\n## 可选参数\n\n 在TypeScript里我们可以在参数名旁使用 ?实现可选参数的功能\n\n```typescript\nfunction buildName(firstName: string, lastName?: string) {\n    if (lastName)\n        return firstName + \" \" + lastName;\n    else\n        return firstName;\n}\n\nlet result1 = buildName(\"Bob\");  // works correctly now\nlet result2 = buildName(\"Bob\", \"Adams\", \"Sr.\");  // error, too many parameters\nlet result3 = buildName(\"Bob\", \"Adams\");  // ah, just right\n```\n\n## 默认参数\n\n```typescript\nfunction buildName(firstName: string, lastName = \"Smith\") {//有默认值的参数\n    return firstName + \" \" + lastName;\n}\n\nlet result1 = buildName(\"Bob\");                  // works correctly now, returns \"Bob Smith\"\nlet result2 = buildName(\"Bob\", undefined);       // still works, also returns \"Bob Smith\"\nlet result3 = buildName(\"Bob\", \"Adams\", \"Sr.\");  // error, too many parameters\nlet result4 = buildName(\"Bob\", \"Adams\");         // ah, just right\n```\n\n## 剩余参数\n\n必要参数，默认参数和可选参数有个共同点：它们表示某一个参数。 有时，你想同时操作多个参数，或者你并不知道会有多少参数传递进来。 在JavaScript里，你可以使用 arguments来访问所有传入的参数。\n\n```typescript\nfunction buildName(firstName: string, ...restOfName: string[]) {\n  return firstName + \" \" + restOfName.join(\" \");\n}\n\nlet employeeName = buildName(\"Joseph\", \"Samuel\", \"Lucas\", \"MacKinzie\");\n```\n\n# 泛型\n\n```typescript\nfunction identity<T>(arg: T): T { //假如用户传入的参数T为字符串,则t为string类型,函数返回值也为string类型\n    return arg;\n}\n```\n\n# export import\n\nes6 的导入导出可以用的同时,typeScript新加入了 export = 和 import = require() 进行导出和导入\n\n```typescript\n//ZipCodeValidator.ts\nlet numberRegexp = /^[0-9]+$/;\nclass ZipCodeValidator {\n    isAcceptable(s: string) {\n        return s.length === 5 && numberRegexp.test(s);\n    }\n}\nexport = ZipCodeValidator;\n//Test.ts\nimport zip = require(\"./ZipCodeValidator\");\n\n// Some samples to try\nlet strings = [\"Hello\", \"98052\", \"101\"];\n\n// Validators to use\nlet validator = new zip();\n\n// Show whether each string passed each validator\nstrings.forEach(s => {\n  console.log(`\"${ s }\" - ${ validator.isAcceptable(s) ? \"matches\" : \"does not match\" }`);\n});\n```\n\n\n\n","source":"_posts/TypeScript.md","raw":"---\ntitle: TypeScript\ndate: 2017-08-06 13:15:40\ncategories: TypeScript\ntags:\n    - TypeScript\n---\n\n# TypeScript\n\n## 原则\n\nTypeScript的核心原则之一是对值所具有的结构进行类型检查\n\n# 数据类型\n\n* ## boolean\n\n```TypeScript\nlet flag:boolean = true;\n```\n\n* ## string\n\n```TypeScript\nlet str:string = \"caicai\";\n```\n\n* ## number\n\n```TypeScript\nlet num:number = 10;\n```\n\n* ## Array\n\n> 定义类型两种方式: \n>1. 第一种,可以在元素类型后面接上 [],表示由此类型元素组成的一个数组\n>2. 第二种,使用数组泛型\n\n```TypeScript\n//以下两种等价\nlet arr:number[] = [1,2,3,4];\nlet arr:Array<number> = [1,2,3,4];\n```\n\n* ## 元组\n\n元组类型允许表示一个已知<span style=\"color:red\">__元素数量和类型的数组__</span>，各元素的类型不必相同,可以直接赋值,但是必须为申明的类型\n\n```TypeScript\nlet list:[string,number]=[\"1\",2];\nlist[5] = 100;\nconsole.log(list) //[\"1\",2,undefined,undefined,undefined,100]\n```\n\n* ## 枚举\n\nenum类型是对JavaScript标准数据类型的一个补充。 像C#等其它语言一样，使用枚举类型可以为一组数值赋予友好的名字,值为0,1,2,...\n\n```TypeScript\nenum Color{\n    red,\n    green,\n    blue\n}\nlet c: Color = Color.red;\nlet cName:string = Color[1];\nconsole.log(cName) //red\nconsole.log(c) //c\n```\n\n* ## any\n\nany为任意类型,既可以赋任何值(可以理解为es5里声明的变量都为any类型,__eg:var sum = 100__)\n\n```typescript\nlet a:any=1\nlet a:any=\"2\"\n```\n\n* ## null undefined void\n\n>1. void 类型与any类型相反,即为没有任何类型,在函数中没写,默认返回void类型\n>2. undefined和null两者各自有自己的类型分别叫做undefined和null\n\n```typescript\nfunction method():void{ //返回值为void类型,return就会报错\n    \n}\nlet u:undefined = undefined;\nlet n:null = null;\n```\n\n## interface \n\n接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约(相当于定义数据类型)\n\n可以用interface进行定义,传入的参数必须全部定义,然后区分是否只读 是否可选\n\n* ## 简单接口\n\n```typescript\nfunction func(name:string,age:number = 10){\n    console.log(name,age) //name age为必传字段\n}\n```\n\n* ## 可选属性\n\n接口里的属性不全都是必需的,有些是只在某些条件下存在，或者根本不存在。即给函数传入的参数对象中只有部分属性赋值了。\n\n> 两种方式\n>1. 在可选属性后面加?\n>2. 可以给参数设置默认值(自己亲测有效,官网没写,有待继续测试)\n\n```typescript\nfunction func(name:string,age?:number){\n    console.log(name,age) //caicai,undefined\n}\nfunction func(name:string,age:number = 10){\n    console.log(name,age) //caicai,10\n}\nfunc(\"caicai\")\n```\n\n* ## 只读属性 readonly\n\n一些对象属性只能在对象刚刚创建的时候修改其值。 你可以在属性名前用 readonly来指定只读属性\n\n```typescript\ninterface Point{\n    readonly x:number,\n    readonly y:number\n}\n\nlet p:Point = {x:5,y:10}\np.x=100;//error\n```\n\n* ## readonly vs const\n\n最简单判断该用readonly还是const的方法是看要把它做为变量使用还是做为一个属性。 做为变量使用的话用 const，若做为属性则使用readonly。\n\n* ## 额外的属性检查\n\n以上定义接口的时候,约定的参数为必传属性,在生活中一般会存在一些不存在的属性需要传入,因此,我们总不能都写到interface里声明一遍(不声明就会报错),\n因此我们需要绕开这些检查,最简单的办法:\n\n1. 使用断言\n\n```typescript\ninterface Point{\n    x:number,\n    y: number\n}\n\nfunction p(config: Point) {\n    console.log(config) //{x:10,y:20,z:100}\n}\n\np({x:10,y:20,z:100} as Point)\n```\n\n2. 添加一个字符串索引签名\n\n```typescript\ninterface Point{\n    x:number,\n    y: number,\n   [propName: string]: any //字符串签名,这样就可以传入任何参数了\n}\n\nfunction p(config: Point) {\n    console.log(config) //{x:10,y:20,z:100}\n}\n\np({x:10,y:20,z:100})\n```\n\n* ## 函数类型\n\n接口能够描述JavaScript中对象拥有的各种各样的外形。 除了描述带有属性的普通对象外，接口也可以描述函数类型。\n\n```typescript\ninterface SearchFunc { //申明一个函数类型(传入参数有两个,返回值的类型为boolean)\n  (source: string, subString: string): boolean;\n}\nlet mySearch: SearchFunc;\nmySearch = function(source: string, subString: string) {\n  let result = source.search(subString);\n  return result > -1;\n}\n```\n\n* ## 可索引的类型\n\n描述那些能够“通过索引得到”的类型 可索引类型具有一个 索引签名，它描述了对象索引的类型，还有相应的索引返回值类型\n\n```typescript\ninterface StringArray {\n  [index: number]: string;\n}\n\nlet myArray: StringArray;\nmyArray = [\"Bob\", \"Fred\"];\n\nlet myStr: string = myArray[0];\n```\n\n* ## 类类型\n\n> 实现接口\n\n```typescript\ninterface ClockInterface {\n    currentTime: Date;//属性\n    setTime(d: Date);//方法\n}\n\nclass Clock implements ClockInterface {//在类里实现\n    currentTime: Date;\n    setTime(d: Date) {\n        this.currentTime = d;\n    }\n    constructor(h: number, m: number) { }\n}\n```\n\n# 类\n\n传统的JavaScript程序使用函数和基于原型的继承来创建可重用的组件,ECMAScript 6开始，JavaScript程序员将能够使用基于类的面向对象的方式\n\n* ##  简单事例\n\n```typescript\nclass Greeter {\n    greeting: string;\n    constructor(message: string) {\n        this.greeting = message;\n    }\n    greet() {\n        return \"Hello, \" + this.greeting;\n    }\n}\n\nlet greeter = new Greeter(\"world\");\n```\n\n以上声明了一个 Greeter类。这个类有3个成员：一个叫做greeting的属性，一个构造函数和一个greet方法\n\n在引用任何一个类成员的时候都用了this。 它表示我们访问的是类的成员。\n\n最后一行，我们使用new构造了Greeter类的一个实例。 它会调用之前定义的构造函数，创建一个 Greeter类型的新对象，并执行构造函数初始化它\n\n* ## 继承\n\n```typescript\nclass Animal {\n    name:string;\n    constructor(theName: string) { this.name = theName; }\n    move(distanceInMeters: number = 0) {\n        console.log(`${this.name} moved ${distanceInMeters}m.`);\n    }\n}\n\nclass Snake extends Animal {\n    constructor(name: string) { super(name); }\n    move(distanceInMeters = 5) {\n        console.log(\"Slithering...\");\n        super.move(distanceInMeters);\n    }\n}\n\nclass Horse extends Animal {\n    constructor(name: string) { super(name); }\n    move(distanceInMeters = 45) {\n        console.log(\"Galloping...\");\n        super.move(distanceInMeters);\n    }\n}\n\nlet sam = new Snake(\"Sammy the Python\");\nlet tom: Animal = new Horse(\"Tommy the Palomino\");\n\nsam.move();\ntom.move(34);\n//运行结果:\n//Slithering...\n//Sammy the Python moved 5m.\n//Galloping...\n//Tommy the Palomino moved 34m.\n```\n\n我们使用 extends关键字来创建子类。你可以看到Horse和Snake类是基类Animal的子类，并且可以访问其属性和方法,并且重写了父类的方法\n\n* ## 公共，私有与受保护的修饰符\n\n* ### 默认为public (可加可不加)\n\n```typescript\nclass Animal {\n    public name: string;\n    public constructor(theName: string) { this.name = theName; }\n    public move(distanceInMeters: number) {\n        console.log(`${this.name} moved ${distanceInMeters}m.`);\n    }\n}\n```\n\n* ### private\n\n当成员被标记成private时，它就不能在声明它的类的外部访问。private成员在派生类中仍然可以访问\n\n```typescript\nclass Animal {\n    private name: string;\n    constructor(theName: string) { this.name = theName; }\n}\n\nnew Animal(\"Cat\").name; // Error: 'name' is private;\n```\n\n* ### protected\n\nprotected修饰符与private修饰符的行为很相似，但有一点不同，protected成员在派生类中仍然可以访问\n\n```typescript\nclass Person {\n    protected name: string;\n    constructor(name: string) { this.name = name; }\n}\n\nclass Employee extends Person {\n    private department: string;\n\n    constructor(name: string, department: string) {\n        super(name)\n        this.department = department;\n    }\n\n    public getElevatorPitch() {\n        return `Hello, my name is ${this.name} and I work in ${this.department}.`;\n    }\n}\n\nlet howard = new Employee(\"Howard\", \"Sales\");\nconsole.log(howard.getElevatorPitch());\nconsole.log(howard.name);\n```\n\n# 函数\n\n## 函数类型\n\n* ### 为函数定义类型\n\n```typescript\nfunction add(x: number, y: number): number {\n    return x + y;\n}\n\nlet myAdd = function(x: number, y: number): number { return x+y; };//返回值为number类型\n```\n\n* ### 书写完整函数类型\n\n```typescript\nlet myAdd: (x:number, y:number) => number =\n    function(x: number, y: number): number { return x+y; };\n```\n\n* ### 推断类型\n\n```typescript\nlet myAdd = function(x: number, y: number): number { return x + y; };\n//=> typescript会自动推断出函数的类型\nlet myAdd: (baseValue:number, increment:number) => number =\n    function(x, y) { return x + y; };\n```\n\n## 可选参数\n\n 在TypeScript里我们可以在参数名旁使用 ?实现可选参数的功能\n\n```typescript\nfunction buildName(firstName: string, lastName?: string) {\n    if (lastName)\n        return firstName + \" \" + lastName;\n    else\n        return firstName;\n}\n\nlet result1 = buildName(\"Bob\");  // works correctly now\nlet result2 = buildName(\"Bob\", \"Adams\", \"Sr.\");  // error, too many parameters\nlet result3 = buildName(\"Bob\", \"Adams\");  // ah, just right\n```\n\n## 默认参数\n\n```typescript\nfunction buildName(firstName: string, lastName = \"Smith\") {//有默认值的参数\n    return firstName + \" \" + lastName;\n}\n\nlet result1 = buildName(\"Bob\");                  // works correctly now, returns \"Bob Smith\"\nlet result2 = buildName(\"Bob\", undefined);       // still works, also returns \"Bob Smith\"\nlet result3 = buildName(\"Bob\", \"Adams\", \"Sr.\");  // error, too many parameters\nlet result4 = buildName(\"Bob\", \"Adams\");         // ah, just right\n```\n\n## 剩余参数\n\n必要参数，默认参数和可选参数有个共同点：它们表示某一个参数。 有时，你想同时操作多个参数，或者你并不知道会有多少参数传递进来。 在JavaScript里，你可以使用 arguments来访问所有传入的参数。\n\n```typescript\nfunction buildName(firstName: string, ...restOfName: string[]) {\n  return firstName + \" \" + restOfName.join(\" \");\n}\n\nlet employeeName = buildName(\"Joseph\", \"Samuel\", \"Lucas\", \"MacKinzie\");\n```\n\n# 泛型\n\n```typescript\nfunction identity<T>(arg: T): T { //假如用户传入的参数T为字符串,则t为string类型,函数返回值也为string类型\n    return arg;\n}\n```\n\n# export import\n\nes6 的导入导出可以用的同时,typeScript新加入了 export = 和 import = require() 进行导出和导入\n\n```typescript\n//ZipCodeValidator.ts\nlet numberRegexp = /^[0-9]+$/;\nclass ZipCodeValidator {\n    isAcceptable(s: string) {\n        return s.length === 5 && numberRegexp.test(s);\n    }\n}\nexport = ZipCodeValidator;\n//Test.ts\nimport zip = require(\"./ZipCodeValidator\");\n\n// Some samples to try\nlet strings = [\"Hello\", \"98052\", \"101\"];\n\n// Validators to use\nlet validator = new zip();\n\n// Show whether each string passed each validator\nstrings.forEach(s => {\n  console.log(`\"${ s }\" - ${ validator.isAcceptable(s) ? \"matches\" : \"does not match\" }`);\n});\n```\n\n\n\n","slug":"TypeScript","published":1,"updated":"2020-03-23T11:05:23.941Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgbydgn40009ofo9mcfdtvag","content":"<h1 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h1><h2 id=\"原则\"><a href=\"#原则\" class=\"headerlink\" title=\"原则\"></a>原则</h2><p>TypeScript的核心原则之一是对值所具有的结构进行类型检查</p>\n<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><ul>\n<li><h2 id=\"boolean\"><a href=\"#boolean\" class=\"headerlink\" title=\"boolean\"></a>boolean</h2></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> flag:<span class=\"built_in\">boolean</span> = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h2></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str:<span class=\"built_in\">string</span> = <span class=\"string\">\"caicai\"</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"number\"><a href=\"#number\" class=\"headerlink\" title=\"number\"></a>number</h2></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> num:<span class=\"built_in\">number</span> = <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"Array\"><a href=\"#Array\" class=\"headerlink\" title=\"Array\"></a>Array</h2></li>\n</ul>\n<blockquote>\n<p>定义类型两种方式: </p>\n<ol>\n<li>第一种,可以在元素类型后面接上 [],表示由此类型元素组成的一个数组</li>\n<li>第二种,使用数组泛型</li>\n</ol>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//以下两种等价</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr:<span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr:<span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">number</span>&gt; = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h2></li>\n</ul>\n<p>元组类型允许表示一个已知<span style=\"color:red\"><strong>元素数量和类型的数组</strong></span>，各元素的类型不必相同,可以直接赋值,但是必须为申明的类型</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list:[<span class=\"built_in\">string</span>,<span class=\"built_in\">number</span>]=[<span class=\"string\">\"1\"</span>,<span class=\"number\">2</span>];</span><br><span class=\"line\">list[<span class=\"number\">5</span>] = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(list) <span class=\"comment\">//[\"1\",2,undefined,undefined,undefined,100]</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h2></li>\n</ul>\n<p>enum类型是对JavaScript标准数据类型的一个补充。 像C#等其它语言一样，使用枚举类型可以为一组数值赋予友好的名字,值为0,1,2,…</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> Color&#123;</span><br><span class=\"line\">    red,</span><br><span class=\"line\">    green,</span><br><span class=\"line\">    blue</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> c: Color = Color.red;</span><br><span class=\"line\"><span class=\"keyword\">let</span> cName:<span class=\"built_in\">string</span> = Color[<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cName) <span class=\"comment\">//red</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c) <span class=\"comment\">//c</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"any\"><a href=\"#any\" class=\"headerlink\" title=\"any\"></a>any</h2></li>\n</ul>\n<p>any为任意类型,既可以赋任何值(可以理解为es5里声明的变量都为any类型,<strong>eg:var sum = 100</strong>)</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a:<span class=\"built_in\">any</span>=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a:<span class=\"built_in\">any</span>=<span class=\"string\">\"2\"</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"null-undefined-void\"><a href=\"#null-undefined-void\" class=\"headerlink\" title=\"null undefined void\"></a>null undefined void</h2></li>\n</ul>\n<blockquote>\n<ol>\n<li>void 类型与any类型相反,即为没有任何类型,在函数中没写,默认返回void类型</li>\n<li>undefined和null两者各自有自己的类型分别叫做undefined和null</li>\n</ol>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">method</span>(<span class=\"params\"></span>):<span class=\"title\">void</span></span>&#123; <span class=\"comment\">//返回值为void类型,return就会报错</span></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> u:<span class=\"literal\">undefined</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> n:<span class=\"literal\">null</span> = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"interface\"><a href=\"#interface\" class=\"headerlink\" title=\"interface\"></a>interface</h2><p>接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约(相当于定义数据类型)</p>\n<p>可以用interface进行定义,传入的参数必须全部定义,然后区分是否只读 是否可选</p>\n<ul>\n<li><h2 id=\"简单接口\"><a href=\"#简单接口\" class=\"headerlink\" title=\"简单接口\"></a>简单接口</h2></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">name:<span class=\"built_in\">string</span>,age:<span class=\"built_in\">number</span> = 10</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(name,age) <span class=\"comment\">//name age为必传字段</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"可选属性\"><a href=\"#可选属性\" class=\"headerlink\" title=\"可选属性\"></a>可选属性</h2></li>\n</ul>\n<p>接口里的属性不全都是必需的,有些是只在某些条件下存在，或者根本不存在。即给函数传入的参数对象中只有部分属性赋值了。</p>\n<blockquote>\n<p>两种方式</p>\n<ol>\n<li>在可选属性后面加?</li>\n<li>可以给参数设置默认值(自己亲测有效,官网没写,有待继续测试)</li>\n</ol>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">name:<span class=\"built_in\">string</span>,age?:<span class=\"built_in\">number</span></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(name,age) <span class=\"comment\">//caicai,undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">name:<span class=\"built_in\">string</span>,age:<span class=\"built_in\">number</span> = 10</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(name,age) <span class=\"comment\">//caicai,10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func(<span class=\"string\">\"caicai\"</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"只读属性-readonly\"><a href=\"#只读属性-readonly\" class=\"headerlink\" title=\"只读属性 readonly\"></a>只读属性 readonly</h2></li>\n</ul>\n<p>一些对象属性只能在对象刚刚创建的时候修改其值。 你可以在属性名前用 readonly来指定只读属性</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Point&#123;</span><br><span class=\"line\">    readonly x:<span class=\"built_in\">number</span>,</span><br><span class=\"line\">    readonly y:<span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p:Point = &#123;x:<span class=\"number\">5</span>,y:<span class=\"number\">10</span>&#125;</span><br><span class=\"line\">p.x=<span class=\"number\">100</span>;<span class=\"comment\">//error</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"readonly-vs-const\"><a href=\"#readonly-vs-const\" class=\"headerlink\" title=\"readonly vs const\"></a>readonly vs const</h2></li>\n</ul>\n<p>最简单判断该用readonly还是const的方法是看要把它做为变量使用还是做为一个属性。 做为变量使用的话用 const，若做为属性则使用readonly。</p>\n<ul>\n<li><h2 id=\"额外的属性检查\"><a href=\"#额外的属性检查\" class=\"headerlink\" title=\"额外的属性检查\"></a>额外的属性检查</h2></li>\n</ul>\n<p>以上定义接口的时候,约定的参数为必传属性,在生活中一般会存在一些不存在的属性需要传入,因此,我们总不能都写到interface里声明一遍(不声明就会报错),<br>因此我们需要绕开这些检查,最简单的办法:</p>\n<ol>\n<li>使用断言</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Point&#123;</span><br><span class=\"line\">    x:<span class=\"built_in\">number</span>,</span><br><span class=\"line\">    y: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">p</span>(<span class=\"params\">config: Point</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(config) <span class=\"comment\">//&#123;x:10,y:20,z:100&#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">p(&#123;x:<span class=\"number\">10</span>,y:<span class=\"number\">20</span>,z:<span class=\"number\">100</span>&#125; <span class=\"keyword\">as</span> Point)</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>添加一个字符串索引签名</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Point&#123;</span><br><span class=\"line\">    x:<span class=\"built_in\">number</span>,</span><br><span class=\"line\">    y: <span class=\"built_in\">number</span>,</span><br><span class=\"line\">   [propName: <span class=\"built_in\">string</span>]: <span class=\"built_in\">any</span> <span class=\"comment\">//字符串签名,这样就可以传入任何参数了</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">p</span>(<span class=\"params\">config: Point</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(config) <span class=\"comment\">//&#123;x:10,y:20,z:100&#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">p(&#123;x:<span class=\"number\">10</span>,y:<span class=\"number\">20</span>,z:<span class=\"number\">100</span>&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"函数类型\"><a href=\"#函数类型\" class=\"headerlink\" title=\"函数类型\"></a>函数类型</h2></li>\n</ul>\n<p>接口能够描述JavaScript中对象拥有的各种各样的外形。 除了描述带有属性的普通对象外，接口也可以描述函数类型。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> SearchFunc &#123; <span class=\"comment\">//申明一个函数类型(传入参数有两个,返回值的类型为boolean)</span></span><br><span class=\"line\">  (source: <span class=\"built_in\">string</span>, subString: <span class=\"built_in\">string</span>): <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> mySearch: SearchFunc;</span><br><span class=\"line\">mySearch = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source: <span class=\"built_in\">string</span>, subString: <span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = source.search(subString);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result &gt; <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"可索引的类型\"><a href=\"#可索引的类型\" class=\"headerlink\" title=\"可索引的类型\"></a>可索引的类型</h2></li>\n</ul>\n<p>描述那些能够“通过索引得到”的类型 可索引类型具有一个 索引签名，它描述了对象索引的类型，还有相应的索引返回值类型</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> StringArray &#123;</span><br><span class=\"line\">  [index: <span class=\"built_in\">number</span>]: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myArray: StringArray;</span><br><span class=\"line\">myArray = [<span class=\"string\">\"Bob\"</span>, <span class=\"string\">\"Fred\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myStr: <span class=\"built_in\">string</span> = myArray[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"类类型\"><a href=\"#类类型\" class=\"headerlink\" title=\"类类型\"></a>类类型</h2></li>\n</ul>\n<blockquote>\n<p>实现接口</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> ClockInterface &#123;</span><br><span class=\"line\">    currentTime: <span class=\"built_in\">Date</span>;<span class=\"comment\">//属性</span></span><br><span class=\"line\">    setTime(d: <span class=\"built_in\">Date</span>);<span class=\"comment\">//方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Clock <span class=\"keyword\">implements</span> ClockInterface &#123;<span class=\"comment\">//在类里实现</span></span><br><span class=\"line\">    currentTime: <span class=\"built_in\">Date</span>;</span><br><span class=\"line\">    setTime(d: <span class=\"built_in\">Date</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.currentTime = d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">h: <span class=\"built_in\">number</span>, m: <span class=\"built_in\">number</span></span>) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h1><p>传统的JavaScript程序使用函数和基于原型的继承来创建可重用的组件,ECMAScript 6开始，JavaScript程序员将能够使用基于类的面向对象的方式</p>\n<ul>\n<li><h2 id=\"简单事例\"><a href=\"#简单事例\" class=\"headerlink\" title=\"简单事例\"></a>简单事例</h2></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Greeter &#123;</span><br><span class=\"line\">    greeting: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">message: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.greeting = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    greet() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Hello, \"</span> + <span class=\"keyword\">this</span>.greeting;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> greeter = <span class=\"keyword\">new</span> Greeter(<span class=\"string\">\"world\"</span>);</span><br></pre></td></tr></table></figure>\n<p>以上声明了一个 Greeter类。这个类有3个成员：一个叫做greeting的属性，一个构造函数和一个greet方法</p>\n<p>在引用任何一个类成员的时候都用了this。 它表示我们访问的是类的成员。</p>\n<p>最后一行，我们使用new构造了Greeter类的一个实例。 它会调用之前定义的构造函数，创建一个 Greeter类型的新对象，并执行构造函数初始化它</p>\n<ul>\n<li><h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Animal &#123;</span><br><span class=\"line\">    name:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">theName: <span class=\"built_in\">string</span></span>) &#123; <span class=\"keyword\">this</span>.name = theName; &#125;</span><br><span class=\"line\">    move(distanceInMeters: <span class=\"built_in\">number</span> = <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span> moved <span class=\"subst\">$&#123;distanceInMeters&#125;</span>m.`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Snake <span class=\"keyword\">extends</span> Animal &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123; <span class=\"keyword\">super</span>(name); &#125;</span><br><span class=\"line\">    move(distanceInMeters = <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Slithering...\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.move(distanceInMeters);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Horse <span class=\"keyword\">extends</span> Animal &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123; <span class=\"keyword\">super</span>(name); &#125;</span><br><span class=\"line\">    move(distanceInMeters = <span class=\"number\">45</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Galloping...\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.move(distanceInMeters);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> sam = <span class=\"keyword\">new</span> Snake(<span class=\"string\">\"Sammy the Python\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> tom: Animal = <span class=\"keyword\">new</span> Horse(<span class=\"string\">\"Tommy the Palomino\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">sam.move();</span><br><span class=\"line\">tom.move(<span class=\"number\">34</span>);</span><br><span class=\"line\"><span class=\"comment\">//运行结果:</span></span><br><span class=\"line\"><span class=\"comment\">//Slithering...</span></span><br><span class=\"line\"><span class=\"comment\">//Sammy the Python moved 5m.</span></span><br><span class=\"line\"><span class=\"comment\">//Galloping...</span></span><br><span class=\"line\"><span class=\"comment\">//Tommy the Palomino moved 34m.</span></span><br></pre></td></tr></table></figure>\n<p>我们使用 extends关键字来创建子类。你可以看到Horse和Snake类是基类Animal的子类，并且可以访问其属性和方法,并且重写了父类的方法</p>\n<ul>\n<li><h2 id=\"公共，私有与受保护的修饰符\"><a href=\"#公共，私有与受保护的修饰符\" class=\"headerlink\" title=\"公共，私有与受保护的修饰符\"></a>公共，私有与受保护的修饰符</h2></li>\n<li><h3 id=\"默认为public-可加可不加\"><a href=\"#默认为public-可加可不加\" class=\"headerlink\" title=\"默认为public (可加可不加)\"></a>默认为public (可加可不加)</h3></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Animal &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">constructor</span>(<span class=\"params\">theName: <span class=\"built_in\">string</span></span>) &#123; <span class=\"keyword\">this</span>.name = theName; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> move(distanceInMeters: <span class=\"built_in\">number</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span> moved <span class=\"subst\">$&#123;distanceInMeters&#125;</span>m.`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h3 id=\"private\"><a href=\"#private\" class=\"headerlink\" title=\"private\"></a>private</h3></li>\n</ul>\n<p>当成员被标记成private时，它就不能在声明它的类的外部访问。private成员在派生类中仍然可以访问</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Animal &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">theName: <span class=\"built_in\">string</span></span>) &#123; <span class=\"keyword\">this</span>.name = theName; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Animal(<span class=\"string\">\"Cat\"</span>).name; <span class=\"comment\">// Error: 'name' is private;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><h3 id=\"protected\"><a href=\"#protected\" class=\"headerlink\" title=\"protected\"></a>protected</h3></li>\n</ul>\n<p>protected修饰符与private修饰符的行为很相似，但有一点不同，protected成员在派生类中仍然可以访问</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Person &#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123; <span class=\"keyword\">this</span>.name = name; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Employee <span class=\"keyword\">extends</span> Person &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> department: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span>, department: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.department = department;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> getElevatorPitch() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`Hello, my name is <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span> and I work in <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.department&#125;</span>.`</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> howard = <span class=\"keyword\">new</span> Employee(<span class=\"string\">\"Howard\"</span>, <span class=\"string\">\"Sales\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(howard.getElevatorPitch());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(howard.name);</span><br></pre></td></tr></table></figure>\n<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><h2 id=\"函数类型-1\"><a href=\"#函数类型-1\" class=\"headerlink\" title=\"函数类型\"></a>函数类型</h2><ul>\n<li><h3 id=\"为函数定义类型\"><a href=\"#为函数定义类型\" class=\"headerlink\" title=\"为函数定义类型\"></a>为函数定义类型</h3></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span></span>): <span class=\"title\">number</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myAdd = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span></span>): <span class=\"title\">number</span> </span>&#123; <span class=\"keyword\">return</span> x+y; &#125;;<span class=\"comment\">//返回值为number类型</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><h3 id=\"书写完整函数类型\"><a href=\"#书写完整函数类型\" class=\"headerlink\" title=\"书写完整函数类型\"></a>书写完整函数类型</h3></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myAdd: <span class=\"function\">(<span class=\"params\">x:<span class=\"built_in\">number</span>, y:<span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"built_in\">number</span> =</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span></span>): <span class=\"title\">number</span> </span>&#123; <span class=\"keyword\">return</span> x+y; &#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h3 id=\"推断类型\"><a href=\"#推断类型\" class=\"headerlink\" title=\"推断类型\"></a>推断类型</h3></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myAdd = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span></span>): <span class=\"title\">number</span> </span>&#123; <span class=\"keyword\">return</span> x + y; &#125;;</span><br><span class=\"line\"><span class=\"comment\">//=&gt; typescript会自动推断出函数的类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> myAdd: <span class=\"function\">(<span class=\"params\">baseValue:<span class=\"built_in\">number</span>, increment:<span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"built_in\">number</span> =</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) </span>&#123; <span class=\"keyword\">return</span> x + y; &#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"可选参数\"><a href=\"#可选参数\" class=\"headerlink\" title=\"可选参数\"></a>可选参数</h2><p> 在TypeScript里我们可以在参数名旁使用 ?实现可选参数的功能</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildName</span>(<span class=\"params\">firstName: <span class=\"built_in\">string</span>, lastName?: <span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lastName)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> firstName + <span class=\"string\">\" \"</span> + lastName;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> firstName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> result1 = buildName(<span class=\"string\">\"Bob\"</span>);  <span class=\"comment\">// works correctly now</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> result2 = buildName(<span class=\"string\">\"Bob\"</span>, <span class=\"string\">\"Adams\"</span>, <span class=\"string\">\"Sr.\"</span>);  <span class=\"comment\">// error, too many parameters</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> result3 = buildName(<span class=\"string\">\"Bob\"</span>, <span class=\"string\">\"Adams\"</span>);  <span class=\"comment\">// ah, just right</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"默认参数\"><a href=\"#默认参数\" class=\"headerlink\" title=\"默认参数\"></a>默认参数</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildName</span>(<span class=\"params\">firstName: <span class=\"built_in\">string</span>, lastName = \"Smith\"</span>) </span>&#123;<span class=\"comment\">//有默认值的参数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> firstName + <span class=\"string\">\" \"</span> + lastName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> result1 = buildName(<span class=\"string\">\"Bob\"</span>);                  <span class=\"comment\">// works correctly now, returns \"Bob Smith\"</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> result2 = buildName(<span class=\"string\">\"Bob\"</span>, <span class=\"literal\">undefined</span>);       <span class=\"comment\">// still works, also returns \"Bob Smith\"</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> result3 = buildName(<span class=\"string\">\"Bob\"</span>, <span class=\"string\">\"Adams\"</span>, <span class=\"string\">\"Sr.\"</span>);  <span class=\"comment\">// error, too many parameters</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> result4 = buildName(<span class=\"string\">\"Bob\"</span>, <span class=\"string\">\"Adams\"</span>);         <span class=\"comment\">// ah, just right</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"剩余参数\"><a href=\"#剩余参数\" class=\"headerlink\" title=\"剩余参数\"></a>剩余参数</h2><p>必要参数，默认参数和可选参数有个共同点：它们表示某一个参数。 有时，你想同时操作多个参数，或者你并不知道会有多少参数传递进来。 在JavaScript里，你可以使用 arguments来访问所有传入的参数。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildName</span>(<span class=\"params\">firstName: <span class=\"built_in\">string</span>, ...restOfName: <span class=\"built_in\">string</span>[]</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> firstName + <span class=\"string\">\" \"</span> + restOfName.join(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> employeeName = buildName(<span class=\"string\">\"Joseph\"</span>, <span class=\"string\">\"Samuel\"</span>, <span class=\"string\">\"Lucas\"</span>, <span class=\"string\">\"MacKinzie\"</span>);</span><br></pre></td></tr></table></figure>\n<h1 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h1><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">identity</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">arg: T</span>): <span class=\"title\">T</span> </span>&#123; <span class=\"comment\">//假如用户传入的参数T为字符串,则t为string类型,函数返回值也为string类型</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"export-import\"><a href=\"#export-import\" class=\"headerlink\" title=\"export import\"></a>export import</h1><p>es6 的导入导出可以用的同时,typeScript新加入了 export = 和 import = require() 进行导出和导入</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ZipCodeValidator.ts</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> numberRegexp = <span class=\"regexp\">/^[0-9]+$/</span>;</span><br><span class=\"line\"><span class=\"keyword\">class</span> ZipCodeValidator &#123;</span><br><span class=\"line\">    isAcceptable(s: <span class=\"built_in\">string</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s.length === <span class=\"number\">5</span> &amp;&amp; numberRegexp.test(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> = ZipCodeValidator;</span><br><span class=\"line\"><span class=\"comment\">//Test.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> zip = <span class=\"built_in\">require</span>(<span class=\"string\">\"./ZipCodeValidator\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Some samples to try</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> strings = [<span class=\"string\">\"Hello\"</span>, <span class=\"string\">\"98052\"</span>, <span class=\"string\">\"101\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Validators to use</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> validator = <span class=\"keyword\">new</span> zip();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Show whether each string passed each validator</span></span><br><span class=\"line\">strings.forEach(<span class=\"function\"><span class=\"params\">s</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`\"<span class=\"subst\">$&#123; s &#125;</span>\" - <span class=\"subst\">$&#123; validator.isAcceptable(s) ? <span class=\"string\">\"matches\"</span> : <span class=\"string\">\"does not match\"</span> &#125;</span>`</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h1><h2 id=\"原则\"><a href=\"#原则\" class=\"headerlink\" title=\"原则\"></a>原则</h2><p>TypeScript的核心原则之一是对值所具有的结构进行类型检查</p>\n<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><ul>\n<li><h2 id=\"boolean\"><a href=\"#boolean\" class=\"headerlink\" title=\"boolean\"></a>boolean</h2></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> flag:<span class=\"built_in\">boolean</span> = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h2></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str:<span class=\"built_in\">string</span> = <span class=\"string\">\"caicai\"</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"number\"><a href=\"#number\" class=\"headerlink\" title=\"number\"></a>number</h2></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> num:<span class=\"built_in\">number</span> = <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"Array\"><a href=\"#Array\" class=\"headerlink\" title=\"Array\"></a>Array</h2></li>\n</ul>\n<blockquote>\n<p>定义类型两种方式: </p>\n<ol>\n<li>第一种,可以在元素类型后面接上 [],表示由此类型元素组成的一个数组</li>\n<li>第二种,使用数组泛型</li>\n</ol>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//以下两种等价</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr:<span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr:<span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">number</span>&gt; = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h2></li>\n</ul>\n<p>元组类型允许表示一个已知<span style=\"color:red\"><strong>元素数量和类型的数组</strong></span>，各元素的类型不必相同,可以直接赋值,但是必须为申明的类型</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list:[<span class=\"built_in\">string</span>,<span class=\"built_in\">number</span>]=[<span class=\"string\">\"1\"</span>,<span class=\"number\">2</span>];</span><br><span class=\"line\">list[<span class=\"number\">5</span>] = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(list) <span class=\"comment\">//[\"1\",2,undefined,undefined,undefined,100]</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h2></li>\n</ul>\n<p>enum类型是对JavaScript标准数据类型的一个补充。 像C#等其它语言一样，使用枚举类型可以为一组数值赋予友好的名字,值为0,1,2,…</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> Color&#123;</span><br><span class=\"line\">    red,</span><br><span class=\"line\">    green,</span><br><span class=\"line\">    blue</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> c: Color = Color.red;</span><br><span class=\"line\"><span class=\"keyword\">let</span> cName:<span class=\"built_in\">string</span> = Color[<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cName) <span class=\"comment\">//red</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c) <span class=\"comment\">//c</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"any\"><a href=\"#any\" class=\"headerlink\" title=\"any\"></a>any</h2></li>\n</ul>\n<p>any为任意类型,既可以赋任何值(可以理解为es5里声明的变量都为any类型,<strong>eg:var sum = 100</strong>)</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a:<span class=\"built_in\">any</span>=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a:<span class=\"built_in\">any</span>=<span class=\"string\">\"2\"</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"null-undefined-void\"><a href=\"#null-undefined-void\" class=\"headerlink\" title=\"null undefined void\"></a>null undefined void</h2></li>\n</ul>\n<blockquote>\n<ol>\n<li>void 类型与any类型相反,即为没有任何类型,在函数中没写,默认返回void类型</li>\n<li>undefined和null两者各自有自己的类型分别叫做undefined和null</li>\n</ol>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">method</span>(<span class=\"params\"></span>):<span class=\"title\">void</span></span>&#123; <span class=\"comment\">//返回值为void类型,return就会报错</span></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> u:<span class=\"literal\">undefined</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> n:<span class=\"literal\">null</span> = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"interface\"><a href=\"#interface\" class=\"headerlink\" title=\"interface\"></a>interface</h2><p>接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约(相当于定义数据类型)</p>\n<p>可以用interface进行定义,传入的参数必须全部定义,然后区分是否只读 是否可选</p>\n<ul>\n<li><h2 id=\"简单接口\"><a href=\"#简单接口\" class=\"headerlink\" title=\"简单接口\"></a>简单接口</h2></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">name:<span class=\"built_in\">string</span>,age:<span class=\"built_in\">number</span> = 10</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(name,age) <span class=\"comment\">//name age为必传字段</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"可选属性\"><a href=\"#可选属性\" class=\"headerlink\" title=\"可选属性\"></a>可选属性</h2></li>\n</ul>\n<p>接口里的属性不全都是必需的,有些是只在某些条件下存在，或者根本不存在。即给函数传入的参数对象中只有部分属性赋值了。</p>\n<blockquote>\n<p>两种方式</p>\n<ol>\n<li>在可选属性后面加?</li>\n<li>可以给参数设置默认值(自己亲测有效,官网没写,有待继续测试)</li>\n</ol>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">name:<span class=\"built_in\">string</span>,age?:<span class=\"built_in\">number</span></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(name,age) <span class=\"comment\">//caicai,undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">name:<span class=\"built_in\">string</span>,age:<span class=\"built_in\">number</span> = 10</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(name,age) <span class=\"comment\">//caicai,10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func(<span class=\"string\">\"caicai\"</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"只读属性-readonly\"><a href=\"#只读属性-readonly\" class=\"headerlink\" title=\"只读属性 readonly\"></a>只读属性 readonly</h2></li>\n</ul>\n<p>一些对象属性只能在对象刚刚创建的时候修改其值。 你可以在属性名前用 readonly来指定只读属性</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Point&#123;</span><br><span class=\"line\">    readonly x:<span class=\"built_in\">number</span>,</span><br><span class=\"line\">    readonly y:<span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p:Point = &#123;x:<span class=\"number\">5</span>,y:<span class=\"number\">10</span>&#125;</span><br><span class=\"line\">p.x=<span class=\"number\">100</span>;<span class=\"comment\">//error</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"readonly-vs-const\"><a href=\"#readonly-vs-const\" class=\"headerlink\" title=\"readonly vs const\"></a>readonly vs const</h2></li>\n</ul>\n<p>最简单判断该用readonly还是const的方法是看要把它做为变量使用还是做为一个属性。 做为变量使用的话用 const，若做为属性则使用readonly。</p>\n<ul>\n<li><h2 id=\"额外的属性检查\"><a href=\"#额外的属性检查\" class=\"headerlink\" title=\"额外的属性检查\"></a>额外的属性检查</h2></li>\n</ul>\n<p>以上定义接口的时候,约定的参数为必传属性,在生活中一般会存在一些不存在的属性需要传入,因此,我们总不能都写到interface里声明一遍(不声明就会报错),<br>因此我们需要绕开这些检查,最简单的办法:</p>\n<ol>\n<li>使用断言</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Point&#123;</span><br><span class=\"line\">    x:<span class=\"built_in\">number</span>,</span><br><span class=\"line\">    y: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">p</span>(<span class=\"params\">config: Point</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(config) <span class=\"comment\">//&#123;x:10,y:20,z:100&#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">p(&#123;x:<span class=\"number\">10</span>,y:<span class=\"number\">20</span>,z:<span class=\"number\">100</span>&#125; <span class=\"keyword\">as</span> Point)</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>添加一个字符串索引签名</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Point&#123;</span><br><span class=\"line\">    x:<span class=\"built_in\">number</span>,</span><br><span class=\"line\">    y: <span class=\"built_in\">number</span>,</span><br><span class=\"line\">   [propName: <span class=\"built_in\">string</span>]: <span class=\"built_in\">any</span> <span class=\"comment\">//字符串签名,这样就可以传入任何参数了</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">p</span>(<span class=\"params\">config: Point</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(config) <span class=\"comment\">//&#123;x:10,y:20,z:100&#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">p(&#123;x:<span class=\"number\">10</span>,y:<span class=\"number\">20</span>,z:<span class=\"number\">100</span>&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"函数类型\"><a href=\"#函数类型\" class=\"headerlink\" title=\"函数类型\"></a>函数类型</h2></li>\n</ul>\n<p>接口能够描述JavaScript中对象拥有的各种各样的外形。 除了描述带有属性的普通对象外，接口也可以描述函数类型。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> SearchFunc &#123; <span class=\"comment\">//申明一个函数类型(传入参数有两个,返回值的类型为boolean)</span></span><br><span class=\"line\">  (source: <span class=\"built_in\">string</span>, subString: <span class=\"built_in\">string</span>): <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> mySearch: SearchFunc;</span><br><span class=\"line\">mySearch = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source: <span class=\"built_in\">string</span>, subString: <span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = source.search(subString);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result &gt; <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"可索引的类型\"><a href=\"#可索引的类型\" class=\"headerlink\" title=\"可索引的类型\"></a>可索引的类型</h2></li>\n</ul>\n<p>描述那些能够“通过索引得到”的类型 可索引类型具有一个 索引签名，它描述了对象索引的类型，还有相应的索引返回值类型</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> StringArray &#123;</span><br><span class=\"line\">  [index: <span class=\"built_in\">number</span>]: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myArray: StringArray;</span><br><span class=\"line\">myArray = [<span class=\"string\">\"Bob\"</span>, <span class=\"string\">\"Fred\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myStr: <span class=\"built_in\">string</span> = myArray[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"类类型\"><a href=\"#类类型\" class=\"headerlink\" title=\"类类型\"></a>类类型</h2></li>\n</ul>\n<blockquote>\n<p>实现接口</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> ClockInterface &#123;</span><br><span class=\"line\">    currentTime: <span class=\"built_in\">Date</span>;<span class=\"comment\">//属性</span></span><br><span class=\"line\">    setTime(d: <span class=\"built_in\">Date</span>);<span class=\"comment\">//方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Clock <span class=\"keyword\">implements</span> ClockInterface &#123;<span class=\"comment\">//在类里实现</span></span><br><span class=\"line\">    currentTime: <span class=\"built_in\">Date</span>;</span><br><span class=\"line\">    setTime(d: <span class=\"built_in\">Date</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.currentTime = d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">h: <span class=\"built_in\">number</span>, m: <span class=\"built_in\">number</span></span>) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h1><p>传统的JavaScript程序使用函数和基于原型的继承来创建可重用的组件,ECMAScript 6开始，JavaScript程序员将能够使用基于类的面向对象的方式</p>\n<ul>\n<li><h2 id=\"简单事例\"><a href=\"#简单事例\" class=\"headerlink\" title=\"简单事例\"></a>简单事例</h2></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Greeter &#123;</span><br><span class=\"line\">    greeting: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">message: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.greeting = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    greet() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Hello, \"</span> + <span class=\"keyword\">this</span>.greeting;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> greeter = <span class=\"keyword\">new</span> Greeter(<span class=\"string\">\"world\"</span>);</span><br></pre></td></tr></table></figure>\n<p>以上声明了一个 Greeter类。这个类有3个成员：一个叫做greeting的属性，一个构造函数和一个greet方法</p>\n<p>在引用任何一个类成员的时候都用了this。 它表示我们访问的是类的成员。</p>\n<p>最后一行，我们使用new构造了Greeter类的一个实例。 它会调用之前定义的构造函数，创建一个 Greeter类型的新对象，并执行构造函数初始化它</p>\n<ul>\n<li><h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Animal &#123;</span><br><span class=\"line\">    name:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">theName: <span class=\"built_in\">string</span></span>) &#123; <span class=\"keyword\">this</span>.name = theName; &#125;</span><br><span class=\"line\">    move(distanceInMeters: <span class=\"built_in\">number</span> = <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span> moved <span class=\"subst\">$&#123;distanceInMeters&#125;</span>m.`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Snake <span class=\"keyword\">extends</span> Animal &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123; <span class=\"keyword\">super</span>(name); &#125;</span><br><span class=\"line\">    move(distanceInMeters = <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Slithering...\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.move(distanceInMeters);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Horse <span class=\"keyword\">extends</span> Animal &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123; <span class=\"keyword\">super</span>(name); &#125;</span><br><span class=\"line\">    move(distanceInMeters = <span class=\"number\">45</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Galloping...\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.move(distanceInMeters);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> sam = <span class=\"keyword\">new</span> Snake(<span class=\"string\">\"Sammy the Python\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> tom: Animal = <span class=\"keyword\">new</span> Horse(<span class=\"string\">\"Tommy the Palomino\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">sam.move();</span><br><span class=\"line\">tom.move(<span class=\"number\">34</span>);</span><br><span class=\"line\"><span class=\"comment\">//运行结果:</span></span><br><span class=\"line\"><span class=\"comment\">//Slithering...</span></span><br><span class=\"line\"><span class=\"comment\">//Sammy the Python moved 5m.</span></span><br><span class=\"line\"><span class=\"comment\">//Galloping...</span></span><br><span class=\"line\"><span class=\"comment\">//Tommy the Palomino moved 34m.</span></span><br></pre></td></tr></table></figure>\n<p>我们使用 extends关键字来创建子类。你可以看到Horse和Snake类是基类Animal的子类，并且可以访问其属性和方法,并且重写了父类的方法</p>\n<ul>\n<li><h2 id=\"公共，私有与受保护的修饰符\"><a href=\"#公共，私有与受保护的修饰符\" class=\"headerlink\" title=\"公共，私有与受保护的修饰符\"></a>公共，私有与受保护的修饰符</h2></li>\n<li><h3 id=\"默认为public-可加可不加\"><a href=\"#默认为public-可加可不加\" class=\"headerlink\" title=\"默认为public (可加可不加)\"></a>默认为public (可加可不加)</h3></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Animal &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">constructor</span>(<span class=\"params\">theName: <span class=\"built_in\">string</span></span>) &#123; <span class=\"keyword\">this</span>.name = theName; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> move(distanceInMeters: <span class=\"built_in\">number</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span> moved <span class=\"subst\">$&#123;distanceInMeters&#125;</span>m.`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h3 id=\"private\"><a href=\"#private\" class=\"headerlink\" title=\"private\"></a>private</h3></li>\n</ul>\n<p>当成员被标记成private时，它就不能在声明它的类的外部访问。private成员在派生类中仍然可以访问</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Animal &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">theName: <span class=\"built_in\">string</span></span>) &#123; <span class=\"keyword\">this</span>.name = theName; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Animal(<span class=\"string\">\"Cat\"</span>).name; <span class=\"comment\">// Error: 'name' is private;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><h3 id=\"protected\"><a href=\"#protected\" class=\"headerlink\" title=\"protected\"></a>protected</h3></li>\n</ul>\n<p>protected修饰符与private修饰符的行为很相似，但有一点不同，protected成员在派生类中仍然可以访问</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Person &#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123; <span class=\"keyword\">this</span>.name = name; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Employee <span class=\"keyword\">extends</span> Person &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> department: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span>, department: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.department = department;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> getElevatorPitch() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`Hello, my name is <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span> and I work in <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.department&#125;</span>.`</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> howard = <span class=\"keyword\">new</span> Employee(<span class=\"string\">\"Howard\"</span>, <span class=\"string\">\"Sales\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(howard.getElevatorPitch());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(howard.name);</span><br></pre></td></tr></table></figure>\n<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><h2 id=\"函数类型-1\"><a href=\"#函数类型-1\" class=\"headerlink\" title=\"函数类型\"></a>函数类型</h2><ul>\n<li><h3 id=\"为函数定义类型\"><a href=\"#为函数定义类型\" class=\"headerlink\" title=\"为函数定义类型\"></a>为函数定义类型</h3></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span></span>): <span class=\"title\">number</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myAdd = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span></span>): <span class=\"title\">number</span> </span>&#123; <span class=\"keyword\">return</span> x+y; &#125;;<span class=\"comment\">//返回值为number类型</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><h3 id=\"书写完整函数类型\"><a href=\"#书写完整函数类型\" class=\"headerlink\" title=\"书写完整函数类型\"></a>书写完整函数类型</h3></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myAdd: <span class=\"function\">(<span class=\"params\">x:<span class=\"built_in\">number</span>, y:<span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"built_in\">number</span> =</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span></span>): <span class=\"title\">number</span> </span>&#123; <span class=\"keyword\">return</span> x+y; &#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h3 id=\"推断类型\"><a href=\"#推断类型\" class=\"headerlink\" title=\"推断类型\"></a>推断类型</h3></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myAdd = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span></span>): <span class=\"title\">number</span> </span>&#123; <span class=\"keyword\">return</span> x + y; &#125;;</span><br><span class=\"line\"><span class=\"comment\">//=&gt; typescript会自动推断出函数的类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> myAdd: <span class=\"function\">(<span class=\"params\">baseValue:<span class=\"built_in\">number</span>, increment:<span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"built_in\">number</span> =</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) </span>&#123; <span class=\"keyword\">return</span> x + y; &#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"可选参数\"><a href=\"#可选参数\" class=\"headerlink\" title=\"可选参数\"></a>可选参数</h2><p> 在TypeScript里我们可以在参数名旁使用 ?实现可选参数的功能</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildName</span>(<span class=\"params\">firstName: <span class=\"built_in\">string</span>, lastName?: <span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lastName)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> firstName + <span class=\"string\">\" \"</span> + lastName;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> firstName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> result1 = buildName(<span class=\"string\">\"Bob\"</span>);  <span class=\"comment\">// works correctly now</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> result2 = buildName(<span class=\"string\">\"Bob\"</span>, <span class=\"string\">\"Adams\"</span>, <span class=\"string\">\"Sr.\"</span>);  <span class=\"comment\">// error, too many parameters</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> result3 = buildName(<span class=\"string\">\"Bob\"</span>, <span class=\"string\">\"Adams\"</span>);  <span class=\"comment\">// ah, just right</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"默认参数\"><a href=\"#默认参数\" class=\"headerlink\" title=\"默认参数\"></a>默认参数</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildName</span>(<span class=\"params\">firstName: <span class=\"built_in\">string</span>, lastName = \"Smith\"</span>) </span>&#123;<span class=\"comment\">//有默认值的参数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> firstName + <span class=\"string\">\" \"</span> + lastName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> result1 = buildName(<span class=\"string\">\"Bob\"</span>);                  <span class=\"comment\">// works correctly now, returns \"Bob Smith\"</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> result2 = buildName(<span class=\"string\">\"Bob\"</span>, <span class=\"literal\">undefined</span>);       <span class=\"comment\">// still works, also returns \"Bob Smith\"</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> result3 = buildName(<span class=\"string\">\"Bob\"</span>, <span class=\"string\">\"Adams\"</span>, <span class=\"string\">\"Sr.\"</span>);  <span class=\"comment\">// error, too many parameters</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> result4 = buildName(<span class=\"string\">\"Bob\"</span>, <span class=\"string\">\"Adams\"</span>);         <span class=\"comment\">// ah, just right</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"剩余参数\"><a href=\"#剩余参数\" class=\"headerlink\" title=\"剩余参数\"></a>剩余参数</h2><p>必要参数，默认参数和可选参数有个共同点：它们表示某一个参数。 有时，你想同时操作多个参数，或者你并不知道会有多少参数传递进来。 在JavaScript里，你可以使用 arguments来访问所有传入的参数。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildName</span>(<span class=\"params\">firstName: <span class=\"built_in\">string</span>, ...restOfName: <span class=\"built_in\">string</span>[]</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> firstName + <span class=\"string\">\" \"</span> + restOfName.join(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> employeeName = buildName(<span class=\"string\">\"Joseph\"</span>, <span class=\"string\">\"Samuel\"</span>, <span class=\"string\">\"Lucas\"</span>, <span class=\"string\">\"MacKinzie\"</span>);</span><br></pre></td></tr></table></figure>\n<h1 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h1><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">identity</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">arg: T</span>): <span class=\"title\">T</span> </span>&#123; <span class=\"comment\">//假如用户传入的参数T为字符串,则t为string类型,函数返回值也为string类型</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"export-import\"><a href=\"#export-import\" class=\"headerlink\" title=\"export import\"></a>export import</h1><p>es6 的导入导出可以用的同时,typeScript新加入了 export = 和 import = require() 进行导出和导入</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ZipCodeValidator.ts</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> numberRegexp = <span class=\"regexp\">/^[0-9]+$/</span>;</span><br><span class=\"line\"><span class=\"keyword\">class</span> ZipCodeValidator &#123;</span><br><span class=\"line\">    isAcceptable(s: <span class=\"built_in\">string</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s.length === <span class=\"number\">5</span> &amp;&amp; numberRegexp.test(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> = ZipCodeValidator;</span><br><span class=\"line\"><span class=\"comment\">//Test.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> zip = <span class=\"built_in\">require</span>(<span class=\"string\">\"./ZipCodeValidator\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Some samples to try</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> strings = [<span class=\"string\">\"Hello\"</span>, <span class=\"string\">\"98052\"</span>, <span class=\"string\">\"101\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Validators to use</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> validator = <span class=\"keyword\">new</span> zip();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Show whether each string passed each validator</span></span><br><span class=\"line\">strings.forEach(<span class=\"function\"><span class=\"params\">s</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`\"<span class=\"subst\">$&#123; s &#125;</span>\" - <span class=\"subst\">$&#123; validator.isAcceptable(s) ? <span class=\"string\">\"matches\"</span> : <span class=\"string\">\"does not match\"</span> &#125;</span>`</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n"},{"title":"Vue项目总结","date":"2020-10-16T07:48:18.000Z","_content":"\n","source":"_posts/Vue项目总结.md","raw":"---\ntitle: Vue项目总结\ndate: 2020-10-16 15:48:18\ncategories: Vue\n---\n\n","slug":"Vue项目总结","published":1,"updated":"2020-10-16T07:53:11.095Z","_id":"ckgbydgn6000dofo9nkniblsj","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"apply_call_bind用法","date":"2016-09-05T13:14:19.000Z","_content":"\n# apply call bind 用法\napply call bind 都是用来改变上下文的this指向的\n## 不同点\ncall和apply一样，直接引用在方法上，而bind绑定this后返回一个方法，但内部核心还是apply。\n## 例子\n```\n    var obj = {\n      a: 1,\n      b: 2,\n      getCount: function(c, d) {\n        return this.a + this.b + c + d;\n      }\n    };\n    window.a = window.b = 0;\n    console.log(obj.getCount(3, 4));  // 10\n    var func = obj.getCount;\n    console.log(func(3, 4)); //7\n```\n上面为何会这样？因为func在上下文中的this是window，bind的存在正是为了改变this指向获取想要的值：\n```\n    var obj = {\n      a: 1,\n      b: 2,\n      getCount: function(c, d) {\n        return this.a + this.b + c + d;\n      }\n    };\n\n    window.a = window.b = 0;\n    var func = obj.getCount.bind(obj);\n    console.log(func(3, 4));  // 10\n```\n- [x] 上面说明：bind是function的一个函数扩展方法，bind以后代码重新绑定了func内部的this指向 `（getCount中的this->bind的obj）`\n\n## 兼容写法\n```\n    var obj = {\n      a: 1,\n      b: 2,\n      getCount: function(c, d) {\n        return this.a + this.b + c + d;\n      }\n    };\n\n    Function.prototype.bind = Function.prototype.bind || function(context) {\n      var that = this;\n      return function() {\n        // console.log(arguments); // console [3,4] if ie<6-8>\n        return that.apply(context, arguments);\n\n      }\n    }\n    window.a = window.b = 0;\n    var func = obj.getCount.bind(obj);\n    console.log(func(3, 4));  // 10\n```\n其实在我看来bind的核心是返回一个未执行的方法，如果直接使用apply或者call：\n```\n    var ans = obj.getCount.call(obj,3,4);\n    console.log(ans); // 10\n    或\n    var ans = obj.getCount.apply(obj, [3, 4]);\n    console.log(ans); // 10\n```\n无法使用简写的func函数构造，所以用bind传递this指向，再返回一个未执行的方法，实现方式相当巧妙。","source":"_posts/apply-call-bind用法.md","raw":"---\ntitle: apply_call_bind用法\ndate: 2016-09-05 21:14:19\ncategories: Javascript\ntags:\n    - Javascript\n---\n\n# apply call bind 用法\napply call bind 都是用来改变上下文的this指向的\n## 不同点\ncall和apply一样，直接引用在方法上，而bind绑定this后返回一个方法，但内部核心还是apply。\n## 例子\n```\n    var obj = {\n      a: 1,\n      b: 2,\n      getCount: function(c, d) {\n        return this.a + this.b + c + d;\n      }\n    };\n    window.a = window.b = 0;\n    console.log(obj.getCount(3, 4));  // 10\n    var func = obj.getCount;\n    console.log(func(3, 4)); //7\n```\n上面为何会这样？因为func在上下文中的this是window，bind的存在正是为了改变this指向获取想要的值：\n```\n    var obj = {\n      a: 1,\n      b: 2,\n      getCount: function(c, d) {\n        return this.a + this.b + c + d;\n      }\n    };\n\n    window.a = window.b = 0;\n    var func = obj.getCount.bind(obj);\n    console.log(func(3, 4));  // 10\n```\n- [x] 上面说明：bind是function的一个函数扩展方法，bind以后代码重新绑定了func内部的this指向 `（getCount中的this->bind的obj）`\n\n## 兼容写法\n```\n    var obj = {\n      a: 1,\n      b: 2,\n      getCount: function(c, d) {\n        return this.a + this.b + c + d;\n      }\n    };\n\n    Function.prototype.bind = Function.prototype.bind || function(context) {\n      var that = this;\n      return function() {\n        // console.log(arguments); // console [3,4] if ie<6-8>\n        return that.apply(context, arguments);\n\n      }\n    }\n    window.a = window.b = 0;\n    var func = obj.getCount.bind(obj);\n    console.log(func(3, 4));  // 10\n```\n其实在我看来bind的核心是返回一个未执行的方法，如果直接使用apply或者call：\n```\n    var ans = obj.getCount.call(obj,3,4);\n    console.log(ans); // 10\n    或\n    var ans = obj.getCount.apply(obj, [3, 4]);\n    console.log(ans); // 10\n```\n无法使用简写的func函数构造，所以用bind传递this指向，再返回一个未执行的方法，实现方式相当巧妙。","slug":"apply-call-bind用法","published":1,"updated":"2020-03-23T11:05:23.941Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgbydgn8000eofo9a8vdevcc","content":"<h1 id=\"apply-call-bind-用法\"><a href=\"#apply-call-bind-用法\" class=\"headerlink\" title=\"apply call bind 用法\"></a>apply call bind 用法</h1><p>apply call bind 都是用来改变上下文的this指向的</p>\n<h2 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h2><p>call和apply一样，直接引用在方法上，而bind绑定this后返回一个方法，但内部核心还是apply。</p>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">  a: 1,</span><br><span class=\"line\">  b: 2,</span><br><span class=\"line\">  getCount: function(c, d) &#123;</span><br><span class=\"line\">    return this.a + this.b + c + d;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">window.a = window.b = 0;</span><br><span class=\"line\">console.log(obj.getCount(3, 4));  // 10</span><br><span class=\"line\">var func = obj.getCount;</span><br><span class=\"line\">console.log(func(3, 4)); //7</span><br></pre></td></tr></table></figure>\n<p>上面为何会这样？因为func在上下文中的this是window，bind的存在正是为了改变this指向获取想要的值：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">  a: 1,</span><br><span class=\"line\">  b: 2,</span><br><span class=\"line\">  getCount: function(c, d) &#123;</span><br><span class=\"line\">    return this.a + this.b + c + d;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">window.a = window.b = 0;</span><br><span class=\"line\">var func = obj.getCount.bind(obj);</span><br><span class=\"line\">console.log(func(3, 4));  // 10</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>[x] 上面说明：bind是function的一个函数扩展方法，bind以后代码重新绑定了func内部的this指向 <code>（getCount中的this-&gt;bind的obj）</code></li>\n</ul>\n<h2 id=\"兼容写法\"><a href=\"#兼容写法\" class=\"headerlink\" title=\"兼容写法\"></a>兼容写法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">  a: 1,</span><br><span class=\"line\">  b: 2,</span><br><span class=\"line\">  getCount: function(c, d) &#123;</span><br><span class=\"line\">    return this.a + this.b + c + d;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Function.prototype.bind = Function.prototype.bind || function(context) &#123;</span><br><span class=\"line\">  var that = this;</span><br><span class=\"line\">  return function() &#123;</span><br><span class=\"line\">    // console.log(arguments); // console [3,4] if ie&lt;6-8&gt;</span><br><span class=\"line\">    return that.apply(context, arguments);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">window.a = window.b = 0;</span><br><span class=\"line\">var func = obj.getCount.bind(obj);</span><br><span class=\"line\">console.log(func(3, 4));  // 10</span><br></pre></td></tr></table></figure>\n<p>其实在我看来bind的核心是返回一个未执行的方法，如果直接使用apply或者call：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var ans = obj.getCount.call(obj,3,4);</span><br><span class=\"line\">console.log(ans); // 10</span><br><span class=\"line\">或</span><br><span class=\"line\">var ans = obj.getCount.apply(obj, [3, 4]);</span><br><span class=\"line\">console.log(ans); // 10</span><br></pre></td></tr></table></figure></p>\n<p>无法使用简写的func函数构造，所以用bind传递this指向，再返回一个未执行的方法，实现方式相当巧妙。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"apply-call-bind-用法\"><a href=\"#apply-call-bind-用法\" class=\"headerlink\" title=\"apply call bind 用法\"></a>apply call bind 用法</h1><p>apply call bind 都是用来改变上下文的this指向的</p>\n<h2 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h2><p>call和apply一样，直接引用在方法上，而bind绑定this后返回一个方法，但内部核心还是apply。</p>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">  a: 1,</span><br><span class=\"line\">  b: 2,</span><br><span class=\"line\">  getCount: function(c, d) &#123;</span><br><span class=\"line\">    return this.a + this.b + c + d;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">window.a = window.b = 0;</span><br><span class=\"line\">console.log(obj.getCount(3, 4));  // 10</span><br><span class=\"line\">var func = obj.getCount;</span><br><span class=\"line\">console.log(func(3, 4)); //7</span><br></pre></td></tr></table></figure>\n<p>上面为何会这样？因为func在上下文中的this是window，bind的存在正是为了改变this指向获取想要的值：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">  a: 1,</span><br><span class=\"line\">  b: 2,</span><br><span class=\"line\">  getCount: function(c, d) &#123;</span><br><span class=\"line\">    return this.a + this.b + c + d;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">window.a = window.b = 0;</span><br><span class=\"line\">var func = obj.getCount.bind(obj);</span><br><span class=\"line\">console.log(func(3, 4));  // 10</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>[x] 上面说明：bind是function的一个函数扩展方法，bind以后代码重新绑定了func内部的this指向 <code>（getCount中的this-&gt;bind的obj）</code></li>\n</ul>\n<h2 id=\"兼容写法\"><a href=\"#兼容写法\" class=\"headerlink\" title=\"兼容写法\"></a>兼容写法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">  a: 1,</span><br><span class=\"line\">  b: 2,</span><br><span class=\"line\">  getCount: function(c, d) &#123;</span><br><span class=\"line\">    return this.a + this.b + c + d;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Function.prototype.bind = Function.prototype.bind || function(context) &#123;</span><br><span class=\"line\">  var that = this;</span><br><span class=\"line\">  return function() &#123;</span><br><span class=\"line\">    // console.log(arguments); // console [3,4] if ie&lt;6-8&gt;</span><br><span class=\"line\">    return that.apply(context, arguments);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">window.a = window.b = 0;</span><br><span class=\"line\">var func = obj.getCount.bind(obj);</span><br><span class=\"line\">console.log(func(3, 4));  // 10</span><br></pre></td></tr></table></figure>\n<p>其实在我看来bind的核心是返回一个未执行的方法，如果直接使用apply或者call：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var ans = obj.getCount.call(obj,3,4);</span><br><span class=\"line\">console.log(ans); // 10</span><br><span class=\"line\">或</span><br><span class=\"line\">var ans = obj.getCount.apply(obj, [3, 4]);</span><br><span class=\"line\">console.log(ans); // 10</span><br></pre></td></tr></table></figure></p>\n<p>无法使用简写的func函数构造，所以用bind传递this指向，再返回一个未执行的方法，实现方式相当巧妙。</p>\n"},{"title":"axios提交form表单","date":"2018-04-09T09:08:23.000Z","_content":"\n# 利用axios第三方庫提交form表单数据\n\n```javascript 1.8\nlet form = new FormData();\n\n// 例如现在有个上传的表单,利用form表单上传文件\n\n// 取文件\nlet file = document.getElementById(\"file\");\nlet files = file.files; // 文件对象 = 类数组的对象 { 0:File对象,1:File对象,length:2}\n\nfor(let o of files){\n    form.append(\"file\",o)\n}\n\nform.append(\"key\",JSON.stringify({name:\"caicai\"})); // 传其它参数,在form里边\n\naxios({\n    url:\"xxx\",\n    method:\"post\",\n    data: form,\n    params:{ // 地址栏传参,其它参数\n      xx:\"xx\"  \n    },\n    headers:{\n        \"Content-Type\":\"multipart/form-data\"\n    }\n})\n```\n","source":"_posts/axios提交form表单.md","raw":"---\ntitle: axios提交form表单\ndate: 2018-04-09 17:08:23\ncategories: Javascript\ntags:\n     - Javascript\n---\n\n# 利用axios第三方庫提交form表单数据\n\n```javascript 1.8\nlet form = new FormData();\n\n// 例如现在有个上传的表单,利用form表单上传文件\n\n// 取文件\nlet file = document.getElementById(\"file\");\nlet files = file.files; // 文件对象 = 类数组的对象 { 0:File对象,1:File对象,length:2}\n\nfor(let o of files){\n    form.append(\"file\",o)\n}\n\nform.append(\"key\",JSON.stringify({name:\"caicai\"})); // 传其它参数,在form里边\n\naxios({\n    url:\"xxx\",\n    method:\"post\",\n    data: form,\n    params:{ // 地址栏传参,其它参数\n      xx:\"xx\"  \n    },\n    headers:{\n        \"Content-Type\":\"multipart/form-data\"\n    }\n})\n```\n","slug":"axios提交form表单","published":1,"updated":"2020-03-23T11:05:23.941Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgbydgna000iofo9d5s2kbgy","content":"<h1 id=\"利用axios第三方庫提交form表单数据\"><a href=\"#利用axios第三方庫提交form表单数据\" class=\"headerlink\" title=\"利用axios第三方庫提交form表单数据\"></a>利用axios第三方庫提交form表单数据</h1><figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> form = <span class=\"keyword\">new</span> FormData();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 例如现在有个上传的表单,利用form表单上传文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取文件</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> file = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"file\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> files = file.files; <span class=\"comment\">// 文件对象 = 类数组的对象 &#123; 0:File对象,1:File对象,length:2&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> o <span class=\"keyword\">of</span> files)&#123;</span><br><span class=\"line\">    form.append(<span class=\"string\">\"file\"</span>,o)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">form.append(<span class=\"string\">\"key\"</span>,<span class=\"built_in\">JSON</span>.stringify(&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"caicai\"</span>&#125;)); <span class=\"comment\">// 传其它参数,在form里边</span></span><br><span class=\"line\"></span><br><span class=\"line\">axios(&#123;</span><br><span class=\"line\">    url:<span class=\"string\">\"xxx\"</span>,</span><br><span class=\"line\">    method:<span class=\"string\">\"post\"</span>,</span><br><span class=\"line\">    data: form,</span><br><span class=\"line\">    params:&#123; <span class=\"comment\">// 地址栏传参,其它参数</span></span><br><span class=\"line\">      xx:<span class=\"string\">\"xx\"</span>  </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    headers:&#123;</span><br><span class=\"line\">        <span class=\"string\">\"Content-Type\"</span>:<span class=\"string\">\"multipart/form-data\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"利用axios第三方庫提交form表单数据\"><a href=\"#利用axios第三方庫提交form表单数据\" class=\"headerlink\" title=\"利用axios第三方庫提交form表单数据\"></a>利用axios第三方庫提交form表单数据</h1><figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> form = <span class=\"keyword\">new</span> FormData();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 例如现在有个上传的表单,利用form表单上传文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取文件</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> file = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"file\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> files = file.files; <span class=\"comment\">// 文件对象 = 类数组的对象 &#123; 0:File对象,1:File对象,length:2&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> o <span class=\"keyword\">of</span> files)&#123;</span><br><span class=\"line\">    form.append(<span class=\"string\">\"file\"</span>,o)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">form.append(<span class=\"string\">\"key\"</span>,<span class=\"built_in\">JSON</span>.stringify(&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"caicai\"</span>&#125;)); <span class=\"comment\">// 传其它参数,在form里边</span></span><br><span class=\"line\"></span><br><span class=\"line\">axios(&#123;</span><br><span class=\"line\">    url:<span class=\"string\">\"xxx\"</span>,</span><br><span class=\"line\">    method:<span class=\"string\">\"post\"</span>,</span><br><span class=\"line\">    data: form,</span><br><span class=\"line\">    params:&#123; <span class=\"comment\">// 地址栏传参,其它参数</span></span><br><span class=\"line\">      xx:<span class=\"string\">\"xx\"</span>  </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    headers:&#123;</span><br><span class=\"line\">        <span class=\"string\">\"Content-Type\"</span>:<span class=\"string\">\"multipart/form-data\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n"},{"title":"dom","date":"2016-11-20T07:00:33.000Z","_content":"\n# Dom and JavaScript\n\n### Dom\n\n文档对象模型,是html和xml的文档编程接口\n\n### JavaScript\n\n","source":"_posts/dom-js.md","raw":"---\ntitle: dom\ndate: 2016-11-20 15:00:33\ncategories: Javascript\ntags:\n     - Javascript\n---\n\n# Dom and JavaScript\n\n### Dom\n\n文档对象模型,是html和xml的文档编程接口\n\n### JavaScript\n\n","slug":"dom-js","published":1,"updated":"2020-03-23T11:05:23.941Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgbydgnc000kofo92u284qd1","content":"<h1 id=\"Dom-and-JavaScript\"><a href=\"#Dom-and-JavaScript\" class=\"headerlink\" title=\"Dom and JavaScript\"></a>Dom and JavaScript</h1><h3 id=\"Dom\"><a href=\"#Dom\" class=\"headerlink\" title=\"Dom\"></a>Dom</h3><p>文档对象模型,是html和xml的文档编程接口</p>\n<h3 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h3>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Dom-and-JavaScript\"><a href=\"#Dom-and-JavaScript\" class=\"headerlink\" title=\"Dom and JavaScript\"></a>Dom and JavaScript</h1><h3 id=\"Dom\"><a href=\"#Dom\" class=\"headerlink\" title=\"Dom\"></a>Dom</h3><p>文档对象模型,是html和xml的文档编程接口</p>\n<h3 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h3>"},{"title":"dom","date":"2016-11-23T07:00:33.000Z","_content":"\n---------\n```\n<body>\n    <div id=\"div\">\n        <div class=\"div1\" name=\"div\">hello world<span>奥斯卡看卡</span></div>\n        <div class=\"div2\" name=\"div\">哈哈哈</div>\n    </div>\n</body>\n```\n\n## 获取元素节点\n\n> getElementById 返回的结果是以对象的形式，其余为类数组（NodeList对象）\n\n```\nvar　divId = document.getElementById(\"div\");\nconsole.log(divId)\nvar divTag = document.getElementsByTagName(\"div\");\nconsole.log(divTag)\nvar divClass = document.getElementsByClassName(\"div1\");\nconsole.log(divClass)\nvar divName = document.getElementsByName(\"div\");\nconsole.log(divName)   \n```\n## javascript 的css选择器\n\ndocument.querySelector()\ndocument.querySelectorAll()\n```\nvar div =document.querySelector(\"#div>div\");\nconsole.log(div) //输出为div1的对象形式\nvar div = document.querySelectorAll(\"div\");\nconsole.log(div) //输出为所有div\n```\n\n## 文档结构和遍历\n\n一.作为节点数的文档\n 1. parentNode    获取该节点的父节点\n 2. childNodes    获取该节点的子节点数组\n 3. firstChild    获取该节点的第一个子节点\n 4. lastChild    获取该节点的最后一个子节点\n 5. nextSibling    获取该节点的下一个兄弟元素\n 6. previoursSibling    获取该节点的上一个兄弟元素\n 7. nodeType    节点的类型，9代表Document节点，1代表Element节点，3代表Text节点，8代表Comment节点，11代表DocumentFragment节点\n 8. nodeVlue    Text节点或Comment节点的文本内容\n 9. nodeName    元素的标签名(如P,SPAN,#text(文本节点),DIV)，以大写形式表示\n\n```\nvar span = document.getElementsByTagName(\"span\");\nconsole.log(span[0].parentNode) // //输出为div1的对象形式\nvar div = document.getElementById(\"div\");\nconsole.log(div.childNodes) //输出为\n/*NodeList[5]\n{0:text,\n1:div.div1,\n2:text,\n3:div.div2,\n4:text,\nlength:5}*/\nconsole.log(div.firstChild)//文本节点\nconsole.log(div.childNodes[1].firstChild.nodeValue) //文本节点的ｖａｌｕｅ\nconsole.log(span[0].parentNode.nextSibling.nextSibling) // 输出为div２对象　因为第一个nextSibling是一个text节点\nvar text=\"\";\nfor(var i=0;i<div.childNodes.length;i++){\n    if(div.childNodes[i].nodeType==1){　//元素节点\n        text+=div.childNodes[i].nodeName.toLowerCase()+\":\"+div.childNodes[i].innerText+\"----\"+\"\\n\";\n    }else if(div.childNodes[i].nodeType==3){ //text节点\n        text+=div.childNodes[i].nodeName.toLowerCase()+\":\"+div.childNodes[i].nodeValue+\"----\"+\"\\n\";\n    }\n}\nconsole.log(text)\n```\n\n二.作为元素树的文档 // 忽略掉文本节点\n1、firstElementChild         第一个子元素节点\n2、lastElementChild          最后一个子元素节点\n3、nextElementSibling        下一个兄弟元素节点\n4、previousElementSibling    前一个兄弟元素节点\n5、childElementCount         子元素节点个数量\n\n```\n<div id=\"div1\">\n    <p id=\"p1\" class=\"class1\"> 我是第一个P</p>\n    <p id=\"p2\" class=\"class2\">我是第二个P</p>\n</div>\nvar node = document.getElementById(\"div1\");\nvar node1 = node.firstElementChild;\nvar node2 = node.lastElementChild;\n\nalert(node.childElementCount);  //输出2，div1一共有两个非文档子元素节点\nalert(node1.innerHTML);         //输出 我是第一个P\nalert(node2.innerHTML);         //输出 我是第二个P\nalert(node2.previousElementSibling.innerHTML);  //输出 我是第一个P(第二个元素节点的上一个非文本元素节点是P1)\nalert(node1.nextElementSibling.innerHTML);      //输出 我是第二个P(第一个元素节点的下一个兄弟非文本节点是P2)\n```\n\n## javascript操作HTML属性\n\n> 1、属性的读取，此处要注意的是，某些HTML属性名称在javascript之中是保留字，因此会有些许不同，如class,lable中的for在javascript中变为htmlFor,className。\n\n```\n<div id=\"div1\">\n    <p id=\"p1\" class=\"class1\"> 我是第一个P</p>\n    <img src=\"123.jpg\" alt=\"我是一张图片\" id=\"img1\" />\n    <input type=\"text\" value=\"我是一个文本框\" id=\"input1\" />\n</div>\n\nwindow.onload = function () {\n    var nodeText = document.getElementById(\"input1\");\n    alert(nodeText.value);        //输出 我是一个文本框\n    var nodeImg = document.getElementById(\"img1\");\n    alert(nodeImg.alt);            //输出 我是一张图片\n    var nodeP = document.getElementById(\"p1\");\n    alert(nodeP.className);        //输出 class1    注意获取class是className，如果写成nodeP.class则输出undefined\n}\n```\n\n> 属性的设置，此处同样要注意的是保留字\n\n```\n<div id=\"div1\">\n    <img src=\"1big.jpg\" alt=\"我是一张图片\" id=\"img1\" onclick=\"fun1()\" />\n</div>\n\nfunction fun1() {\n    document.getElementById(\"img1\").src = \"1small.jpg\";        //改变图片的路径属性。实现的效果为，当点击图片时，大图变小图。\n}\n```\n\n> 非标准HTML属性  //注意这两个方法是不必理会javascript保留字的，HTML属性是什么就怎么写。\n\ngetAttribute();   \nsetAttribute();\n\n```\n<div id=\"div1\">\n    <img src=\"1big.jpg\" alt=\"我是一张图片\" class=\"imgClass\" id=\"img1\" onclick=\"fun1()\" />\n</div>\n\nfunction fun1() {\n    document.getElementById(\"img1\").setAttribute(\"src\", \"1small.jpg\");\n    alert(document.getElementById(\"img1\").getAttribute(\"class\"));\n}\n```\n\n> Attr节点的属性\n\nattributes属性  非Element对象返回null，Element一般返回Attr对象。Attr对象是一个特殊的Node,通过name与value获取属性名称与值。\n\n```\nvar div = document.getElementsByTagName(\"div\");\nconsole.log(div[1].attributes) //返回div1的所有属性 {0:class,1:name}\nconsole.log(div[1].attributes[0].name) //返回div1的第一个属性的nodeName　结果为class\nconsole.log(div[1].attributes[0].value) //返回div1的第一个属性的nodeValue　结果为div1\n```\n\n> 元素的内容\n\n1、innerText、textContent    innerText与textContent的区别，当文本为空时，innerText是\"\"，而textContent是undefined\n2、innerHTML\n\n```\n<div id=\"div1\">\n    <p id=\"p1\">我是第一个P</p>\n    <p id=\"p2\">我是第<b>二</b>个P</p>\n</div>\n\nwindow.onload = function () {\n    alert(document.getElementById(\"p1\").innerText);  //注意火狐浏览器不支持innerText\n    alert(document.getElementById(\"p1\").textContent);    //基本都支持textContent\n    document.getElementById(\"p1\").textContent = \"我是p1，javascript改变了我\";    //设置文档Text\n    alert(document.getElementById(\"p2\").textContent);\n    alert(document.getElementById(\"p2\").innerHTML); //innerHTML与innerText的区别，就是对HTML代码的输出方式Text不会输出HTML代码\n}\n```\n\n> 创建，插入，删除节点\n\n1、document.createTextNode()    创建一个文本节点\n \n ```\n<div id=\"div1\">\n     <p id=\"p1\">我是第一个P</p>\n     <p id=\"p2\">我是第二个P</p>\n</div>\n\nwindow.onload = function () {\n     var textNode = document.createTextNode(\"<p>我是一个javascript新建的节点</p>\");\n     document.getElementById(\"div1\").appendChild(textNode);\n}\n结果为：\n<div id=\"div1\">\n    <p id=\"p1\">我是第一个P</p>\n    <p id=\"p2\">我是第二个P</p>\n    我是一个javascript新建的节点\n</div>\n ```\n \n2、document.createElement()    创建一个元素节点\n \n ```\n <div id=\"div1\">\n     <p id=\"p1\">我是第一个P</p>\n     <p id=\"p2\">我是第二个P</p>\n </div>\n window.onload = function () {\n     var pNode = document.createElement(\"p\");\n     pNode.textContent = \"新建一个P节点\";\n     document.getElementById(\"div1\").appendChild(pNode);\n }\n 结果为：\n <div id=\"div1\">\n     <p id=\"p1\">我是第一个P</p>\n     <p id=\"p2\">我是第二个P</p>\n     <p>新建一个P节点</p>\n </div>\n ```\n \n3、插入节点\nappendChild()    //将一个节点插入到调用节点的最后面\ninsertBefore()   //接受两个参数，第一个为待插入的节点，第二个指明在哪个节点前面，如果不传入第二个参数，报错。\n\n```\n<div id=\"div1\">\n    <p id=\"p1\">我是第一个P</p>\n</div>\n\nwindow.onload = function () {\n    var pNode1 = document.createElement(\"p\");\n    pNode1.textContent = \"insertBefore插入的节点\";\n    var pNode2 = document.createElement(\"p\");\n    pNode2.textContent = \"appendChild插入的节点\";\n    document.getElementById(\"div1\").appendChild(pNode2);\n    document.getElementById(\"div1\").insertBefore(pNode1,document.getElementById(\"p1\"));\n}\n结果为：\n<div id=\"div1\">\n    <p>insertBefore插入的节点</p>\n    <p id=\"p1\">我是第一个P</p>\n    <p>appendChild插入的节点</p>\n</div>\n```\n\n4、删除和替换节点。\n1)removeChild();    由父元素调用，删除一个子节点。注意是直接父元素调用，删除直接子元素才有效，删除孙子元素就没有效果了。\n\n```\n<div id=\"div1\">\n    <p id=\"p1\">我是第一个P</p>\n    <p id=\"p2\">我是第二个P</p>\n</div>\n\nwindow.onload = function () {\n    var div1 = document.getElementById(\"div1\");\n    div1.removeChild(document.getElementById(\"p2\"));\n}\n执行之后代码变为：\n<div id=\"div1\">\n    <p id=\"p1\">我是第一个P</p>    //注意到第二个P元素已经被移除了\n</div>\n```\n\n2)replaceChild()    //删除一个子节点，并用一个新节点代替它，第一个参数为新建的节点，第二个节点为被替换的节点\n\n```\n<div id=\"div1\">\n    <p id=\"p1\">我是第一个P</p>\n    <p id=\"p2\">我是第二个P</p>\n</div>\n\nwindow.onload = function () {\n    var div1 = document.getElementById(\"div1\");\n    var span1 = document.createElement(\"span\");\n    span1.textContent = \"我是一个新建的span\";\n    div1.replaceChild(span1,document.getElementById(\"p2\"));\n}\n执行完成后HTML代码变为：\n<div id=\"div1\">\n    <p id=\"p1\">我是第一个P</p>\n    <span>我是一个新建的span</span>    //留意到p2节点已经被替换为span1节点了\n</div>\n```\n\n> javascript操作元素CSS　通过元素的style属性可以随意读取和设置元素的CSS样式\n\n```\n<div id=\"div1\" style=\"width:100px; height:100px; background-color:red\"></div>\nwindow.onload = function () {\n    alert(document.getElementById(\"div1\").style.backgroundColor);\n    document.getElementById(\"div1\").style.backgroundColor = \"yellow\";\n}\n```\n\n> IE有许多好用的方法，后来都被其他浏览器抄袭了，比如这个contains方法。如果A元素包含B元素，则返回true(可以A包含A)，否则false。唯一不支持这个方法的是IE的死对头firefox。\n\n```\n<div id=\"parent\">\n  <p>\n    <strong id=\"child\" >本例子会在火狐中会报错。</strong>\n  </p>\n</div>\nwindow.onload = function(){\n    var A = document.getElementById('parent'),\n    B = document.getElementById('child');\n    alert(A.contains(A));　//true\n    alert(A.contains(B));　//true\n    alert(B.contains(A));  //false\n  }\n```\n\n> cloneNode(true/false) 克隆节点　　true为深度克隆　false为只克隆节点本身\n\n```\nvar p = document.createElement(\"p\");\np.id =\"ppp\";\np.innerText = \"我是新创建的p元素\";\nvar cloneNode = p.cloneNode(true); //<p id=\"ppp\">我是新创建的p元素</p>\nvar cloneNode = p.cloneNode(false);//默认为false <p id=\"ppp\"></p>\n```\n\n> addEventListener() 第一个参数是事件名，第二个是回调函数，第三个参数为true表示捕获，false表示冒泡。\n\naddEventListener()将指定的事件监听器注册到目标对象上，当目标对象触发制定的事件时，指定的回调函数就会触发。目标对象可以是 文档上的元素、 document、 window 或者XMLHttpRequest(比如onreadystatechange事件)。IE8及以下不支持此方法且只有事件冒泡没有事件捕获。IE9开始支持此方法，也就有了事件捕获。\n\n```\nvar div1 = document.getElementById(\"div1\");\ndiv1.addEventListener(\"click\", listener, false);\nfunction listener() {\n    console.log('test');\n}\nvar cloneHtml = div1.cloneNode(true);\ndocument.body.appendChild(cloneHtml);\n/*\n注意：\n    当对某一个元素1既绑定了捕获事件，又绑定了冒泡事件时：\n    当这个元素1并不是触发事件的那个元素2时，则触发顺序会按照先 捕获 后 冒泡 的顺序触发；\n    当这个元素1就是最底层的触发事件的元素时，则这个元素没有捕获和冒泡的区别，谁先绑定就先触发谁。\n*/\nvar div2 = document.getElementById(\"div2\");\ndiv2.addEventListener(\"click\", listener2, true);\nfunction listener2() {\n    console.log('test2');\n}\ndiv2.addEventListener(\"click\", listener1, false);\nfunction listener1() {\n    console.log('test1');\n}\n// 按绑定顺序执行，两个`addEventLister()`颠倒过来则执行顺序也变化\n// 如果再对`div1`绑定一个捕获、一个冒泡，则会先触发捕获 再 触发冒泡，与绑定顺序无关\n```\n\nremoveEventListener():与addEventListener()绑定事件对应的就是移除已绑定的事件\n注意：只能通过removeEventListener()解绑有名字的函数，对于绑定的匿名函数无法解除绑定。\n```\nvar div2 = document.getElementById(\"div2\");\ndiv2.addEventListener(\"click\", listener2, true);\nfunction listener2() {\n    console.log('test2');\n}\ndiv2.removeEventListener(\"click\", listener2, true);\n```\n\n attachEvent()、detachEvent() IE8及以下使用这两个方法绑定和解绑事件，当然，IE9+也支持这个事件。但这个方法绑定的事件默认为冒泡也只有冒泡。\n \n```\n// 这里需要在事件前加 on\ndiv2.attachEvent(\"onclick\", listener1);\nfunction listener1() {\n    console.log('test');\n    console.log(this);\n}\ndiv2.detachEvent(\"onclick\", listener1);\n//和addEventListener()一样，也不能解绑匿名函数。\n\n//标准事件和IE事件中的阻止默认事件和冒泡事件也有很大区别。\nvar div2 = document.getElementById(\"div2\");\nif (div2.addEventListener) {\n    div2.addEventListener(\"click\", function(e) {\n        e.preventDefault(); // 阻止默认事件\n        e.stopPropagation(); // 阻止冒泡\n        console.log(e.target.innerHTML);\n    }, false);\n} else {\n    div2.attachEvent(\"onclick\", function() {\n        var e = window.event;\n        e.returnValue = false; // 阻止默认事件\n        e.cancelBubble = true; // 阻止冒泡\n        console.log(e.srcElement.innerHTML);\n    });\n}\n```\n\n 自定义事件：createEvent()\n \n createEvent()用于创建一个新的 event ，而后这个 event 必须调用它的 init() 方法进行初始化。最后就可以在目标元素上使用dispatchEvent()调用新创建的event事件了。\n initEvent(type, bubbles, cancelable)\n type表示自定义的事件类型，bubbles表示是否冒泡，cancelable表示是否阻止默认事件。\n target.dispatchEvent(ev)\n target就是要触发自定义事件的DOM元素\n \n ```\n var div1 = document.getElementById(\"div1\");\n div1.addEventListener(\"message\", function(){\n     console.log('test');\n }, false);\n\n var div2 = document.getElementById(\"div2\");\n div2.addEventListener(\"message\", function(e){\n     console.log(this);\n     console.log(e);\n }, false);\n var ev = document.createEvent(\"Event\");\n ev.initEvent(\"message\", false, true); // 起泡参数变为true，div1的事件就会触发\n div2.dispatchEvent(ev);\n ```","source":"_posts/dom.md","raw":"---\ntitle: dom\ndate: 2016-11-23 15:00:33\ncategories: Javascript\ntags:\n     - Javascript\n---\n\n---------\n```\n<body>\n    <div id=\"div\">\n        <div class=\"div1\" name=\"div\">hello world<span>奥斯卡看卡</span></div>\n        <div class=\"div2\" name=\"div\">哈哈哈</div>\n    </div>\n</body>\n```\n\n## 获取元素节点\n\n> getElementById 返回的结果是以对象的形式，其余为类数组（NodeList对象）\n\n```\nvar　divId = document.getElementById(\"div\");\nconsole.log(divId)\nvar divTag = document.getElementsByTagName(\"div\");\nconsole.log(divTag)\nvar divClass = document.getElementsByClassName(\"div1\");\nconsole.log(divClass)\nvar divName = document.getElementsByName(\"div\");\nconsole.log(divName)   \n```\n## javascript 的css选择器\n\ndocument.querySelector()\ndocument.querySelectorAll()\n```\nvar div =document.querySelector(\"#div>div\");\nconsole.log(div) //输出为div1的对象形式\nvar div = document.querySelectorAll(\"div\");\nconsole.log(div) //输出为所有div\n```\n\n## 文档结构和遍历\n\n一.作为节点数的文档\n 1. parentNode    获取该节点的父节点\n 2. childNodes    获取该节点的子节点数组\n 3. firstChild    获取该节点的第一个子节点\n 4. lastChild    获取该节点的最后一个子节点\n 5. nextSibling    获取该节点的下一个兄弟元素\n 6. previoursSibling    获取该节点的上一个兄弟元素\n 7. nodeType    节点的类型，9代表Document节点，1代表Element节点，3代表Text节点，8代表Comment节点，11代表DocumentFragment节点\n 8. nodeVlue    Text节点或Comment节点的文本内容\n 9. nodeName    元素的标签名(如P,SPAN,#text(文本节点),DIV)，以大写形式表示\n\n```\nvar span = document.getElementsByTagName(\"span\");\nconsole.log(span[0].parentNode) // //输出为div1的对象形式\nvar div = document.getElementById(\"div\");\nconsole.log(div.childNodes) //输出为\n/*NodeList[5]\n{0:text,\n1:div.div1,\n2:text,\n3:div.div2,\n4:text,\nlength:5}*/\nconsole.log(div.firstChild)//文本节点\nconsole.log(div.childNodes[1].firstChild.nodeValue) //文本节点的ｖａｌｕｅ\nconsole.log(span[0].parentNode.nextSibling.nextSibling) // 输出为div２对象　因为第一个nextSibling是一个text节点\nvar text=\"\";\nfor(var i=0;i<div.childNodes.length;i++){\n    if(div.childNodes[i].nodeType==1){　//元素节点\n        text+=div.childNodes[i].nodeName.toLowerCase()+\":\"+div.childNodes[i].innerText+\"----\"+\"\\n\";\n    }else if(div.childNodes[i].nodeType==3){ //text节点\n        text+=div.childNodes[i].nodeName.toLowerCase()+\":\"+div.childNodes[i].nodeValue+\"----\"+\"\\n\";\n    }\n}\nconsole.log(text)\n```\n\n二.作为元素树的文档 // 忽略掉文本节点\n1、firstElementChild         第一个子元素节点\n2、lastElementChild          最后一个子元素节点\n3、nextElementSibling        下一个兄弟元素节点\n4、previousElementSibling    前一个兄弟元素节点\n5、childElementCount         子元素节点个数量\n\n```\n<div id=\"div1\">\n    <p id=\"p1\" class=\"class1\"> 我是第一个P</p>\n    <p id=\"p2\" class=\"class2\">我是第二个P</p>\n</div>\nvar node = document.getElementById(\"div1\");\nvar node1 = node.firstElementChild;\nvar node2 = node.lastElementChild;\n\nalert(node.childElementCount);  //输出2，div1一共有两个非文档子元素节点\nalert(node1.innerHTML);         //输出 我是第一个P\nalert(node2.innerHTML);         //输出 我是第二个P\nalert(node2.previousElementSibling.innerHTML);  //输出 我是第一个P(第二个元素节点的上一个非文本元素节点是P1)\nalert(node1.nextElementSibling.innerHTML);      //输出 我是第二个P(第一个元素节点的下一个兄弟非文本节点是P2)\n```\n\n## javascript操作HTML属性\n\n> 1、属性的读取，此处要注意的是，某些HTML属性名称在javascript之中是保留字，因此会有些许不同，如class,lable中的for在javascript中变为htmlFor,className。\n\n```\n<div id=\"div1\">\n    <p id=\"p1\" class=\"class1\"> 我是第一个P</p>\n    <img src=\"123.jpg\" alt=\"我是一张图片\" id=\"img1\" />\n    <input type=\"text\" value=\"我是一个文本框\" id=\"input1\" />\n</div>\n\nwindow.onload = function () {\n    var nodeText = document.getElementById(\"input1\");\n    alert(nodeText.value);        //输出 我是一个文本框\n    var nodeImg = document.getElementById(\"img1\");\n    alert(nodeImg.alt);            //输出 我是一张图片\n    var nodeP = document.getElementById(\"p1\");\n    alert(nodeP.className);        //输出 class1    注意获取class是className，如果写成nodeP.class则输出undefined\n}\n```\n\n> 属性的设置，此处同样要注意的是保留字\n\n```\n<div id=\"div1\">\n    <img src=\"1big.jpg\" alt=\"我是一张图片\" id=\"img1\" onclick=\"fun1()\" />\n</div>\n\nfunction fun1() {\n    document.getElementById(\"img1\").src = \"1small.jpg\";        //改变图片的路径属性。实现的效果为，当点击图片时，大图变小图。\n}\n```\n\n> 非标准HTML属性  //注意这两个方法是不必理会javascript保留字的，HTML属性是什么就怎么写。\n\ngetAttribute();   \nsetAttribute();\n\n```\n<div id=\"div1\">\n    <img src=\"1big.jpg\" alt=\"我是一张图片\" class=\"imgClass\" id=\"img1\" onclick=\"fun1()\" />\n</div>\n\nfunction fun1() {\n    document.getElementById(\"img1\").setAttribute(\"src\", \"1small.jpg\");\n    alert(document.getElementById(\"img1\").getAttribute(\"class\"));\n}\n```\n\n> Attr节点的属性\n\nattributes属性  非Element对象返回null，Element一般返回Attr对象。Attr对象是一个特殊的Node,通过name与value获取属性名称与值。\n\n```\nvar div = document.getElementsByTagName(\"div\");\nconsole.log(div[1].attributes) //返回div1的所有属性 {0:class,1:name}\nconsole.log(div[1].attributes[0].name) //返回div1的第一个属性的nodeName　结果为class\nconsole.log(div[1].attributes[0].value) //返回div1的第一个属性的nodeValue　结果为div1\n```\n\n> 元素的内容\n\n1、innerText、textContent    innerText与textContent的区别，当文本为空时，innerText是\"\"，而textContent是undefined\n2、innerHTML\n\n```\n<div id=\"div1\">\n    <p id=\"p1\">我是第一个P</p>\n    <p id=\"p2\">我是第<b>二</b>个P</p>\n</div>\n\nwindow.onload = function () {\n    alert(document.getElementById(\"p1\").innerText);  //注意火狐浏览器不支持innerText\n    alert(document.getElementById(\"p1\").textContent);    //基本都支持textContent\n    document.getElementById(\"p1\").textContent = \"我是p1，javascript改变了我\";    //设置文档Text\n    alert(document.getElementById(\"p2\").textContent);\n    alert(document.getElementById(\"p2\").innerHTML); //innerHTML与innerText的区别，就是对HTML代码的输出方式Text不会输出HTML代码\n}\n```\n\n> 创建，插入，删除节点\n\n1、document.createTextNode()    创建一个文本节点\n \n ```\n<div id=\"div1\">\n     <p id=\"p1\">我是第一个P</p>\n     <p id=\"p2\">我是第二个P</p>\n</div>\n\nwindow.onload = function () {\n     var textNode = document.createTextNode(\"<p>我是一个javascript新建的节点</p>\");\n     document.getElementById(\"div1\").appendChild(textNode);\n}\n结果为：\n<div id=\"div1\">\n    <p id=\"p1\">我是第一个P</p>\n    <p id=\"p2\">我是第二个P</p>\n    我是一个javascript新建的节点\n</div>\n ```\n \n2、document.createElement()    创建一个元素节点\n \n ```\n <div id=\"div1\">\n     <p id=\"p1\">我是第一个P</p>\n     <p id=\"p2\">我是第二个P</p>\n </div>\n window.onload = function () {\n     var pNode = document.createElement(\"p\");\n     pNode.textContent = \"新建一个P节点\";\n     document.getElementById(\"div1\").appendChild(pNode);\n }\n 结果为：\n <div id=\"div1\">\n     <p id=\"p1\">我是第一个P</p>\n     <p id=\"p2\">我是第二个P</p>\n     <p>新建一个P节点</p>\n </div>\n ```\n \n3、插入节点\nappendChild()    //将一个节点插入到调用节点的最后面\ninsertBefore()   //接受两个参数，第一个为待插入的节点，第二个指明在哪个节点前面，如果不传入第二个参数，报错。\n\n```\n<div id=\"div1\">\n    <p id=\"p1\">我是第一个P</p>\n</div>\n\nwindow.onload = function () {\n    var pNode1 = document.createElement(\"p\");\n    pNode1.textContent = \"insertBefore插入的节点\";\n    var pNode2 = document.createElement(\"p\");\n    pNode2.textContent = \"appendChild插入的节点\";\n    document.getElementById(\"div1\").appendChild(pNode2);\n    document.getElementById(\"div1\").insertBefore(pNode1,document.getElementById(\"p1\"));\n}\n结果为：\n<div id=\"div1\">\n    <p>insertBefore插入的节点</p>\n    <p id=\"p1\">我是第一个P</p>\n    <p>appendChild插入的节点</p>\n</div>\n```\n\n4、删除和替换节点。\n1)removeChild();    由父元素调用，删除一个子节点。注意是直接父元素调用，删除直接子元素才有效，删除孙子元素就没有效果了。\n\n```\n<div id=\"div1\">\n    <p id=\"p1\">我是第一个P</p>\n    <p id=\"p2\">我是第二个P</p>\n</div>\n\nwindow.onload = function () {\n    var div1 = document.getElementById(\"div1\");\n    div1.removeChild(document.getElementById(\"p2\"));\n}\n执行之后代码变为：\n<div id=\"div1\">\n    <p id=\"p1\">我是第一个P</p>    //注意到第二个P元素已经被移除了\n</div>\n```\n\n2)replaceChild()    //删除一个子节点，并用一个新节点代替它，第一个参数为新建的节点，第二个节点为被替换的节点\n\n```\n<div id=\"div1\">\n    <p id=\"p1\">我是第一个P</p>\n    <p id=\"p2\">我是第二个P</p>\n</div>\n\nwindow.onload = function () {\n    var div1 = document.getElementById(\"div1\");\n    var span1 = document.createElement(\"span\");\n    span1.textContent = \"我是一个新建的span\";\n    div1.replaceChild(span1,document.getElementById(\"p2\"));\n}\n执行完成后HTML代码变为：\n<div id=\"div1\">\n    <p id=\"p1\">我是第一个P</p>\n    <span>我是一个新建的span</span>    //留意到p2节点已经被替换为span1节点了\n</div>\n```\n\n> javascript操作元素CSS　通过元素的style属性可以随意读取和设置元素的CSS样式\n\n```\n<div id=\"div1\" style=\"width:100px; height:100px; background-color:red\"></div>\nwindow.onload = function () {\n    alert(document.getElementById(\"div1\").style.backgroundColor);\n    document.getElementById(\"div1\").style.backgroundColor = \"yellow\";\n}\n```\n\n> IE有许多好用的方法，后来都被其他浏览器抄袭了，比如这个contains方法。如果A元素包含B元素，则返回true(可以A包含A)，否则false。唯一不支持这个方法的是IE的死对头firefox。\n\n```\n<div id=\"parent\">\n  <p>\n    <strong id=\"child\" >本例子会在火狐中会报错。</strong>\n  </p>\n</div>\nwindow.onload = function(){\n    var A = document.getElementById('parent'),\n    B = document.getElementById('child');\n    alert(A.contains(A));　//true\n    alert(A.contains(B));　//true\n    alert(B.contains(A));  //false\n  }\n```\n\n> cloneNode(true/false) 克隆节点　　true为深度克隆　false为只克隆节点本身\n\n```\nvar p = document.createElement(\"p\");\np.id =\"ppp\";\np.innerText = \"我是新创建的p元素\";\nvar cloneNode = p.cloneNode(true); //<p id=\"ppp\">我是新创建的p元素</p>\nvar cloneNode = p.cloneNode(false);//默认为false <p id=\"ppp\"></p>\n```\n\n> addEventListener() 第一个参数是事件名，第二个是回调函数，第三个参数为true表示捕获，false表示冒泡。\n\naddEventListener()将指定的事件监听器注册到目标对象上，当目标对象触发制定的事件时，指定的回调函数就会触发。目标对象可以是 文档上的元素、 document、 window 或者XMLHttpRequest(比如onreadystatechange事件)。IE8及以下不支持此方法且只有事件冒泡没有事件捕获。IE9开始支持此方法，也就有了事件捕获。\n\n```\nvar div1 = document.getElementById(\"div1\");\ndiv1.addEventListener(\"click\", listener, false);\nfunction listener() {\n    console.log('test');\n}\nvar cloneHtml = div1.cloneNode(true);\ndocument.body.appendChild(cloneHtml);\n/*\n注意：\n    当对某一个元素1既绑定了捕获事件，又绑定了冒泡事件时：\n    当这个元素1并不是触发事件的那个元素2时，则触发顺序会按照先 捕获 后 冒泡 的顺序触发；\n    当这个元素1就是最底层的触发事件的元素时，则这个元素没有捕获和冒泡的区别，谁先绑定就先触发谁。\n*/\nvar div2 = document.getElementById(\"div2\");\ndiv2.addEventListener(\"click\", listener2, true);\nfunction listener2() {\n    console.log('test2');\n}\ndiv2.addEventListener(\"click\", listener1, false);\nfunction listener1() {\n    console.log('test1');\n}\n// 按绑定顺序执行，两个`addEventLister()`颠倒过来则执行顺序也变化\n// 如果再对`div1`绑定一个捕获、一个冒泡，则会先触发捕获 再 触发冒泡，与绑定顺序无关\n```\n\nremoveEventListener():与addEventListener()绑定事件对应的就是移除已绑定的事件\n注意：只能通过removeEventListener()解绑有名字的函数，对于绑定的匿名函数无法解除绑定。\n```\nvar div2 = document.getElementById(\"div2\");\ndiv2.addEventListener(\"click\", listener2, true);\nfunction listener2() {\n    console.log('test2');\n}\ndiv2.removeEventListener(\"click\", listener2, true);\n```\n\n attachEvent()、detachEvent() IE8及以下使用这两个方法绑定和解绑事件，当然，IE9+也支持这个事件。但这个方法绑定的事件默认为冒泡也只有冒泡。\n \n```\n// 这里需要在事件前加 on\ndiv2.attachEvent(\"onclick\", listener1);\nfunction listener1() {\n    console.log('test');\n    console.log(this);\n}\ndiv2.detachEvent(\"onclick\", listener1);\n//和addEventListener()一样，也不能解绑匿名函数。\n\n//标准事件和IE事件中的阻止默认事件和冒泡事件也有很大区别。\nvar div2 = document.getElementById(\"div2\");\nif (div2.addEventListener) {\n    div2.addEventListener(\"click\", function(e) {\n        e.preventDefault(); // 阻止默认事件\n        e.stopPropagation(); // 阻止冒泡\n        console.log(e.target.innerHTML);\n    }, false);\n} else {\n    div2.attachEvent(\"onclick\", function() {\n        var e = window.event;\n        e.returnValue = false; // 阻止默认事件\n        e.cancelBubble = true; // 阻止冒泡\n        console.log(e.srcElement.innerHTML);\n    });\n}\n```\n\n 自定义事件：createEvent()\n \n createEvent()用于创建一个新的 event ，而后这个 event 必须调用它的 init() 方法进行初始化。最后就可以在目标元素上使用dispatchEvent()调用新创建的event事件了。\n initEvent(type, bubbles, cancelable)\n type表示自定义的事件类型，bubbles表示是否冒泡，cancelable表示是否阻止默认事件。\n target.dispatchEvent(ev)\n target就是要触发自定义事件的DOM元素\n \n ```\n var div1 = document.getElementById(\"div1\");\n div1.addEventListener(\"message\", function(){\n     console.log('test');\n }, false);\n\n var div2 = document.getElementById(\"div2\");\n div2.addEventListener(\"message\", function(e){\n     console.log(this);\n     console.log(e);\n }, false);\n var ev = document.createEvent(\"Event\");\n ev.initEvent(\"message\", false, true); // 起泡参数变为true，div1的事件就会触发\n div2.dispatchEvent(ev);\n ```","slug":"dom","published":1,"updated":"2020-03-23T11:05:23.942Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgbydgnd000pofo91rmw9fdd","content":"<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;div&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;div1&quot; name=&quot;div&quot;&gt;hello world&lt;span&gt;奥斯卡看卡&lt;/span&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=&quot;div2&quot; name=&quot;div&quot;&gt;哈哈哈&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取元素节点\"><a href=\"#获取元素节点\" class=\"headerlink\" title=\"获取元素节点\"></a>获取元素节点</h2><blockquote>\n<p>getElementById 返回的结果是以对象的形式，其余为类数组（NodeList对象）</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var　divId = document.getElementById(&quot;div&quot;);</span><br><span class=\"line\">console.log(divId)</span><br><span class=\"line\">var divTag = document.getElementsByTagName(&quot;div&quot;);</span><br><span class=\"line\">console.log(divTag)</span><br><span class=\"line\">var divClass = document.getElementsByClassName(&quot;div1&quot;);</span><br><span class=\"line\">console.log(divClass)</span><br><span class=\"line\">var divName = document.getElementsByName(&quot;div&quot;);</span><br><span class=\"line\">console.log(divName)</span><br></pre></td></tr></table></figure>\n<h2 id=\"javascript-的css选择器\"><a href=\"#javascript-的css选择器\" class=\"headerlink\" title=\"javascript 的css选择器\"></a>javascript 的css选择器</h2><p>document.querySelector()<br>document.querySelectorAll()<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var div =document.querySelector(&quot;#div&gt;div&quot;);</span><br><span class=\"line\">console.log(div) //输出为div1的对象形式</span><br><span class=\"line\">var div = document.querySelectorAll(&quot;div&quot;);</span><br><span class=\"line\">console.log(div) //输出为所有div</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"文档结构和遍历\"><a href=\"#文档结构和遍历\" class=\"headerlink\" title=\"文档结构和遍历\"></a>文档结构和遍历</h2><p>一.作为节点数的文档</p>\n<ol>\n<li>parentNode    获取该节点的父节点</li>\n<li>childNodes    获取该节点的子节点数组</li>\n<li>firstChild    获取该节点的第一个子节点</li>\n<li>lastChild    获取该节点的最后一个子节点</li>\n<li>nextSibling    获取该节点的下一个兄弟元素</li>\n<li>previoursSibling    获取该节点的上一个兄弟元素</li>\n<li>nodeType    节点的类型，9代表Document节点，1代表Element节点，3代表Text节点，8代表Comment节点，11代表DocumentFragment节点</li>\n<li>nodeVlue    Text节点或Comment节点的文本内容</li>\n<li>nodeName    元素的标签名(如P,SPAN,#text(文本节点),DIV)，以大写形式表示</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var span = document.getElementsByTagName(&quot;span&quot;);</span><br><span class=\"line\">console.log(span[0].parentNode) // //输出为div1的对象形式</span><br><span class=\"line\">var div = document.getElementById(&quot;div&quot;);</span><br><span class=\"line\">console.log(div.childNodes) //输出为</span><br><span class=\"line\">/*NodeList[5]</span><br><span class=\"line\">&#123;0:text,</span><br><span class=\"line\">1:div.div1,</span><br><span class=\"line\">2:text,</span><br><span class=\"line\">3:div.div2,</span><br><span class=\"line\">4:text,</span><br><span class=\"line\">length:5&#125;*/</span><br><span class=\"line\">console.log(div.firstChild)//文本节点</span><br><span class=\"line\">console.log(div.childNodes[1].firstChild.nodeValue) //文本节点的ｖａｌｕｅ</span><br><span class=\"line\">console.log(span[0].parentNode.nextSibling.nextSibling) // 输出为div２对象　因为第一个nextSibling是一个text节点</span><br><span class=\"line\">var text=&quot;&quot;;</span><br><span class=\"line\">for(var i=0;i&lt;div.childNodes.length;i++)&#123;</span><br><span class=\"line\">    if(div.childNodes[i].nodeType==1)&#123;　//元素节点</span><br><span class=\"line\">        text+=div.childNodes[i].nodeName.toLowerCase()+&quot;:&quot;+div.childNodes[i].innerText+&quot;----&quot;+&quot;\\n&quot;;</span><br><span class=\"line\">    &#125;else if(div.childNodes[i].nodeType==3)&#123; //text节点</span><br><span class=\"line\">        text+=div.childNodes[i].nodeName.toLowerCase()+&quot;:&quot;+div.childNodes[i].nodeValue+&quot;----&quot;+&quot;\\n&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(text)</span><br></pre></td></tr></table></figure>\n<p>二.作为元素树的文档 // 忽略掉文本节点<br>1、firstElementChild         第一个子元素节点<br>2、lastElementChild          最后一个子元素节点<br>3、nextElementSibling        下一个兄弟元素节点<br>4、previousElementSibling    前一个兄弟元素节点<br>5、childElementCount         子元素节点个数量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div1&quot;&gt;</span><br><span class=\"line\">    &lt;p id=&quot;p1&quot; class=&quot;class1&quot;&gt; 我是第一个P&lt;/p&gt;</span><br><span class=\"line\">    &lt;p id=&quot;p2&quot; class=&quot;class2&quot;&gt;我是第二个P&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">var node = document.getElementById(&quot;div1&quot;);</span><br><span class=\"line\">var node1 = node.firstElementChild;</span><br><span class=\"line\">var node2 = node.lastElementChild;</span><br><span class=\"line\"></span><br><span class=\"line\">alert(node.childElementCount);  //输出2，div1一共有两个非文档子元素节点</span><br><span class=\"line\">alert(node1.innerHTML);         //输出 我是第一个P</span><br><span class=\"line\">alert(node2.innerHTML);         //输出 我是第二个P</span><br><span class=\"line\">alert(node2.previousElementSibling.innerHTML);  //输出 我是第一个P(第二个元素节点的上一个非文本元素节点是P1)</span><br><span class=\"line\">alert(node1.nextElementSibling.innerHTML);      //输出 我是第二个P(第一个元素节点的下一个兄弟非文本节点是P2)</span><br></pre></td></tr></table></figure>\n<h2 id=\"javascript操作HTML属性\"><a href=\"#javascript操作HTML属性\" class=\"headerlink\" title=\"javascript操作HTML属性\"></a>javascript操作HTML属性</h2><blockquote>\n<p>1、属性的读取，此处要注意的是，某些HTML属性名称在javascript之中是保留字，因此会有些许不同，如class,lable中的for在javascript中变为htmlFor,className。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div1&quot;&gt;</span><br><span class=\"line\">    &lt;p id=&quot;p1&quot; class=&quot;class1&quot;&gt; 我是第一个P&lt;/p&gt;</span><br><span class=\"line\">    &lt;img src=&quot;123.jpg&quot; alt=&quot;我是一张图片&quot; id=&quot;img1&quot; /&gt;</span><br><span class=\"line\">    &lt;input type=&quot;text&quot; value=&quot;我是一个文本框&quot; id=&quot;input1&quot; /&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">window.onload = function () &#123;</span><br><span class=\"line\">    var nodeText = document.getElementById(&quot;input1&quot;);</span><br><span class=\"line\">    alert(nodeText.value);        //输出 我是一个文本框</span><br><span class=\"line\">    var nodeImg = document.getElementById(&quot;img1&quot;);</span><br><span class=\"line\">    alert(nodeImg.alt);            //输出 我是一张图片</span><br><span class=\"line\">    var nodeP = document.getElementById(&quot;p1&quot;);</span><br><span class=\"line\">    alert(nodeP.className);        //输出 class1    注意获取class是className，如果写成nodeP.class则输出undefined</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>属性的设置，此处同样要注意的是保留字</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div1&quot;&gt;</span><br><span class=\"line\">    &lt;img src=&quot;1big.jpg&quot; alt=&quot;我是一张图片&quot; id=&quot;img1&quot; onclick=&quot;fun1()&quot; /&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">function fun1() &#123;</span><br><span class=\"line\">    document.getElementById(&quot;img1&quot;).src = &quot;1small.jpg&quot;;        //改变图片的路径属性。实现的效果为，当点击图片时，大图变小图。</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>非标准HTML属性  //注意这两个方法是不必理会javascript保留字的，HTML属性是什么就怎么写。</p>\n</blockquote>\n<p>getAttribute();<br>setAttribute();</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div1&quot;&gt;</span><br><span class=\"line\">    &lt;img src=&quot;1big.jpg&quot; alt=&quot;我是一张图片&quot; class=&quot;imgClass&quot; id=&quot;img1&quot; onclick=&quot;fun1()&quot; /&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">function fun1() &#123;</span><br><span class=\"line\">    document.getElementById(&quot;img1&quot;).setAttribute(&quot;src&quot;, &quot;1small.jpg&quot;);</span><br><span class=\"line\">    alert(document.getElementById(&quot;img1&quot;).getAttribute(&quot;class&quot;));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Attr节点的属性</p>\n</blockquote>\n<p>attributes属性  非Element对象返回null，Element一般返回Attr对象。Attr对象是一个特殊的Node,通过name与value获取属性名称与值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var div = document.getElementsByTagName(&quot;div&quot;);</span><br><span class=\"line\">console.log(div[1].attributes) //返回div1的所有属性 &#123;0:class,1:name&#125;</span><br><span class=\"line\">console.log(div[1].attributes[0].name) //返回div1的第一个属性的nodeName　结果为class</span><br><span class=\"line\">console.log(div[1].attributes[0].value) //返回div1的第一个属性的nodeValue　结果为div1</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>元素的内容</p>\n</blockquote>\n<p>1、innerText、textContent    innerText与textContent的区别，当文本为空时，innerText是””，而textContent是undefined<br>2、innerHTML</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div1&quot;&gt;</span><br><span class=\"line\">    &lt;p id=&quot;p1&quot;&gt;我是第一个P&lt;/p&gt;</span><br><span class=\"line\">    &lt;p id=&quot;p2&quot;&gt;我是第&lt;b&gt;二&lt;/b&gt;个P&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">window.onload = function () &#123;</span><br><span class=\"line\">    alert(document.getElementById(&quot;p1&quot;).innerText);  //注意火狐浏览器不支持innerText</span><br><span class=\"line\">    alert(document.getElementById(&quot;p1&quot;).textContent);    //基本都支持textContent</span><br><span class=\"line\">    document.getElementById(&quot;p1&quot;).textContent = &quot;我是p1，javascript改变了我&quot;;    //设置文档Text</span><br><span class=\"line\">    alert(document.getElementById(&quot;p2&quot;).textContent);</span><br><span class=\"line\">    alert(document.getElementById(&quot;p2&quot;).innerHTML); //innerHTML与innerText的区别，就是对HTML代码的输出方式Text不会输出HTML代码</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>创建，插入，删除节点</p>\n</blockquote>\n<p>1、document.createTextNode()    创建一个文本节点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div1&quot;&gt;</span><br><span class=\"line\">     &lt;p id=&quot;p1&quot;&gt;我是第一个P&lt;/p&gt;</span><br><span class=\"line\">     &lt;p id=&quot;p2&quot;&gt;我是第二个P&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">window.onload = function () &#123;</span><br><span class=\"line\">     var textNode = document.createTextNode(&quot;&lt;p&gt;我是一个javascript新建的节点&lt;/p&gt;&quot;);</span><br><span class=\"line\">     document.getElementById(&quot;div1&quot;).appendChild(textNode);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">结果为：</span><br><span class=\"line\">&lt;div id=&quot;div1&quot;&gt;</span><br><span class=\"line\">    &lt;p id=&quot;p1&quot;&gt;我是第一个P&lt;/p&gt;</span><br><span class=\"line\">    &lt;p id=&quot;p2&quot;&gt;我是第二个P&lt;/p&gt;</span><br><span class=\"line\">    我是一个javascript新建的节点</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>2、document.createElement()    创建一个元素节点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div1&quot;&gt;</span><br><span class=\"line\">    &lt;p id=&quot;p1&quot;&gt;我是第一个P&lt;/p&gt;</span><br><span class=\"line\">    &lt;p id=&quot;p2&quot;&gt;我是第二个P&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">window.onload = function () &#123;</span><br><span class=\"line\">    var pNode = document.createElement(&quot;p&quot;);</span><br><span class=\"line\">    pNode.textContent = &quot;新建一个P节点&quot;;</span><br><span class=\"line\">    document.getElementById(&quot;div1&quot;).appendChild(pNode);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">结果为：</span><br><span class=\"line\">&lt;div id=&quot;div1&quot;&gt;</span><br><span class=\"line\">    &lt;p id=&quot;p1&quot;&gt;我是第一个P&lt;/p&gt;</span><br><span class=\"line\">    &lt;p id=&quot;p2&quot;&gt;我是第二个P&lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;新建一个P节点&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>3、插入节点<br>appendChild()    //将一个节点插入到调用节点的最后面<br>insertBefore()   //接受两个参数，第一个为待插入的节点，第二个指明在哪个节点前面，如果不传入第二个参数，报错。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div1&quot;&gt;</span><br><span class=\"line\">    &lt;p id=&quot;p1&quot;&gt;我是第一个P&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">window.onload = function () &#123;</span><br><span class=\"line\">    var pNode1 = document.createElement(&quot;p&quot;);</span><br><span class=\"line\">    pNode1.textContent = &quot;insertBefore插入的节点&quot;;</span><br><span class=\"line\">    var pNode2 = document.createElement(&quot;p&quot;);</span><br><span class=\"line\">    pNode2.textContent = &quot;appendChild插入的节点&quot;;</span><br><span class=\"line\">    document.getElementById(&quot;div1&quot;).appendChild(pNode2);</span><br><span class=\"line\">    document.getElementById(&quot;div1&quot;).insertBefore(pNode1,document.getElementById(&quot;p1&quot;));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">结果为：</span><br><span class=\"line\">&lt;div id=&quot;div1&quot;&gt;</span><br><span class=\"line\">    &lt;p&gt;insertBefore插入的节点&lt;/p&gt;</span><br><span class=\"line\">    &lt;p id=&quot;p1&quot;&gt;我是第一个P&lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;appendChild插入的节点&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>4、删除和替换节点。<br>1)removeChild();    由父元素调用，删除一个子节点。注意是直接父元素调用，删除直接子元素才有效，删除孙子元素就没有效果了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div1&quot;&gt;</span><br><span class=\"line\">    &lt;p id=&quot;p1&quot;&gt;我是第一个P&lt;/p&gt;</span><br><span class=\"line\">    &lt;p id=&quot;p2&quot;&gt;我是第二个P&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">window.onload = function () &#123;</span><br><span class=\"line\">    var div1 = document.getElementById(&quot;div1&quot;);</span><br><span class=\"line\">    div1.removeChild(document.getElementById(&quot;p2&quot;));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">执行之后代码变为：</span><br><span class=\"line\">&lt;div id=&quot;div1&quot;&gt;</span><br><span class=\"line\">    &lt;p id=&quot;p1&quot;&gt;我是第一个P&lt;/p&gt;    //注意到第二个P元素已经被移除了</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>2)replaceChild()    //删除一个子节点，并用一个新节点代替它，第一个参数为新建的节点，第二个节点为被替换的节点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div1&quot;&gt;</span><br><span class=\"line\">    &lt;p id=&quot;p1&quot;&gt;我是第一个P&lt;/p&gt;</span><br><span class=\"line\">    &lt;p id=&quot;p2&quot;&gt;我是第二个P&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">window.onload = function () &#123;</span><br><span class=\"line\">    var div1 = document.getElementById(&quot;div1&quot;);</span><br><span class=\"line\">    var span1 = document.createElement(&quot;span&quot;);</span><br><span class=\"line\">    span1.textContent = &quot;我是一个新建的span&quot;;</span><br><span class=\"line\">    div1.replaceChild(span1,document.getElementById(&quot;p2&quot;));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">执行完成后HTML代码变为：</span><br><span class=\"line\">&lt;div id=&quot;div1&quot;&gt;</span><br><span class=\"line\">    &lt;p id=&quot;p1&quot;&gt;我是第一个P&lt;/p&gt;</span><br><span class=\"line\">    &lt;span&gt;我是一个新建的span&lt;/span&gt;    //留意到p2节点已经被替换为span1节点了</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>javascript操作元素CSS　通过元素的style属性可以随意读取和设置元素的CSS样式</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div1&quot; style=&quot;width:100px; height:100px; background-color:red&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">window.onload = function () &#123;</span><br><span class=\"line\">    alert(document.getElementById(&quot;div1&quot;).style.backgroundColor);</span><br><span class=\"line\">    document.getElementById(&quot;div1&quot;).style.backgroundColor = &quot;yellow&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>IE有许多好用的方法，后来都被其他浏览器抄袭了，比如这个contains方法。如果A元素包含B元素，则返回true(可以A包含A)，否则false。唯一不支持这个方法的是IE的死对头firefox。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;parent&quot;&gt;</span><br><span class=\"line\">  &lt;p&gt;</span><br><span class=\"line\">    &lt;strong id=&quot;child&quot; &gt;本例子会在火狐中会报错。&lt;/strong&gt;</span><br><span class=\"line\">  &lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">window.onload = function()&#123;</span><br><span class=\"line\">    var A = document.getElementById(&apos;parent&apos;),</span><br><span class=\"line\">    B = document.getElementById(&apos;child&apos;);</span><br><span class=\"line\">    alert(A.contains(A));　//true</span><br><span class=\"line\">    alert(A.contains(B));　//true</span><br><span class=\"line\">    alert(B.contains(A));  //false</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>cloneNode(true/false) 克隆节点　　true为深度克隆　false为只克隆节点本身</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var p = document.createElement(&quot;p&quot;);</span><br><span class=\"line\">p.id =&quot;ppp&quot;;</span><br><span class=\"line\">p.innerText = &quot;我是新创建的p元素&quot;;</span><br><span class=\"line\">var cloneNode = p.cloneNode(true); //&lt;p id=&quot;ppp&quot;&gt;我是新创建的p元素&lt;/p&gt;</span><br><span class=\"line\">var cloneNode = p.cloneNode(false);//默认为false &lt;p id=&quot;ppp&quot;&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>addEventListener() 第一个参数是事件名，第二个是回调函数，第三个参数为true表示捕获，false表示冒泡。</p>\n</blockquote>\n<p>addEventListener()将指定的事件监听器注册到目标对象上，当目标对象触发制定的事件时，指定的回调函数就会触发。目标对象可以是 文档上的元素、 document、 window 或者XMLHttpRequest(比如onreadystatechange事件)。IE8及以下不支持此方法且只有事件冒泡没有事件捕获。IE9开始支持此方法，也就有了事件捕获。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var div1 = document.getElementById(&quot;div1&quot;);</span><br><span class=\"line\">div1.addEventListener(&quot;click&quot;, listener, false);</span><br><span class=\"line\">function listener() &#123;</span><br><span class=\"line\">    console.log(&apos;test&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var cloneHtml = div1.cloneNode(true);</span><br><span class=\"line\">document.body.appendChild(cloneHtml);</span><br><span class=\"line\">/*</span><br><span class=\"line\">注意：</span><br><span class=\"line\">    当对某一个元素1既绑定了捕获事件，又绑定了冒泡事件时：</span><br><span class=\"line\">    当这个元素1并不是触发事件的那个元素2时，则触发顺序会按照先 捕获 后 冒泡 的顺序触发；</span><br><span class=\"line\">    当这个元素1就是最底层的触发事件的元素时，则这个元素没有捕获和冒泡的区别，谁先绑定就先触发谁。</span><br><span class=\"line\">*/</span><br><span class=\"line\">var div2 = document.getElementById(&quot;div2&quot;);</span><br><span class=\"line\">div2.addEventListener(&quot;click&quot;, listener2, true);</span><br><span class=\"line\">function listener2() &#123;</span><br><span class=\"line\">    console.log(&apos;test2&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">div2.addEventListener(&quot;click&quot;, listener1, false);</span><br><span class=\"line\">function listener1() &#123;</span><br><span class=\"line\">    console.log(&apos;test1&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 按绑定顺序执行，两个`addEventLister()`颠倒过来则执行顺序也变化</span><br><span class=\"line\">// 如果再对`div1`绑定一个捕获、一个冒泡，则会先触发捕获 再 触发冒泡，与绑定顺序无关</span><br></pre></td></tr></table></figure>\n<p>removeEventListener():与addEventListener()绑定事件对应的就是移除已绑定的事件<br>注意：只能通过removeEventListener()解绑有名字的函数，对于绑定的匿名函数无法解除绑定。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var div2 = document.getElementById(&quot;div2&quot;);</span><br><span class=\"line\">div2.addEventListener(&quot;click&quot;, listener2, true);</span><br><span class=\"line\">function listener2() &#123;</span><br><span class=\"line\">    console.log(&apos;test2&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">div2.removeEventListener(&quot;click&quot;, listener2, true);</span><br></pre></td></tr></table></figure></p>\n<p> attachEvent()、detachEvent() IE8及以下使用这两个方法绑定和解绑事件，当然，IE9+也支持这个事件。但这个方法绑定的事件默认为冒泡也只有冒泡。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 这里需要在事件前加 on</span><br><span class=\"line\">div2.attachEvent(&quot;onclick&quot;, listener1);</span><br><span class=\"line\">function listener1() &#123;</span><br><span class=\"line\">    console.log(&apos;test&apos;);</span><br><span class=\"line\">    console.log(this);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">div2.detachEvent(&quot;onclick&quot;, listener1);</span><br><span class=\"line\">//和addEventListener()一样，也不能解绑匿名函数。</span><br><span class=\"line\"></span><br><span class=\"line\">//标准事件和IE事件中的阻止默认事件和冒泡事件也有很大区别。</span><br><span class=\"line\">var div2 = document.getElementById(&quot;div2&quot;);</span><br><span class=\"line\">if (div2.addEventListener) &#123;</span><br><span class=\"line\">    div2.addEventListener(&quot;click&quot;, function(e) &#123;</span><br><span class=\"line\">        e.preventDefault(); // 阻止默认事件</span><br><span class=\"line\">        e.stopPropagation(); // 阻止冒泡</span><br><span class=\"line\">        console.log(e.target.innerHTML);</span><br><span class=\"line\">    &#125;, false);</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    div2.attachEvent(&quot;onclick&quot;, function() &#123;</span><br><span class=\"line\">        var e = window.event;</span><br><span class=\"line\">        e.returnValue = false; // 阻止默认事件</span><br><span class=\"line\">        e.cancelBubble = true; // 阻止冒泡</span><br><span class=\"line\">        console.log(e.srcElement.innerHTML);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 自定义事件：createEvent()</p>\n<p> createEvent()用于创建一个新的 event ，而后这个 event 必须调用它的 init() 方法进行初始化。最后就可以在目标元素上使用dispatchEvent()调用新创建的event事件了。<br> initEvent(type, bubbles, cancelable)<br> type表示自定义的事件类型，bubbles表示是否冒泡，cancelable表示是否阻止默认事件。<br> target.dispatchEvent(ev)<br> target就是要触发自定义事件的DOM元素</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var div1 = document.getElementById(&quot;div1&quot;);</span><br><span class=\"line\">div1.addEventListener(&quot;message&quot;, function()&#123;</span><br><span class=\"line\">    console.log(&apos;test&apos;);</span><br><span class=\"line\">&#125;, false);</span><br><span class=\"line\"></span><br><span class=\"line\">var div2 = document.getElementById(&quot;div2&quot;);</span><br><span class=\"line\">div2.addEventListener(&quot;message&quot;, function(e)&#123;</span><br><span class=\"line\">    console.log(this);</span><br><span class=\"line\">    console.log(e);</span><br><span class=\"line\">&#125;, false);</span><br><span class=\"line\">var ev = document.createEvent(&quot;Event&quot;);</span><br><span class=\"line\">ev.initEvent(&quot;message&quot;, false, true); // 起泡参数变为true，div1的事件就会触发</span><br><span class=\"line\">div2.dispatchEvent(ev);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;div&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;div1&quot; name=&quot;div&quot;&gt;hello world&lt;span&gt;奥斯卡看卡&lt;/span&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=&quot;div2&quot; name=&quot;div&quot;&gt;哈哈哈&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取元素节点\"><a href=\"#获取元素节点\" class=\"headerlink\" title=\"获取元素节点\"></a>获取元素节点</h2><blockquote>\n<p>getElementById 返回的结果是以对象的形式，其余为类数组（NodeList对象）</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var　divId = document.getElementById(&quot;div&quot;);</span><br><span class=\"line\">console.log(divId)</span><br><span class=\"line\">var divTag = document.getElementsByTagName(&quot;div&quot;);</span><br><span class=\"line\">console.log(divTag)</span><br><span class=\"line\">var divClass = document.getElementsByClassName(&quot;div1&quot;);</span><br><span class=\"line\">console.log(divClass)</span><br><span class=\"line\">var divName = document.getElementsByName(&quot;div&quot;);</span><br><span class=\"line\">console.log(divName)</span><br></pre></td></tr></table></figure>\n<h2 id=\"javascript-的css选择器\"><a href=\"#javascript-的css选择器\" class=\"headerlink\" title=\"javascript 的css选择器\"></a>javascript 的css选择器</h2><p>document.querySelector()<br>document.querySelectorAll()<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var div =document.querySelector(&quot;#div&gt;div&quot;);</span><br><span class=\"line\">console.log(div) //输出为div1的对象形式</span><br><span class=\"line\">var div = document.querySelectorAll(&quot;div&quot;);</span><br><span class=\"line\">console.log(div) //输出为所有div</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"文档结构和遍历\"><a href=\"#文档结构和遍历\" class=\"headerlink\" title=\"文档结构和遍历\"></a>文档结构和遍历</h2><p>一.作为节点数的文档</p>\n<ol>\n<li>parentNode    获取该节点的父节点</li>\n<li>childNodes    获取该节点的子节点数组</li>\n<li>firstChild    获取该节点的第一个子节点</li>\n<li>lastChild    获取该节点的最后一个子节点</li>\n<li>nextSibling    获取该节点的下一个兄弟元素</li>\n<li>previoursSibling    获取该节点的上一个兄弟元素</li>\n<li>nodeType    节点的类型，9代表Document节点，1代表Element节点，3代表Text节点，8代表Comment节点，11代表DocumentFragment节点</li>\n<li>nodeVlue    Text节点或Comment节点的文本内容</li>\n<li>nodeName    元素的标签名(如P,SPAN,#text(文本节点),DIV)，以大写形式表示</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var span = document.getElementsByTagName(&quot;span&quot;);</span><br><span class=\"line\">console.log(span[0].parentNode) // //输出为div1的对象形式</span><br><span class=\"line\">var div = document.getElementById(&quot;div&quot;);</span><br><span class=\"line\">console.log(div.childNodes) //输出为</span><br><span class=\"line\">/*NodeList[5]</span><br><span class=\"line\">&#123;0:text,</span><br><span class=\"line\">1:div.div1,</span><br><span class=\"line\">2:text,</span><br><span class=\"line\">3:div.div2,</span><br><span class=\"line\">4:text,</span><br><span class=\"line\">length:5&#125;*/</span><br><span class=\"line\">console.log(div.firstChild)//文本节点</span><br><span class=\"line\">console.log(div.childNodes[1].firstChild.nodeValue) //文本节点的ｖａｌｕｅ</span><br><span class=\"line\">console.log(span[0].parentNode.nextSibling.nextSibling) // 输出为div２对象　因为第一个nextSibling是一个text节点</span><br><span class=\"line\">var text=&quot;&quot;;</span><br><span class=\"line\">for(var i=0;i&lt;div.childNodes.length;i++)&#123;</span><br><span class=\"line\">    if(div.childNodes[i].nodeType==1)&#123;　//元素节点</span><br><span class=\"line\">        text+=div.childNodes[i].nodeName.toLowerCase()+&quot;:&quot;+div.childNodes[i].innerText+&quot;----&quot;+&quot;\\n&quot;;</span><br><span class=\"line\">    &#125;else if(div.childNodes[i].nodeType==3)&#123; //text节点</span><br><span class=\"line\">        text+=div.childNodes[i].nodeName.toLowerCase()+&quot;:&quot;+div.childNodes[i].nodeValue+&quot;----&quot;+&quot;\\n&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(text)</span><br></pre></td></tr></table></figure>\n<p>二.作为元素树的文档 // 忽略掉文本节点<br>1、firstElementChild         第一个子元素节点<br>2、lastElementChild          最后一个子元素节点<br>3、nextElementSibling        下一个兄弟元素节点<br>4、previousElementSibling    前一个兄弟元素节点<br>5、childElementCount         子元素节点个数量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div1&quot;&gt;</span><br><span class=\"line\">    &lt;p id=&quot;p1&quot; class=&quot;class1&quot;&gt; 我是第一个P&lt;/p&gt;</span><br><span class=\"line\">    &lt;p id=&quot;p2&quot; class=&quot;class2&quot;&gt;我是第二个P&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">var node = document.getElementById(&quot;div1&quot;);</span><br><span class=\"line\">var node1 = node.firstElementChild;</span><br><span class=\"line\">var node2 = node.lastElementChild;</span><br><span class=\"line\"></span><br><span class=\"line\">alert(node.childElementCount);  //输出2，div1一共有两个非文档子元素节点</span><br><span class=\"line\">alert(node1.innerHTML);         //输出 我是第一个P</span><br><span class=\"line\">alert(node2.innerHTML);         //输出 我是第二个P</span><br><span class=\"line\">alert(node2.previousElementSibling.innerHTML);  //输出 我是第一个P(第二个元素节点的上一个非文本元素节点是P1)</span><br><span class=\"line\">alert(node1.nextElementSibling.innerHTML);      //输出 我是第二个P(第一个元素节点的下一个兄弟非文本节点是P2)</span><br></pre></td></tr></table></figure>\n<h2 id=\"javascript操作HTML属性\"><a href=\"#javascript操作HTML属性\" class=\"headerlink\" title=\"javascript操作HTML属性\"></a>javascript操作HTML属性</h2><blockquote>\n<p>1、属性的读取，此处要注意的是，某些HTML属性名称在javascript之中是保留字，因此会有些许不同，如class,lable中的for在javascript中变为htmlFor,className。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div1&quot;&gt;</span><br><span class=\"line\">    &lt;p id=&quot;p1&quot; class=&quot;class1&quot;&gt; 我是第一个P&lt;/p&gt;</span><br><span class=\"line\">    &lt;img src=&quot;123.jpg&quot; alt=&quot;我是一张图片&quot; id=&quot;img1&quot; /&gt;</span><br><span class=\"line\">    &lt;input type=&quot;text&quot; value=&quot;我是一个文本框&quot; id=&quot;input1&quot; /&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">window.onload = function () &#123;</span><br><span class=\"line\">    var nodeText = document.getElementById(&quot;input1&quot;);</span><br><span class=\"line\">    alert(nodeText.value);        //输出 我是一个文本框</span><br><span class=\"line\">    var nodeImg = document.getElementById(&quot;img1&quot;);</span><br><span class=\"line\">    alert(nodeImg.alt);            //输出 我是一张图片</span><br><span class=\"line\">    var nodeP = document.getElementById(&quot;p1&quot;);</span><br><span class=\"line\">    alert(nodeP.className);        //输出 class1    注意获取class是className，如果写成nodeP.class则输出undefined</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>属性的设置，此处同样要注意的是保留字</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div1&quot;&gt;</span><br><span class=\"line\">    &lt;img src=&quot;1big.jpg&quot; alt=&quot;我是一张图片&quot; id=&quot;img1&quot; onclick=&quot;fun1()&quot; /&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">function fun1() &#123;</span><br><span class=\"line\">    document.getElementById(&quot;img1&quot;).src = &quot;1small.jpg&quot;;        //改变图片的路径属性。实现的效果为，当点击图片时，大图变小图。</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>非标准HTML属性  //注意这两个方法是不必理会javascript保留字的，HTML属性是什么就怎么写。</p>\n</blockquote>\n<p>getAttribute();<br>setAttribute();</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div1&quot;&gt;</span><br><span class=\"line\">    &lt;img src=&quot;1big.jpg&quot; alt=&quot;我是一张图片&quot; class=&quot;imgClass&quot; id=&quot;img1&quot; onclick=&quot;fun1()&quot; /&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">function fun1() &#123;</span><br><span class=\"line\">    document.getElementById(&quot;img1&quot;).setAttribute(&quot;src&quot;, &quot;1small.jpg&quot;);</span><br><span class=\"line\">    alert(document.getElementById(&quot;img1&quot;).getAttribute(&quot;class&quot;));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Attr节点的属性</p>\n</blockquote>\n<p>attributes属性  非Element对象返回null，Element一般返回Attr对象。Attr对象是一个特殊的Node,通过name与value获取属性名称与值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var div = document.getElementsByTagName(&quot;div&quot;);</span><br><span class=\"line\">console.log(div[1].attributes) //返回div1的所有属性 &#123;0:class,1:name&#125;</span><br><span class=\"line\">console.log(div[1].attributes[0].name) //返回div1的第一个属性的nodeName　结果为class</span><br><span class=\"line\">console.log(div[1].attributes[0].value) //返回div1的第一个属性的nodeValue　结果为div1</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>元素的内容</p>\n</blockquote>\n<p>1、innerText、textContent    innerText与textContent的区别，当文本为空时，innerText是””，而textContent是undefined<br>2、innerHTML</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div1&quot;&gt;</span><br><span class=\"line\">    &lt;p id=&quot;p1&quot;&gt;我是第一个P&lt;/p&gt;</span><br><span class=\"line\">    &lt;p id=&quot;p2&quot;&gt;我是第&lt;b&gt;二&lt;/b&gt;个P&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">window.onload = function () &#123;</span><br><span class=\"line\">    alert(document.getElementById(&quot;p1&quot;).innerText);  //注意火狐浏览器不支持innerText</span><br><span class=\"line\">    alert(document.getElementById(&quot;p1&quot;).textContent);    //基本都支持textContent</span><br><span class=\"line\">    document.getElementById(&quot;p1&quot;).textContent = &quot;我是p1，javascript改变了我&quot;;    //设置文档Text</span><br><span class=\"line\">    alert(document.getElementById(&quot;p2&quot;).textContent);</span><br><span class=\"line\">    alert(document.getElementById(&quot;p2&quot;).innerHTML); //innerHTML与innerText的区别，就是对HTML代码的输出方式Text不会输出HTML代码</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>创建，插入，删除节点</p>\n</blockquote>\n<p>1、document.createTextNode()    创建一个文本节点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div1&quot;&gt;</span><br><span class=\"line\">     &lt;p id=&quot;p1&quot;&gt;我是第一个P&lt;/p&gt;</span><br><span class=\"line\">     &lt;p id=&quot;p2&quot;&gt;我是第二个P&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">window.onload = function () &#123;</span><br><span class=\"line\">     var textNode = document.createTextNode(&quot;&lt;p&gt;我是一个javascript新建的节点&lt;/p&gt;&quot;);</span><br><span class=\"line\">     document.getElementById(&quot;div1&quot;).appendChild(textNode);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">结果为：</span><br><span class=\"line\">&lt;div id=&quot;div1&quot;&gt;</span><br><span class=\"line\">    &lt;p id=&quot;p1&quot;&gt;我是第一个P&lt;/p&gt;</span><br><span class=\"line\">    &lt;p id=&quot;p2&quot;&gt;我是第二个P&lt;/p&gt;</span><br><span class=\"line\">    我是一个javascript新建的节点</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>2、document.createElement()    创建一个元素节点</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div1&quot;&gt;</span><br><span class=\"line\">    &lt;p id=&quot;p1&quot;&gt;我是第一个P&lt;/p&gt;</span><br><span class=\"line\">    &lt;p id=&quot;p2&quot;&gt;我是第二个P&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">window.onload = function () &#123;</span><br><span class=\"line\">    var pNode = document.createElement(&quot;p&quot;);</span><br><span class=\"line\">    pNode.textContent = &quot;新建一个P节点&quot;;</span><br><span class=\"line\">    document.getElementById(&quot;div1&quot;).appendChild(pNode);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">结果为：</span><br><span class=\"line\">&lt;div id=&quot;div1&quot;&gt;</span><br><span class=\"line\">    &lt;p id=&quot;p1&quot;&gt;我是第一个P&lt;/p&gt;</span><br><span class=\"line\">    &lt;p id=&quot;p2&quot;&gt;我是第二个P&lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;新建一个P节点&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>3、插入节点<br>appendChild()    //将一个节点插入到调用节点的最后面<br>insertBefore()   //接受两个参数，第一个为待插入的节点，第二个指明在哪个节点前面，如果不传入第二个参数，报错。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div1&quot;&gt;</span><br><span class=\"line\">    &lt;p id=&quot;p1&quot;&gt;我是第一个P&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">window.onload = function () &#123;</span><br><span class=\"line\">    var pNode1 = document.createElement(&quot;p&quot;);</span><br><span class=\"line\">    pNode1.textContent = &quot;insertBefore插入的节点&quot;;</span><br><span class=\"line\">    var pNode2 = document.createElement(&quot;p&quot;);</span><br><span class=\"line\">    pNode2.textContent = &quot;appendChild插入的节点&quot;;</span><br><span class=\"line\">    document.getElementById(&quot;div1&quot;).appendChild(pNode2);</span><br><span class=\"line\">    document.getElementById(&quot;div1&quot;).insertBefore(pNode1,document.getElementById(&quot;p1&quot;));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">结果为：</span><br><span class=\"line\">&lt;div id=&quot;div1&quot;&gt;</span><br><span class=\"line\">    &lt;p&gt;insertBefore插入的节点&lt;/p&gt;</span><br><span class=\"line\">    &lt;p id=&quot;p1&quot;&gt;我是第一个P&lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;appendChild插入的节点&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>4、删除和替换节点。<br>1)removeChild();    由父元素调用，删除一个子节点。注意是直接父元素调用，删除直接子元素才有效，删除孙子元素就没有效果了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div1&quot;&gt;</span><br><span class=\"line\">    &lt;p id=&quot;p1&quot;&gt;我是第一个P&lt;/p&gt;</span><br><span class=\"line\">    &lt;p id=&quot;p2&quot;&gt;我是第二个P&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">window.onload = function () &#123;</span><br><span class=\"line\">    var div1 = document.getElementById(&quot;div1&quot;);</span><br><span class=\"line\">    div1.removeChild(document.getElementById(&quot;p2&quot;));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">执行之后代码变为：</span><br><span class=\"line\">&lt;div id=&quot;div1&quot;&gt;</span><br><span class=\"line\">    &lt;p id=&quot;p1&quot;&gt;我是第一个P&lt;/p&gt;    //注意到第二个P元素已经被移除了</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>2)replaceChild()    //删除一个子节点，并用一个新节点代替它，第一个参数为新建的节点，第二个节点为被替换的节点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div1&quot;&gt;</span><br><span class=\"line\">    &lt;p id=&quot;p1&quot;&gt;我是第一个P&lt;/p&gt;</span><br><span class=\"line\">    &lt;p id=&quot;p2&quot;&gt;我是第二个P&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">window.onload = function () &#123;</span><br><span class=\"line\">    var div1 = document.getElementById(&quot;div1&quot;);</span><br><span class=\"line\">    var span1 = document.createElement(&quot;span&quot;);</span><br><span class=\"line\">    span1.textContent = &quot;我是一个新建的span&quot;;</span><br><span class=\"line\">    div1.replaceChild(span1,document.getElementById(&quot;p2&quot;));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">执行完成后HTML代码变为：</span><br><span class=\"line\">&lt;div id=&quot;div1&quot;&gt;</span><br><span class=\"line\">    &lt;p id=&quot;p1&quot;&gt;我是第一个P&lt;/p&gt;</span><br><span class=\"line\">    &lt;span&gt;我是一个新建的span&lt;/span&gt;    //留意到p2节点已经被替换为span1节点了</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>javascript操作元素CSS　通过元素的style属性可以随意读取和设置元素的CSS样式</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;div1&quot; style=&quot;width:100px; height:100px; background-color:red&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">window.onload = function () &#123;</span><br><span class=\"line\">    alert(document.getElementById(&quot;div1&quot;).style.backgroundColor);</span><br><span class=\"line\">    document.getElementById(&quot;div1&quot;).style.backgroundColor = &quot;yellow&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>IE有许多好用的方法，后来都被其他浏览器抄袭了，比如这个contains方法。如果A元素包含B元素，则返回true(可以A包含A)，否则false。唯一不支持这个方法的是IE的死对头firefox。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;parent&quot;&gt;</span><br><span class=\"line\">  &lt;p&gt;</span><br><span class=\"line\">    &lt;strong id=&quot;child&quot; &gt;本例子会在火狐中会报错。&lt;/strong&gt;</span><br><span class=\"line\">  &lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">window.onload = function()&#123;</span><br><span class=\"line\">    var A = document.getElementById(&apos;parent&apos;),</span><br><span class=\"line\">    B = document.getElementById(&apos;child&apos;);</span><br><span class=\"line\">    alert(A.contains(A));　//true</span><br><span class=\"line\">    alert(A.contains(B));　//true</span><br><span class=\"line\">    alert(B.contains(A));  //false</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>cloneNode(true/false) 克隆节点　　true为深度克隆　false为只克隆节点本身</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var p = document.createElement(&quot;p&quot;);</span><br><span class=\"line\">p.id =&quot;ppp&quot;;</span><br><span class=\"line\">p.innerText = &quot;我是新创建的p元素&quot;;</span><br><span class=\"line\">var cloneNode = p.cloneNode(true); //&lt;p id=&quot;ppp&quot;&gt;我是新创建的p元素&lt;/p&gt;</span><br><span class=\"line\">var cloneNode = p.cloneNode(false);//默认为false &lt;p id=&quot;ppp&quot;&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>addEventListener() 第一个参数是事件名，第二个是回调函数，第三个参数为true表示捕获，false表示冒泡。</p>\n</blockquote>\n<p>addEventListener()将指定的事件监听器注册到目标对象上，当目标对象触发制定的事件时，指定的回调函数就会触发。目标对象可以是 文档上的元素、 document、 window 或者XMLHttpRequest(比如onreadystatechange事件)。IE8及以下不支持此方法且只有事件冒泡没有事件捕获。IE9开始支持此方法，也就有了事件捕获。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var div1 = document.getElementById(&quot;div1&quot;);</span><br><span class=\"line\">div1.addEventListener(&quot;click&quot;, listener, false);</span><br><span class=\"line\">function listener() &#123;</span><br><span class=\"line\">    console.log(&apos;test&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var cloneHtml = div1.cloneNode(true);</span><br><span class=\"line\">document.body.appendChild(cloneHtml);</span><br><span class=\"line\">/*</span><br><span class=\"line\">注意：</span><br><span class=\"line\">    当对某一个元素1既绑定了捕获事件，又绑定了冒泡事件时：</span><br><span class=\"line\">    当这个元素1并不是触发事件的那个元素2时，则触发顺序会按照先 捕获 后 冒泡 的顺序触发；</span><br><span class=\"line\">    当这个元素1就是最底层的触发事件的元素时，则这个元素没有捕获和冒泡的区别，谁先绑定就先触发谁。</span><br><span class=\"line\">*/</span><br><span class=\"line\">var div2 = document.getElementById(&quot;div2&quot;);</span><br><span class=\"line\">div2.addEventListener(&quot;click&quot;, listener2, true);</span><br><span class=\"line\">function listener2() &#123;</span><br><span class=\"line\">    console.log(&apos;test2&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">div2.addEventListener(&quot;click&quot;, listener1, false);</span><br><span class=\"line\">function listener1() &#123;</span><br><span class=\"line\">    console.log(&apos;test1&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 按绑定顺序执行，两个`addEventLister()`颠倒过来则执行顺序也变化</span><br><span class=\"line\">// 如果再对`div1`绑定一个捕获、一个冒泡，则会先触发捕获 再 触发冒泡，与绑定顺序无关</span><br></pre></td></tr></table></figure>\n<p>removeEventListener():与addEventListener()绑定事件对应的就是移除已绑定的事件<br>注意：只能通过removeEventListener()解绑有名字的函数，对于绑定的匿名函数无法解除绑定。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var div2 = document.getElementById(&quot;div2&quot;);</span><br><span class=\"line\">div2.addEventListener(&quot;click&quot;, listener2, true);</span><br><span class=\"line\">function listener2() &#123;</span><br><span class=\"line\">    console.log(&apos;test2&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">div2.removeEventListener(&quot;click&quot;, listener2, true);</span><br></pre></td></tr></table></figure></p>\n<p> attachEvent()、detachEvent() IE8及以下使用这两个方法绑定和解绑事件，当然，IE9+也支持这个事件。但这个方法绑定的事件默认为冒泡也只有冒泡。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 这里需要在事件前加 on</span><br><span class=\"line\">div2.attachEvent(&quot;onclick&quot;, listener1);</span><br><span class=\"line\">function listener1() &#123;</span><br><span class=\"line\">    console.log(&apos;test&apos;);</span><br><span class=\"line\">    console.log(this);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">div2.detachEvent(&quot;onclick&quot;, listener1);</span><br><span class=\"line\">//和addEventListener()一样，也不能解绑匿名函数。</span><br><span class=\"line\"></span><br><span class=\"line\">//标准事件和IE事件中的阻止默认事件和冒泡事件也有很大区别。</span><br><span class=\"line\">var div2 = document.getElementById(&quot;div2&quot;);</span><br><span class=\"line\">if (div2.addEventListener) &#123;</span><br><span class=\"line\">    div2.addEventListener(&quot;click&quot;, function(e) &#123;</span><br><span class=\"line\">        e.preventDefault(); // 阻止默认事件</span><br><span class=\"line\">        e.stopPropagation(); // 阻止冒泡</span><br><span class=\"line\">        console.log(e.target.innerHTML);</span><br><span class=\"line\">    &#125;, false);</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    div2.attachEvent(&quot;onclick&quot;, function() &#123;</span><br><span class=\"line\">        var e = window.event;</span><br><span class=\"line\">        e.returnValue = false; // 阻止默认事件</span><br><span class=\"line\">        e.cancelBubble = true; // 阻止冒泡</span><br><span class=\"line\">        console.log(e.srcElement.innerHTML);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 自定义事件：createEvent()</p>\n<p> createEvent()用于创建一个新的 event ，而后这个 event 必须调用它的 init() 方法进行初始化。最后就可以在目标元素上使用dispatchEvent()调用新创建的event事件了。<br> initEvent(type, bubbles, cancelable)<br> type表示自定义的事件类型，bubbles表示是否冒泡，cancelable表示是否阻止默认事件。<br> target.dispatchEvent(ev)<br> target就是要触发自定义事件的DOM元素</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var div1 = document.getElementById(&quot;div1&quot;);</span><br><span class=\"line\">div1.addEventListener(&quot;message&quot;, function()&#123;</span><br><span class=\"line\">    console.log(&apos;test&apos;);</span><br><span class=\"line\">&#125;, false);</span><br><span class=\"line\"></span><br><span class=\"line\">var div2 = document.getElementById(&quot;div2&quot;);</span><br><span class=\"line\">div2.addEventListener(&quot;message&quot;, function(e)&#123;</span><br><span class=\"line\">    console.log(this);</span><br><span class=\"line\">    console.log(e);</span><br><span class=\"line\">&#125;, false);</span><br><span class=\"line\">var ev = document.createEvent(&quot;Event&quot;);</span><br><span class=\"line\">ev.initEvent(&quot;message&quot;, false, true); // 起泡参数变为true，div1的事件就会触发</span><br><span class=\"line\">div2.dispatchEvent(ev);</span><br></pre></td></tr></table></figure>"},{"title":"es6 async解析","date":"2017-08-03T06:06:40.000Z","_content":"\n# async 函数\n\nasync函数就是将 Generator 函数的星号（*）替换成async，将yield替换成await，仅此而已\n\n## Generator 函数读取文件例子\n\n```javascript 1.8\n    var fs = require('fs');\n    var readFile = function (fileName) {\n      return new Promise(function (resolve, reject) {\n        fs.readFile(fileName, function(error, data) {\n          if (error) return reject(error);\n          resolve(data);\n        });\n      });\n    };\n    \n    var gen = function* () {\n      var f1 = yield readFile('/etc/fstab');\n      var f2 = yield readFile('/etc/shells');\n      console.log(f1.toString());\n      console.log(f2.toString());\n    };\n```\n\n## async 函数改写\n\n```javascript 1.8\n    var asyncReadFile = async function () {\n      var f1 = await readFile('/etc/fstab');\n      var f2 = await readFile('/etc/shells');\n      console.log(f1.toString());\n      console.log(f2.toString());\n    };\n```\n\n## async 函数优点\n\n1. 内置执行器,不用像Generator函数一样调用next()方法\n\n2. 更好的语义\n\n3. 更广的适用性\n   yield命令后面只能是 Thunk 函数或 Promise 对象，而async函数的await命令后面，可以是Promise 对象和原始类型的值（数值、字符串和布尔值，但这时等同于同步操作(相当于直接返回Promise.resolve(\"成功了\"))\n\n4. 返回值是 Promise 可以进行链式调用(.then(function(res){}))\n\n## async 实例\n\n```javascript 1.8\n    function a(){\n      return new Promise(function(resolve,reject){\n         setTimeout(function(){\n           console.log(\"-------\")\n            //resolve({name:\"caicai\",age:12})\n            //reject(\"错误\")\n         },2000)\n      })\n    }\n    async function getName(){\n      try {\n          let name = await a()\n          console.log(name)\n      }catch (e){\n          console.log(e)\n      }\n      let age = await \"20\";\n      return age\n    }\n    \n    getName().then(function(res){\n      console.log(res) // 若有return则返回return的结果,没有则为undefined\n    })\n    \n    //运行结果:\n    //resolve的结果\n        //-------\n        //Object {name: \"caicai\", age: 12}\n        //20\n    //reject的结果\n        //-------\n        //错误\n        //20\n```\n\n## 结论 \n\n1. await后面的代码,需要等待await的结果\n\n2. await后面的表达式,可以为任意类型\n\n3. 如果使用return语句会返回return的结果,在.then回调中可以取到,若不使用return,则返回undefined\n\n4. 如果await的结果返回为reject(),则不会执行后面的代码\n\n5. 在写await操作的时候,判断是否可能会失败,如果可能失败,则用try{ }catch (e){ }块捕获异常,可以让下面的代码正常执行","source":"_posts/es6-async解析.md","raw":"---\ntitle: es6 async解析\ndate: 2017-08-03 14:06:40\ncategories: ES6\ntags:\n    - ES6\n---\n\n# async 函数\n\nasync函数就是将 Generator 函数的星号（*）替换成async，将yield替换成await，仅此而已\n\n## Generator 函数读取文件例子\n\n```javascript 1.8\n    var fs = require('fs');\n    var readFile = function (fileName) {\n      return new Promise(function (resolve, reject) {\n        fs.readFile(fileName, function(error, data) {\n          if (error) return reject(error);\n          resolve(data);\n        });\n      });\n    };\n    \n    var gen = function* () {\n      var f1 = yield readFile('/etc/fstab');\n      var f2 = yield readFile('/etc/shells');\n      console.log(f1.toString());\n      console.log(f2.toString());\n    };\n```\n\n## async 函数改写\n\n```javascript 1.8\n    var asyncReadFile = async function () {\n      var f1 = await readFile('/etc/fstab');\n      var f2 = await readFile('/etc/shells');\n      console.log(f1.toString());\n      console.log(f2.toString());\n    };\n```\n\n## async 函数优点\n\n1. 内置执行器,不用像Generator函数一样调用next()方法\n\n2. 更好的语义\n\n3. 更广的适用性\n   yield命令后面只能是 Thunk 函数或 Promise 对象，而async函数的await命令后面，可以是Promise 对象和原始类型的值（数值、字符串和布尔值，但这时等同于同步操作(相当于直接返回Promise.resolve(\"成功了\"))\n\n4. 返回值是 Promise 可以进行链式调用(.then(function(res){}))\n\n## async 实例\n\n```javascript 1.8\n    function a(){\n      return new Promise(function(resolve,reject){\n         setTimeout(function(){\n           console.log(\"-------\")\n            //resolve({name:\"caicai\",age:12})\n            //reject(\"错误\")\n         },2000)\n      })\n    }\n    async function getName(){\n      try {\n          let name = await a()\n          console.log(name)\n      }catch (e){\n          console.log(e)\n      }\n      let age = await \"20\";\n      return age\n    }\n    \n    getName().then(function(res){\n      console.log(res) // 若有return则返回return的结果,没有则为undefined\n    })\n    \n    //运行结果:\n    //resolve的结果\n        //-------\n        //Object {name: \"caicai\", age: 12}\n        //20\n    //reject的结果\n        //-------\n        //错误\n        //20\n```\n\n## 结论 \n\n1. await后面的代码,需要等待await的结果\n\n2. await后面的表达式,可以为任意类型\n\n3. 如果使用return语句会返回return的结果,在.then回调中可以取到,若不使用return,则返回undefined\n\n4. 如果await的结果返回为reject(),则不会执行后面的代码\n\n5. 在写await操作的时候,判断是否可能会失败,如果可能失败,则用try{ }catch (e){ }块捕获异常,可以让下面的代码正常执行","slug":"es6-async解析","published":1,"updated":"2020-03-23T11:05:23.942Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgbydgnf000sofo9zda3mzbi","content":"<h1 id=\"async-函数\"><a href=\"#async-函数\" class=\"headerlink\" title=\"async 函数\"></a>async 函数</h1><p>async函数就是将 Generator 函数的星号（*）替换成async，将yield替换成await，仅此而已</p>\n<h2 id=\"Generator-函数读取文件例子\"><a href=\"#Generator-函数读取文件例子\" class=\"headerlink\" title=\"Generator 函数读取文件例子\"></a>Generator 函数读取文件例子</h2><figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> readFile = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fileName</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    fs.readFile(fileName, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, data</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (error) <span class=\"keyword\">return</span> reject(error);</span><br><span class=\"line\">      resolve(data);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> gen = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> f1 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'/etc/fstab'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> f2 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'/etc/shells'</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f1.toString());</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f2.toString());</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"async-函数改写\"><a href=\"#async-函数改写\" class=\"headerlink\" title=\"async 函数改写\"></a>async 函数改写</h2><figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> asyncReadFile = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> f1 = <span class=\"keyword\">await</span> readFile(<span class=\"string\">'/etc/fstab'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> f2 = <span class=\"keyword\">await</span> readFile(<span class=\"string\">'/etc/shells'</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f1.toString());</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f2.toString());</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"async-函数优点\"><a href=\"#async-函数优点\" class=\"headerlink\" title=\"async 函数优点\"></a>async 函数优点</h2><ol>\n<li><p>内置执行器,不用像Generator函数一样调用next()方法</p>\n</li>\n<li><p>更好的语义</p>\n</li>\n<li><p>更广的适用性<br>yield命令后面只能是 Thunk 函数或 Promise 对象，而async函数的await命令后面，可以是Promise 对象和原始类型的值（数值、字符串和布尔值，但这时等同于同步操作(相当于直接返回Promise.resolve(“成功了”))</p>\n</li>\n<li><p>返回值是 Promise 可以进行链式调用(.then(function(res){}))</p>\n</li>\n</ol>\n<h2 id=\"async-实例\"><a href=\"#async-实例\" class=\"headerlink\" title=\"async 实例\"></a>async 实例</h2><figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</span><br><span class=\"line\">     setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"string\">\"-------\"</span>)</span><br><span class=\"line\">        <span class=\"comment\">//resolve(&#123;name:\"caicai\",age:12&#125;)</span></span><br><span class=\"line\">        <span class=\"comment\">//reject(\"错误\")</span></span><br><span class=\"line\">     &#125;,<span class=\"number\">2000</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> name = <span class=\"keyword\">await</span> a()</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(name)</span><br><span class=\"line\">  &#125;<span class=\"keyword\">catch</span> (e)&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(e)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> age = <span class=\"keyword\">await</span> <span class=\"string\">\"20\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getName().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res) <span class=\"comment\">// 若有return则返回return的结果,没有则为undefined</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//运行结果:</span></span><br><span class=\"line\"><span class=\"comment\">//resolve的结果</span></span><br><span class=\"line\">    <span class=\"comment\">//-------</span></span><br><span class=\"line\">    <span class=\"comment\">//Object &#123;name: \"caicai\", age: 12&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//20</span></span><br><span class=\"line\"><span class=\"comment\">//reject的结果</span></span><br><span class=\"line\">    <span class=\"comment\">//-------</span></span><br><span class=\"line\">    <span class=\"comment\">//错误</span></span><br><span class=\"line\">    <span class=\"comment\">//20</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><ol>\n<li><p>await后面的代码,需要等待await的结果</p>\n</li>\n<li><p>await后面的表达式,可以为任意类型</p>\n</li>\n<li><p>如果使用return语句会返回return的结果,在.then回调中可以取到,若不使用return,则返回undefined</p>\n</li>\n<li><p>如果await的结果返回为reject(),则不会执行后面的代码</p>\n</li>\n<li><p>在写await操作的时候,判断是否可能会失败,如果可能失败,则用try{ }catch (e){ }块捕获异常,可以让下面的代码正常执行</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"async-函数\"><a href=\"#async-函数\" class=\"headerlink\" title=\"async 函数\"></a>async 函数</h1><p>async函数就是将 Generator 函数的星号（*）替换成async，将yield替换成await，仅此而已</p>\n<h2 id=\"Generator-函数读取文件例子\"><a href=\"#Generator-函数读取文件例子\" class=\"headerlink\" title=\"Generator 函数读取文件例子\"></a>Generator 函数读取文件例子</h2><figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> readFile = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fileName</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    fs.readFile(fileName, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, data</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (error) <span class=\"keyword\">return</span> reject(error);</span><br><span class=\"line\">      resolve(data);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> gen = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> f1 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'/etc/fstab'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> f2 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'/etc/shells'</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f1.toString());</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f2.toString());</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"async-函数改写\"><a href=\"#async-函数改写\" class=\"headerlink\" title=\"async 函数改写\"></a>async 函数改写</h2><figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> asyncReadFile = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> f1 = <span class=\"keyword\">await</span> readFile(<span class=\"string\">'/etc/fstab'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> f2 = <span class=\"keyword\">await</span> readFile(<span class=\"string\">'/etc/shells'</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f1.toString());</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f2.toString());</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"async-函数优点\"><a href=\"#async-函数优点\" class=\"headerlink\" title=\"async 函数优点\"></a>async 函数优点</h2><ol>\n<li><p>内置执行器,不用像Generator函数一样调用next()方法</p>\n</li>\n<li><p>更好的语义</p>\n</li>\n<li><p>更广的适用性<br>yield命令后面只能是 Thunk 函数或 Promise 对象，而async函数的await命令后面，可以是Promise 对象和原始类型的值（数值、字符串和布尔值，但这时等同于同步操作(相当于直接返回Promise.resolve(“成功了”))</p>\n</li>\n<li><p>返回值是 Promise 可以进行链式调用(.then(function(res){}))</p>\n</li>\n</ol>\n<h2 id=\"async-实例\"><a href=\"#async-实例\" class=\"headerlink\" title=\"async 实例\"></a>async 实例</h2><figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</span><br><span class=\"line\">     setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"string\">\"-------\"</span>)</span><br><span class=\"line\">        <span class=\"comment\">//resolve(&#123;name:\"caicai\",age:12&#125;)</span></span><br><span class=\"line\">        <span class=\"comment\">//reject(\"错误\")</span></span><br><span class=\"line\">     &#125;,<span class=\"number\">2000</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> name = <span class=\"keyword\">await</span> a()</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(name)</span><br><span class=\"line\">  &#125;<span class=\"keyword\">catch</span> (e)&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(e)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> age = <span class=\"keyword\">await</span> <span class=\"string\">\"20\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getName().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res) <span class=\"comment\">// 若有return则返回return的结果,没有则为undefined</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//运行结果:</span></span><br><span class=\"line\"><span class=\"comment\">//resolve的结果</span></span><br><span class=\"line\">    <span class=\"comment\">//-------</span></span><br><span class=\"line\">    <span class=\"comment\">//Object &#123;name: \"caicai\", age: 12&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//20</span></span><br><span class=\"line\"><span class=\"comment\">//reject的结果</span></span><br><span class=\"line\">    <span class=\"comment\">//-------</span></span><br><span class=\"line\">    <span class=\"comment\">//错误</span></span><br><span class=\"line\">    <span class=\"comment\">//20</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><ol>\n<li><p>await后面的代码,需要等待await的结果</p>\n</li>\n<li><p>await后面的表达式,可以为任意类型</p>\n</li>\n<li><p>如果使用return语句会返回return的结果,在.then回调中可以取到,若不使用return,则返回undefined</p>\n</li>\n<li><p>如果await的结果返回为reject(),则不会执行后面的代码</p>\n</li>\n<li><p>在写await操作的时候,判断是否可能会失败,如果可能失败,则用try{ }catch (e){ }块捕获异常,可以让下面的代码正常执行</p>\n</li>\n</ol>\n"},{"title":"Git","date":"2019-06-13T08:29:06.000Z","_content":"\n## Git\n\n### 版本控制\n\n版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。 \n\n- 本地的版本控制系统\n\n  相当于拷贝文件夹,以命名不同区分\n\n- 集中化的版本控制系统\n\n  多人开发一个项目,公用一个资源(SVN),必须联网工作,比如提交 还原 对比什么的(SVN本地有log记录吗?)\n\n- 分布式的版本控制系统\n\n  每一个个体都是一台服务器,可以随时看到提交历史,进行提交 还原 对比 什么的\n\n### Git配置\n\n- 生成SSH公钥\n\n  1. 存放目录\n\n     ```\n     cd ~/.ssh\n     ```\n\n     .pub文件即为公钥文件\n\n  2. 生成公钥\n\n     ```\n     ssh-keygen\n     ```\n\n- 配置信息\n\n  ```\n  git config --global user.name \"xxx\"\n  git config --global user.email xxx@example.com\n  git config --global alias.co checkout\n  git config --global alias.br branch\n  git config --global alias.ci commit\n  git config --global alias.st status\n  git config --list 查看配置信息\n  ```\n\n### Git常用命令\n\n```\ngit init 初始化仓库\ngit clone [url] 克隆仓库\ngit clone [url] xxx 克隆仓库(自定义仓库名字)\ngit status 检查文件状态 (未修改，已修改或已放入暂存区)\ngit remote 远程仓库\ngit log 查看提交历史\ngitk --all & (git log 图形化界面)\ngit tag 打标签\ngit reflog 查看所有分支的所有操作记录（包括已经被删除的 commit 记录和 reset 的操作）\ngit diff 文件对比\ngit branch 分支\ngit add 添加文件到暂存区\ngit commit 提交文件\ngit merge 合并分支\ngit cherry-pick 获取某个分支的单次提交,作为一个新的提交到当前分支上\ngit pull 从远端获取代码到本地,并自动合并\ngit fetch 从远端获取代码到本地,不会自动合并\ngit push 将本地分支的更新,推送到远端\ngit reset 修改HEAD的位置,撤销代码\ngit revert 撤销代码,不会丢失commit信息,会重新生成一个commitId\ngit rebase 变基\ngit stash 存储,保存当前的工作状态\ngit rm \ngit mv\n```\n\n### 常用命令解析\n\n- git remote \n\n  远程仓库\n\n  git remote add [shortname] [url]\n\n  添加一个远端仓库\n\n  git remte -v \n\n  显示对应的克隆地址\n\n  git remote show origin \n\n  查看远端仓库的详细信息\n\n  git remote rename xx xxx\n\n  修改某个远端仓库的本地简称\n\n  git remote rm xx\n\n  删除远端仓库\n\n  ```\n  git clone 所有分支,并push到一个新仓库\n  \n  git remote rename origin old_origin\n  git remote add origin https://github.com/your_name/yyy.git\n  git push -u origin --all\n  git push -u origin --tags\n  ```\n\n- git tag\n\n  打标签 显示已有的标签\n\n  标签分为两类: 轻量级和含附注.\n\n  轻量级标签就像是个不会变化的分支,实际上它就是个指向特定提交对象的引用\n\n  含附注实际上是存储在仓库中的一个独立对象,它有自身的独立信息,包含着标签名,电子邮件和日期,标签说明\n\n  git tag -a v1.0 -m \"标签说明\"\n\n  -a 表示这是一个含附注类型的标签  -m表示对应的标签说明\n\n  git show v1.0 查看相应标签的版本信息\n\n  git push origin v1.0 提交标签到远端仓库\n\n  git push origin --tags 提交所有的标签到仓库\n\n  git tag -d v1.0 删除tag\n\n  git tag push origin :refs/tags/v1.0 删除远端tag\n\n- git diff\n\n  git diff xxx 工作区与暂存区比较\n\n  git diff HEAD xxx 工作区与HEAD比较\n\n  git diff --cached xxx 暂存区与HEAD比较\n\n  git diff branchName xxx 当前分支和branchName分支比较\n\n- git branch \n\n  git branch -d xxx  ||  git branch -D xxx 删除本地分支 (-D表示删除的分支在当前分支没有合并过,所以需要强制删除)\n\n  git push origin -d xxx  ||  git push origin :xxx 删除远端分支\n\n  git branch -a 查看远程分支和本地分支  \n\n  git branch -v 查看各个分支的最后一次提交信息\n\n- git merge\n\n  git merge --abort 取消合并\n\n  git merge --containue 继续合并(解决完一个冲突后,执行git add .,执行git merge --containue会提示下一个冲突文件)\n\n- git cherry-pick\n\n  git cherry-pick --abort 取消合并\n\n  git cherry-pick --containue 继续合并\n\n- git pull <远程主机名> <远程分支名>:<本地分支名>\n\n  git fetch和git pull区别\n\n  git fetch 获取远端最新代码,不会自动合并\n\n  git pull 相当于 git fetch 然后 git merge\n\n- git push <远程主机名> <本地分支名>:<远程分支名>\n\n  git push origin :master === git push origin -d master 删除远端分支\n\n  git push origin --all 将本地的所有分支推送到远端\n\n  git push origin --force 强制推送\n\n  git push origin --tags 因为git push默认不会推送tag,所以可以指定推送--tags\n\n- git reset\n\n  git reset --soft commitId 撤销commit,修改的代码还都在,三个里改动最小的一个\n\n  git reset --hard commitId 回退到当前commitId的状态,会丢失工作内容\n\n  git reset --mixed commitId === git reset commitId (git reset默认模式)  撤销到当前的commitId,不会丢失之前的提交,会把之前的提交撤销为未执行add的操作,可以用来**合并多次提交为一个提交**\n\n- git revert\n\n  ```\n  git revert --continue\n  git revert --quit\n  git revert --abort\n  ```\n\n- git rebase \n\n  - rebase操作可以把本地未push的分叉提交历史整理成直线；\n  - rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。\n\n  ```\n  git rebase --containue \n  git rebase --abort \n  git rebase --skip  // 跳过当前冲突\n  ```\n\n- git stash\n\n  ```\n  git stash save \"save message\" 存储时,增加存储信息(不加save不方便查找当前的存储是什么)\n  git stash list 查看存储了哪些\n  git stash pop stash@{$num} 恢复之前的存储\n  git stash show -p stash@{$num} 查看当前的存储,只能看到修改的文件(-p可以查看修改的内容)\n  git stash apply stash@{$num} 应用某个存储,不会在存储列表删除\n  git stash drop stash@{$num} 丢弃stash@{$num} 从列表中删除这个存储\n  git stash clear 删除所有的stash\n  ```\n\n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  ","source":"_posts/git基本操作.md","raw":"---\ntitle: Git\ndate: 2019-06-13 16:29:06\ncategories: Git\ntags:\n     - Git\n---\n\n## Git\n\n### 版本控制\n\n版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。 \n\n- 本地的版本控制系统\n\n  相当于拷贝文件夹,以命名不同区分\n\n- 集中化的版本控制系统\n\n  多人开发一个项目,公用一个资源(SVN),必须联网工作,比如提交 还原 对比什么的(SVN本地有log记录吗?)\n\n- 分布式的版本控制系统\n\n  每一个个体都是一台服务器,可以随时看到提交历史,进行提交 还原 对比 什么的\n\n### Git配置\n\n- 生成SSH公钥\n\n  1. 存放目录\n\n     ```\n     cd ~/.ssh\n     ```\n\n     .pub文件即为公钥文件\n\n  2. 生成公钥\n\n     ```\n     ssh-keygen\n     ```\n\n- 配置信息\n\n  ```\n  git config --global user.name \"xxx\"\n  git config --global user.email xxx@example.com\n  git config --global alias.co checkout\n  git config --global alias.br branch\n  git config --global alias.ci commit\n  git config --global alias.st status\n  git config --list 查看配置信息\n  ```\n\n### Git常用命令\n\n```\ngit init 初始化仓库\ngit clone [url] 克隆仓库\ngit clone [url] xxx 克隆仓库(自定义仓库名字)\ngit status 检查文件状态 (未修改，已修改或已放入暂存区)\ngit remote 远程仓库\ngit log 查看提交历史\ngitk --all & (git log 图形化界面)\ngit tag 打标签\ngit reflog 查看所有分支的所有操作记录（包括已经被删除的 commit 记录和 reset 的操作）\ngit diff 文件对比\ngit branch 分支\ngit add 添加文件到暂存区\ngit commit 提交文件\ngit merge 合并分支\ngit cherry-pick 获取某个分支的单次提交,作为一个新的提交到当前分支上\ngit pull 从远端获取代码到本地,并自动合并\ngit fetch 从远端获取代码到本地,不会自动合并\ngit push 将本地分支的更新,推送到远端\ngit reset 修改HEAD的位置,撤销代码\ngit revert 撤销代码,不会丢失commit信息,会重新生成一个commitId\ngit rebase 变基\ngit stash 存储,保存当前的工作状态\ngit rm \ngit mv\n```\n\n### 常用命令解析\n\n- git remote \n\n  远程仓库\n\n  git remote add [shortname] [url]\n\n  添加一个远端仓库\n\n  git remte -v \n\n  显示对应的克隆地址\n\n  git remote show origin \n\n  查看远端仓库的详细信息\n\n  git remote rename xx xxx\n\n  修改某个远端仓库的本地简称\n\n  git remote rm xx\n\n  删除远端仓库\n\n  ```\n  git clone 所有分支,并push到一个新仓库\n  \n  git remote rename origin old_origin\n  git remote add origin https://github.com/your_name/yyy.git\n  git push -u origin --all\n  git push -u origin --tags\n  ```\n\n- git tag\n\n  打标签 显示已有的标签\n\n  标签分为两类: 轻量级和含附注.\n\n  轻量级标签就像是个不会变化的分支,实际上它就是个指向特定提交对象的引用\n\n  含附注实际上是存储在仓库中的一个独立对象,它有自身的独立信息,包含着标签名,电子邮件和日期,标签说明\n\n  git tag -a v1.0 -m \"标签说明\"\n\n  -a 表示这是一个含附注类型的标签  -m表示对应的标签说明\n\n  git show v1.0 查看相应标签的版本信息\n\n  git push origin v1.0 提交标签到远端仓库\n\n  git push origin --tags 提交所有的标签到仓库\n\n  git tag -d v1.0 删除tag\n\n  git tag push origin :refs/tags/v1.0 删除远端tag\n\n- git diff\n\n  git diff xxx 工作区与暂存区比较\n\n  git diff HEAD xxx 工作区与HEAD比较\n\n  git diff --cached xxx 暂存区与HEAD比较\n\n  git diff branchName xxx 当前分支和branchName分支比较\n\n- git branch \n\n  git branch -d xxx  ||  git branch -D xxx 删除本地分支 (-D表示删除的分支在当前分支没有合并过,所以需要强制删除)\n\n  git push origin -d xxx  ||  git push origin :xxx 删除远端分支\n\n  git branch -a 查看远程分支和本地分支  \n\n  git branch -v 查看各个分支的最后一次提交信息\n\n- git merge\n\n  git merge --abort 取消合并\n\n  git merge --containue 继续合并(解决完一个冲突后,执行git add .,执行git merge --containue会提示下一个冲突文件)\n\n- git cherry-pick\n\n  git cherry-pick --abort 取消合并\n\n  git cherry-pick --containue 继续合并\n\n- git pull <远程主机名> <远程分支名>:<本地分支名>\n\n  git fetch和git pull区别\n\n  git fetch 获取远端最新代码,不会自动合并\n\n  git pull 相当于 git fetch 然后 git merge\n\n- git push <远程主机名> <本地分支名>:<远程分支名>\n\n  git push origin :master === git push origin -d master 删除远端分支\n\n  git push origin --all 将本地的所有分支推送到远端\n\n  git push origin --force 强制推送\n\n  git push origin --tags 因为git push默认不会推送tag,所以可以指定推送--tags\n\n- git reset\n\n  git reset --soft commitId 撤销commit,修改的代码还都在,三个里改动最小的一个\n\n  git reset --hard commitId 回退到当前commitId的状态,会丢失工作内容\n\n  git reset --mixed commitId === git reset commitId (git reset默认模式)  撤销到当前的commitId,不会丢失之前的提交,会把之前的提交撤销为未执行add的操作,可以用来**合并多次提交为一个提交**\n\n- git revert\n\n  ```\n  git revert --continue\n  git revert --quit\n  git revert --abort\n  ```\n\n- git rebase \n\n  - rebase操作可以把本地未push的分叉提交历史整理成直线；\n  - rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。\n\n  ```\n  git rebase --containue \n  git rebase --abort \n  git rebase --skip  // 跳过当前冲突\n  ```\n\n- git stash\n\n  ```\n  git stash save \"save message\" 存储时,增加存储信息(不加save不方便查找当前的存储是什么)\n  git stash list 查看存储了哪些\n  git stash pop stash@{$num} 恢复之前的存储\n  git stash show -p stash@{$num} 查看当前的存储,只能看到修改的文件(-p可以查看修改的内容)\n  git stash apply stash@{$num} 应用某个存储,不会在存储列表删除\n  git stash drop stash@{$num} 丢弃stash@{$num} 从列表中删除这个存储\n  git stash clear 删除所有的stash\n  ```\n\n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  ","slug":"git基本操作","published":1,"updated":"2020-03-23T11:05:23.942Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgbydgng000xofo9olg2ljgm","content":"<h2 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h2><h3 id=\"版本控制\"><a href=\"#版本控制\" class=\"headerlink\" title=\"版本控制\"></a>版本控制</h3><p>版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。 </p>\n<ul>\n<li><p>本地的版本控制系统</p>\n<p>相当于拷贝文件夹,以命名不同区分</p>\n</li>\n<li><p>集中化的版本控制系统</p>\n<p>多人开发一个项目,公用一个资源(SVN),必须联网工作,比如提交 还原 对比什么的(SVN本地有log记录吗?)</p>\n</li>\n<li><p>分布式的版本控制系统</p>\n<p>每一个个体都是一台服务器,可以随时看到提交历史,进行提交 还原 对比 什么的</p>\n</li>\n</ul>\n<h3 id=\"Git配置\"><a href=\"#Git配置\" class=\"headerlink\" title=\"Git配置\"></a>Git配置</h3><ul>\n<li><p>生成SSH公钥</p>\n<ol>\n<li><p>存放目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/.ssh</span><br></pre></td></tr></table></figure>\n<p>.pub文件即为公钥文件</p>\n</li>\n<li><p>生成公钥</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>配置信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;xxx&quot;</span><br><span class=\"line\">git config --global user.email xxx@example.com</span><br><span class=\"line\">git config --global alias.co checkout</span><br><span class=\"line\">git config --global alias.br branch</span><br><span class=\"line\">git config --global alias.ci commit</span><br><span class=\"line\">git config --global alias.st status</span><br><span class=\"line\">git config --list 查看配置信息</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Git常用命令\"><a href=\"#Git常用命令\" class=\"headerlink\" title=\"Git常用命令\"></a>Git常用命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init 初始化仓库</span><br><span class=\"line\">git clone [url] 克隆仓库</span><br><span class=\"line\">git clone [url] xxx 克隆仓库(自定义仓库名字)</span><br><span class=\"line\">git status 检查文件状态 (未修改，已修改或已放入暂存区)</span><br><span class=\"line\">git remote 远程仓库</span><br><span class=\"line\">git log 查看提交历史</span><br><span class=\"line\">gitk --all &amp; (git log 图形化界面)</span><br><span class=\"line\">git tag 打标签</span><br><span class=\"line\">git reflog 查看所有分支的所有操作记录（包括已经被删除的 commit 记录和 reset 的操作）</span><br><span class=\"line\">git diff 文件对比</span><br><span class=\"line\">git branch 分支</span><br><span class=\"line\">git add 添加文件到暂存区</span><br><span class=\"line\">git commit 提交文件</span><br><span class=\"line\">git merge 合并分支</span><br><span class=\"line\">git cherry-pick 获取某个分支的单次提交,作为一个新的提交到当前分支上</span><br><span class=\"line\">git pull 从远端获取代码到本地,并自动合并</span><br><span class=\"line\">git fetch 从远端获取代码到本地,不会自动合并</span><br><span class=\"line\">git push 将本地分支的更新,推送到远端</span><br><span class=\"line\">git reset 修改HEAD的位置,撤销代码</span><br><span class=\"line\">git revert 撤销代码,不会丢失commit信息,会重新生成一个commitId</span><br><span class=\"line\">git rebase 变基</span><br><span class=\"line\">git stash 存储,保存当前的工作状态</span><br><span class=\"line\">git rm </span><br><span class=\"line\">git mv</span><br></pre></td></tr></table></figure>\n<h3 id=\"常用命令解析\"><a href=\"#常用命令解析\" class=\"headerlink\" title=\"常用命令解析\"></a>常用命令解析</h3><ul>\n<li><p>git remote </p>\n<p>远程仓库</p>\n<p>git remote add [shortname] [url]</p>\n<p>添加一个远端仓库</p>\n<p>git remte -v </p>\n<p>显示对应的克隆地址</p>\n<p>git remote show origin </p>\n<p>查看远端仓库的详细信息</p>\n<p>git remote rename xx xxx</p>\n<p>修改某个远端仓库的本地简称</p>\n<p>git remote rm xx</p>\n<p>删除远端仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone 所有分支,并push到一个新仓库</span><br><span class=\"line\"></span><br><span class=\"line\">git remote rename origin old_origin</span><br><span class=\"line\">git remote add origin https://github.com/your_name/yyy.git</span><br><span class=\"line\">git push -u origin --all</span><br><span class=\"line\">git push -u origin --tags</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>git tag</p>\n<p>打标签 显示已有的标签</p>\n<p>标签分为两类: 轻量级和含附注.</p>\n<p>轻量级标签就像是个不会变化的分支,实际上它就是个指向特定提交对象的引用</p>\n<p>含附注实际上是存储在仓库中的一个独立对象,它有自身的独立信息,包含着标签名,电子邮件和日期,标签说明</p>\n<p>git tag -a v1.0 -m “标签说明”</p>\n<p>-a 表示这是一个含附注类型的标签  -m表示对应的标签说明</p>\n<p>git show v1.0 查看相应标签的版本信息</p>\n<p>git push origin v1.0 提交标签到远端仓库</p>\n<p>git push origin –tags 提交所有的标签到仓库</p>\n<p>git tag -d v1.0 删除tag</p>\n<p>git tag push origin :refs/tags/v1.0 删除远端tag</p>\n</li>\n<li><p>git diff</p>\n<p>git diff xxx 工作区与暂存区比较</p>\n<p>git diff HEAD xxx 工作区与HEAD比较</p>\n<p>git diff –cached xxx 暂存区与HEAD比较</p>\n<p>git diff branchName xxx 当前分支和branchName分支比较</p>\n</li>\n<li><p>git branch </p>\n<p>git branch -d xxx  ||  git branch -D xxx 删除本地分支 (-D表示删除的分支在当前分支没有合并过,所以需要强制删除)</p>\n<p>git push origin -d xxx  ||  git push origin :xxx 删除远端分支</p>\n<p>git branch -a 查看远程分支和本地分支  </p>\n<p>git branch -v 查看各个分支的最后一次提交信息</p>\n</li>\n<li><p>git merge</p>\n<p>git merge –abort 取消合并</p>\n<p>git merge –containue 继续合并(解决完一个冲突后,执行git add .,执行git merge –containue会提示下一个冲突文件)</p>\n</li>\n<li><p>git cherry-pick</p>\n<p>git cherry-pick –abort 取消合并</p>\n<p>git cherry-pick –containue 继续合并</p>\n</li>\n<li><p>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</p>\n<p>git fetch和git pull区别</p>\n<p>git fetch 获取远端最新代码,不会自动合并</p>\n<p>git pull 相当于 git fetch 然后 git merge</p>\n</li>\n<li><p>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</p>\n<p>git push origin :master === git push origin -d master 删除远端分支</p>\n<p>git push origin –all 将本地的所有分支推送到远端</p>\n<p>git push origin –force 强制推送</p>\n<p>git push origin –tags 因为git push默认不会推送tag,所以可以指定推送–tags</p>\n</li>\n<li><p>git reset</p>\n<p>git reset –soft commitId 撤销commit,修改的代码还都在,三个里改动最小的一个</p>\n<p>git reset –hard commitId 回退到当前commitId的状态,会丢失工作内容</p>\n<p>git reset –mixed commitId === git reset commitId (git reset默认模式)  撤销到当前的commitId,不会丢失之前的提交,会把之前的提交撤销为未执行add的操作,可以用来<strong>合并多次提交为一个提交</strong></p>\n</li>\n<li><p>git revert</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git revert --continue</span><br><span class=\"line\">git revert --quit</span><br><span class=\"line\">git revert --abort</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>git rebase </p>\n<ul>\n<li>rebase操作可以把本地未push的分叉提交历史整理成直线；</li>\n<li>rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase --containue </span><br><span class=\"line\">git rebase --abort </span><br><span class=\"line\">git rebase --skip  // 跳过当前冲突</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>git stash</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash save &quot;save message&quot; 存储时,增加存储信息(不加save不方便查找当前的存储是什么)</span><br><span class=\"line\">git stash list 查看存储了哪些</span><br><span class=\"line\">git stash pop stash@&#123;$num&#125; 恢复之前的存储</span><br><span class=\"line\">git stash show -p stash@&#123;$num&#125; 查看当前的存储,只能看到修改的文件(-p可以查看修改的内容)</span><br><span class=\"line\">git stash apply stash@&#123;$num&#125; 应用某个存储,不会在存储列表删除</span><br><span class=\"line\">git stash drop stash@&#123;$num&#125; 丢弃stash@&#123;$num&#125; 从列表中删除这个存储</span><br><span class=\"line\">git stash clear 删除所有的stash</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h2><h3 id=\"版本控制\"><a href=\"#版本控制\" class=\"headerlink\" title=\"版本控制\"></a>版本控制</h3><p>版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。 </p>\n<ul>\n<li><p>本地的版本控制系统</p>\n<p>相当于拷贝文件夹,以命名不同区分</p>\n</li>\n<li><p>集中化的版本控制系统</p>\n<p>多人开发一个项目,公用一个资源(SVN),必须联网工作,比如提交 还原 对比什么的(SVN本地有log记录吗?)</p>\n</li>\n<li><p>分布式的版本控制系统</p>\n<p>每一个个体都是一台服务器,可以随时看到提交历史,进行提交 还原 对比 什么的</p>\n</li>\n</ul>\n<h3 id=\"Git配置\"><a href=\"#Git配置\" class=\"headerlink\" title=\"Git配置\"></a>Git配置</h3><ul>\n<li><p>生成SSH公钥</p>\n<ol>\n<li><p>存放目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/.ssh</span><br></pre></td></tr></table></figure>\n<p>.pub文件即为公钥文件</p>\n</li>\n<li><p>生成公钥</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>配置信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;xxx&quot;</span><br><span class=\"line\">git config --global user.email xxx@example.com</span><br><span class=\"line\">git config --global alias.co checkout</span><br><span class=\"line\">git config --global alias.br branch</span><br><span class=\"line\">git config --global alias.ci commit</span><br><span class=\"line\">git config --global alias.st status</span><br><span class=\"line\">git config --list 查看配置信息</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Git常用命令\"><a href=\"#Git常用命令\" class=\"headerlink\" title=\"Git常用命令\"></a>Git常用命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init 初始化仓库</span><br><span class=\"line\">git clone [url] 克隆仓库</span><br><span class=\"line\">git clone [url] xxx 克隆仓库(自定义仓库名字)</span><br><span class=\"line\">git status 检查文件状态 (未修改，已修改或已放入暂存区)</span><br><span class=\"line\">git remote 远程仓库</span><br><span class=\"line\">git log 查看提交历史</span><br><span class=\"line\">gitk --all &amp; (git log 图形化界面)</span><br><span class=\"line\">git tag 打标签</span><br><span class=\"line\">git reflog 查看所有分支的所有操作记录（包括已经被删除的 commit 记录和 reset 的操作）</span><br><span class=\"line\">git diff 文件对比</span><br><span class=\"line\">git branch 分支</span><br><span class=\"line\">git add 添加文件到暂存区</span><br><span class=\"line\">git commit 提交文件</span><br><span class=\"line\">git merge 合并分支</span><br><span class=\"line\">git cherry-pick 获取某个分支的单次提交,作为一个新的提交到当前分支上</span><br><span class=\"line\">git pull 从远端获取代码到本地,并自动合并</span><br><span class=\"line\">git fetch 从远端获取代码到本地,不会自动合并</span><br><span class=\"line\">git push 将本地分支的更新,推送到远端</span><br><span class=\"line\">git reset 修改HEAD的位置,撤销代码</span><br><span class=\"line\">git revert 撤销代码,不会丢失commit信息,会重新生成一个commitId</span><br><span class=\"line\">git rebase 变基</span><br><span class=\"line\">git stash 存储,保存当前的工作状态</span><br><span class=\"line\">git rm </span><br><span class=\"line\">git mv</span><br></pre></td></tr></table></figure>\n<h3 id=\"常用命令解析\"><a href=\"#常用命令解析\" class=\"headerlink\" title=\"常用命令解析\"></a>常用命令解析</h3><ul>\n<li><p>git remote </p>\n<p>远程仓库</p>\n<p>git remote add [shortname] [url]</p>\n<p>添加一个远端仓库</p>\n<p>git remte -v </p>\n<p>显示对应的克隆地址</p>\n<p>git remote show origin </p>\n<p>查看远端仓库的详细信息</p>\n<p>git remote rename xx xxx</p>\n<p>修改某个远端仓库的本地简称</p>\n<p>git remote rm xx</p>\n<p>删除远端仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone 所有分支,并push到一个新仓库</span><br><span class=\"line\"></span><br><span class=\"line\">git remote rename origin old_origin</span><br><span class=\"line\">git remote add origin https://github.com/your_name/yyy.git</span><br><span class=\"line\">git push -u origin --all</span><br><span class=\"line\">git push -u origin --tags</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>git tag</p>\n<p>打标签 显示已有的标签</p>\n<p>标签分为两类: 轻量级和含附注.</p>\n<p>轻量级标签就像是个不会变化的分支,实际上它就是个指向特定提交对象的引用</p>\n<p>含附注实际上是存储在仓库中的一个独立对象,它有自身的独立信息,包含着标签名,电子邮件和日期,标签说明</p>\n<p>git tag -a v1.0 -m “标签说明”</p>\n<p>-a 表示这是一个含附注类型的标签  -m表示对应的标签说明</p>\n<p>git show v1.0 查看相应标签的版本信息</p>\n<p>git push origin v1.0 提交标签到远端仓库</p>\n<p>git push origin –tags 提交所有的标签到仓库</p>\n<p>git tag -d v1.0 删除tag</p>\n<p>git tag push origin :refs/tags/v1.0 删除远端tag</p>\n</li>\n<li><p>git diff</p>\n<p>git diff xxx 工作区与暂存区比较</p>\n<p>git diff HEAD xxx 工作区与HEAD比较</p>\n<p>git diff –cached xxx 暂存区与HEAD比较</p>\n<p>git diff branchName xxx 当前分支和branchName分支比较</p>\n</li>\n<li><p>git branch </p>\n<p>git branch -d xxx  ||  git branch -D xxx 删除本地分支 (-D表示删除的分支在当前分支没有合并过,所以需要强制删除)</p>\n<p>git push origin -d xxx  ||  git push origin :xxx 删除远端分支</p>\n<p>git branch -a 查看远程分支和本地分支  </p>\n<p>git branch -v 查看各个分支的最后一次提交信息</p>\n</li>\n<li><p>git merge</p>\n<p>git merge –abort 取消合并</p>\n<p>git merge –containue 继续合并(解决完一个冲突后,执行git add .,执行git merge –containue会提示下一个冲突文件)</p>\n</li>\n<li><p>git cherry-pick</p>\n<p>git cherry-pick –abort 取消合并</p>\n<p>git cherry-pick –containue 继续合并</p>\n</li>\n<li><p>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</p>\n<p>git fetch和git pull区别</p>\n<p>git fetch 获取远端最新代码,不会自动合并</p>\n<p>git pull 相当于 git fetch 然后 git merge</p>\n</li>\n<li><p>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</p>\n<p>git push origin :master === git push origin -d master 删除远端分支</p>\n<p>git push origin –all 将本地的所有分支推送到远端</p>\n<p>git push origin –force 强制推送</p>\n<p>git push origin –tags 因为git push默认不会推送tag,所以可以指定推送–tags</p>\n</li>\n<li><p>git reset</p>\n<p>git reset –soft commitId 撤销commit,修改的代码还都在,三个里改动最小的一个</p>\n<p>git reset –hard commitId 回退到当前commitId的状态,会丢失工作内容</p>\n<p>git reset –mixed commitId === git reset commitId (git reset默认模式)  撤销到当前的commitId,不会丢失之前的提交,会把之前的提交撤销为未执行add的操作,可以用来<strong>合并多次提交为一个提交</strong></p>\n</li>\n<li><p>git revert</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git revert --continue</span><br><span class=\"line\">git revert --quit</span><br><span class=\"line\">git revert --abort</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>git rebase </p>\n<ul>\n<li>rebase操作可以把本地未push的分叉提交历史整理成直线；</li>\n<li>rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase --containue </span><br><span class=\"line\">git rebase --abort </span><br><span class=\"line\">git rebase --skip  // 跳过当前冲突</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>git stash</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash save &quot;save message&quot; 存储时,增加存储信息(不加save不方便查找当前的存储是什么)</span><br><span class=\"line\">git stash list 查看存储了哪些</span><br><span class=\"line\">git stash pop stash@&#123;$num&#125; 恢复之前的存储</span><br><span class=\"line\">git stash show -p stash@&#123;$num&#125; 查看当前的存储,只能看到修改的文件(-p可以查看修改的内容)</span><br><span class=\"line\">git stash apply stash@&#123;$num&#125; 应用某个存储,不会在存储列表删除</span><br><span class=\"line\">git stash drop stash@&#123;$num&#125; 丢弃stash@&#123;$num&#125; 从列表中删除这个存储</span><br><span class=\"line\">git stash clear 删除所有的stash</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"hexo常用命令","date":"2016-07-28T13:20:32.000Z","_content":"## hexo常用命令\n\n### 部署步骤\n#### 每次部署的步骤，可按以下三步来进行。\n#### hexo clean\n#### hexo generate\n#### hexo deploy\n\n### hexo new \"postName\" #新建文章\n### hexo new page\"pageName\" #新建页面\n### hexo generate #生成静态页面至public目录\n### hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\n### hexo deploy #将.deploy目录部署到GitHub\n### hexo help # 查看帮助\n### hexo version #查看Hexo的版本","source":"_posts/hexo常用命令.md","raw":"---\ntitle: hexo常用命令\ndate: 2016-07-28 21:20:32\ncategories: hexo\ntags:\n    - hexo\n---\n## hexo常用命令\n\n### 部署步骤\n#### 每次部署的步骤，可按以下三步来进行。\n#### hexo clean\n#### hexo generate\n#### hexo deploy\n\n### hexo new \"postName\" #新建文章\n### hexo new page\"pageName\" #新建页面\n### hexo generate #生成静态页面至public目录\n### hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\n### hexo deploy #将.deploy目录部署到GitHub\n### hexo help # 查看帮助\n### hexo version #查看Hexo的版本","slug":"hexo常用命令","published":1,"updated":"2020-03-23T11:05:23.942Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgbydgni0010ofo96gs0xxd4","content":"<h2 id=\"hexo常用命令\"><a href=\"#hexo常用命令\" class=\"headerlink\" title=\"hexo常用命令\"></a>hexo常用命令</h2><h3 id=\"部署步骤\"><a href=\"#部署步骤\" class=\"headerlink\" title=\"部署步骤\"></a>部署步骤</h3><h4 id=\"每次部署的步骤，可按以下三步来进行。\"><a href=\"#每次部署的步骤，可按以下三步来进行。\" class=\"headerlink\" title=\"每次部署的步骤，可按以下三步来进行。\"></a>每次部署的步骤，可按以下三步来进行。</h4><h4 id=\"hexo-clean\"><a href=\"#hexo-clean\" class=\"headerlink\" title=\"hexo clean\"></a>hexo clean</h4><h4 id=\"hexo-generate\"><a href=\"#hexo-generate\" class=\"headerlink\" title=\"hexo generate\"></a>hexo generate</h4><h4 id=\"hexo-deploy\"><a href=\"#hexo-deploy\" class=\"headerlink\" title=\"hexo deploy\"></a>hexo deploy</h4><h3 id=\"hexo-new-“postName”-新建文章\"><a href=\"#hexo-new-“postName”-新建文章\" class=\"headerlink\" title=\"hexo new “postName” #新建文章\"></a>hexo new “postName” #新建文章</h3><h3 id=\"hexo-new-page”pageName”-新建页面\"><a href=\"#hexo-new-page”pageName”-新建页面\" class=\"headerlink\" title=\"hexo new page”pageName” #新建页面\"></a>hexo new page”pageName” #新建页面</h3><h3 id=\"hexo-generate-生成静态页面至public目录\"><a href=\"#hexo-generate-生成静态页面至public目录\" class=\"headerlink\" title=\"hexo generate #生成静态页面至public目录\"></a>hexo generate #生成静态页面至public目录</h3><h3 id=\"hexo-server-开启预览访问端口（默认端口4000，’ctrl-c’关闭server）\"><a href=\"#hexo-server-开启预览访问端口（默认端口4000，’ctrl-c’关闭server）\" class=\"headerlink\" title=\"hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）\"></a>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）</h3><h3 id=\"hexo-deploy-将-deploy目录部署到GitHub\"><a href=\"#hexo-deploy-将-deploy目录部署到GitHub\" class=\"headerlink\" title=\"hexo deploy #将.deploy目录部署到GitHub\"></a>hexo deploy #将.deploy目录部署到GitHub</h3><h3 id=\"hexo-help-查看帮助\"><a href=\"#hexo-help-查看帮助\" class=\"headerlink\" title=\"hexo help # 查看帮助\"></a>hexo help # 查看帮助</h3><h3 id=\"hexo-version-查看Hexo的版本\"><a href=\"#hexo-version-查看Hexo的版本\" class=\"headerlink\" title=\"hexo version #查看Hexo的版本\"></a>hexo version #查看Hexo的版本</h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"hexo常用命令\"><a href=\"#hexo常用命令\" class=\"headerlink\" title=\"hexo常用命令\"></a>hexo常用命令</h2><h3 id=\"部署步骤\"><a href=\"#部署步骤\" class=\"headerlink\" title=\"部署步骤\"></a>部署步骤</h3><h4 id=\"每次部署的步骤，可按以下三步来进行。\"><a href=\"#每次部署的步骤，可按以下三步来进行。\" class=\"headerlink\" title=\"每次部署的步骤，可按以下三步来进行。\"></a>每次部署的步骤，可按以下三步来进行。</h4><h4 id=\"hexo-clean\"><a href=\"#hexo-clean\" class=\"headerlink\" title=\"hexo clean\"></a>hexo clean</h4><h4 id=\"hexo-generate\"><a href=\"#hexo-generate\" class=\"headerlink\" title=\"hexo generate\"></a>hexo generate</h4><h4 id=\"hexo-deploy\"><a href=\"#hexo-deploy\" class=\"headerlink\" title=\"hexo deploy\"></a>hexo deploy</h4><h3 id=\"hexo-new-“postName”-新建文章\"><a href=\"#hexo-new-“postName”-新建文章\" class=\"headerlink\" title=\"hexo new “postName” #新建文章\"></a>hexo new “postName” #新建文章</h3><h3 id=\"hexo-new-page”pageName”-新建页面\"><a href=\"#hexo-new-page”pageName”-新建页面\" class=\"headerlink\" title=\"hexo new page”pageName” #新建页面\"></a>hexo new page”pageName” #新建页面</h3><h3 id=\"hexo-generate-生成静态页面至public目录\"><a href=\"#hexo-generate-生成静态页面至public目录\" class=\"headerlink\" title=\"hexo generate #生成静态页面至public目录\"></a>hexo generate #生成静态页面至public目录</h3><h3 id=\"hexo-server-开启预览访问端口（默认端口4000，’ctrl-c’关闭server）\"><a href=\"#hexo-server-开启预览访问端口（默认端口4000，’ctrl-c’关闭server）\" class=\"headerlink\" title=\"hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）\"></a>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）</h3><h3 id=\"hexo-deploy-将-deploy目录部署到GitHub\"><a href=\"#hexo-deploy-将-deploy目录部署到GitHub\" class=\"headerlink\" title=\"hexo deploy #将.deploy目录部署到GitHub\"></a>hexo deploy #将.deploy目录部署到GitHub</h3><h3 id=\"hexo-help-查看帮助\"><a href=\"#hexo-help-查看帮助\" class=\"headerlink\" title=\"hexo help # 查看帮助\"></a>hexo help # 查看帮助</h3><h3 id=\"hexo-version-查看Hexo的版本\"><a href=\"#hexo-version-查看Hexo的版本\" class=\"headerlink\" title=\"hexo version #查看Hexo的版本\"></a>hexo version #查看Hexo的版本</h3>"},{"title":"hexo部署出现404找不到js的解决方案","date":"2016-11-06T12:24:55.000Z","_content":"\n马拉个币，好不容易写了几篇文章，在部署的时候本地没问题，部署到github却出现各种404，原以为是自己配置哪里出现的问题，没想到是用的hexo的next主题出现了问题，找啊找啊找，终于找到了解决方案，蛋痛了！\n\n<div>\n    <img src=\"/img/fuck.jpg\" width=\"100%\"/>\n</div>\n\n这是NexT主题的问题，解决方法：\n1.更新最新版本即可修复。(不建议更新，配置繁琐，伤不起)\n2.根据作者的提示，首先修改source/vendors为source/lib，然后修改_config.yml， 将 _internal: vendors修改为_internal:lib 然后修改next底下所有引用source/vendors路径为source/lib。这些地方可以通过文件查找找出来。\n主要集中在这几个文件中。\n - Hexo\\themes\\next.bowerrc\n - Hexo\\themes\\next.gitignore\n - Hexo\\themes\\next.javascript_ignore\n - Hexo\\themes\\next\\bower.json\n\n。修改完毕后，刷新重新g一遍就ok啦。\n\n##### [hexo部署出现404找不到js的解决方案](https://github.com/hexojs/hexo/issues/2238)\n\n<div>\n    <img src=\"/img/fuck.jpg\" width=\"100%\"/>\n</div>","source":"_posts/hexo部署出现404找不到js的解决方案.md","raw":"---\ntitle: hexo部署出现404找不到js的解决方案\ndate: 2016-11-06 20:24:55\ncategories: hexo\ntags:\n    - hexo\n---\n\n马拉个币，好不容易写了几篇文章，在部署的时候本地没问题，部署到github却出现各种404，原以为是自己配置哪里出现的问题，没想到是用的hexo的next主题出现了问题，找啊找啊找，终于找到了解决方案，蛋痛了！\n\n<div>\n    <img src=\"/img/fuck.jpg\" width=\"100%\"/>\n</div>\n\n这是NexT主题的问题，解决方法：\n1.更新最新版本即可修复。(不建议更新，配置繁琐，伤不起)\n2.根据作者的提示，首先修改source/vendors为source/lib，然后修改_config.yml， 将 _internal: vendors修改为_internal:lib 然后修改next底下所有引用source/vendors路径为source/lib。这些地方可以通过文件查找找出来。\n主要集中在这几个文件中。\n - Hexo\\themes\\next.bowerrc\n - Hexo\\themes\\next.gitignore\n - Hexo\\themes\\next.javascript_ignore\n - Hexo\\themes\\next\\bower.json\n\n。修改完毕后，刷新重新g一遍就ok啦。\n\n##### [hexo部署出现404找不到js的解决方案](https://github.com/hexojs/hexo/issues/2238)\n\n<div>\n    <img src=\"/img/fuck.jpg\" width=\"100%\"/>\n</div>","slug":"hexo部署出现404找不到js的解决方案","published":1,"updated":"2020-03-23T11:05:23.942Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgbydgnk0015ofo9fekaf939","content":"<p>马拉个币，好不容易写了几篇文章，在部署的时候本地没问题，部署到github却出现各种404，原以为是自己配置哪里出现的问题，没想到是用的hexo的next主题出现了问题，找啊找啊找，终于找到了解决方案，蛋痛了！</p>\n<div><br>    <img src=\"/img/fuck.jpg\" width=\"100%\"><br></div>\n\n<p>这是NexT主题的问题，解决方法：<br>1.更新最新版本即可修复。(不建议更新，配置繁琐，伤不起)<br>2.根据作者的提示，首先修改source/vendors为source/lib，然后修改_config.yml， 将 _internal: vendors修改为_internal:lib 然后修改next底下所有引用source/vendors路径为source/lib。这些地方可以通过文件查找找出来。<br>主要集中在这几个文件中。</p>\n<ul>\n<li>Hexo\\themes\\next.bowerrc</li>\n<li>Hexo\\themes\\next.gitignore</li>\n<li>Hexo\\themes\\next.javascript_ignore</li>\n<li>Hexo\\themes\\next\\bower.json</li>\n</ul>\n<p>。修改完毕后，刷新重新g一遍就ok啦。</p>\n<h5 id=\"hexo部署出现404找不到js的解决方案\"><a href=\"#hexo部署出现404找不到js的解决方案\" class=\"headerlink\" title=\"hexo部署出现404找不到js的解决方案\"></a><a href=\"https://github.com/hexojs/hexo/issues/2238\" target=\"_blank\" rel=\"noopener\">hexo部署出现404找不到js的解决方案</a></h5><div><br>    <img src=\"/img/fuck.jpg\" width=\"100%\"><br></div>","site":{"data":{}},"excerpt":"","more":"<p>马拉个币，好不容易写了几篇文章，在部署的时候本地没问题，部署到github却出现各种404，原以为是自己配置哪里出现的问题，没想到是用的hexo的next主题出现了问题，找啊找啊找，终于找到了解决方案，蛋痛了！</p>\n<div><br>    <img src=\"/img/fuck.jpg\" width=\"100%\"><br></div>\n\n<p>这是NexT主题的问题，解决方法：<br>1.更新最新版本即可修复。(不建议更新，配置繁琐，伤不起)<br>2.根据作者的提示，首先修改source/vendors为source/lib，然后修改_config.yml， 将 _internal: vendors修改为_internal:lib 然后修改next底下所有引用source/vendors路径为source/lib。这些地方可以通过文件查找找出来。<br>主要集中在这几个文件中。</p>\n<ul>\n<li>Hexo\\themes\\next.bowerrc</li>\n<li>Hexo\\themes\\next.gitignore</li>\n<li>Hexo\\themes\\next.javascript_ignore</li>\n<li>Hexo\\themes\\next\\bower.json</li>\n</ul>\n<p>。修改完毕后，刷新重新g一遍就ok啦。</p>\n<h5 id=\"hexo部署出现404找不到js的解决方案\"><a href=\"#hexo部署出现404找不到js的解决方案\" class=\"headerlink\" title=\"hexo部署出现404找不到js的解决方案\"></a><a href=\"https://github.com/hexojs/hexo/issues/2238\" target=\"_blank\" rel=\"noopener\">hexo部署出现404找不到js的解决方案</a></h5><div><br>    <img src=\"/img/fuck.jpg\" width=\"100%\"><br></div>"},{"title":"javascript Date 对象","date":"2019-09-03T03:33:09.000Z","_content":"\n### JS Date对象API\n\n#### getDate()\n\n返回指定日期对象为一个月的那一天\n\n```javascript 1.8\nlet date = new Date(\"2019-09-09\")\nconsole.log(date.getDate()) // 9\n\n```\n\n#### getDay()\n\n返回指定日期一周的第几天，即为星期几 （0~6） 0 表示星期日\n\n```javascript 1.8\nlet date = new Date(\"2019-09-09\");\nconsole.log(date.getDay()) // 1\n\n```\n\n#### \n\n### JS 获取当前月的最后一天\n\n```javascript 1.8\nlet date = new Date();\ndate.setDate(28); // 将日期设置为最小月的天数，防止跨月\ndate.setMonth(date.getMonth()+1); // 当前月的下个月\ndate.setDate(0); // date值为1~31，设置0即为上个月\nconsole.log(date.toLocaleDateString());\n```\n","source":"_posts/javascript-Date-对象.md","raw":"---\ntitle: javascript Date 对象\ndate: 2019-09-03 11:33:09\ncategories: Javascript\ntags:\n     - Javascript\n---\n\n### JS Date对象API\n\n#### getDate()\n\n返回指定日期对象为一个月的那一天\n\n```javascript 1.8\nlet date = new Date(\"2019-09-09\")\nconsole.log(date.getDate()) // 9\n\n```\n\n#### getDay()\n\n返回指定日期一周的第几天，即为星期几 （0~6） 0 表示星期日\n\n```javascript 1.8\nlet date = new Date(\"2019-09-09\");\nconsole.log(date.getDay()) // 1\n\n```\n\n#### \n\n### JS 获取当前月的最后一天\n\n```javascript 1.8\nlet date = new Date();\ndate.setDate(28); // 将日期设置为最小月的天数，防止跨月\ndate.setMonth(date.getMonth()+1); // 当前月的下个月\ndate.setDate(0); // date值为1~31，设置0即为上个月\nconsole.log(date.toLocaleDateString());\n```\n","slug":"javascript-Date-对象","published":1,"updated":"2020-03-23T11:05:23.942Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgbydgnl0018ofo9spghf2re","content":"<h3 id=\"JS-Date对象API\"><a href=\"#JS-Date对象API\" class=\"headerlink\" title=\"JS Date对象API\"></a>JS Date对象API</h3><h4 id=\"getDate\"><a href=\"#getDate\" class=\"headerlink\" title=\"getDate()\"></a>getDate()</h4><p>返回指定日期对象为一个月的那一天</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">\"2019-09-09\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(date.getDate()) <span class=\"comment\">// 9</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"getDay\"><a href=\"#getDay\" class=\"headerlink\" title=\"getDay()\"></a>getDay()</h4><p>返回指定日期一周的第几天，即为星期几 （0~6） 0 表示星期日</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">\"2019-09-09\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(date.getDay()) <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>#### </p>\n<h3 id=\"JS-获取当前月的最后一天\"><a href=\"#JS-获取当前月的最后一天\" class=\"headerlink\" title=\"JS 获取当前月的最后一天\"></a>JS 获取当前月的最后一天</h3><figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">date.setDate(<span class=\"number\">28</span>); <span class=\"comment\">// 将日期设置为最小月的天数，防止跨月</span></span><br><span class=\"line\">date.setMonth(date.getMonth()+<span class=\"number\">1</span>); <span class=\"comment\">// 当前月的下个月</span></span><br><span class=\"line\">date.setDate(<span class=\"number\">0</span>); <span class=\"comment\">// date值为1~31，设置0即为上个月</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(date.toLocaleDateString());</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"JS-Date对象API\"><a href=\"#JS-Date对象API\" class=\"headerlink\" title=\"JS Date对象API\"></a>JS Date对象API</h3><h4 id=\"getDate\"><a href=\"#getDate\" class=\"headerlink\" title=\"getDate()\"></a>getDate()</h4><p>返回指定日期对象为一个月的那一天</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">\"2019-09-09\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(date.getDate()) <span class=\"comment\">// 9</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"getDay\"><a href=\"#getDay\" class=\"headerlink\" title=\"getDay()\"></a>getDay()</h4><p>返回指定日期一周的第几天，即为星期几 （0~6） 0 表示星期日</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">\"2019-09-09\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(date.getDay()) <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>#### </p>\n<h3 id=\"JS-获取当前月的最后一天\"><a href=\"#JS-获取当前月的最后一天\" class=\"headerlink\" title=\"JS 获取当前月的最后一天\"></a>JS 获取当前月的最后一天</h3><figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">date.setDate(<span class=\"number\">28</span>); <span class=\"comment\">// 将日期设置为最小月的天数，防止跨月</span></span><br><span class=\"line\">date.setMonth(date.getMonth()+<span class=\"number\">1</span>); <span class=\"comment\">// 当前月的下个月</span></span><br><span class=\"line\">date.setDate(<span class=\"number\">0</span>); <span class=\"comment\">// date值为1~31，设置0即为上个月</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(date.toLocaleDateString());</span><br></pre></td></tr></table></figure>\n"},{"title":"javascript内存泄漏","date":"2017-08-24T02:01:38.000Z","_content":"# 内存泄漏\n\n## 简介(先来堆废话)\n\n内存泄漏（Memory Leak）是指程序中己动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。\n\n内存泄漏缺陷具有隐蔽性、积累性的特征，比其他内存非法访问错误更难检测。因为内存泄漏的产生原因是内存块未被释放，属于遗漏型缺陷而不是过错型缺陷。此外，内存泄漏通常不会直接产生可观察的错误症状，而是逐渐积累，降低系统整体性能，极端的情况下可能使系统崩溃。\n\n随着计算机应用需求的日益增加，应用程序的设计与开发也相应的日趋复杂，开发人员在程序实现的过程中处理的变量也大量增加，如何有效进行内存分配和释放，防止内存泄漏的问题变得越来越突出。例如服务器应用软件，需要长时间的运行，不断的处理由客户端发来的请求，如果没有有效的内存管理，每处理一次请求信息就有一定的内存泄漏。这样不仅影响到服务器的性能，还可能造成整个系统的崩溃。因此，内存管理成为软件设计开发人员在设计中考虑的主要方面.\n\n## 原因\n\n1. 常发性内存泄漏\n\n发生内存泄漏的代码会被多次执行到，每次被执行时都会导致一块内存泄漏。\n\n2. 偶发性内存泄漏\n\n发生内存泄漏的代码只有在某些特定环境或操作过程下才会发生。常发性和偶发性是相对的。对于特定的环境，偶发性的也许就变成了常发性的。所以测试环境和测试方法对检测内存泄漏至关重要。\n\n3. 一次性内存泄漏\n\n发生内存泄漏的代码只会被执行一次，或者由于算法上的缺陷，导致总会有一块且仅有一块内存发生泄漏。\n\n4. 隐式内存泄漏\n\n程序在运行过程中不停的分配内存，但是直到结束的时候才释放内存。严格的说这里并没有发生内存泄漏，因为最终程序释放了所有申请的内存。但是对于一个服务器程序，需要运行几天，几周甚至几个月，不及时释放内存也可能导致最终耗尽系统的所有内存。所以，我们称这类内存泄漏为隐式内存泄漏。从用户使用程序的角度来看，内存泄漏本身不会产生什么危害，作为一般的用户，根本感觉不到内存泄漏的存在。真正有危害的是内存泄漏的堆积，这会最终耗尽系统所有的内存。从这个角度来说，一次性内存泄漏并没有什么危害，因为它不会堆积，而隐式内存泄漏危害性则非常大，因为较之于常发性和偶发性内存泄漏它更难被检测到。\n\n-[x] <span style=\"color:red\">总而言之,就是没有及时的释放内存</span>\n\n## 简单例子\n\n```javascript 1.8\nfunction a() {\n  var dom = document.getElementById(\"dom\");\n  dom.onclick = function () { \n      console.log(dom.id)\n   }\n}\n//以上代码在执行完以后不会被垃圾回收机制清除\nfunction a() {\n  var dom = document.getElementById(\"dom\");\n  dom.onclick = function () { \n      console.log(dom.id)\n   }\n   dom = null;\n}\n//以上就会动态的销毁,从而减少其引用次数\n```\n\n\n\n\n\n\n\n\n\n","source":"_posts/javascript内存泄漏.md","raw":"---\ntitle: javascript内存泄漏\ndate: 2017-08-24 10:01:38\ncategories: Javascript\ntags:\n     - Javascript\n---\n# 内存泄漏\n\n## 简介(先来堆废话)\n\n内存泄漏（Memory Leak）是指程序中己动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。\n\n内存泄漏缺陷具有隐蔽性、积累性的特征，比其他内存非法访问错误更难检测。因为内存泄漏的产生原因是内存块未被释放，属于遗漏型缺陷而不是过错型缺陷。此外，内存泄漏通常不会直接产生可观察的错误症状，而是逐渐积累，降低系统整体性能，极端的情况下可能使系统崩溃。\n\n随着计算机应用需求的日益增加，应用程序的设计与开发也相应的日趋复杂，开发人员在程序实现的过程中处理的变量也大量增加，如何有效进行内存分配和释放，防止内存泄漏的问题变得越来越突出。例如服务器应用软件，需要长时间的运行，不断的处理由客户端发来的请求，如果没有有效的内存管理，每处理一次请求信息就有一定的内存泄漏。这样不仅影响到服务器的性能，还可能造成整个系统的崩溃。因此，内存管理成为软件设计开发人员在设计中考虑的主要方面.\n\n## 原因\n\n1. 常发性内存泄漏\n\n发生内存泄漏的代码会被多次执行到，每次被执行时都会导致一块内存泄漏。\n\n2. 偶发性内存泄漏\n\n发生内存泄漏的代码只有在某些特定环境或操作过程下才会发生。常发性和偶发性是相对的。对于特定的环境，偶发性的也许就变成了常发性的。所以测试环境和测试方法对检测内存泄漏至关重要。\n\n3. 一次性内存泄漏\n\n发生内存泄漏的代码只会被执行一次，或者由于算法上的缺陷，导致总会有一块且仅有一块内存发生泄漏。\n\n4. 隐式内存泄漏\n\n程序在运行过程中不停的分配内存，但是直到结束的时候才释放内存。严格的说这里并没有发生内存泄漏，因为最终程序释放了所有申请的内存。但是对于一个服务器程序，需要运行几天，几周甚至几个月，不及时释放内存也可能导致最终耗尽系统的所有内存。所以，我们称这类内存泄漏为隐式内存泄漏。从用户使用程序的角度来看，内存泄漏本身不会产生什么危害，作为一般的用户，根本感觉不到内存泄漏的存在。真正有危害的是内存泄漏的堆积，这会最终耗尽系统所有的内存。从这个角度来说，一次性内存泄漏并没有什么危害，因为它不会堆积，而隐式内存泄漏危害性则非常大，因为较之于常发性和偶发性内存泄漏它更难被检测到。\n\n-[x] <span style=\"color:red\">总而言之,就是没有及时的释放内存</span>\n\n## 简单例子\n\n```javascript 1.8\nfunction a() {\n  var dom = document.getElementById(\"dom\");\n  dom.onclick = function () { \n      console.log(dom.id)\n   }\n}\n//以上代码在执行完以后不会被垃圾回收机制清除\nfunction a() {\n  var dom = document.getElementById(\"dom\");\n  dom.onclick = function () { \n      console.log(dom.id)\n   }\n   dom = null;\n}\n//以上就会动态的销毁,从而减少其引用次数\n```\n\n\n\n\n\n\n\n\n\n","slug":"javascript内存泄漏","published":1,"updated":"2020-03-23T11:05:23.942Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgbydgnm001bofo91ott02ks","content":"<h1 id=\"内存泄漏\"><a href=\"#内存泄漏\" class=\"headerlink\" title=\"内存泄漏\"></a>内存泄漏</h1><h2 id=\"简介-先来堆废话\"><a href=\"#简介-先来堆废话\" class=\"headerlink\" title=\"简介(先来堆废话)\"></a>简介(先来堆废话)</h2><p>内存泄漏（Memory Leak）是指程序中己动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。</p>\n<p>内存泄漏缺陷具有隐蔽性、积累性的特征，比其他内存非法访问错误更难检测。因为内存泄漏的产生原因是内存块未被释放，属于遗漏型缺陷而不是过错型缺陷。此外，内存泄漏通常不会直接产生可观察的错误症状，而是逐渐积累，降低系统整体性能，极端的情况下可能使系统崩溃。</p>\n<p>随着计算机应用需求的日益增加，应用程序的设计与开发也相应的日趋复杂，开发人员在程序实现的过程中处理的变量也大量增加，如何有效进行内存分配和释放，防止内存泄漏的问题变得越来越突出。例如服务器应用软件，需要长时间的运行，不断的处理由客户端发来的请求，如果没有有效的内存管理，每处理一次请求信息就有一定的内存泄漏。这样不仅影响到服务器的性能，还可能造成整个系统的崩溃。因此，内存管理成为软件设计开发人员在设计中考虑的主要方面.</p>\n<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><ol>\n<li>常发性内存泄漏</li>\n</ol>\n<p>发生内存泄漏的代码会被多次执行到，每次被执行时都会导致一块内存泄漏。</p>\n<ol start=\"2\">\n<li>偶发性内存泄漏</li>\n</ol>\n<p>发生内存泄漏的代码只有在某些特定环境或操作过程下才会发生。常发性和偶发性是相对的。对于特定的环境，偶发性的也许就变成了常发性的。所以测试环境和测试方法对检测内存泄漏至关重要。</p>\n<ol start=\"3\">\n<li>一次性内存泄漏</li>\n</ol>\n<p>发生内存泄漏的代码只会被执行一次，或者由于算法上的缺陷，导致总会有一块且仅有一块内存发生泄漏。</p>\n<ol start=\"4\">\n<li>隐式内存泄漏</li>\n</ol>\n<p>程序在运行过程中不停的分配内存，但是直到结束的时候才释放内存。严格的说这里并没有发生内存泄漏，因为最终程序释放了所有申请的内存。但是对于一个服务器程序，需要运行几天，几周甚至几个月，不及时释放内存也可能导致最终耗尽系统的所有内存。所以，我们称这类内存泄漏为隐式内存泄漏。从用户使用程序的角度来看，内存泄漏本身不会产生什么危害，作为一般的用户，根本感觉不到内存泄漏的存在。真正有危害的是内存泄漏的堆积，这会最终耗尽系统所有的内存。从这个角度来说，一次性内存泄漏并没有什么危害，因为它不会堆积，而隐式内存泄漏危害性则非常大，因为较之于常发性和偶发性内存泄漏它更难被检测到。</p>\n<p>-[x] <span style=\"color:red\">总而言之,就是没有及时的释放内存</span></p>\n<h2 id=\"简单例子\"><a href=\"#简单例子\" class=\"headerlink\" title=\"简单例子\"></a>简单例子</h2><figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dom = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"dom\"</span>);</span><br><span class=\"line\">  dom.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(dom.id)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//以上代码在执行完以后不会被垃圾回收机制清除</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dom = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"dom\"</span>);</span><br><span class=\"line\">  dom.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(dom.id)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   dom = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//以上就会动态的销毁,从而减少其引用次数</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"内存泄漏\"><a href=\"#内存泄漏\" class=\"headerlink\" title=\"内存泄漏\"></a>内存泄漏</h1><h2 id=\"简介-先来堆废话\"><a href=\"#简介-先来堆废话\" class=\"headerlink\" title=\"简介(先来堆废话)\"></a>简介(先来堆废话)</h2><p>内存泄漏（Memory Leak）是指程序中己动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。</p>\n<p>内存泄漏缺陷具有隐蔽性、积累性的特征，比其他内存非法访问错误更难检测。因为内存泄漏的产生原因是内存块未被释放，属于遗漏型缺陷而不是过错型缺陷。此外，内存泄漏通常不会直接产生可观察的错误症状，而是逐渐积累，降低系统整体性能，极端的情况下可能使系统崩溃。</p>\n<p>随着计算机应用需求的日益增加，应用程序的设计与开发也相应的日趋复杂，开发人员在程序实现的过程中处理的变量也大量增加，如何有效进行内存分配和释放，防止内存泄漏的问题变得越来越突出。例如服务器应用软件，需要长时间的运行，不断的处理由客户端发来的请求，如果没有有效的内存管理，每处理一次请求信息就有一定的内存泄漏。这样不仅影响到服务器的性能，还可能造成整个系统的崩溃。因此，内存管理成为软件设计开发人员在设计中考虑的主要方面.</p>\n<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><ol>\n<li>常发性内存泄漏</li>\n</ol>\n<p>发生内存泄漏的代码会被多次执行到，每次被执行时都会导致一块内存泄漏。</p>\n<ol start=\"2\">\n<li>偶发性内存泄漏</li>\n</ol>\n<p>发生内存泄漏的代码只有在某些特定环境或操作过程下才会发生。常发性和偶发性是相对的。对于特定的环境，偶发性的也许就变成了常发性的。所以测试环境和测试方法对检测内存泄漏至关重要。</p>\n<ol start=\"3\">\n<li>一次性内存泄漏</li>\n</ol>\n<p>发生内存泄漏的代码只会被执行一次，或者由于算法上的缺陷，导致总会有一块且仅有一块内存发生泄漏。</p>\n<ol start=\"4\">\n<li>隐式内存泄漏</li>\n</ol>\n<p>程序在运行过程中不停的分配内存，但是直到结束的时候才释放内存。严格的说这里并没有发生内存泄漏，因为最终程序释放了所有申请的内存。但是对于一个服务器程序，需要运行几天，几周甚至几个月，不及时释放内存也可能导致最终耗尽系统的所有内存。所以，我们称这类内存泄漏为隐式内存泄漏。从用户使用程序的角度来看，内存泄漏本身不会产生什么危害，作为一般的用户，根本感觉不到内存泄漏的存在。真正有危害的是内存泄漏的堆积，这会最终耗尽系统所有的内存。从这个角度来说，一次性内存泄漏并没有什么危害，因为它不会堆积，而隐式内存泄漏危害性则非常大，因为较之于常发性和偶发性内存泄漏它更难被检测到。</p>\n<p>-[x] <span style=\"color:red\">总而言之,就是没有及时的释放内存</span></p>\n<h2 id=\"简单例子\"><a href=\"#简单例子\" class=\"headerlink\" title=\"简单例子\"></a>简单例子</h2><figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dom = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"dom\"</span>);</span><br><span class=\"line\">  dom.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(dom.id)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//以上代码在执行完以后不会被垃圾回收机制清除</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dom = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"dom\"</span>);</span><br><span class=\"line\">  dom.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(dom.id)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   dom = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//以上就会动态的销毁,从而减少其引用次数</span></span><br></pre></td></tr></table></figure>\n"},{"title":"javascript 排序","date":"2016-07-23T02:00:33.000Z","_content":"\n# javascript 排序算法\n\n## 冒泡排序\n\n> 比较相邻的两个元素,如果第一个比第二个大,就交换顺序\n> 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。\n> 针对所有的元素重复以上的步骤，除了最后一个。\n> 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较\n\n```\nfunction bubbleSort(arr){\n  for(var i=0;i<arr.length-1;i++){\n    for(var j=0;j<arr.length-1-i;j++){\n      if(arr[j]>arr[j+1]){\n        var temp = arr[j+1];\n        arr[j+1] = arr[j];\n        arr[j] = temp;\n      }\n    }\n  }\n  return arr\n}\n```\n\n## 选择排序\n\n> 取到待排序的集合,默认第一个数值已经排序\n> 然后从剩余未排序序列继续寻找最小元素,然后放到已排序序列的结尾\n\n```\nfunction selectSort(arr){\n\tfor(var i=0;i<arr.length-1;i++){\n\t\tvar minIndex = i;\n\t\tfor(var j=i+1;j<arr.length;j++){\n\t\t\tif(arr[minIndex]>arr[j]){\n\t\t\t\tminIndex = j;\n\t\t\t}\n\t\t}\n\t\tvar temp = arr[i];\n\t\tarr[i] = arr[minIndex];\n\t\tarr[minIndex] = temp\n\t}\n\treturn arr;\n}\n```\n\n##  插入排序\n\n> 将待排序的序列的地一个元素看作是一个有序序列,,然后从第二个元素到最后一个元素为待排序序列\n> 从头到尾依次扫描,将扫描到的每个元素插入有序序列适当的位置\n\n```\nfunction insertSort(arr){\n  for(var i = 1;i<arr.length;i++){\n  \t  var curIndex = i-1;\n      var curValue = arr[i]\n      while(curIndex >=0 && arr[curIndex]>curValue){\n        arr[curIndex+1] = arr[curIndex]\n        curIndex--;\n\t  } \n\t  arr[curIndex+1] = curValue\n  }\n  return arr\n}\n```\n\n## 二分查找法\n\n> 二分查找法，也为折半查找，首先要找到一个中间值，通过与中间值比较，大的放右，小的放左，再在两边寻找中间值，持续以上操作，直到找到所在位置为止\n\n```\nfunction erfen(arr,num,start,end){\n\tvar start = start || 0;\n\tvar end = end || arr.length-1;\n\tvar middle = Math.ceil((start+end)/2);\n\tconsole.log(arr+\"-------\"+num+\"-------\"+ middle);\n\tif(num==arr[middle]){\n\t\tconsole.log(\"******************\")\n\t\treturn middle;\n\t}else if(num<arr[middle]){\n\t\treturn erfen(arr,num,0,middle-1);\n\t}else{\n\t\treturn erfen(arr,num,middle+1,false);\n\t}\n}\n```\n\n## 快速排序\n\n> 快速排序是冒泡排序的升级，第一趟排序时将数据分成两部分，一部分比另一部分的所有数据都要小。然后递归调用，在两边都实行快速排序。\n\n```\nfunction quickSort(data){\n\tif(data.length<=1){\n\t\treturn data;\n\t}\t\n\tvar middle = Math.floor(data.length/2);\n\tvar middleData = data.splice(middle,1)[0];\n\t\n\tvar left=[];\n\tvar right=[];\n\t\n\tfor(var i=0;i<data.length;i++){\n\t\tif(data[i]<middleData){\n\t\t\tleft.push(data[i])\n\t\t}else{\n\t\t\tright.push(data[i]);\n\t\t}\n\t}\n\tconsole.log(left+\"--------\"+right)\n\treturn quickSort(left).concat([middleData],quickSort(right))\t\n}\n```","source":"_posts/javascript排序.md","raw":"---\ntitle: javascript 排序\ndate: 2016-07-23 10:00:33\ncategories: Javascript\ntags:\n     - Javascript\n---\n\n# javascript 排序算法\n\n## 冒泡排序\n\n> 比较相邻的两个元素,如果第一个比第二个大,就交换顺序\n> 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。\n> 针对所有的元素重复以上的步骤，除了最后一个。\n> 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较\n\n```\nfunction bubbleSort(arr){\n  for(var i=0;i<arr.length-1;i++){\n    for(var j=0;j<arr.length-1-i;j++){\n      if(arr[j]>arr[j+1]){\n        var temp = arr[j+1];\n        arr[j+1] = arr[j];\n        arr[j] = temp;\n      }\n    }\n  }\n  return arr\n}\n```\n\n## 选择排序\n\n> 取到待排序的集合,默认第一个数值已经排序\n> 然后从剩余未排序序列继续寻找最小元素,然后放到已排序序列的结尾\n\n```\nfunction selectSort(arr){\n\tfor(var i=0;i<arr.length-1;i++){\n\t\tvar minIndex = i;\n\t\tfor(var j=i+1;j<arr.length;j++){\n\t\t\tif(arr[minIndex]>arr[j]){\n\t\t\t\tminIndex = j;\n\t\t\t}\n\t\t}\n\t\tvar temp = arr[i];\n\t\tarr[i] = arr[minIndex];\n\t\tarr[minIndex] = temp\n\t}\n\treturn arr;\n}\n```\n\n##  插入排序\n\n> 将待排序的序列的地一个元素看作是一个有序序列,,然后从第二个元素到最后一个元素为待排序序列\n> 从头到尾依次扫描,将扫描到的每个元素插入有序序列适当的位置\n\n```\nfunction insertSort(arr){\n  for(var i = 1;i<arr.length;i++){\n  \t  var curIndex = i-1;\n      var curValue = arr[i]\n      while(curIndex >=0 && arr[curIndex]>curValue){\n        arr[curIndex+1] = arr[curIndex]\n        curIndex--;\n\t  } \n\t  arr[curIndex+1] = curValue\n  }\n  return arr\n}\n```\n\n## 二分查找法\n\n> 二分查找法，也为折半查找，首先要找到一个中间值，通过与中间值比较，大的放右，小的放左，再在两边寻找中间值，持续以上操作，直到找到所在位置为止\n\n```\nfunction erfen(arr,num,start,end){\n\tvar start = start || 0;\n\tvar end = end || arr.length-1;\n\tvar middle = Math.ceil((start+end)/2);\n\tconsole.log(arr+\"-------\"+num+\"-------\"+ middle);\n\tif(num==arr[middle]){\n\t\tconsole.log(\"******************\")\n\t\treturn middle;\n\t}else if(num<arr[middle]){\n\t\treturn erfen(arr,num,0,middle-1);\n\t}else{\n\t\treturn erfen(arr,num,middle+1,false);\n\t}\n}\n```\n\n## 快速排序\n\n> 快速排序是冒泡排序的升级，第一趟排序时将数据分成两部分，一部分比另一部分的所有数据都要小。然后递归调用，在两边都实行快速排序。\n\n```\nfunction quickSort(data){\n\tif(data.length<=1){\n\t\treturn data;\n\t}\t\n\tvar middle = Math.floor(data.length/2);\n\tvar middleData = data.splice(middle,1)[0];\n\t\n\tvar left=[];\n\tvar right=[];\n\t\n\tfor(var i=0;i<data.length;i++){\n\t\tif(data[i]<middleData){\n\t\t\tleft.push(data[i])\n\t\t}else{\n\t\t\tright.push(data[i]);\n\t\t}\n\t}\n\tconsole.log(left+\"--------\"+right)\n\treturn quickSort(left).concat([middleData],quickSort(right))\t\n}\n```","slug":"javascript排序","published":1,"updated":"2020-03-23T11:05:23.943Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgbydgnn001gofo98712hhsm","content":"<h1 id=\"javascript-排序算法\"><a href=\"#javascript-排序算法\" class=\"headerlink\" title=\"javascript 排序算法\"></a>javascript 排序算法</h1><h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><blockquote>\n<p>比较相邻的两个元素,如果第一个比第二个大,就交换顺序<br>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。<br>针对所有的元素重复以上的步骤，除了最后一个。<br>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function bubbleSort(arr)&#123;</span><br><span class=\"line\">  for(var i=0;i&lt;arr.length-1;i++)&#123;</span><br><span class=\"line\">    for(var j=0;j&lt;arr.length-1-i;j++)&#123;</span><br><span class=\"line\">      if(arr[j]&gt;arr[j+1])&#123;</span><br><span class=\"line\">        var temp = arr[j+1];</span><br><span class=\"line\">        arr[j+1] = arr[j];</span><br><span class=\"line\">        arr[j] = temp;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return arr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><blockquote>\n<p>取到待排序的集合,默认第一个数值已经排序<br>然后从剩余未排序序列继续寻找最小元素,然后放到已排序序列的结尾</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function selectSort(arr)&#123;</span><br><span class=\"line\">\tfor(var i=0;i&lt;arr.length-1;i++)&#123;</span><br><span class=\"line\">\t\tvar minIndex = i;</span><br><span class=\"line\">\t\tfor(var j=i+1;j&lt;arr.length;j++)&#123;</span><br><span class=\"line\">\t\t\tif(arr[minIndex]&gt;arr[j])&#123;</span><br><span class=\"line\">\t\t\t\tminIndex = j;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tvar temp = arr[i];</span><br><span class=\"line\">\t\tarr[i] = arr[minIndex];</span><br><span class=\"line\">\t\tarr[minIndex] = temp</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h2><blockquote>\n<p>将待排序的序列的地一个元素看作是一个有序序列,,然后从第二个元素到最后一个元素为待排序序列<br>从头到尾依次扫描,将扫描到的每个元素插入有序序列适当的位置</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function insertSort(arr)&#123;</span><br><span class=\"line\">  for(var i = 1;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">  \t  var curIndex = i-1;</span><br><span class=\"line\">      var curValue = arr[i]</span><br><span class=\"line\">      while(curIndex &gt;=0 &amp;&amp; arr[curIndex]&gt;curValue)&#123;</span><br><span class=\"line\">        arr[curIndex+1] = arr[curIndex]</span><br><span class=\"line\">        curIndex--;</span><br><span class=\"line\">\t  &#125; </span><br><span class=\"line\">\t  arr[curIndex+1] = curValue</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return arr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二分查找法\"><a href=\"#二分查找法\" class=\"headerlink\" title=\"二分查找法\"></a>二分查找法</h2><blockquote>\n<p>二分查找法，也为折半查找，首先要找到一个中间值，通过与中间值比较，大的放右，小的放左，再在两边寻找中间值，持续以上操作，直到找到所在位置为止</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function erfen(arr,num,start,end)&#123;</span><br><span class=\"line\">\tvar start = start || 0;</span><br><span class=\"line\">\tvar end = end || arr.length-1;</span><br><span class=\"line\">\tvar middle = Math.ceil((start+end)/2);</span><br><span class=\"line\">\tconsole.log(arr+&quot;-------&quot;+num+&quot;-------&quot;+ middle);</span><br><span class=\"line\">\tif(num==arr[middle])&#123;</span><br><span class=\"line\">\t\tconsole.log(&quot;******************&quot;)</span><br><span class=\"line\">\t\treturn middle;</span><br><span class=\"line\">\t&#125;else if(num&lt;arr[middle])&#123;</span><br><span class=\"line\">\t\treturn erfen(arr,num,0,middle-1);</span><br><span class=\"line\">\t&#125;else&#123;</span><br><span class=\"line\">\t\treturn erfen(arr,num,middle+1,false);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><blockquote>\n<p>快速排序是冒泡排序的升级，第一趟排序时将数据分成两部分，一部分比另一部分的所有数据都要小。然后递归调用，在两边都实行快速排序。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function quickSort(data)&#123;</span><br><span class=\"line\">\tif(data.length&lt;=1)&#123;</span><br><span class=\"line\">\t\treturn data;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\tvar middle = Math.floor(data.length/2);</span><br><span class=\"line\">\tvar middleData = data.splice(middle,1)[0];</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tvar left=[];</span><br><span class=\"line\">\tvar right=[];</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tfor(var i=0;i&lt;data.length;i++)&#123;</span><br><span class=\"line\">\t\tif(data[i]&lt;middleData)&#123;</span><br><span class=\"line\">\t\t\tleft.push(data[i])</span><br><span class=\"line\">\t\t&#125;else&#123;</span><br><span class=\"line\">\t\t\tright.push(data[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tconsole.log(left+&quot;--------&quot;+right)</span><br><span class=\"line\">\treturn quickSort(left).concat([middleData],quickSort(right))\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"javascript-排序算法\"><a href=\"#javascript-排序算法\" class=\"headerlink\" title=\"javascript 排序算法\"></a>javascript 排序算法</h1><h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><blockquote>\n<p>比较相邻的两个元素,如果第一个比第二个大,就交换顺序<br>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。<br>针对所有的元素重复以上的步骤，除了最后一个。<br>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function bubbleSort(arr)&#123;</span><br><span class=\"line\">  for(var i=0;i&lt;arr.length-1;i++)&#123;</span><br><span class=\"line\">    for(var j=0;j&lt;arr.length-1-i;j++)&#123;</span><br><span class=\"line\">      if(arr[j]&gt;arr[j+1])&#123;</span><br><span class=\"line\">        var temp = arr[j+1];</span><br><span class=\"line\">        arr[j+1] = arr[j];</span><br><span class=\"line\">        arr[j] = temp;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return arr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><blockquote>\n<p>取到待排序的集合,默认第一个数值已经排序<br>然后从剩余未排序序列继续寻找最小元素,然后放到已排序序列的结尾</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function selectSort(arr)&#123;</span><br><span class=\"line\">\tfor(var i=0;i&lt;arr.length-1;i++)&#123;</span><br><span class=\"line\">\t\tvar minIndex = i;</span><br><span class=\"line\">\t\tfor(var j=i+1;j&lt;arr.length;j++)&#123;</span><br><span class=\"line\">\t\t\tif(arr[minIndex]&gt;arr[j])&#123;</span><br><span class=\"line\">\t\t\t\tminIndex = j;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tvar temp = arr[i];</span><br><span class=\"line\">\t\tarr[i] = arr[minIndex];</span><br><span class=\"line\">\t\tarr[minIndex] = temp</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h2><blockquote>\n<p>将待排序的序列的地一个元素看作是一个有序序列,,然后从第二个元素到最后一个元素为待排序序列<br>从头到尾依次扫描,将扫描到的每个元素插入有序序列适当的位置</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function insertSort(arr)&#123;</span><br><span class=\"line\">  for(var i = 1;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">  \t  var curIndex = i-1;</span><br><span class=\"line\">      var curValue = arr[i]</span><br><span class=\"line\">      while(curIndex &gt;=0 &amp;&amp; arr[curIndex]&gt;curValue)&#123;</span><br><span class=\"line\">        arr[curIndex+1] = arr[curIndex]</span><br><span class=\"line\">        curIndex--;</span><br><span class=\"line\">\t  &#125; </span><br><span class=\"line\">\t  arr[curIndex+1] = curValue</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return arr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二分查找法\"><a href=\"#二分查找法\" class=\"headerlink\" title=\"二分查找法\"></a>二分查找法</h2><blockquote>\n<p>二分查找法，也为折半查找，首先要找到一个中间值，通过与中间值比较，大的放右，小的放左，再在两边寻找中间值，持续以上操作，直到找到所在位置为止</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function erfen(arr,num,start,end)&#123;</span><br><span class=\"line\">\tvar start = start || 0;</span><br><span class=\"line\">\tvar end = end || arr.length-1;</span><br><span class=\"line\">\tvar middle = Math.ceil((start+end)/2);</span><br><span class=\"line\">\tconsole.log(arr+&quot;-------&quot;+num+&quot;-------&quot;+ middle);</span><br><span class=\"line\">\tif(num==arr[middle])&#123;</span><br><span class=\"line\">\t\tconsole.log(&quot;******************&quot;)</span><br><span class=\"line\">\t\treturn middle;</span><br><span class=\"line\">\t&#125;else if(num&lt;arr[middle])&#123;</span><br><span class=\"line\">\t\treturn erfen(arr,num,0,middle-1);</span><br><span class=\"line\">\t&#125;else&#123;</span><br><span class=\"line\">\t\treturn erfen(arr,num,middle+1,false);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><blockquote>\n<p>快速排序是冒泡排序的升级，第一趟排序时将数据分成两部分，一部分比另一部分的所有数据都要小。然后递归调用，在两边都实行快速排序。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function quickSort(data)&#123;</span><br><span class=\"line\">\tif(data.length&lt;=1)&#123;</span><br><span class=\"line\">\t\treturn data;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\tvar middle = Math.floor(data.length/2);</span><br><span class=\"line\">\tvar middleData = data.splice(middle,1)[0];</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tvar left=[];</span><br><span class=\"line\">\tvar right=[];</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tfor(var i=0;i&lt;data.length;i++)&#123;</span><br><span class=\"line\">\t\tif(data[i]&lt;middleData)&#123;</span><br><span class=\"line\">\t\t\tleft.push(data[i])</span><br><span class=\"line\">\t\t&#125;else&#123;</span><br><span class=\"line\">\t\t\tright.push(data[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tconsole.log(left+&quot;--------&quot;+right)</span><br><span class=\"line\">\treturn quickSort(left).concat([middleData],quickSort(right))\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"javascript数组遍历之间的区别","date":"2017-08-16T03:35:09.000Z","_content":"\n# for..of vs. for..in 语句\n\n> for..of和for..in均可迭代一个列表,但是用于迭代的值却不同\n\n> for..in迭代的是对象的 键 的列表\n\n> for..of则迭代对象的键对应的值\n\n\n```javascript 1.8\nlet list = [4, 5, 6];\n\nfor (let i in list) {\n    console.log(i); // \"0\", \"1\", \"2\",\n}\n\nfor (let i of list) {\n    console.log(i); // \"4\", \"5\", \"6\"\n}\n```\n\n\n> for..in可以操作任何对象；它提供了查看对象属性的一种方法\n\n> for..of关注于迭代对象的值\n\n```javascript 1.8\nlet pets = new Set([\"Cat\", \"Dog\", \"Hamster\"]);\npets[\"species\"] = \"mammals\";\n\nfor (let pet in pets) {\n    console.log(pet); // \"species\"\n}\n\nfor (let pet of pets) {\n    console.log(pet); // \"Cat\", \"Dog\", \"Hamster\"\n}\n```\n\n# 数组map方法\n\nmap() 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果,必须有返回值\n\n```javascript\nlet numbers = [1, 5, 10, 15];\nlet doubles = numbers.map((x) => {\n   return x * 2;\n});\n// numbers is still [1, 5, 10, 15]\n// doubles is now [2, 10, 20, 30]\n```\n\n使用 map 重新格式化数组中的对象\n\n```javascript 1.8\nvar kvArray = [{key: 1, value: 10}, \n               {key: 2, value: 20}, \n               {key: 3, value: 30}];\n\nvar reformattedArray = kvArray.map(function(obj) { \n   var rObj = {};\n   rObj[obj.key] = obj.value;\n   return rObj;\n});\n\n// reformattedArray is now [{1: 10}, {2: 20}, {3: 30}], \n\n// kvArray is still: \n// [{key: 1, value: 10}, \n//  {key: 2, value: 20}, \n//  {key: 3, value: 30}]\n```\n\n反转字符串\n\n```javascript 1.8\nvar str = '12345';\nArray.prototype.map.call(str, function(x) {\n  return x;\n}).reverse().join(''); \n\n//'54321'\n```\n\n## find()\n\nfind() 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined,返回符合条件的数组的值\n\n```javascript 1.8\nfunction isBigEnough(element) {\n  return element >= 15;\n}\n\n[12, 5, 8, 130, 44].find(isBigEnough); // 130\n```\n\n## entries()\n\nentries() 方法返回一个新的Array Iterator对象，该对象包含数组中每个索引的键/值对。\n\n```javascript 1.8\nvar arr = [\"a\", \"b\", \"c\"];\nvar iterator = arr.entries();\n// undefined\n\nconsole.log(iterator);\n// Array Iterator {}\n\nconsole.log(iterator.next().value); \n// [0, \"a\"]\nconsole.log(iterator.next().value); \n// [1, \"b\"]\nconsole.log(iterator.next().value); \n// [2, \"c\"]\n```\n\n##  keys()\n\nkeys() 方法返回一个新的Array迭代器，它包含数组中每个索引的键\n\n```javascript 1.8\nlet arr = [\"a\", \"b\", \"c\"];\nlet iterator = arr.keys();\n// undefined\nconsole.log(iterator);\n// Array Iterator {}\nconsole.log(iterator.next()); \n// Object {value: 0, done: false}\nconsole.log(iterator.next()); \n// Object {value: 1, done: false}\nconsole.log(iterator.next()); \n// Object {value: 2, done: false}\nconsole.log(iterator.next()); \n// Object {value: undefined, done: true}\n```\n\n## values()\n\nvalues() 方法返回一个新的 Array Iterator 对象，该对象包含数组每个索引的值。\n\n```javascript 1.8\nlet arr = ['w', 'y', 'k', 'o', 'p'];\nlet eArr = arr.values();\nconsole.log(eArr.next().value); // w\nconsole.log(eArr.next().value); // y\nconsole.log(eArr.next().value); // k\nconsole.log(eArr.next().value); // o\nconsole.log(eArr.next().value); // p\n```\n\n> 数组的方法entries()、keys()、values()都会返回Array Iterator 对象,可以使用for...of...直接遍历,也可以调取迭代期的next()方法\n\n## every() \n\n返回值为boolean,检测数组的每一项是否可以通过callback函数,如果遇到false,循环就结束,否则返回true\n\n```javascript 1.8\nfunction isBigEnough(element, index, array) {\n  return (element >= 10);\n}\nvar passed = [12, 5, 8, 130, 44].every(isBigEnough);\n// passed is false\npassed = [12, 54, 18, 130, 44].every(isBigEnough);\n// passed is true\n```\n\n## filter()\n\n创建一个新数组, 通过回调函数返回结果为true的集合\n\n```javascript 1.8\nfunction isBigEnough(element) {\n  return element >= 10;\n}\nvar filtered = [12, 5, 8, 130, 44].filter(isBigEnough);\n// filtered is [12, 130, 44]\n```\n\n## forEach()\n\nforEach() 方法对数组的每个元素执行一次提供的函数。\n\n```javascript 1.8\nlet a = ['a', 'b', 'c'];\n\na.forEach(function(element) {\n    console.log(element);\n});\n\n// a\n// b\n// c\n```\n\n## reduce()  返回值为数组累计的结果\n\nreduce() 方法对累加器和数组中的每个元素 (从左到右)应用一个函数，将其减少为单个值。\n\narray.reduce(function(accumulator, currentValue, currentIndex, array), initialValue)\n\naccumulator 上一次调用回调返回的值，或者是提供的初始值（initialValue）\n\ninitialValue 其值用于第一次调用 callback 的第一个参数。如果没有设置初始值，则将数组中的第一个元素作为初始值。空数组调用reduce时没有设置初始值将会报错\n\n\n```javascript 1.8\nvar total = [0, 1, 2, 3].reduce(function(sum, value) {\n  return sum + value;\n}, 0);\n// total is 6\n```\n\n计算数组中每个元素出现的次数\n\n```javascript 1.8\nvar names = ['Alice', 'Bob', 'Tiff', 'Bruce', 'Alice'];\n\nvar countedNames = names.reduce(function (allNames, name) { \n  if (name in allNames) {\n    allNames[name]++;\n  }\n  else {\n    allNames[name] = 1;\n  }\n  return allNames;\n}, {});\n// countedNames is:\n// { 'Alice': 2, 'Bob': 1, 'Tiff': 1, 'Bruce': 1 }\n```\n\n对于一个数组中的元素全是对象，每个对象又包含一个特定数组的情况，我们可以使用扩展运算符外加一个初始值的方式，来连接所有的特定数组\n\n```javascript 1.8\nvar friends = [{\n  name: 'Anna',\n  books: ['Bible', 'Harry Potter'],\n  age: 21\n}, {\n  name: 'Bob',\n  books: ['War and peace', 'Romeo and Juliet'],\n  age: 26\n}, {\n  name: 'Alice',\n  books: ['The Lord of the Rings', 'The Shining'],\n  age: 18\n}];\nvar allbooks = friends.reduce(function(prev, curr) {\n  return [...prev, ...curr.books];\n}, ['Alphabet']);\n\n// allbooks = [\n//   'Alphabet', 'Bible', 'Harry Potter', 'War and peace', \n//   'Romeo and Juliet', 'The Lord of the Rings',\n//   'The Shining'\n// ]\n```\n\n## reduceRight() \n\nreduceRight() 方法接受一个函数作为累加器（accumulator）和数组的每个值（从右到左）将其减少为单个值。\n\n```javascript 1.8\nlet flattened = [\n    [0, 1], \n    [2, 3], \n    [4, 5]\n].reduceRight((a, b) => {\n    return a.concat(b);\n}, []);\n\n// flattened is [4, 5, 2, 3, 0, 1]\n```\n\n## some()\n\nsome() 方法测试数组中的某些元素是否通过由提供的函数实现的测试。有一个结果为真返回即为true,返回boolean\n\n与every()方法相反,every()遇到false就会循环结束,而some遇到true就会结束\n\n> 测试数组元素的值\n\n```javascript 1.8\nfunction isBigEnough(element, index, array) {\n  return (element >= 10);\n}\nvar passed = [2, 5, 8, 1, 4].some(isBigEnough);\n// passed is false\npassed = [12, 5, 8, 1, 4].some(isBigEnough);\n// passed is true\n```","source":"_posts/javascript数组遍历之间的区别.md","raw":"---\ntitle: javascript数组遍历之间的区别\ndate: 2017-08-16 11:35:09\ncategories: Javascript\ntags:\n     - Javascript\n---\n\n# for..of vs. for..in 语句\n\n> for..of和for..in均可迭代一个列表,但是用于迭代的值却不同\n\n> for..in迭代的是对象的 键 的列表\n\n> for..of则迭代对象的键对应的值\n\n\n```javascript 1.8\nlet list = [4, 5, 6];\n\nfor (let i in list) {\n    console.log(i); // \"0\", \"1\", \"2\",\n}\n\nfor (let i of list) {\n    console.log(i); // \"4\", \"5\", \"6\"\n}\n```\n\n\n> for..in可以操作任何对象；它提供了查看对象属性的一种方法\n\n> for..of关注于迭代对象的值\n\n```javascript 1.8\nlet pets = new Set([\"Cat\", \"Dog\", \"Hamster\"]);\npets[\"species\"] = \"mammals\";\n\nfor (let pet in pets) {\n    console.log(pet); // \"species\"\n}\n\nfor (let pet of pets) {\n    console.log(pet); // \"Cat\", \"Dog\", \"Hamster\"\n}\n```\n\n# 数组map方法\n\nmap() 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果,必须有返回值\n\n```javascript\nlet numbers = [1, 5, 10, 15];\nlet doubles = numbers.map((x) => {\n   return x * 2;\n});\n// numbers is still [1, 5, 10, 15]\n// doubles is now [2, 10, 20, 30]\n```\n\n使用 map 重新格式化数组中的对象\n\n```javascript 1.8\nvar kvArray = [{key: 1, value: 10}, \n               {key: 2, value: 20}, \n               {key: 3, value: 30}];\n\nvar reformattedArray = kvArray.map(function(obj) { \n   var rObj = {};\n   rObj[obj.key] = obj.value;\n   return rObj;\n});\n\n// reformattedArray is now [{1: 10}, {2: 20}, {3: 30}], \n\n// kvArray is still: \n// [{key: 1, value: 10}, \n//  {key: 2, value: 20}, \n//  {key: 3, value: 30}]\n```\n\n反转字符串\n\n```javascript 1.8\nvar str = '12345';\nArray.prototype.map.call(str, function(x) {\n  return x;\n}).reverse().join(''); \n\n//'54321'\n```\n\n## find()\n\nfind() 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined,返回符合条件的数组的值\n\n```javascript 1.8\nfunction isBigEnough(element) {\n  return element >= 15;\n}\n\n[12, 5, 8, 130, 44].find(isBigEnough); // 130\n```\n\n## entries()\n\nentries() 方法返回一个新的Array Iterator对象，该对象包含数组中每个索引的键/值对。\n\n```javascript 1.8\nvar arr = [\"a\", \"b\", \"c\"];\nvar iterator = arr.entries();\n// undefined\n\nconsole.log(iterator);\n// Array Iterator {}\n\nconsole.log(iterator.next().value); \n// [0, \"a\"]\nconsole.log(iterator.next().value); \n// [1, \"b\"]\nconsole.log(iterator.next().value); \n// [2, \"c\"]\n```\n\n##  keys()\n\nkeys() 方法返回一个新的Array迭代器，它包含数组中每个索引的键\n\n```javascript 1.8\nlet arr = [\"a\", \"b\", \"c\"];\nlet iterator = arr.keys();\n// undefined\nconsole.log(iterator);\n// Array Iterator {}\nconsole.log(iterator.next()); \n// Object {value: 0, done: false}\nconsole.log(iterator.next()); \n// Object {value: 1, done: false}\nconsole.log(iterator.next()); \n// Object {value: 2, done: false}\nconsole.log(iterator.next()); \n// Object {value: undefined, done: true}\n```\n\n## values()\n\nvalues() 方法返回一个新的 Array Iterator 对象，该对象包含数组每个索引的值。\n\n```javascript 1.8\nlet arr = ['w', 'y', 'k', 'o', 'p'];\nlet eArr = arr.values();\nconsole.log(eArr.next().value); // w\nconsole.log(eArr.next().value); // y\nconsole.log(eArr.next().value); // k\nconsole.log(eArr.next().value); // o\nconsole.log(eArr.next().value); // p\n```\n\n> 数组的方法entries()、keys()、values()都会返回Array Iterator 对象,可以使用for...of...直接遍历,也可以调取迭代期的next()方法\n\n## every() \n\n返回值为boolean,检测数组的每一项是否可以通过callback函数,如果遇到false,循环就结束,否则返回true\n\n```javascript 1.8\nfunction isBigEnough(element, index, array) {\n  return (element >= 10);\n}\nvar passed = [12, 5, 8, 130, 44].every(isBigEnough);\n// passed is false\npassed = [12, 54, 18, 130, 44].every(isBigEnough);\n// passed is true\n```\n\n## filter()\n\n创建一个新数组, 通过回调函数返回结果为true的集合\n\n```javascript 1.8\nfunction isBigEnough(element) {\n  return element >= 10;\n}\nvar filtered = [12, 5, 8, 130, 44].filter(isBigEnough);\n// filtered is [12, 130, 44]\n```\n\n## forEach()\n\nforEach() 方法对数组的每个元素执行一次提供的函数。\n\n```javascript 1.8\nlet a = ['a', 'b', 'c'];\n\na.forEach(function(element) {\n    console.log(element);\n});\n\n// a\n// b\n// c\n```\n\n## reduce()  返回值为数组累计的结果\n\nreduce() 方法对累加器和数组中的每个元素 (从左到右)应用一个函数，将其减少为单个值。\n\narray.reduce(function(accumulator, currentValue, currentIndex, array), initialValue)\n\naccumulator 上一次调用回调返回的值，或者是提供的初始值（initialValue）\n\ninitialValue 其值用于第一次调用 callback 的第一个参数。如果没有设置初始值，则将数组中的第一个元素作为初始值。空数组调用reduce时没有设置初始值将会报错\n\n\n```javascript 1.8\nvar total = [0, 1, 2, 3].reduce(function(sum, value) {\n  return sum + value;\n}, 0);\n// total is 6\n```\n\n计算数组中每个元素出现的次数\n\n```javascript 1.8\nvar names = ['Alice', 'Bob', 'Tiff', 'Bruce', 'Alice'];\n\nvar countedNames = names.reduce(function (allNames, name) { \n  if (name in allNames) {\n    allNames[name]++;\n  }\n  else {\n    allNames[name] = 1;\n  }\n  return allNames;\n}, {});\n// countedNames is:\n// { 'Alice': 2, 'Bob': 1, 'Tiff': 1, 'Bruce': 1 }\n```\n\n对于一个数组中的元素全是对象，每个对象又包含一个特定数组的情况，我们可以使用扩展运算符外加一个初始值的方式，来连接所有的特定数组\n\n```javascript 1.8\nvar friends = [{\n  name: 'Anna',\n  books: ['Bible', 'Harry Potter'],\n  age: 21\n}, {\n  name: 'Bob',\n  books: ['War and peace', 'Romeo and Juliet'],\n  age: 26\n}, {\n  name: 'Alice',\n  books: ['The Lord of the Rings', 'The Shining'],\n  age: 18\n}];\nvar allbooks = friends.reduce(function(prev, curr) {\n  return [...prev, ...curr.books];\n}, ['Alphabet']);\n\n// allbooks = [\n//   'Alphabet', 'Bible', 'Harry Potter', 'War and peace', \n//   'Romeo and Juliet', 'The Lord of the Rings',\n//   'The Shining'\n// ]\n```\n\n## reduceRight() \n\nreduceRight() 方法接受一个函数作为累加器（accumulator）和数组的每个值（从右到左）将其减少为单个值。\n\n```javascript 1.8\nlet flattened = [\n    [0, 1], \n    [2, 3], \n    [4, 5]\n].reduceRight((a, b) => {\n    return a.concat(b);\n}, []);\n\n// flattened is [4, 5, 2, 3, 0, 1]\n```\n\n## some()\n\nsome() 方法测试数组中的某些元素是否通过由提供的函数实现的测试。有一个结果为真返回即为true,返回boolean\n\n与every()方法相反,every()遇到false就会循环结束,而some遇到true就会结束\n\n> 测试数组元素的值\n\n```javascript 1.8\nfunction isBigEnough(element, index, array) {\n  return (element >= 10);\n}\nvar passed = [2, 5, 8, 1, 4].some(isBigEnough);\n// passed is false\npassed = [12, 5, 8, 1, 4].some(isBigEnough);\n// passed is true\n```","slug":"javascript数组遍历之间的区别","published":1,"updated":"2020-03-23T11:05:23.943Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgbydgno001iofo9pj81urop","content":"<h1 id=\"for-of-vs-for-in-语句\"><a href=\"#for-of-vs-for-in-语句\" class=\"headerlink\" title=\"for..of vs. for..in 语句\"></a>for..of vs. for..in 语句</h1><blockquote>\n<p>for..of和for..in均可迭代一个列表,但是用于迭代的值却不同</p>\n</blockquote>\n<blockquote>\n<p>for..in迭代的是对象的 键 的列表</p>\n</blockquote>\n<blockquote>\n<p>for..of则迭代对象的键对应的值</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> list) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// \"0\", \"1\", \"2\",</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> list) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// \"4\", \"5\", \"6\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>for..in可以操作任何对象；它提供了查看对象属性的一种方法</p>\n</blockquote>\n<blockquote>\n<p>for..of关注于迭代对象的值</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> pets = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">\"Cat\"</span>, <span class=\"string\">\"Dog\"</span>, <span class=\"string\">\"Hamster\"</span>]);</span><br><span class=\"line\">pets[<span class=\"string\">\"species\"</span>] = <span class=\"string\">\"mammals\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> pet <span class=\"keyword\">in</span> pets) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(pet); <span class=\"comment\">// \"species\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> pet <span class=\"keyword\">of</span> pets) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(pet); <span class=\"comment\">// \"Cat\", \"Dog\", \"Hamster\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"数组map方法\"><a href=\"#数组map方法\" class=\"headerlink\" title=\"数组map方法\"></a>数组map方法</h1><p>map() 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果,必须有返回值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> doubles = numbers.map(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> x * <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// numbers is still [1, 5, 10, 15]</span></span><br><span class=\"line\"><span class=\"comment\">// doubles is now [2, 10, 20, 30]</span></span><br></pre></td></tr></table></figure>\n<p>使用 map 重新格式化数组中的对象</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> kvArray = [&#123;<span class=\"attr\">key</span>: <span class=\"number\">1</span>, <span class=\"attr\">value</span>: <span class=\"number\">10</span>&#125;, </span><br><span class=\"line\">               &#123;<span class=\"attr\">key</span>: <span class=\"number\">2</span>, <span class=\"attr\">value</span>: <span class=\"number\">20</span>&#125;, </span><br><span class=\"line\">               &#123;<span class=\"attr\">key</span>: <span class=\"number\">3</span>, <span class=\"attr\">value</span>: <span class=\"number\">30</span>&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> reformattedArray = kvArray.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123; </span><br><span class=\"line\">   <span class=\"keyword\">var</span> rObj = &#123;&#125;;</span><br><span class=\"line\">   rObj[obj.key] = obj.value;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> rObj;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// reformattedArray is now [&#123;1: 10&#125;, &#123;2: 20&#125;, &#123;3: 30&#125;], </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// kvArray is still: </span></span><br><span class=\"line\"><span class=\"comment\">// [&#123;key: 1, value: 10&#125;, </span></span><br><span class=\"line\"><span class=\"comment\">//  &#123;key: 2, value: 20&#125;, </span></span><br><span class=\"line\"><span class=\"comment\">//  &#123;key: 3, value: 30&#125;]</span></span><br></pre></td></tr></table></figure>\n<p>反转字符串</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'12345'</span>;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.map.call(str, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;).reverse().join(<span class=\"string\">''</span>); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//'54321'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find()\"></a>find()</h2><p>find() 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined,返回符合条件的数组的值</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isBigEnough</span>(<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> element &gt;= <span class=\"number\">15</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">130</span>, <span class=\"number\">44</span>].find(isBigEnough); <span class=\"comment\">// 130</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"entries\"><a href=\"#entries\" class=\"headerlink\" title=\"entries()\"></a>entries()</h2><p>entries() 方法返回一个新的Array Iterator对象，该对象包含数组中每个索引的键/值对。</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = arr.entries();</span><br><span class=\"line\"><span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator);</span><br><span class=\"line\"><span class=\"comment\">// Array Iterator &#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next().value); </span><br><span class=\"line\"><span class=\"comment\">// [0, \"a\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next().value); </span><br><span class=\"line\"><span class=\"comment\">// [1, \"b\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next().value); </span><br><span class=\"line\"><span class=\"comment\">// [2, \"c\"]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"keys\"><a href=\"#keys\" class=\"headerlink\" title=\"keys()\"></a>keys()</h2><p>keys() 方法返回一个新的Array迭代器，它包含数组中每个索引的键</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = arr.keys();</span><br><span class=\"line\"><span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator);</span><br><span class=\"line\"><span class=\"comment\">// Array Iterator &#123;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); </span><br><span class=\"line\"><span class=\"comment\">// Object &#123;value: 0, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); </span><br><span class=\"line\"><span class=\"comment\">// Object &#123;value: 1, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); </span><br><span class=\"line\"><span class=\"comment\">// Object &#123;value: 2, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); </span><br><span class=\"line\"><span class=\"comment\">// Object &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"values\"><a href=\"#values\" class=\"headerlink\" title=\"values()\"></a>values()</h2><p>values() 方法返回一个新的 Array Iterator 对象，该对象包含数组每个索引的值。</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">'w'</span>, <span class=\"string\">'y'</span>, <span class=\"string\">'k'</span>, <span class=\"string\">'o'</span>, <span class=\"string\">'p'</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> eArr = arr.values();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(eArr.next().value); <span class=\"comment\">// w</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(eArr.next().value); <span class=\"comment\">// y</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(eArr.next().value); <span class=\"comment\">// k</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(eArr.next().value); <span class=\"comment\">// o</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(eArr.next().value); <span class=\"comment\">// p</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>数组的方法entries()、keys()、values()都会返回Array Iterator 对象,可以使用for…of…直接遍历,也可以调取迭代期的next()方法</p>\n</blockquote>\n<h2 id=\"every\"><a href=\"#every\" class=\"headerlink\" title=\"every()\"></a>every()</h2><p>返回值为boolean,检测数组的每一项是否可以通过callback函数,如果遇到false,循环就结束,否则返回true</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isBigEnough</span>(<span class=\"params\">element, index, array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (element &gt;= <span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> passed = [<span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">130</span>, <span class=\"number\">44</span>].every(isBigEnough);</span><br><span class=\"line\"><span class=\"comment\">// passed is false</span></span><br><span class=\"line\">passed = [<span class=\"number\">12</span>, <span class=\"number\">54</span>, <span class=\"number\">18</span>, <span class=\"number\">130</span>, <span class=\"number\">44</span>].every(isBigEnough);</span><br><span class=\"line\"><span class=\"comment\">// passed is true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter()\"></a>filter()</h2><p>创建一个新数组, 通过回调函数返回结果为true的集合</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isBigEnough</span>(<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> element &gt;= <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> filtered = [<span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">130</span>, <span class=\"number\">44</span>].filter(isBigEnough);</span><br><span class=\"line\"><span class=\"comment\">// filtered is [12, 130, 44]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach()\"></a>forEach()</h2><p>forEach() 方法对数组的每个元素执行一次提供的函数。</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">a.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(element);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a</span></span><br><span class=\"line\"><span class=\"comment\">// b</span></span><br><span class=\"line\"><span class=\"comment\">// c</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"reduce-返回值为数组累计的结果\"><a href=\"#reduce-返回值为数组累计的结果\" class=\"headerlink\" title=\"reduce()  返回值为数组累计的结果\"></a>reduce()  返回值为数组累计的结果</h2><p>reduce() 方法对累加器和数组中的每个元素 (从左到右)应用一个函数，将其减少为单个值。</p>\n<p>array.reduce(function(accumulator, currentValue, currentIndex, array), initialValue)</p>\n<p>accumulator 上一次调用回调返回的值，或者是提供的初始值（initialValue）</p>\n<p>initialValue 其值用于第一次调用 callback 的第一个参数。如果没有设置初始值，则将数组中的第一个元素作为初始值。空数组调用reduce时没有设置初始值将会报错</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> total = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sum, value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum + value;</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// total is 6</span></span><br></pre></td></tr></table></figure>\n<p>计算数组中每个元素出现的次数</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> names = [<span class=\"string\">'Alice'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tiff'</span>, <span class=\"string\">'Bruce'</span>, <span class=\"string\">'Alice'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> countedNames = names.reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">allNames, name</span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (name <span class=\"keyword\">in</span> allNames) &#123;</span><br><span class=\"line\">    allNames[name]++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    allNames[name] = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> allNames;</span><br><span class=\"line\">&#125;, &#123;&#125;);</span><br><span class=\"line\"><span class=\"comment\">// countedNames is:</span></span><br><span class=\"line\"><span class=\"comment\">// &#123; 'Alice': 2, 'Bob': 1, 'Tiff': 1, 'Bruce': 1 &#125;</span></span><br></pre></td></tr></table></figure>\n<p>对于一个数组中的元素全是对象，每个对象又包含一个特定数组的情况，我们可以使用扩展运算符外加一个初始值的方式，来连接所有的特定数组</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> friends = [&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Anna'</span>,</span><br><span class=\"line\">  books: [<span class=\"string\">'Bible'</span>, <span class=\"string\">'Harry Potter'</span>],</span><br><span class=\"line\">  age: <span class=\"number\">21</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Bob'</span>,</span><br><span class=\"line\">  books: [<span class=\"string\">'War and peace'</span>, <span class=\"string\">'Romeo and Juliet'</span>],</span><br><span class=\"line\">  age: <span class=\"number\">26</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Alice'</span>,</span><br><span class=\"line\">  books: [<span class=\"string\">'The Lord of the Rings'</span>, <span class=\"string\">'The Shining'</span>],</span><br><span class=\"line\">  age: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"><span class=\"keyword\">var</span> allbooks = friends.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prev, curr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [...prev, ...curr.books];</span><br><span class=\"line\">&#125;, [<span class=\"string\">'Alphabet'</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// allbooks = [</span></span><br><span class=\"line\"><span class=\"comment\">//   'Alphabet', 'Bible', 'Harry Potter', 'War and peace', </span></span><br><span class=\"line\"><span class=\"comment\">//   'Romeo and Juliet', 'The Lord of the Rings',</span></span><br><span class=\"line\"><span class=\"comment\">//   'The Shining'</span></span><br><span class=\"line\"><span class=\"comment\">// ]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"reduceRight\"><a href=\"#reduceRight\" class=\"headerlink\" title=\"reduceRight()\"></a>reduceRight()</h2><p>reduceRight() 方法接受一个函数作为累加器（accumulator）和数组的每个值（从右到左）将其减少为单个值。</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> flattened = [</span><br><span class=\"line\">    [<span class=\"number\">0</span>, <span class=\"number\">1</span>], </span><br><span class=\"line\">    [<span class=\"number\">2</span>, <span class=\"number\">3</span>], </span><br><span class=\"line\">    [<span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">].reduceRight(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.concat(b);</span><br><span class=\"line\">&#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// flattened is [4, 5, 2, 3, 0, 1]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"some()\"></a>some()</h2><p>some() 方法测试数组中的某些元素是否通过由提供的函数实现的测试。有一个结果为真返回即为true,返回boolean</p>\n<p>与every()方法相反,every()遇到false就会循环结束,而some遇到true就会结束</p>\n<blockquote>\n<p>测试数组元素的值</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isBigEnough</span>(<span class=\"params\">element, index, array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (element &gt;= <span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> passed = [<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>].some(isBigEnough);</span><br><span class=\"line\"><span class=\"comment\">// passed is false</span></span><br><span class=\"line\">passed = [<span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>].some(isBigEnough);</span><br><span class=\"line\"><span class=\"comment\">// passed is true</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"for-of-vs-for-in-语句\"><a href=\"#for-of-vs-for-in-语句\" class=\"headerlink\" title=\"for..of vs. for..in 语句\"></a>for..of vs. for..in 语句</h1><blockquote>\n<p>for..of和for..in均可迭代一个列表,但是用于迭代的值却不同</p>\n</blockquote>\n<blockquote>\n<p>for..in迭代的是对象的 键 的列表</p>\n</blockquote>\n<blockquote>\n<p>for..of则迭代对象的键对应的值</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> list) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// \"0\", \"1\", \"2\",</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> list) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// \"4\", \"5\", \"6\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>for..in可以操作任何对象；它提供了查看对象属性的一种方法</p>\n</blockquote>\n<blockquote>\n<p>for..of关注于迭代对象的值</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> pets = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">\"Cat\"</span>, <span class=\"string\">\"Dog\"</span>, <span class=\"string\">\"Hamster\"</span>]);</span><br><span class=\"line\">pets[<span class=\"string\">\"species\"</span>] = <span class=\"string\">\"mammals\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> pet <span class=\"keyword\">in</span> pets) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(pet); <span class=\"comment\">// \"species\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> pet <span class=\"keyword\">of</span> pets) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(pet); <span class=\"comment\">// \"Cat\", \"Dog\", \"Hamster\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"数组map方法\"><a href=\"#数组map方法\" class=\"headerlink\" title=\"数组map方法\"></a>数组map方法</h1><p>map() 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果,必须有返回值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> doubles = numbers.map(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> x * <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// numbers is still [1, 5, 10, 15]</span></span><br><span class=\"line\"><span class=\"comment\">// doubles is now [2, 10, 20, 30]</span></span><br></pre></td></tr></table></figure>\n<p>使用 map 重新格式化数组中的对象</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> kvArray = [&#123;<span class=\"attr\">key</span>: <span class=\"number\">1</span>, <span class=\"attr\">value</span>: <span class=\"number\">10</span>&#125;, </span><br><span class=\"line\">               &#123;<span class=\"attr\">key</span>: <span class=\"number\">2</span>, <span class=\"attr\">value</span>: <span class=\"number\">20</span>&#125;, </span><br><span class=\"line\">               &#123;<span class=\"attr\">key</span>: <span class=\"number\">3</span>, <span class=\"attr\">value</span>: <span class=\"number\">30</span>&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> reformattedArray = kvArray.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123; </span><br><span class=\"line\">   <span class=\"keyword\">var</span> rObj = &#123;&#125;;</span><br><span class=\"line\">   rObj[obj.key] = obj.value;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> rObj;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// reformattedArray is now [&#123;1: 10&#125;, &#123;2: 20&#125;, &#123;3: 30&#125;], </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// kvArray is still: </span></span><br><span class=\"line\"><span class=\"comment\">// [&#123;key: 1, value: 10&#125;, </span></span><br><span class=\"line\"><span class=\"comment\">//  &#123;key: 2, value: 20&#125;, </span></span><br><span class=\"line\"><span class=\"comment\">//  &#123;key: 3, value: 30&#125;]</span></span><br></pre></td></tr></table></figure>\n<p>反转字符串</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'12345'</span>;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.map.call(str, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;).reverse().join(<span class=\"string\">''</span>); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//'54321'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find()\"></a>find()</h2><p>find() 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined,返回符合条件的数组的值</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isBigEnough</span>(<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> element &gt;= <span class=\"number\">15</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">130</span>, <span class=\"number\">44</span>].find(isBigEnough); <span class=\"comment\">// 130</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"entries\"><a href=\"#entries\" class=\"headerlink\" title=\"entries()\"></a>entries()</h2><p>entries() 方法返回一个新的Array Iterator对象，该对象包含数组中每个索引的键/值对。</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = arr.entries();</span><br><span class=\"line\"><span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator);</span><br><span class=\"line\"><span class=\"comment\">// Array Iterator &#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next().value); </span><br><span class=\"line\"><span class=\"comment\">// [0, \"a\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next().value); </span><br><span class=\"line\"><span class=\"comment\">// [1, \"b\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next().value); </span><br><span class=\"line\"><span class=\"comment\">// [2, \"c\"]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"keys\"><a href=\"#keys\" class=\"headerlink\" title=\"keys()\"></a>keys()</h2><p>keys() 方法返回一个新的Array迭代器，它包含数组中每个索引的键</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = arr.keys();</span><br><span class=\"line\"><span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator);</span><br><span class=\"line\"><span class=\"comment\">// Array Iterator &#123;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); </span><br><span class=\"line\"><span class=\"comment\">// Object &#123;value: 0, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); </span><br><span class=\"line\"><span class=\"comment\">// Object &#123;value: 1, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); </span><br><span class=\"line\"><span class=\"comment\">// Object &#123;value: 2, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); </span><br><span class=\"line\"><span class=\"comment\">// Object &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"values\"><a href=\"#values\" class=\"headerlink\" title=\"values()\"></a>values()</h2><p>values() 方法返回一个新的 Array Iterator 对象，该对象包含数组每个索引的值。</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">'w'</span>, <span class=\"string\">'y'</span>, <span class=\"string\">'k'</span>, <span class=\"string\">'o'</span>, <span class=\"string\">'p'</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> eArr = arr.values();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(eArr.next().value); <span class=\"comment\">// w</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(eArr.next().value); <span class=\"comment\">// y</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(eArr.next().value); <span class=\"comment\">// k</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(eArr.next().value); <span class=\"comment\">// o</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(eArr.next().value); <span class=\"comment\">// p</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>数组的方法entries()、keys()、values()都会返回Array Iterator 对象,可以使用for…of…直接遍历,也可以调取迭代期的next()方法</p>\n</blockquote>\n<h2 id=\"every\"><a href=\"#every\" class=\"headerlink\" title=\"every()\"></a>every()</h2><p>返回值为boolean,检测数组的每一项是否可以通过callback函数,如果遇到false,循环就结束,否则返回true</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isBigEnough</span>(<span class=\"params\">element, index, array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (element &gt;= <span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> passed = [<span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">130</span>, <span class=\"number\">44</span>].every(isBigEnough);</span><br><span class=\"line\"><span class=\"comment\">// passed is false</span></span><br><span class=\"line\">passed = [<span class=\"number\">12</span>, <span class=\"number\">54</span>, <span class=\"number\">18</span>, <span class=\"number\">130</span>, <span class=\"number\">44</span>].every(isBigEnough);</span><br><span class=\"line\"><span class=\"comment\">// passed is true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter()\"></a>filter()</h2><p>创建一个新数组, 通过回调函数返回结果为true的集合</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isBigEnough</span>(<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> element &gt;= <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> filtered = [<span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">130</span>, <span class=\"number\">44</span>].filter(isBigEnough);</span><br><span class=\"line\"><span class=\"comment\">// filtered is [12, 130, 44]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach()\"></a>forEach()</h2><p>forEach() 方法对数组的每个元素执行一次提供的函数。</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">a.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(element);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a</span></span><br><span class=\"line\"><span class=\"comment\">// b</span></span><br><span class=\"line\"><span class=\"comment\">// c</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"reduce-返回值为数组累计的结果\"><a href=\"#reduce-返回值为数组累计的结果\" class=\"headerlink\" title=\"reduce()  返回值为数组累计的结果\"></a>reduce()  返回值为数组累计的结果</h2><p>reduce() 方法对累加器和数组中的每个元素 (从左到右)应用一个函数，将其减少为单个值。</p>\n<p>array.reduce(function(accumulator, currentValue, currentIndex, array), initialValue)</p>\n<p>accumulator 上一次调用回调返回的值，或者是提供的初始值（initialValue）</p>\n<p>initialValue 其值用于第一次调用 callback 的第一个参数。如果没有设置初始值，则将数组中的第一个元素作为初始值。空数组调用reduce时没有设置初始值将会报错</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> total = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sum, value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum + value;</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// total is 6</span></span><br></pre></td></tr></table></figure>\n<p>计算数组中每个元素出现的次数</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> names = [<span class=\"string\">'Alice'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tiff'</span>, <span class=\"string\">'Bruce'</span>, <span class=\"string\">'Alice'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> countedNames = names.reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">allNames, name</span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (name <span class=\"keyword\">in</span> allNames) &#123;</span><br><span class=\"line\">    allNames[name]++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    allNames[name] = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> allNames;</span><br><span class=\"line\">&#125;, &#123;&#125;);</span><br><span class=\"line\"><span class=\"comment\">// countedNames is:</span></span><br><span class=\"line\"><span class=\"comment\">// &#123; 'Alice': 2, 'Bob': 1, 'Tiff': 1, 'Bruce': 1 &#125;</span></span><br></pre></td></tr></table></figure>\n<p>对于一个数组中的元素全是对象，每个对象又包含一个特定数组的情况，我们可以使用扩展运算符外加一个初始值的方式，来连接所有的特定数组</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> friends = [&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Anna'</span>,</span><br><span class=\"line\">  books: [<span class=\"string\">'Bible'</span>, <span class=\"string\">'Harry Potter'</span>],</span><br><span class=\"line\">  age: <span class=\"number\">21</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Bob'</span>,</span><br><span class=\"line\">  books: [<span class=\"string\">'War and peace'</span>, <span class=\"string\">'Romeo and Juliet'</span>],</span><br><span class=\"line\">  age: <span class=\"number\">26</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Alice'</span>,</span><br><span class=\"line\">  books: [<span class=\"string\">'The Lord of the Rings'</span>, <span class=\"string\">'The Shining'</span>],</span><br><span class=\"line\">  age: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"><span class=\"keyword\">var</span> allbooks = friends.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prev, curr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [...prev, ...curr.books];</span><br><span class=\"line\">&#125;, [<span class=\"string\">'Alphabet'</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// allbooks = [</span></span><br><span class=\"line\"><span class=\"comment\">//   'Alphabet', 'Bible', 'Harry Potter', 'War and peace', </span></span><br><span class=\"line\"><span class=\"comment\">//   'Romeo and Juliet', 'The Lord of the Rings',</span></span><br><span class=\"line\"><span class=\"comment\">//   'The Shining'</span></span><br><span class=\"line\"><span class=\"comment\">// ]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"reduceRight\"><a href=\"#reduceRight\" class=\"headerlink\" title=\"reduceRight()\"></a>reduceRight()</h2><p>reduceRight() 方法接受一个函数作为累加器（accumulator）和数组的每个值（从右到左）将其减少为单个值。</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> flattened = [</span><br><span class=\"line\">    [<span class=\"number\">0</span>, <span class=\"number\">1</span>], </span><br><span class=\"line\">    [<span class=\"number\">2</span>, <span class=\"number\">3</span>], </span><br><span class=\"line\">    [<span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">].reduceRight(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.concat(b);</span><br><span class=\"line\">&#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// flattened is [4, 5, 2, 3, 0, 1]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"some()\"></a>some()</h2><p>some() 方法测试数组中的某些元素是否通过由提供的函数实现的测试。有一个结果为真返回即为true,返回boolean</p>\n<p>与every()方法相反,every()遇到false就会循环结束,而some遇到true就会结束</p>\n<blockquote>\n<p>测试数组元素的值</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isBigEnough</span>(<span class=\"params\">element, index, array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (element &gt;= <span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> passed = [<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>].some(isBigEnough);</span><br><span class=\"line\"><span class=\"comment\">// passed is false</span></span><br><span class=\"line\">passed = [<span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>].some(isBigEnough);</span><br><span class=\"line\"><span class=\"comment\">// passed is true</span></span><br></pre></td></tr></table></figure>"},{"title":"javascript设计模式","date":"2018-07-20T08:29:06.000Z","_content":"\n# JavaScript设计模式\n\n## 对象创建的方式\n\n```javascript\nvar obi = {};\n\n// or\n\nvar obj = Object.create(null);\n\n// or \n\nvar obj = new Object();\n```\n\n### 对象的赋值 \n\n```javascript\n// 直接用.\nobj.someKey = \"hello world\";\n// 方括号\nobj[\"someKey\"] = \"hello world\";\n// Object.defineProperty()\nObject.defineProperty(obj,\"someKey\",{\n    value:\"hello world\",\n    writable:true,\n    enumerable: true,\n    configurable: true\n})\n// Object.defineProperties() \nObject.defineProperties(obj,{\n    \"someKey\":{\n        value:\"hello world\"\n    },\n    \"anotherKey\":{\n        value:\"hello\"\n    }\n})\n```\n\n## 构造器模式\n\n### 基础构造器\n\n把一个函数当作构造器来用(使用new关键字),它可以用自己定义的成员来初始化一个对象\n\n```javascript\nfunction Car(name,yeal) {\n  this.name = name;\n  this.year = yeal;\n  this.toString = function() {\n    return this.name+\"-\"+this.year;\n  }\n}\n```\n\n### 使用原型的构造器\n\n在javascript中函数有一个prototype属性,当调用一个构造器创造对象时,其prototype上的属性和方法都对这个方法是可见的\n\n```javascript\nfunction Car(name,year) {\n  this.name = name;\n  this.year = year;\n}\nCar.prototype.toString = function() {\n  return this.name + \"-\" + this.year;\n}\n```\n\n## 模块化模式\n\n### 模块\n\n模块是一个程序不可缺少的一部分,特点是有助于保持应用的代码单元既能清晰地分析又能分离\n\n## 单例模式\n\n是因为他限制一个类智能有一个实例对象\n\n经典的实现方式,创建一个类，这个类包含一个方法，这个方法在没有对象存在的情况下，将会创建一个新的实例对象。如果对象存在，这个方法只是返回这个对象的引用\n\n```javascript\nvar mySingleton = (function() {\n  var instance;\n  function init() {\n    // 单例\n    //私有方法和变量\n    function privateMethod() {\n      console.log( \"I am private\" );\n    }\n    var privateVariable = \"Im also private\";\n    var privateRandomNumber = Math.random();\n    \n    return {\n      // 共有方法和变量\n      publicMethod: function () {\n        console.log( \"The public can see me!\" );\n      },\n      publicProperty: \"I am also public\",\n      getRandomNumber: function() {\n        return privateRandomNumber;\n      }\n    }\n  }\n   return {\n      // 如果存在获取此单例实例，如果不存在创建一个单例实例\n      getInstance: function () {\n        if ( !instance ) {\n          instance = init();\n        }\n        return instance;\n      }\n    };\n})();\n```","source":"_posts/javascript设计模式.md","raw":"---\ntitle: javascript设计模式\ndate: 2018-07-20 16:29:06\ncategories: Javascript\ntags:\n     - Javascript\n---\n\n# JavaScript设计模式\n\n## 对象创建的方式\n\n```javascript\nvar obi = {};\n\n// or\n\nvar obj = Object.create(null);\n\n// or \n\nvar obj = new Object();\n```\n\n### 对象的赋值 \n\n```javascript\n// 直接用.\nobj.someKey = \"hello world\";\n// 方括号\nobj[\"someKey\"] = \"hello world\";\n// Object.defineProperty()\nObject.defineProperty(obj,\"someKey\",{\n    value:\"hello world\",\n    writable:true,\n    enumerable: true,\n    configurable: true\n})\n// Object.defineProperties() \nObject.defineProperties(obj,{\n    \"someKey\":{\n        value:\"hello world\"\n    },\n    \"anotherKey\":{\n        value:\"hello\"\n    }\n})\n```\n\n## 构造器模式\n\n### 基础构造器\n\n把一个函数当作构造器来用(使用new关键字),它可以用自己定义的成员来初始化一个对象\n\n```javascript\nfunction Car(name,yeal) {\n  this.name = name;\n  this.year = yeal;\n  this.toString = function() {\n    return this.name+\"-\"+this.year;\n  }\n}\n```\n\n### 使用原型的构造器\n\n在javascript中函数有一个prototype属性,当调用一个构造器创造对象时,其prototype上的属性和方法都对这个方法是可见的\n\n```javascript\nfunction Car(name,year) {\n  this.name = name;\n  this.year = year;\n}\nCar.prototype.toString = function() {\n  return this.name + \"-\" + this.year;\n}\n```\n\n## 模块化模式\n\n### 模块\n\n模块是一个程序不可缺少的一部分,特点是有助于保持应用的代码单元既能清晰地分析又能分离\n\n## 单例模式\n\n是因为他限制一个类智能有一个实例对象\n\n经典的实现方式,创建一个类，这个类包含一个方法，这个方法在没有对象存在的情况下，将会创建一个新的实例对象。如果对象存在，这个方法只是返回这个对象的引用\n\n```javascript\nvar mySingleton = (function() {\n  var instance;\n  function init() {\n    // 单例\n    //私有方法和变量\n    function privateMethod() {\n      console.log( \"I am private\" );\n    }\n    var privateVariable = \"Im also private\";\n    var privateRandomNumber = Math.random();\n    \n    return {\n      // 共有方法和变量\n      publicMethod: function () {\n        console.log( \"The public can see me!\" );\n      },\n      publicProperty: \"I am also public\",\n      getRandomNumber: function() {\n        return privateRandomNumber;\n      }\n    }\n  }\n   return {\n      // 如果存在获取此单例实例，如果不存在创建一个单例实例\n      getInstance: function () {\n        if ( !instance ) {\n          instance = init();\n        }\n        return instance;\n      }\n    };\n})();\n```","slug":"javascript设计模式","published":1,"updated":"2020-03-23T11:05:23.943Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgbydgnq001nofo96ykm634c","content":"<h1 id=\"JavaScript设计模式\"><a href=\"#JavaScript设计模式\" class=\"headerlink\" title=\"JavaScript设计模式\"></a>JavaScript设计模式</h1><h2 id=\"对象创建的方式\"><a href=\"#对象创建的方式\" class=\"headerlink\" title=\"对象创建的方式\"></a>对象创建的方式</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obi = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br></pre></td></tr></table></figure>\n<h3 id=\"对象的赋值\"><a href=\"#对象的赋值\" class=\"headerlink\" title=\"对象的赋值\"></a>对象的赋值</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 直接用.</span></span><br><span class=\"line\">obj.someKey = <span class=\"string\">\"hello world\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 方括号</span></span><br><span class=\"line\">obj[<span class=\"string\">\"someKey\"</span>] = <span class=\"string\">\"hello world\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// Object.defineProperty()</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj,<span class=\"string\">\"someKey\"</span>,&#123;</span><br><span class=\"line\">    value:<span class=\"string\">\"hello world\"</span>,</span><br><span class=\"line\">    writable:<span class=\"literal\">true</span>,</span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    configurable: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// Object.defineProperties() </span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperties(obj,&#123;</span><br><span class=\"line\">    <span class=\"string\">\"someKey\"</span>:&#123;</span><br><span class=\"line\">        value:<span class=\"string\">\"hello world\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"anotherKey\"</span>:&#123;</span><br><span class=\"line\">        value:<span class=\"string\">\"hello\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"构造器模式\"><a href=\"#构造器模式\" class=\"headerlink\" title=\"构造器模式\"></a>构造器模式</h2><h3 id=\"基础构造器\"><a href=\"#基础构造器\" class=\"headerlink\" title=\"基础构造器\"></a>基础构造器</h3><p>把一个函数当作构造器来用(使用new关键字),它可以用自己定义的成员来初始化一个对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Car</span>(<span class=\"params\">name,yeal</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.year = yeal;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name+<span class=\"string\">\"-\"</span>+<span class=\"keyword\">this</span>.year;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用原型的构造器\"><a href=\"#使用原型的构造器\" class=\"headerlink\" title=\"使用原型的构造器\"></a>使用原型的构造器</h3><p>在javascript中函数有一个prototype属性,当调用一个构造器创造对象时,其prototype上的属性和方法都对这个方法是可见的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Car</span>(<span class=\"params\">name,year</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.year = year;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Car.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">\"-\"</span> + <span class=\"keyword\">this</span>.year;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"模块化模式\"><a href=\"#模块化模式\" class=\"headerlink\" title=\"模块化模式\"></a>模块化模式</h2><h3 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h3><p>模块是一个程序不可缺少的一部分,特点是有助于保持应用的代码单元既能清晰地分析又能分离</p>\n<h2 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h2><p>是因为他限制一个类智能有一个实例对象</p>\n<p>经典的实现方式,创建一个类，这个类包含一个方法，这个方法在没有对象存在的情况下，将会创建一个新的实例对象。如果对象存在，这个方法只是返回这个对象的引用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mySingleton = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> instance;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 单例</span></span><br><span class=\"line\">    <span class=\"comment\">//私有方法和变量</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">privateMethod</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log( <span class=\"string\">\"I am private\"</span> );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> privateVariable = <span class=\"string\">\"Im also private\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> privateRandomNumber = <span class=\"built_in\">Math</span>.random();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 共有方法和变量</span></span><br><span class=\"line\">      publicMethod: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log( <span class=\"string\">\"The public can see me!\"</span> );</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      publicProperty: <span class=\"string\">\"I am also public\"</span>,</span><br><span class=\"line\">      getRandomNumber: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> privateRandomNumber;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果存在获取此单例实例，如果不存在创建一个单例实例</span></span><br><span class=\"line\">      getInstance: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( !instance ) &#123;</span><br><span class=\"line\">          instance = init();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JavaScript设计模式\"><a href=\"#JavaScript设计模式\" class=\"headerlink\" title=\"JavaScript设计模式\"></a>JavaScript设计模式</h1><h2 id=\"对象创建的方式\"><a href=\"#对象创建的方式\" class=\"headerlink\" title=\"对象创建的方式\"></a>对象创建的方式</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obi = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br></pre></td></tr></table></figure>\n<h3 id=\"对象的赋值\"><a href=\"#对象的赋值\" class=\"headerlink\" title=\"对象的赋值\"></a>对象的赋值</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 直接用.</span></span><br><span class=\"line\">obj.someKey = <span class=\"string\">\"hello world\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 方括号</span></span><br><span class=\"line\">obj[<span class=\"string\">\"someKey\"</span>] = <span class=\"string\">\"hello world\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// Object.defineProperty()</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj,<span class=\"string\">\"someKey\"</span>,&#123;</span><br><span class=\"line\">    value:<span class=\"string\">\"hello world\"</span>,</span><br><span class=\"line\">    writable:<span class=\"literal\">true</span>,</span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    configurable: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// Object.defineProperties() </span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperties(obj,&#123;</span><br><span class=\"line\">    <span class=\"string\">\"someKey\"</span>:&#123;</span><br><span class=\"line\">        value:<span class=\"string\">\"hello world\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"anotherKey\"</span>:&#123;</span><br><span class=\"line\">        value:<span class=\"string\">\"hello\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"构造器模式\"><a href=\"#构造器模式\" class=\"headerlink\" title=\"构造器模式\"></a>构造器模式</h2><h3 id=\"基础构造器\"><a href=\"#基础构造器\" class=\"headerlink\" title=\"基础构造器\"></a>基础构造器</h3><p>把一个函数当作构造器来用(使用new关键字),它可以用自己定义的成员来初始化一个对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Car</span>(<span class=\"params\">name,yeal</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.year = yeal;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name+<span class=\"string\">\"-\"</span>+<span class=\"keyword\">this</span>.year;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用原型的构造器\"><a href=\"#使用原型的构造器\" class=\"headerlink\" title=\"使用原型的构造器\"></a>使用原型的构造器</h3><p>在javascript中函数有一个prototype属性,当调用一个构造器创造对象时,其prototype上的属性和方法都对这个方法是可见的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Car</span>(<span class=\"params\">name,year</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.year = year;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Car.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">\"-\"</span> + <span class=\"keyword\">this</span>.year;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"模块化模式\"><a href=\"#模块化模式\" class=\"headerlink\" title=\"模块化模式\"></a>模块化模式</h2><h3 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h3><p>模块是一个程序不可缺少的一部分,特点是有助于保持应用的代码单元既能清晰地分析又能分离</p>\n<h2 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h2><p>是因为他限制一个类智能有一个实例对象</p>\n<p>经典的实现方式,创建一个类，这个类包含一个方法，这个方法在没有对象存在的情况下，将会创建一个新的实例对象。如果对象存在，这个方法只是返回这个对象的引用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mySingleton = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> instance;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 单例</span></span><br><span class=\"line\">    <span class=\"comment\">//私有方法和变量</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">privateMethod</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log( <span class=\"string\">\"I am private\"</span> );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> privateVariable = <span class=\"string\">\"Im also private\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> privateRandomNumber = <span class=\"built_in\">Math</span>.random();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 共有方法和变量</span></span><br><span class=\"line\">      publicMethod: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log( <span class=\"string\">\"The public can see me!\"</span> );</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      publicProperty: <span class=\"string\">\"I am also public\"</span>,</span><br><span class=\"line\">      getRandomNumber: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> privateRandomNumber;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果存在获取此单例实例，如果不存在创建一个单例实例</span></span><br><span class=\"line\">      getInstance: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( !instance ) &#123;</span><br><span class=\"line\">          instance = init();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>"},{"title":"js高程(第三版)兼容问题和注意事项","date":"2017-08-24T02:01:38.000Z","_content":"\n# js高级程序设计(第三版) 兼容bug\n\n## 数组(Array)\n\n### 构造函数创建数组\n\n* new Array(arg) \n\n1. arg为数字,则创建一个对应数量的数组\n\n2. arg为字符串,则创建包含arg个的一个数组\n\n3. new操作符可以省略\n\n### 对象字面量创建数组\n\n* bug\n\n1. ```let arr = [1,2,]```\n\n在ie中arr的值为1,2,undefined,而在其它浏览器中arr的值为1,2\n\n2. ```let arr = [,,,,]```\n\n在ie8以下```arr.length = 5```,而其它浏览器为```arr.length = 4```\n\n3. ```let arr = [1,2,3,4]```\n\n若改变arr的length长度,则会改变数组对应的数据```arr.length=5;arr[4] = undefined```\n\n### sort 方法\n\nsort方法默认为升序排列,但是比较的每一项的字符串,因此```let arr = [0,1,5,10,15];arr.sort();console.log(arr)//0,1,10,15,5```\n\n可以借助sort方法的参数(比较函数)得到正确的结果\n\n```javascript 1.8\nlet arr = [0,1,5,10,15];\narr.sort(function(a,b) {\n  if(a<b){\n      return -1;\n  }\n  if(a==b){\n      return 0;\n  }\n  if(a>b){\n      return 1;\n  }\n});\nconsole.log(arr)//[0,1,5,10,15]\n```\n\n## 对象(Object)\n\n### 对象属性类型\n\n* 数据属性  可以直接定义\n\n数据属性包含一个数据的位置,在这个位置可以读取和写入,数据属性有4个描述其属性的行为特性\n\n* * [[ Configureable ]] 表示能否通过delete直接删除其属性,默认值true\n\n* * [[ Enumerable ]] 表示该属性能否通过```for ... in ...```进行遍历,默认值为true\n\n* * [[ Writable ]] 表示该属性的值能否修改,默认值为true\n\n* * [[ Value ]] 表示该属性的数据值,默认值为undefined\n\n<font color=\"red\">以上为每个对象的属性都具有的特性,要想修改其默认属性,必须同过```Object.defineProperty()```方法</font>\n\n```\nObject.defineProperty(属性所在的对象,属性的名字,描述符)\n\n//描述符为以上四个属性,这样就可以修改默认值了\n\n//例子\n\nvar person = {}\nObject.defineProperty(person,\"name\",{\n    value:\"caicai\",\n    writable:false\n})\nconsole.log(person.name) // caicai\nperson.name=\"hahaha\"; //严格模式下报错,非严格模式下将会忽略\nconsole.log(person.name) // caicai\n```\n\n* 访问器属性 不可以直接定义,必须通过`Object.defineProperty()`定义\n\n访问器属性不包含数据值,它们包含一对getter和setter函数\n\n* * [[ Configureable ]] 表示能否通过delete直接删除其属性,默认值true\n\n* * [[ Enumerable ]] 表示该属性能否通过```for ... in ...```进行遍历,默认值为true\n\n* * [[ get ]] 表示读取该属性时的值,默认值为undefined\n\n* * [[ set ]] 表示写入该属性的数据值,默认值为undefined\n\n```\nlet book={\n    __year:2004,\n    edition:1\n}\nObject.defineProperty(book,\"year\",{\n    get:function(){\n        return this.__year;\n    },\n    set:function(newValue){\n        if(newValue>this.__year){\n            this.edition += newValue - this.__year;\n            this.__year = newValue;\n        }\n    }\n})\nbook.year = 2015;\nconsole.log(book.edition)//12\n```\n\n### 创建对象\n\n虽然Objectg构造函数和对象字面量都可以创建对象,但有个缺点,使用同一个接口创建很多对象,会产生大量的重复代码,因此就出现了以下的设计模式\n\n#### *  工厂模式\n\n用函数来封装特定的接口,然后进行创建对象\n\n虽然解决了创建多个对象相似的问题,但是没有解决对象识别的问题\n\n```\n//工厂模式\nfuncction CreatePerson(name,age,job){\n    var o = new Object();\n    o.name = name;\n    o.age = age;\n    o.job = job;\n    o.sayName=function(){\n        return this.name\n    }\n    return o;\n}\nvar p1 = CreatePerson(\"caicai1\",20,\"民工\")\nvar p2 = CreatePerson(\"caicai2\",22,\"IT民工\")\n```\n\n#### * 构造函数模式\n\n自定义构造函数,从而定义自定义对象类型的属性和方法\n* * 与工厂模式的区别\n\n* * * 1.没有显示的创建对象\n\n* * * 2.直接将属性和方法赋值给this对象\n\n* * * 3.没有return语句\n\n* * 优点\n\n* * * 1.没有显示的创建对象\n\n* * * 2.直接将属性和方法赋值给this对象\n\n* * * 3.没有return返回值\n\n* * 缺点\n\n* * * 每个方法都要在实例上重新创建一遍\n\n* * * 可以将方法写到全局,然后赋值,这样可以解决两个函数做同一件事的问题,但是这样的话就会出现很多全局函数,没有封装可言,因此出现了原型模式\n\n```\n//方式一\nfunction Person(name,age,job){\n    this.name = name;\n    this.age = age;\n    this.job = job;\n    this.sayName = function(){\n        return this.name\n    }\n}\nvar p1 = new Person(\"caicai1\",20,\"民工\")\nvar p2 = new Person(\"caicai2\",22,\"IT民工\")\n\n//方式二\n function sayName(){\n    return this.name\n}\nfunction Person(name,age,job){\n    this.name = name;\n    this.age = age;\n    this.job = job;\n    this.sayName = sayName;\n}\nvar p1 = new Person(\"caicai1\",20,\"民工\")\nvar p2 = new Person(\"caicai2\",22,\"IT民工\")\n```\n\n#### * 原型模式\n\n每个函数都有一个prototype属性,这个属性是个指针,指向一个对象,这个对象的用途为让所有实例的属性共享属性和方法\n\n即为不必在构造函数中定义对象的属性和方法,而是将这些属性和方法添加到原型对象上\n\n```\nfunction Person(){}\nPerson.prototype.name= \"caicai\"\nPerson.prototype.age= 20\nPerson.prototype.job= \"It\"\nPerson.prototype.sayName= function(){\n    return this.name\n}\n\nvar p1 = new Person();\n\np1.sayName()//caicai\np1.hasOwnPropertype(\"name\")//false\n\np1.name = \"hahha\"\np1.hasOwnPropertype(\"name\")//true\n\ndelete p1.name\np1.hasOwnPropertype(\"name\")//false\n\nvar p2 = new Person();\np2.sayName()//caicai\n```\n\n![\"原型模式\"](/img/prototype.jpg)\n\n* 原型对象\n\n只要创建函数,就会根据一组特定的规则为该函数创建一个prototype属性,而这个属性指向函数的原型对象(Function.prototype),默认情况下该原型对象会获得一个construtor属性,这个属性指向*包含一个prototype属性的函数指针*(Function.prototype.constructor),并且我们可以通过prototype对象继续添加属性和方法\n<hr>\n创建自定义构造函数后,其原型对象默认只会取得construtor属性,其它方法都是继承自Object\n\n当创建一个实例后,该实例内部有一个指针(*._ _proto_ _*),指向构造函数的原型对象\n\n```\nfunction Parent(){}\n\nvar p1 = new Parent();\n\nParent.prototype.constructor === Parent //true\n\np1.__proto__ === Parent.prototype //true\n```\n\n确定一个属性存在于原型对象中 \n\nhasOwnProperty() //判断一个属性是否存在于实例中存在true,不存在false\n\nin 操作符 //判断一个属性是否存在于对象中(在实例和原型上都会去寻找)\n\nisPrototypeOf() //判断一个对象是否为构造函数的实例\n\n```\nfunction hasPrototypeProperty(object,name){\n    return !object.hasOwnProperty(name)&&(name in object);\n}\n\nfunction Person(){}\nvar p = new Person();\nPerson.prototype.isPrototypeOf(p) //true\n```\n\n#### * 组合使用构造函数模式和原型模式\n\n即为两种模式同时使用,构造函数用于定义实例属性,而原型模式用于定义方法和公用的属性\n\n```\nfunction Person(name,age){\n    this.name = name;\n    this.age = age;\n}\nPerson.prototype = {\n    constructor:Person,\n    sayName:function(){\n        return this.name\n    }\n}\n```\n\n#### * 动态原型模式\n\n因为组合模式看起来比较混乱,因此就出现动态原型模式,动态原型模式即为在构造函数内动态的创建原型对象\n\n```\nfunction Person(name,age){\n    this.name = name;\n    this.age = age;\n    if(typeof this.sayName!=undefined){\n        Person.prototype.sayName = function(){\n            return this.name    \n        }\n    }\n}\n\n```\n\n### 继承\n\n#### * 原型链继承\n\n原型链为实现继承的主要方法,其基本思想为利用原型让一个引用类型继承另外一个引用类型的属性和方法\n\n* 原型丶构造函数丶实例的关系 \n\n- [x] 每个构造函数都有一个原型对象.每个原型对象都有一个指向构造函数的指针,而实例都包含一个指向原型对象的指针\n\n```javascript 1.8\nfunction Person() {\n  this.name = \"caicai\"; \n}\nPerson.prototype.getName = function() {\n  return this.name\n}\n\nfunction  Student() {\n    this.age = 20;\n}\n\nStudent.prototype = new Person();\nStudent.prototype.getAge = function() {\n  return this.age;\n}\n\n```\n\n#### * 借用构造函数\n\n在子类型的内部调用父类型的构造函数\n\n```javascript 1.8\nfunction Person() {\n  this.colors = [\"red\",\"blue\"]\n}\nfunction Student() {\n  Person.call(this);\n}\nlet s = new Student();\ns.colors.push(\"black\");\nconsole.log(s.colors)// red,blue,black\n\nlet s1 = new Student();\nconsole.log(s1.colors)//red,blue\n```\n\n#### * 组合继承\n\n将借用构造函数继承和原型链继承结合在一起\n\n```javascript 1.8\nfunction  Person( name ) {\n   this.name = name;\n}\nPerson.prototype.getName = function() {\n  return this.name\n}\n\nfunction Student() {\n  Person.call(this,\"caicai\");\n  this.age = 20;\n}\nStudent.prototype = new Person();\n\nlet s= new Student();\ns.getName() //caicai\n```\n\n#### * 原型式继承\n\n#### * 寄生式继承\n\n#### * 寄生组合式继承\n\n\n\n\n\n\n\n\n\n","source":"_posts/js高程-第三版-兼容问题和注意事项.md","raw":"---\ntitle: js高程(第三版)兼容问题和注意事项\ndate: 2017-08-24 10:01:38\ncategories: Javascript\ntags:\n     - Javascript\n---\n\n# js高级程序设计(第三版) 兼容bug\n\n## 数组(Array)\n\n### 构造函数创建数组\n\n* new Array(arg) \n\n1. arg为数字,则创建一个对应数量的数组\n\n2. arg为字符串,则创建包含arg个的一个数组\n\n3. new操作符可以省略\n\n### 对象字面量创建数组\n\n* bug\n\n1. ```let arr = [1,2,]```\n\n在ie中arr的值为1,2,undefined,而在其它浏览器中arr的值为1,2\n\n2. ```let arr = [,,,,]```\n\n在ie8以下```arr.length = 5```,而其它浏览器为```arr.length = 4```\n\n3. ```let arr = [1,2,3,4]```\n\n若改变arr的length长度,则会改变数组对应的数据```arr.length=5;arr[4] = undefined```\n\n### sort 方法\n\nsort方法默认为升序排列,但是比较的每一项的字符串,因此```let arr = [0,1,5,10,15];arr.sort();console.log(arr)//0,1,10,15,5```\n\n可以借助sort方法的参数(比较函数)得到正确的结果\n\n```javascript 1.8\nlet arr = [0,1,5,10,15];\narr.sort(function(a,b) {\n  if(a<b){\n      return -1;\n  }\n  if(a==b){\n      return 0;\n  }\n  if(a>b){\n      return 1;\n  }\n});\nconsole.log(arr)//[0,1,5,10,15]\n```\n\n## 对象(Object)\n\n### 对象属性类型\n\n* 数据属性  可以直接定义\n\n数据属性包含一个数据的位置,在这个位置可以读取和写入,数据属性有4个描述其属性的行为特性\n\n* * [[ Configureable ]] 表示能否通过delete直接删除其属性,默认值true\n\n* * [[ Enumerable ]] 表示该属性能否通过```for ... in ...```进行遍历,默认值为true\n\n* * [[ Writable ]] 表示该属性的值能否修改,默认值为true\n\n* * [[ Value ]] 表示该属性的数据值,默认值为undefined\n\n<font color=\"red\">以上为每个对象的属性都具有的特性,要想修改其默认属性,必须同过```Object.defineProperty()```方法</font>\n\n```\nObject.defineProperty(属性所在的对象,属性的名字,描述符)\n\n//描述符为以上四个属性,这样就可以修改默认值了\n\n//例子\n\nvar person = {}\nObject.defineProperty(person,\"name\",{\n    value:\"caicai\",\n    writable:false\n})\nconsole.log(person.name) // caicai\nperson.name=\"hahaha\"; //严格模式下报错,非严格模式下将会忽略\nconsole.log(person.name) // caicai\n```\n\n* 访问器属性 不可以直接定义,必须通过`Object.defineProperty()`定义\n\n访问器属性不包含数据值,它们包含一对getter和setter函数\n\n* * [[ Configureable ]] 表示能否通过delete直接删除其属性,默认值true\n\n* * [[ Enumerable ]] 表示该属性能否通过```for ... in ...```进行遍历,默认值为true\n\n* * [[ get ]] 表示读取该属性时的值,默认值为undefined\n\n* * [[ set ]] 表示写入该属性的数据值,默认值为undefined\n\n```\nlet book={\n    __year:2004,\n    edition:1\n}\nObject.defineProperty(book,\"year\",{\n    get:function(){\n        return this.__year;\n    },\n    set:function(newValue){\n        if(newValue>this.__year){\n            this.edition += newValue - this.__year;\n            this.__year = newValue;\n        }\n    }\n})\nbook.year = 2015;\nconsole.log(book.edition)//12\n```\n\n### 创建对象\n\n虽然Objectg构造函数和对象字面量都可以创建对象,但有个缺点,使用同一个接口创建很多对象,会产生大量的重复代码,因此就出现了以下的设计模式\n\n#### *  工厂模式\n\n用函数来封装特定的接口,然后进行创建对象\n\n虽然解决了创建多个对象相似的问题,但是没有解决对象识别的问题\n\n```\n//工厂模式\nfuncction CreatePerson(name,age,job){\n    var o = new Object();\n    o.name = name;\n    o.age = age;\n    o.job = job;\n    o.sayName=function(){\n        return this.name\n    }\n    return o;\n}\nvar p1 = CreatePerson(\"caicai1\",20,\"民工\")\nvar p2 = CreatePerson(\"caicai2\",22,\"IT民工\")\n```\n\n#### * 构造函数模式\n\n自定义构造函数,从而定义自定义对象类型的属性和方法\n* * 与工厂模式的区别\n\n* * * 1.没有显示的创建对象\n\n* * * 2.直接将属性和方法赋值给this对象\n\n* * * 3.没有return语句\n\n* * 优点\n\n* * * 1.没有显示的创建对象\n\n* * * 2.直接将属性和方法赋值给this对象\n\n* * * 3.没有return返回值\n\n* * 缺点\n\n* * * 每个方法都要在实例上重新创建一遍\n\n* * * 可以将方法写到全局,然后赋值,这样可以解决两个函数做同一件事的问题,但是这样的话就会出现很多全局函数,没有封装可言,因此出现了原型模式\n\n```\n//方式一\nfunction Person(name,age,job){\n    this.name = name;\n    this.age = age;\n    this.job = job;\n    this.sayName = function(){\n        return this.name\n    }\n}\nvar p1 = new Person(\"caicai1\",20,\"民工\")\nvar p2 = new Person(\"caicai2\",22,\"IT民工\")\n\n//方式二\n function sayName(){\n    return this.name\n}\nfunction Person(name,age,job){\n    this.name = name;\n    this.age = age;\n    this.job = job;\n    this.sayName = sayName;\n}\nvar p1 = new Person(\"caicai1\",20,\"民工\")\nvar p2 = new Person(\"caicai2\",22,\"IT民工\")\n```\n\n#### * 原型模式\n\n每个函数都有一个prototype属性,这个属性是个指针,指向一个对象,这个对象的用途为让所有实例的属性共享属性和方法\n\n即为不必在构造函数中定义对象的属性和方法,而是将这些属性和方法添加到原型对象上\n\n```\nfunction Person(){}\nPerson.prototype.name= \"caicai\"\nPerson.prototype.age= 20\nPerson.prototype.job= \"It\"\nPerson.prototype.sayName= function(){\n    return this.name\n}\n\nvar p1 = new Person();\n\np1.sayName()//caicai\np1.hasOwnPropertype(\"name\")//false\n\np1.name = \"hahha\"\np1.hasOwnPropertype(\"name\")//true\n\ndelete p1.name\np1.hasOwnPropertype(\"name\")//false\n\nvar p2 = new Person();\np2.sayName()//caicai\n```\n\n![\"原型模式\"](/img/prototype.jpg)\n\n* 原型对象\n\n只要创建函数,就会根据一组特定的规则为该函数创建一个prototype属性,而这个属性指向函数的原型对象(Function.prototype),默认情况下该原型对象会获得一个construtor属性,这个属性指向*包含一个prototype属性的函数指针*(Function.prototype.constructor),并且我们可以通过prototype对象继续添加属性和方法\n<hr>\n创建自定义构造函数后,其原型对象默认只会取得construtor属性,其它方法都是继承自Object\n\n当创建一个实例后,该实例内部有一个指针(*._ _proto_ _*),指向构造函数的原型对象\n\n```\nfunction Parent(){}\n\nvar p1 = new Parent();\n\nParent.prototype.constructor === Parent //true\n\np1.__proto__ === Parent.prototype //true\n```\n\n确定一个属性存在于原型对象中 \n\nhasOwnProperty() //判断一个属性是否存在于实例中存在true,不存在false\n\nin 操作符 //判断一个属性是否存在于对象中(在实例和原型上都会去寻找)\n\nisPrototypeOf() //判断一个对象是否为构造函数的实例\n\n```\nfunction hasPrototypeProperty(object,name){\n    return !object.hasOwnProperty(name)&&(name in object);\n}\n\nfunction Person(){}\nvar p = new Person();\nPerson.prototype.isPrototypeOf(p) //true\n```\n\n#### * 组合使用构造函数模式和原型模式\n\n即为两种模式同时使用,构造函数用于定义实例属性,而原型模式用于定义方法和公用的属性\n\n```\nfunction Person(name,age){\n    this.name = name;\n    this.age = age;\n}\nPerson.prototype = {\n    constructor:Person,\n    sayName:function(){\n        return this.name\n    }\n}\n```\n\n#### * 动态原型模式\n\n因为组合模式看起来比较混乱,因此就出现动态原型模式,动态原型模式即为在构造函数内动态的创建原型对象\n\n```\nfunction Person(name,age){\n    this.name = name;\n    this.age = age;\n    if(typeof this.sayName!=undefined){\n        Person.prototype.sayName = function(){\n            return this.name    \n        }\n    }\n}\n\n```\n\n### 继承\n\n#### * 原型链继承\n\n原型链为实现继承的主要方法,其基本思想为利用原型让一个引用类型继承另外一个引用类型的属性和方法\n\n* 原型丶构造函数丶实例的关系 \n\n- [x] 每个构造函数都有一个原型对象.每个原型对象都有一个指向构造函数的指针,而实例都包含一个指向原型对象的指针\n\n```javascript 1.8\nfunction Person() {\n  this.name = \"caicai\"; \n}\nPerson.prototype.getName = function() {\n  return this.name\n}\n\nfunction  Student() {\n    this.age = 20;\n}\n\nStudent.prototype = new Person();\nStudent.prototype.getAge = function() {\n  return this.age;\n}\n\n```\n\n#### * 借用构造函数\n\n在子类型的内部调用父类型的构造函数\n\n```javascript 1.8\nfunction Person() {\n  this.colors = [\"red\",\"blue\"]\n}\nfunction Student() {\n  Person.call(this);\n}\nlet s = new Student();\ns.colors.push(\"black\");\nconsole.log(s.colors)// red,blue,black\n\nlet s1 = new Student();\nconsole.log(s1.colors)//red,blue\n```\n\n#### * 组合继承\n\n将借用构造函数继承和原型链继承结合在一起\n\n```javascript 1.8\nfunction  Person( name ) {\n   this.name = name;\n}\nPerson.prototype.getName = function() {\n  return this.name\n}\n\nfunction Student() {\n  Person.call(this,\"caicai\");\n  this.age = 20;\n}\nStudent.prototype = new Person();\n\nlet s= new Student();\ns.getName() //caicai\n```\n\n#### * 原型式继承\n\n#### * 寄生式继承\n\n#### * 寄生组合式继承\n\n\n\n\n\n\n\n\n\n","slug":"js高程-第三版-兼容问题和注意事项","published":1,"updated":"2020-03-23T11:05:23.944Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgbydgnr001qofo9hefjkqyk","content":"<h1 id=\"js高级程序设计-第三版-兼容bug\"><a href=\"#js高级程序设计-第三版-兼容bug\" class=\"headerlink\" title=\"js高级程序设计(第三版) 兼容bug\"></a>js高级程序设计(第三版) 兼容bug</h1><h2 id=\"数组-Array\"><a href=\"#数组-Array\" class=\"headerlink\" title=\"数组(Array)\"></a>数组(Array)</h2><h3 id=\"构造函数创建数组\"><a href=\"#构造函数创建数组\" class=\"headerlink\" title=\"构造函数创建数组\"></a>构造函数创建数组</h3><ul>\n<li>new Array(arg) </li>\n</ul>\n<ol>\n<li><p>arg为数字,则创建一个对应数量的数组</p>\n</li>\n<li><p>arg为字符串,则创建包含arg个的一个数组</p>\n</li>\n<li><p>new操作符可以省略</p>\n</li>\n</ol>\n<h3 id=\"对象字面量创建数组\"><a href=\"#对象字面量创建数组\" class=\"headerlink\" title=\"对象字面量创建数组\"></a>对象字面量创建数组</h3><ul>\n<li>bug</li>\n</ul>\n<ol>\n<li><figure class=\"highlight plain\"><figcaption><span>arr </span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">在ie中arr的值为1,2,undefined,而在其它浏览器中arr的值为1,2</span><br><span class=\"line\"></span><br><span class=\"line\">2. ```let arr = [,,,,]</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在ie8以下<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">3. ```let arr = [1,2,3,4]</span><br></pre></td></tr></table></figure></p>\n<p>若改变arr的length长度,则会改变数组对应的数据<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### sort 方法</span><br><span class=\"line\"></span><br><span class=\"line\">sort方法默认为升序排列,但是比较的每一项的字符串,因此```let arr = [0,1,5,10,15];arr.sort();console.log(arr)//0,1,10,15,5</span><br></pre></td></tr></table></figure></p>\n<p>可以借助sort方法的参数(比较函数)得到正确的结果</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">10</span>,<span class=\"number\">15</span>];</span><br><span class=\"line\">arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(a&lt;b)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(a==b)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(a&gt;b)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)<span class=\"comment\">//[0,1,5,10,15]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"对象-Object\"><a href=\"#对象-Object\" class=\"headerlink\" title=\"对象(Object)\"></a>对象(Object)</h2><h3 id=\"对象属性类型\"><a href=\"#对象属性类型\" class=\"headerlink\" title=\"对象属性类型\"></a>对象属性类型</h3><ul>\n<li>数据属性  可以直接定义</li>\n</ul>\n<p>数据属性包含一个数据的位置,在这个位置可以读取和写入,数据属性有4个描述其属性的行为特性</p>\n<ul>\n<li><ul>\n<li>[[ Configureable ]] 表示能否通过delete直接删除其属性,默认值true</li>\n</ul>\n</li>\n<li><ul>\n<li>[[ Enumerable ]] 表示该属性能否通过<figure class=\"highlight plain\"><figcaption><span>... in ...```进行遍历,默认值为true</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">* * [[ Writable ]] 表示该属性的值能否修改,默认值为true</span><br><span class=\"line\"></span><br><span class=\"line\">* * [[ Value ]] 表示该属性的数据值,默认值为undefined</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;font color=&quot;red&quot;&gt;以上为每个对象的属性都具有的特性,要想修改其默认属性,必须同过```Object.defineProperty()```方法&lt;/font&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<p>Object.defineProperty(属性所在的对象,属性的名字,描述符)</p>\n<p>//描述符为以上四个属性,这样就可以修改默认值了</p>\n<p>//例子</p>\n<p>var person = {}<br>Object.defineProperty(person,”name”,{<br>    value:”caicai”,<br>    writable:false<br>})<br>console.log(person.name) // caicai<br>person.name=”hahaha”; //严格模式下报错,非严格模式下将会忽略<br>console.log(person.name) // caicai<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">* 访问器属性 不可以直接定义,必须通过`Object.defineProperty()`定义</span><br><span class=\"line\"></span><br><span class=\"line\">访问器属性不包含数据值,它们包含一对getter和setter函数</span><br><span class=\"line\"></span><br><span class=\"line\">* * [[ Configureable ]] 表示能否通过delete直接删除其属性,默认值true</span><br><span class=\"line\"></span><br><span class=\"line\">* * [[ Enumerable ]] 表示该属性能否通过```for ... in ...```进行遍历,默认值为true</span><br><span class=\"line\"></span><br><span class=\"line\">* * [[ get ]] 表示读取该属性时的值,默认值为undefined</span><br><span class=\"line\"></span><br><span class=\"line\">* * [[ set ]] 表示写入该属性的数据值,默认值为undefined</span><br></pre></td></tr></table></figure></p>\n<p>let book={<br>    <strong>year:2004,<br>    edition:1<br>}<br>Object.defineProperty(book,”year”,{<br>    get:function(){<br>        return this.</strong>year;<br>    },<br>    set:function(newValue){<br>        if(newValue&gt;this.<strong>year){<br>            this.edition += newValue - this.</strong>year;<br>            this.__year = newValue;<br>        }<br>    }<br>})<br>book.year = 2015;<br>console.log(book.edition)//12<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### 创建对象</span><br><span class=\"line\"></span><br><span class=\"line\">虽然Objectg构造函数和对象字面量都可以创建对象,但有个缺点,使用同一个接口创建很多对象,会产生大量的重复代码,因此就出现了以下的设计模式</span><br><span class=\"line\"></span><br><span class=\"line\">#### *  工厂模式</span><br><span class=\"line\"></span><br><span class=\"line\">用函数来封装特定的接口,然后进行创建对象</span><br><span class=\"line\"></span><br><span class=\"line\">虽然解决了创建多个对象相似的问题,但是没有解决对象识别的问题</span><br></pre></td></tr></table></figure></p>\n<p>//工厂模式<br>funcction CreatePerson(name,age,job){<br>    var o = new Object();<br>    o.name = name;<br>    o.age = age;<br>    o.job = job;<br>    o.sayName=function(){<br>        return this.name<br>    }<br>    return o;<br>}<br>var p1 = CreatePerson(“caicai1”,20,”民工”)<br>var p2 = CreatePerson(“caicai2”,22,”IT民工”)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### * 构造函数模式</span><br><span class=\"line\"></span><br><span class=\"line\">自定义构造函数,从而定义自定义对象类型的属性和方法</span><br><span class=\"line\">* * 与工厂模式的区别</span><br><span class=\"line\"></span><br><span class=\"line\">* * * 1.没有显示的创建对象</span><br><span class=\"line\"></span><br><span class=\"line\">* * * 2.直接将属性和方法赋值给this对象</span><br><span class=\"line\"></span><br><span class=\"line\">* * * 3.没有return语句</span><br><span class=\"line\"></span><br><span class=\"line\">* * 优点</span><br><span class=\"line\"></span><br><span class=\"line\">* * * 1.没有显示的创建对象</span><br><span class=\"line\"></span><br><span class=\"line\">* * * 2.直接将属性和方法赋值给this对象</span><br><span class=\"line\"></span><br><span class=\"line\">* * * 3.没有return返回值</span><br><span class=\"line\"></span><br><span class=\"line\">* * 缺点</span><br><span class=\"line\"></span><br><span class=\"line\">* * * 每个方法都要在实例上重新创建一遍</span><br><span class=\"line\"></span><br><span class=\"line\">* * * 可以将方法写到全局,然后赋值,这样可以解决两个函数做同一件事的问题,但是这样的话就会出现很多全局函数,没有封装可言,因此出现了原型模式</span><br></pre></td></tr></table></figure></p>\n<p>//方式一<br>function Person(name,age,job){<br>    this.name = name;<br>    this.age = age;<br>    this.job = job;<br>    this.sayName = function(){<br>        return this.name<br>    }<br>}<br>var p1 = new Person(“caicai1”,20,”民工”)<br>var p2 = new Person(“caicai2”,22,”IT民工”)</p>\n<p>//方式二<br> function sayName(){<br>    return this.name<br>}<br>function Person(name,age,job){<br>    this.name = name;<br>    this.age = age;<br>    this.job = job;<br>    this.sayName = sayName;<br>}<br>var p1 = new Person(“caicai1”,20,”民工”)<br>var p2 = new Person(“caicai2”,22,”IT民工”)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### * 原型模式</span><br><span class=\"line\"></span><br><span class=\"line\">每个函数都有一个prototype属性,这个属性是个指针,指向一个对象,这个对象的用途为让所有实例的属性共享属性和方法</span><br><span class=\"line\"></span><br><span class=\"line\">即为不必在构造函数中定义对象的属性和方法,而是将这些属性和方法添加到原型对象上</span><br></pre></td></tr></table></figure></p>\n<p>function Person(){}<br>Person.prototype.name= “caicai”<br>Person.prototype.age= 20<br>Person.prototype.job= “It”<br>Person.prototype.sayName= function(){<br>    return this.name<br>}</p>\n<p>var p1 = new Person();</p>\n<p>p1.sayName()//caicai<br>p1.hasOwnPropertype(“name”)//false</p>\n<p>p1.name = “hahha”<br>p1.hasOwnPropertype(“name”)//true</p>\n<p>delete p1.name<br>p1.hasOwnPropertype(“name”)//false</p>\n<p>var p2 = new Person();<br>p2.sayName()//caicai<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">![&quot;原型模式&quot;](/img/prototype.jpg)</span><br><span class=\"line\"></span><br><span class=\"line\">* 原型对象</span><br><span class=\"line\"></span><br><span class=\"line\">只要创建函数,就会根据一组特定的规则为该函数创建一个prototype属性,而这个属性指向函数的原型对象(Function.prototype),默认情况下该原型对象会获得一个construtor属性,这个属性指向*包含一个prototype属性的函数指针*(Function.prototype.constructor),并且我们可以通过prototype对象继续添加属性和方法</span><br><span class=\"line\">&lt;hr&gt;</span><br><span class=\"line\">创建自定义构造函数后,其原型对象默认只会取得construtor属性,其它方法都是继承自Object</span><br><span class=\"line\"></span><br><span class=\"line\">当创建一个实例后,该实例内部有一个指针(*._ _proto_ _*),指向构造函数的原型对象</span><br></pre></td></tr></table></figure></p>\n<p>function Parent(){}</p>\n<p>var p1 = new Parent();</p>\n<p>Parent.prototype.constructor === Parent //true</p>\n<p>p1.<strong>proto</strong> === Parent.prototype //true<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">确定一个属性存在于原型对象中 </span><br><span class=\"line\"></span><br><span class=\"line\">hasOwnProperty() //判断一个属性是否存在于实例中存在true,不存在false</span><br><span class=\"line\"></span><br><span class=\"line\">in 操作符 //判断一个属性是否存在于对象中(在实例和原型上都会去寻找)</span><br><span class=\"line\"></span><br><span class=\"line\">isPrototypeOf() //判断一个对象是否为构造函数的实例</span><br></pre></td></tr></table></figure></p>\n<p>function hasPrototypeProperty(object,name){<br>    return !object.hasOwnProperty(name)&amp;&amp;(name in object);<br>}</p>\n<p>function Person(){}<br>var p = new Person();<br>Person.prototype.isPrototypeOf(p) //true<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### * 组合使用构造函数模式和原型模式</span><br><span class=\"line\"></span><br><span class=\"line\">即为两种模式同时使用,构造函数用于定义实例属性,而原型模式用于定义方法和公用的属性</span><br></pre></td></tr></table></figure></p>\n<p>function Person(name,age){<br>    this.name = name;<br>    this.age = age;<br>}<br>Person.prototype = {<br>    constructor:Person,<br>    sayName:function(){<br>        return this.name<br>    }<br>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### * 动态原型模式</span><br><span class=\"line\"></span><br><span class=\"line\">因为组合模式看起来比较混乱,因此就出现动态原型模式,动态原型模式即为在构造函数内动态的创建原型对象</span><br></pre></td></tr></table></figure></p>\n<p>function Person(name,age){<br>    this.name = name;<br>    this.age = age;<br>    if(typeof this.sayName!=undefined){<br>        Person.prototype.sayName = function(){<br>            return this.name<br>        }<br>    }<br>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### 继承</span><br><span class=\"line\"></span><br><span class=\"line\">#### * 原型链继承</span><br><span class=\"line\"></span><br><span class=\"line\">原型链为实现继承的主要方法,其基本思想为利用原型让一个引用类型继承另外一个引用类型的属性和方法</span><br><span class=\"line\"></span><br><span class=\"line\">* 原型丶构造函数丶实例的关系 </span><br><span class=\"line\"></span><br><span class=\"line\">- [x] 每个构造函数都有一个原型对象.每个原型对象都有一个指向构造函数的指针,而实例都包含一个指向原型对象的指针</span><br><span class=\"line\"></span><br><span class=\"line\">```javascript 1.8</span><br><span class=\"line\">function Person() &#123;</span><br><span class=\"line\">  this.name = &quot;caicai&quot;; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype.getName = function() &#123;</span><br><span class=\"line\">  return this.name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function  Student() &#123;</span><br><span class=\"line\">    this.age = 20;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Student.prototype = new Person();</span><br><span class=\"line\">Student.prototype.getAge = function() &#123;</span><br><span class=\"line\">  return this.age;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"借用构造函数\"><a href=\"#借用构造函数\" class=\"headerlink\" title=\"* 借用构造函数\"></a>* 借用构造函数</h4><p>在子类型的内部调用父类型的构造函数</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.colors = [<span class=\"string\">\"red\"</span>,<span class=\"string\">\"blue\"</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  Person.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">s.colors.push(<span class=\"string\">\"black\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s.colors)<span class=\"comment\">// red,blue,black</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> s1 = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s1.colors)<span class=\"comment\">//red,blue</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"组合继承\"><a href=\"#组合继承\" class=\"headerlink\" title=\"* 组合继承\"></a>* 组合继承</h4><p>将借用构造函数继承和原型链继承结合在一起</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"title\">Person</span>(<span class=\"params\"> name </span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  Person.call(<span class=\"keyword\">this</span>,<span class=\"string\">\"caicai\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = <span class=\"number\">20</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Student.prototype = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> s= <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">s.getName() <span class=\"comment\">//caicai</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"原型式继承\"><a href=\"#原型式继承\" class=\"headerlink\" title=\"* 原型式继承\"></a>* 原型式继承</h4><h4 id=\"寄生式继承\"><a href=\"#寄生式继承\" class=\"headerlink\" title=\"* 寄生式继承\"></a>* 寄生式继承</h4><h4 id=\"寄生组合式继承\"><a href=\"#寄生组合式继承\" class=\"headerlink\" title=\"* 寄生组合式继承\"></a>* 寄生组合式继承</h4>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"js高级程序设计-第三版-兼容bug\"><a href=\"#js高级程序设计-第三版-兼容bug\" class=\"headerlink\" title=\"js高级程序设计(第三版) 兼容bug\"></a>js高级程序设计(第三版) 兼容bug</h1><h2 id=\"数组-Array\"><a href=\"#数组-Array\" class=\"headerlink\" title=\"数组(Array)\"></a>数组(Array)</h2><h3 id=\"构造函数创建数组\"><a href=\"#构造函数创建数组\" class=\"headerlink\" title=\"构造函数创建数组\"></a>构造函数创建数组</h3><ul>\n<li>new Array(arg) </li>\n</ul>\n<ol>\n<li><p>arg为数字,则创建一个对应数量的数组</p>\n</li>\n<li><p>arg为字符串,则创建包含arg个的一个数组</p>\n</li>\n<li><p>new操作符可以省略</p>\n</li>\n</ol>\n<h3 id=\"对象字面量创建数组\"><a href=\"#对象字面量创建数组\" class=\"headerlink\" title=\"对象字面量创建数组\"></a>对象字面量创建数组</h3><ul>\n<li>bug</li>\n</ul>\n<ol>\n<li><figure class=\"highlight plain\"><figcaption><span>arr </span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">在ie中arr的值为1,2,undefined,而在其它浏览器中arr的值为1,2</span><br><span class=\"line\"></span><br><span class=\"line\">2. ```let arr = [,,,,]</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在ie8以下<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">3. ```let arr = [1,2,3,4]</span><br></pre></td></tr></table></figure></p>\n<p>若改变arr的length长度,则会改变数组对应的数据<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### sort 方法</span><br><span class=\"line\"></span><br><span class=\"line\">sort方法默认为升序排列,但是比较的每一项的字符串,因此```let arr = [0,1,5,10,15];arr.sort();console.log(arr)//0,1,10,15,5</span><br></pre></td></tr></table></figure></p>\n<p>可以借助sort方法的参数(比较函数)得到正确的结果</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">10</span>,<span class=\"number\">15</span>];</span><br><span class=\"line\">arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(a&lt;b)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(a==b)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(a&gt;b)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)<span class=\"comment\">//[0,1,5,10,15]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"对象-Object\"><a href=\"#对象-Object\" class=\"headerlink\" title=\"对象(Object)\"></a>对象(Object)</h2><h3 id=\"对象属性类型\"><a href=\"#对象属性类型\" class=\"headerlink\" title=\"对象属性类型\"></a>对象属性类型</h3><ul>\n<li>数据属性  可以直接定义</li>\n</ul>\n<p>数据属性包含一个数据的位置,在这个位置可以读取和写入,数据属性有4个描述其属性的行为特性</p>\n<ul>\n<li><ul>\n<li>[[ Configureable ]] 表示能否通过delete直接删除其属性,默认值true</li>\n</ul>\n</li>\n<li><ul>\n<li>[[ Enumerable ]] 表示该属性能否通过<figure class=\"highlight plain\"><figcaption><span>... in ...```进行遍历,默认值为true</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">* * [[ Writable ]] 表示该属性的值能否修改,默认值为true</span><br><span class=\"line\"></span><br><span class=\"line\">* * [[ Value ]] 表示该属性的数据值,默认值为undefined</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;font color=&quot;red&quot;&gt;以上为每个对象的属性都具有的特性,要想修改其默认属性,必须同过```Object.defineProperty()```方法&lt;/font&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<p>Object.defineProperty(属性所在的对象,属性的名字,描述符)</p>\n<p>//描述符为以上四个属性,这样就可以修改默认值了</p>\n<p>//例子</p>\n<p>var person = {}<br>Object.defineProperty(person,”name”,{<br>    value:”caicai”,<br>    writable:false<br>})<br>console.log(person.name) // caicai<br>person.name=”hahaha”; //严格模式下报错,非严格模式下将会忽略<br>console.log(person.name) // caicai<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">* 访问器属性 不可以直接定义,必须通过`Object.defineProperty()`定义</span><br><span class=\"line\"></span><br><span class=\"line\">访问器属性不包含数据值,它们包含一对getter和setter函数</span><br><span class=\"line\"></span><br><span class=\"line\">* * [[ Configureable ]] 表示能否通过delete直接删除其属性,默认值true</span><br><span class=\"line\"></span><br><span class=\"line\">* * [[ Enumerable ]] 表示该属性能否通过```for ... in ...```进行遍历,默认值为true</span><br><span class=\"line\"></span><br><span class=\"line\">* * [[ get ]] 表示读取该属性时的值,默认值为undefined</span><br><span class=\"line\"></span><br><span class=\"line\">* * [[ set ]] 表示写入该属性的数据值,默认值为undefined</span><br></pre></td></tr></table></figure></p>\n<p>let book={<br>    <strong>year:2004,<br>    edition:1<br>}<br>Object.defineProperty(book,”year”,{<br>    get:function(){<br>        return this.</strong>year;<br>    },<br>    set:function(newValue){<br>        if(newValue&gt;this.<strong>year){<br>            this.edition += newValue - this.</strong>year;<br>            this.__year = newValue;<br>        }<br>    }<br>})<br>book.year = 2015;<br>console.log(book.edition)//12<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### 创建对象</span><br><span class=\"line\"></span><br><span class=\"line\">虽然Objectg构造函数和对象字面量都可以创建对象,但有个缺点,使用同一个接口创建很多对象,会产生大量的重复代码,因此就出现了以下的设计模式</span><br><span class=\"line\"></span><br><span class=\"line\">#### *  工厂模式</span><br><span class=\"line\"></span><br><span class=\"line\">用函数来封装特定的接口,然后进行创建对象</span><br><span class=\"line\"></span><br><span class=\"line\">虽然解决了创建多个对象相似的问题,但是没有解决对象识别的问题</span><br></pre></td></tr></table></figure></p>\n<p>//工厂模式<br>funcction CreatePerson(name,age,job){<br>    var o = new Object();<br>    o.name = name;<br>    o.age = age;<br>    o.job = job;<br>    o.sayName=function(){<br>        return this.name<br>    }<br>    return o;<br>}<br>var p1 = CreatePerson(“caicai1”,20,”民工”)<br>var p2 = CreatePerson(“caicai2”,22,”IT民工”)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### * 构造函数模式</span><br><span class=\"line\"></span><br><span class=\"line\">自定义构造函数,从而定义自定义对象类型的属性和方法</span><br><span class=\"line\">* * 与工厂模式的区别</span><br><span class=\"line\"></span><br><span class=\"line\">* * * 1.没有显示的创建对象</span><br><span class=\"line\"></span><br><span class=\"line\">* * * 2.直接将属性和方法赋值给this对象</span><br><span class=\"line\"></span><br><span class=\"line\">* * * 3.没有return语句</span><br><span class=\"line\"></span><br><span class=\"line\">* * 优点</span><br><span class=\"line\"></span><br><span class=\"line\">* * * 1.没有显示的创建对象</span><br><span class=\"line\"></span><br><span class=\"line\">* * * 2.直接将属性和方法赋值给this对象</span><br><span class=\"line\"></span><br><span class=\"line\">* * * 3.没有return返回值</span><br><span class=\"line\"></span><br><span class=\"line\">* * 缺点</span><br><span class=\"line\"></span><br><span class=\"line\">* * * 每个方法都要在实例上重新创建一遍</span><br><span class=\"line\"></span><br><span class=\"line\">* * * 可以将方法写到全局,然后赋值,这样可以解决两个函数做同一件事的问题,但是这样的话就会出现很多全局函数,没有封装可言,因此出现了原型模式</span><br></pre></td></tr></table></figure></p>\n<p>//方式一<br>function Person(name,age,job){<br>    this.name = name;<br>    this.age = age;<br>    this.job = job;<br>    this.sayName = function(){<br>        return this.name<br>    }<br>}<br>var p1 = new Person(“caicai1”,20,”民工”)<br>var p2 = new Person(“caicai2”,22,”IT民工”)</p>\n<p>//方式二<br> function sayName(){<br>    return this.name<br>}<br>function Person(name,age,job){<br>    this.name = name;<br>    this.age = age;<br>    this.job = job;<br>    this.sayName = sayName;<br>}<br>var p1 = new Person(“caicai1”,20,”民工”)<br>var p2 = new Person(“caicai2”,22,”IT民工”)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### * 原型模式</span><br><span class=\"line\"></span><br><span class=\"line\">每个函数都有一个prototype属性,这个属性是个指针,指向一个对象,这个对象的用途为让所有实例的属性共享属性和方法</span><br><span class=\"line\"></span><br><span class=\"line\">即为不必在构造函数中定义对象的属性和方法,而是将这些属性和方法添加到原型对象上</span><br></pre></td></tr></table></figure></p>\n<p>function Person(){}<br>Person.prototype.name= “caicai”<br>Person.prototype.age= 20<br>Person.prototype.job= “It”<br>Person.prototype.sayName= function(){<br>    return this.name<br>}</p>\n<p>var p1 = new Person();</p>\n<p>p1.sayName()//caicai<br>p1.hasOwnPropertype(“name”)//false</p>\n<p>p1.name = “hahha”<br>p1.hasOwnPropertype(“name”)//true</p>\n<p>delete p1.name<br>p1.hasOwnPropertype(“name”)//false</p>\n<p>var p2 = new Person();<br>p2.sayName()//caicai<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">![&quot;原型模式&quot;](/img/prototype.jpg)</span><br><span class=\"line\"></span><br><span class=\"line\">* 原型对象</span><br><span class=\"line\"></span><br><span class=\"line\">只要创建函数,就会根据一组特定的规则为该函数创建一个prototype属性,而这个属性指向函数的原型对象(Function.prototype),默认情况下该原型对象会获得一个construtor属性,这个属性指向*包含一个prototype属性的函数指针*(Function.prototype.constructor),并且我们可以通过prototype对象继续添加属性和方法</span><br><span class=\"line\">&lt;hr&gt;</span><br><span class=\"line\">创建自定义构造函数后,其原型对象默认只会取得construtor属性,其它方法都是继承自Object</span><br><span class=\"line\"></span><br><span class=\"line\">当创建一个实例后,该实例内部有一个指针(*._ _proto_ _*),指向构造函数的原型对象</span><br></pre></td></tr></table></figure></p>\n<p>function Parent(){}</p>\n<p>var p1 = new Parent();</p>\n<p>Parent.prototype.constructor === Parent //true</p>\n<p>p1.<strong>proto</strong> === Parent.prototype //true<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">确定一个属性存在于原型对象中 </span><br><span class=\"line\"></span><br><span class=\"line\">hasOwnProperty() //判断一个属性是否存在于实例中存在true,不存在false</span><br><span class=\"line\"></span><br><span class=\"line\">in 操作符 //判断一个属性是否存在于对象中(在实例和原型上都会去寻找)</span><br><span class=\"line\"></span><br><span class=\"line\">isPrototypeOf() //判断一个对象是否为构造函数的实例</span><br></pre></td></tr></table></figure></p>\n<p>function hasPrototypeProperty(object,name){<br>    return !object.hasOwnProperty(name)&amp;&amp;(name in object);<br>}</p>\n<p>function Person(){}<br>var p = new Person();<br>Person.prototype.isPrototypeOf(p) //true<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### * 组合使用构造函数模式和原型模式</span><br><span class=\"line\"></span><br><span class=\"line\">即为两种模式同时使用,构造函数用于定义实例属性,而原型模式用于定义方法和公用的属性</span><br></pre></td></tr></table></figure></p>\n<p>function Person(name,age){<br>    this.name = name;<br>    this.age = age;<br>}<br>Person.prototype = {<br>    constructor:Person,<br>    sayName:function(){<br>        return this.name<br>    }<br>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### * 动态原型模式</span><br><span class=\"line\"></span><br><span class=\"line\">因为组合模式看起来比较混乱,因此就出现动态原型模式,动态原型模式即为在构造函数内动态的创建原型对象</span><br></pre></td></tr></table></figure></p>\n<p>function Person(name,age){<br>    this.name = name;<br>    this.age = age;<br>    if(typeof this.sayName!=undefined){<br>        Person.prototype.sayName = function(){<br>            return this.name<br>        }<br>    }<br>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### 继承</span><br><span class=\"line\"></span><br><span class=\"line\">#### * 原型链继承</span><br><span class=\"line\"></span><br><span class=\"line\">原型链为实现继承的主要方法,其基本思想为利用原型让一个引用类型继承另外一个引用类型的属性和方法</span><br><span class=\"line\"></span><br><span class=\"line\">* 原型丶构造函数丶实例的关系 </span><br><span class=\"line\"></span><br><span class=\"line\">- [x] 每个构造函数都有一个原型对象.每个原型对象都有一个指向构造函数的指针,而实例都包含一个指向原型对象的指针</span><br><span class=\"line\"></span><br><span class=\"line\">```javascript 1.8</span><br><span class=\"line\">function Person() &#123;</span><br><span class=\"line\">  this.name = &quot;caicai&quot;; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype.getName = function() &#123;</span><br><span class=\"line\">  return this.name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function  Student() &#123;</span><br><span class=\"line\">    this.age = 20;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Student.prototype = new Person();</span><br><span class=\"line\">Student.prototype.getAge = function() &#123;</span><br><span class=\"line\">  return this.age;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"借用构造函数\"><a href=\"#借用构造函数\" class=\"headerlink\" title=\"* 借用构造函数\"></a>* 借用构造函数</h4><p>在子类型的内部调用父类型的构造函数</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.colors = [<span class=\"string\">\"red\"</span>,<span class=\"string\">\"blue\"</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  Person.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">s.colors.push(<span class=\"string\">\"black\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s.colors)<span class=\"comment\">// red,blue,black</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> s1 = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s1.colors)<span class=\"comment\">//red,blue</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"组合继承\"><a href=\"#组合继承\" class=\"headerlink\" title=\"* 组合继承\"></a>* 组合继承</h4><p>将借用构造函数继承和原型链继承结合在一起</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"title\">Person</span>(<span class=\"params\"> name </span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  Person.call(<span class=\"keyword\">this</span>,<span class=\"string\">\"caicai\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = <span class=\"number\">20</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Student.prototype = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> s= <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">s.getName() <span class=\"comment\">//caicai</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"原型式继承\"><a href=\"#原型式继承\" class=\"headerlink\" title=\"* 原型式继承\"></a>* 原型式继承</h4><h4 id=\"寄生式继承\"><a href=\"#寄生式继承\" class=\"headerlink\" title=\"* 寄生式继承\"></a>* 寄生式继承</h4><h4 id=\"寄生组合式继承\"><a href=\"#寄生组合式继承\" class=\"headerlink\" title=\"* 寄生组合式继承\"></a>* 寄生组合式继承</h4>"},{"title":"module.exports和exports的区别","date":"2016-08-15T12:48:46.000Z","_content":"\nmodule.exports和exports的区别一直很困扰我,看过几次也一直忘记，今天在学习nodeJs时，又看到这两个玩意,看到这里又困惑了，于是专门花了一点时间又研究了下这两个玩意，顿时茅塞顿开，以此笔记来见证我的理解，废话不多说了，也不会说。。。看下面的代码吧！！！\n# module.exports和exports的区别\n\n## node 控制台直接打印console.log(module)\n\n```javascript\n{\n  id: '.',\n  exports: {},\n  parent: null,\n  filename: '/home/sa/Desktop/node_study/module/module.js',\n  loaded: false,\n  children: [],\n  paths:[ '/home/sa/Desktop/node_study/module/node_modules',\n     '/home/sa/Desktop/node_study/node_modules',\n     '/home/sa/Desktop/node_modules',\n     '/home/sa/node_modules',\n     '/home/node_modules']\n }\n```\n## node 控制台直接打印console.log(exports)\n\n```javascript\n{}\n```\n## 在来看个例子\n\n```javascript\nvar a = { name : 1 };\nvar b = a;\nconsole.log(a) //{name:1}\nconsole.log(b) //{name:1}\n\nb.name = 2;\nconsole.log(a) //{name:2}\nconsole.log(b) //{name:2}\n\nvar b = {name:3};\nconsole.log(a) //{name:2}\nconsole.log(b) //{name:3}\n```\n\n解释：a 是一个对象，b 是对 a 的引用，即 a 和 b 指向同一块内存，所以前两个输出一样。当对 b 作修改时，即 a 和 b 指向同一块内存地址的内容发生了改变，所以 a 也会体现出来，所以第三四个输出一样。当 b 被覆盖时，b 指向了一块新的内存，a 还是指向原来的内存，所以最后两个输出不一样。\n<br />\n明白了上述例子后，我们只需知道三点就知道 exports 和 module.exports 的区别了：\n\n> * module.exports 初始值为一个空对象 {}\n> * exports 是指向的 module.exports 的引用\n> * require() 返回的是 module.exports 而不是 export\n\n# 结论\n\n> * exports = module.exports = { }\n> * exports = { } 将会指向一块新的内存，不能用这种方式导出模块\n> * exports.xxx = { } 将会指向同一块内存，可以用这种方式导出模块\n> * 如果用第二种方式导出模块，最后加上 module.exports = exports 重新赋值，一样可以达到导出模块的效果\n","source":"_posts/module-exports和exports的区别.md","raw":"---\ntitle: module.exports和exports的区别\ndate: 2016-08-15 20:48:46\ncategories: Javascript\ntags:\n    - Javascript\n---\n\nmodule.exports和exports的区别一直很困扰我,看过几次也一直忘记，今天在学习nodeJs时，又看到这两个玩意,看到这里又困惑了，于是专门花了一点时间又研究了下这两个玩意，顿时茅塞顿开，以此笔记来见证我的理解，废话不多说了，也不会说。。。看下面的代码吧！！！\n# module.exports和exports的区别\n\n## node 控制台直接打印console.log(module)\n\n```javascript\n{\n  id: '.',\n  exports: {},\n  parent: null,\n  filename: '/home/sa/Desktop/node_study/module/module.js',\n  loaded: false,\n  children: [],\n  paths:[ '/home/sa/Desktop/node_study/module/node_modules',\n     '/home/sa/Desktop/node_study/node_modules',\n     '/home/sa/Desktop/node_modules',\n     '/home/sa/node_modules',\n     '/home/node_modules']\n }\n```\n## node 控制台直接打印console.log(exports)\n\n```javascript\n{}\n```\n## 在来看个例子\n\n```javascript\nvar a = { name : 1 };\nvar b = a;\nconsole.log(a) //{name:1}\nconsole.log(b) //{name:1}\n\nb.name = 2;\nconsole.log(a) //{name:2}\nconsole.log(b) //{name:2}\n\nvar b = {name:3};\nconsole.log(a) //{name:2}\nconsole.log(b) //{name:3}\n```\n\n解释：a 是一个对象，b 是对 a 的引用，即 a 和 b 指向同一块内存，所以前两个输出一样。当对 b 作修改时，即 a 和 b 指向同一块内存地址的内容发生了改变，所以 a 也会体现出来，所以第三四个输出一样。当 b 被覆盖时，b 指向了一块新的内存，a 还是指向原来的内存，所以最后两个输出不一样。\n<br />\n明白了上述例子后，我们只需知道三点就知道 exports 和 module.exports 的区别了：\n\n> * module.exports 初始值为一个空对象 {}\n> * exports 是指向的 module.exports 的引用\n> * require() 返回的是 module.exports 而不是 export\n\n# 结论\n\n> * exports = module.exports = { }\n> * exports = { } 将会指向一块新的内存，不能用这种方式导出模块\n> * exports.xxx = { } 将会指向同一块内存，可以用这种方式导出模块\n> * 如果用第二种方式导出模块，最后加上 module.exports = exports 重新赋值，一样可以达到导出模块的效果\n","slug":"module-exports和exports的区别","published":1,"updated":"2020-03-23T11:05:23.944Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgbydgnu001vofo9fophgrg0","content":"<p>module.exports和exports的区别一直很困扰我,看过几次也一直忘记，今天在学习nodeJs时，又看到这两个玩意,看到这里又困惑了，于是专门花了一点时间又研究了下这两个玩意，顿时茅塞顿开，以此笔记来见证我的理解，废话不多说了，也不会说。。。看下面的代码吧！！！</p>\n<h1 id=\"module-exports和exports的区别\"><a href=\"#module-exports和exports的区别\" class=\"headerlink\" title=\"module.exports和exports的区别\"></a>module.exports和exports的区别</h1><h2 id=\"node-控制台直接打印console-log-module\"><a href=\"#node-控制台直接打印console-log-module\" class=\"headerlink\" title=\"node 控制台直接打印console.log(module)\"></a>node 控制台直接打印console.log(module)</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  id: <span class=\"string\">'.'</span>,</span><br><span class=\"line\">  exports: &#123;&#125;,</span><br><span class=\"line\">  parent: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  filename: <span class=\"string\">'/home/sa/Desktop/node_study/module/module.js'</span>,</span><br><span class=\"line\">  loaded: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  children: [],</span><br><span class=\"line\">  paths:[ <span class=\"string\">'/home/sa/Desktop/node_study/module/node_modules'</span>,</span><br><span class=\"line\">     <span class=\"string\">'/home/sa/Desktop/node_study/node_modules'</span>,</span><br><span class=\"line\">     <span class=\"string\">'/home/sa/Desktop/node_modules'</span>,</span><br><span class=\"line\">     <span class=\"string\">'/home/sa/node_modules'</span>,</span><br><span class=\"line\">     <span class=\"string\">'/home/node_modules'</span>]</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"node-控制台直接打印console-log-exports\"><a href=\"#node-控制台直接打印console-log-exports\" class=\"headerlink\" title=\"node 控制台直接打印console.log(exports)\"></a>node 控制台直接打印console.log(exports)</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"在来看个例子\"><a href=\"#在来看个例子\" class=\"headerlink\" title=\"在来看个例子\"></a>在来看个例子</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123; <span class=\"attr\">name</span> : <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">//&#123;name:1&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">//&#123;name:1&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">b.name = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">//&#123;name:2&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">//&#123;name:2&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = &#123;<span class=\"attr\">name</span>:<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">//&#123;name:2&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">//&#123;name:3&#125;</span></span><br></pre></td></tr></table></figure>\n<p>解释：a 是一个对象，b 是对 a 的引用，即 a 和 b 指向同一块内存，所以前两个输出一样。当对 b 作修改时，即 a 和 b 指向同一块内存地址的内容发生了改变，所以 a 也会体现出来，所以第三四个输出一样。当 b 被覆盖时，b 指向了一块新的内存，a 还是指向原来的内存，所以最后两个输出不一样。<br><br><br>明白了上述例子后，我们只需知道三点就知道 exports 和 module.exports 的区别了：</p>\n<blockquote>\n<ul>\n<li>module.exports 初始值为一个空对象 {}</li>\n<li>exports 是指向的 module.exports 的引用</li>\n<li>require() 返回的是 module.exports 而不是 export</li>\n</ul>\n</blockquote>\n<h1 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h1><blockquote>\n<ul>\n<li>exports = module.exports = { }</li>\n<li>exports = { } 将会指向一块新的内存，不能用这种方式导出模块</li>\n<li>exports.xxx = { } 将会指向同一块内存，可以用这种方式导出模块</li>\n<li>如果用第二种方式导出模块，最后加上 module.exports = exports 重新赋值，一样可以达到导出模块的效果</li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>module.exports和exports的区别一直很困扰我,看过几次也一直忘记，今天在学习nodeJs时，又看到这两个玩意,看到这里又困惑了，于是专门花了一点时间又研究了下这两个玩意，顿时茅塞顿开，以此笔记来见证我的理解，废话不多说了，也不会说。。。看下面的代码吧！！！</p>\n<h1 id=\"module-exports和exports的区别\"><a href=\"#module-exports和exports的区别\" class=\"headerlink\" title=\"module.exports和exports的区别\"></a>module.exports和exports的区别</h1><h2 id=\"node-控制台直接打印console-log-module\"><a href=\"#node-控制台直接打印console-log-module\" class=\"headerlink\" title=\"node 控制台直接打印console.log(module)\"></a>node 控制台直接打印console.log(module)</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  id: <span class=\"string\">'.'</span>,</span><br><span class=\"line\">  exports: &#123;&#125;,</span><br><span class=\"line\">  parent: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  filename: <span class=\"string\">'/home/sa/Desktop/node_study/module/module.js'</span>,</span><br><span class=\"line\">  loaded: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  children: [],</span><br><span class=\"line\">  paths:[ <span class=\"string\">'/home/sa/Desktop/node_study/module/node_modules'</span>,</span><br><span class=\"line\">     <span class=\"string\">'/home/sa/Desktop/node_study/node_modules'</span>,</span><br><span class=\"line\">     <span class=\"string\">'/home/sa/Desktop/node_modules'</span>,</span><br><span class=\"line\">     <span class=\"string\">'/home/sa/node_modules'</span>,</span><br><span class=\"line\">     <span class=\"string\">'/home/node_modules'</span>]</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"node-控制台直接打印console-log-exports\"><a href=\"#node-控制台直接打印console-log-exports\" class=\"headerlink\" title=\"node 控制台直接打印console.log(exports)\"></a>node 控制台直接打印console.log(exports)</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"在来看个例子\"><a href=\"#在来看个例子\" class=\"headerlink\" title=\"在来看个例子\"></a>在来看个例子</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123; <span class=\"attr\">name</span> : <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">//&#123;name:1&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">//&#123;name:1&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">b.name = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">//&#123;name:2&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">//&#123;name:2&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = &#123;<span class=\"attr\">name</span>:<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">//&#123;name:2&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">//&#123;name:3&#125;</span></span><br></pre></td></tr></table></figure>\n<p>解释：a 是一个对象，b 是对 a 的引用，即 a 和 b 指向同一块内存，所以前两个输出一样。当对 b 作修改时，即 a 和 b 指向同一块内存地址的内容发生了改变，所以 a 也会体现出来，所以第三四个输出一样。当 b 被覆盖时，b 指向了一块新的内存，a 还是指向原来的内存，所以最后两个输出不一样。<br><br><br>明白了上述例子后，我们只需知道三点就知道 exports 和 module.exports 的区别了：</p>\n<blockquote>\n<ul>\n<li>module.exports 初始值为一个空对象 {}</li>\n<li>exports 是指向的 module.exports 的引用</li>\n<li>require() 返回的是 module.exports 而不是 export</li>\n</ul>\n</blockquote>\n<h1 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h1><blockquote>\n<ul>\n<li>exports = module.exports = { }</li>\n<li>exports = { } 将会指向一块新的内存，不能用这种方式导出模块</li>\n<li>exports.xxx = { } 将会指向同一块内存，可以用这种方式导出模块</li>\n<li>如果用第二种方式导出模块，最后加上 module.exports = exports 重新赋值，一样可以达到导出模块的效果</li>\n</ul>\n</blockquote>\n"},{"title":"mongoDB","date":"2017-12-15T08:03:06.000Z","_content":"\n# 服务\n\nnet start mongodb   --- 启动服务\n\nnet stop mongodb    ---  停止服务\n\n","source":"_posts/mongoDB.md","raw":"---\ntitle: mongoDB\ndate: 2017-12-15 16:03:06\ncategories: mongoDB\ntags:\n     - mongoDB\n---\n\n# 服务\n\nnet start mongodb   --- 启动服务\n\nnet stop mongodb    ---  停止服务\n\n","slug":"mongoDB","published":1,"updated":"2020-03-23T11:05:23.944Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgbydgnx001yofo9ju01ml85","content":"<h1 id=\"服务\"><a href=\"#服务\" class=\"headerlink\" title=\"服务\"></a>服务</h1><p>net start mongodb   — 启动服务</p>\n<p>net stop mongodb    —  停止服务</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"服务\"><a href=\"#服务\" class=\"headerlink\" title=\"服务\"></a>服务</h1><p>net start mongodb   — 启动服务</p>\n<p>net stop mongodb    —  停止服务</p>\n"},{"title":"Mysql 简易学习","date":"2017-04-15T07:20:33.000Z","_content":"\n## mysql 连接到mysql服务器\n\n```\nmysql -u user -p password\n```\n## 管理MySQL的命令\n\n> - SHOW DATABASES; 列出 MySQL 数据库管理系统的数据库列表。 \n> - SHOW TABLES;显示指定数据库的所有表，使用该命令前需要使用 use 命令来选择要操作的数据库。\n> - SHOW COLUMNS FROM 数据表;显示数据表的属性，属性类型，主键信息 ，是否为 NULL，默认值等其他信息。\n> - SHOW INDEX FROM 数据表;显示数据表的详细索引信息，包括PRIMARY KEY（主键）。\n> - USE 数据库名；选择要操作的Mysql数据库，使用该命令后所有Mysql命令都只针对该数据库。\n\n## MySQL 创建数据库\n```\ncreate database 数据库名;\n```\n## MySQL 删除数据库\n```\ndrop database 数据库名;\n```\n## MySQL 创建数据表\n```\ncrate table tablename(\n  id int not null auto_increment,\n  name varchar(80) not null,\n  primary key(id)\n);\n```\n## MySQL 删除数据表\n```\ndrop table tablename;\n```\n## MySQL 清空数据表\n```\ntruncate 数据库名;\n```\n## MySQL 插入数据\n```\ninsert into tablename (field1, field2,...fieldN ) VALUES ( value1, value2,...valueN );\n```\n## MySQL where 子句\n```\nSELECT field1, field2,...fieldN FROM table_name1, table_name2... \n[WHERE condition1 [AND [OR]] condition2.....\n```\n## MySQL UPDATE 查询\n```\nUPDATE table_name SET field1=new-value1, field2=new-value2 [WHERE Clause]\n```\n\n> - 你可以同时更新一个或多个字段。\n> - 你可以在 WHERE 子句中指定任何条件。\n> - 你可以在一个单独表中同时更新数据。\n\n## MySQL DELETE 语句\n```\nDELETE FROM table_name [WHERE Clause]\n```\n## MySQL LIKE 子句\n\n```\nSELECT field1, field2,...fieldN from table_name1, table_name2... \nWHERE field1 LIKE condition1 [AND [OR]] filed2 = 'somevalue'\n\nselect name from user where name like \"%cai%\"\n```\n## MySQL UNION 操作符\n\n```\nMySQL UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中。多个 SELECT 语句会删除重复的数据。\nSELECT expression1, expression2, ... expression_n \nFROM tables [WHERE conditions]\nUNION [ALL | DISTINCT]\n\nSELECT expression1, expression2, ... expression_n FROM tables [WHERE conditions];\n\nSELECT country FROM Websites UNION SELECT country FROM apps ORDER BY country;\n```\n## MySQL 排序\n\n```\nSELECT field1, field2,...fieldN \nfrom table_name1, table_name2... \nORDER BY field1, [field2...] [ASC [DESC]]\n\nselect * from user order by name asc\n```\n## MySQL GROUP BY 语句\n\n```\nSELECT column_name, function(column_name)\nFROM table_name\nWHERE column_name operator value\nGROUP BY column_name;\n\nmysql> select * from user;\n+----+---------+------------+\n| id | name    | time_count |\n+----+---------+------------+\n|  1 | caicai2 |          1 |\n|  2 | caicai3 |          2 |\n|  3 | caicai3 |          3 |\n|  5 | caicai5 |          5 |\n|  6 | caicai5 |          5 |\n+----+---------+------------+\n\nmysql> select name,sum(time_count) from user group by name;　name字段对应的名字出现的总次数的和\n+---------+-----------------+\n| name    | sum(time_count) |\n+---------+-----------------+\n| caicai2 |               1 |\n| caicai3 |               5 |\n| caicai5 |              10 |\n+---------+-----------------+\n\nmysql> select name,count(time_count) from user group by name;　name字段对应的名字出现的次数　\n+---------+-------------------+\n| name    | count(time_count) |\n+---------+-------------------+\n| caicai2 |                 1 |\n| caicai3 |                 2 |\n| caicai5 |                 2 |\n+---------+-------------------+\n\n```\n## Mysql 连接的使用\n\n> - INNER JOIN（内连接,或等值连接）：获取两个表中字段匹配关系的记录。\n> - LEFT JOIN（左连接）：获取左表所有记录，即使右表没有对应匹配的记录。\n> - RIGHT JOIN（右连接）： 与 LEFT JOIN 相反，用于获取右表所有记录，即使左表没有对应匹配的记录。\n\n```\nmysql> SELECT * FROM tcount_tbl;\n+-----------------+----------------+\n| runoob_author | runoob_count |\n+-----------------+----------------+\n| mahran          |             20 |\n| mahnaz          |           NULL |\n| Jen             |           NULL |\n| Gill            |             20 |\n| John Poul       |              1 |\n| Sanjay          |              1 |\n+-----------------+----------------+\nmysql> SELECT * from runoob_tbl;\n+-------------+----------------+-----------------+-----------------+\n| runoob_id | runoob_title | runoob_author | submission_date |\n+-------------+----------------+-----------------+-----------------+\n|           1 | Learn PHP      | John Poul       | 2007-05-24      |\n|           2 | Learn MySQL    | Abdul S         | 2007-05-24      |\n|           3 | JAVA Tutorial  | Sanjay          | 2007-05-06      |\n+-------------+----------------+-----------------+-----------------+\n```\n### 内连接 INNER JOIN\n```\nmysql> SELECT a.runoob_id, a.runoob_author, b.runoob_count \nFROM runoob_tbl a \nINNER JOIN tcount_tbl b \nON a.runoob_author = b.runoob_author;\n\n+-----------+---------------+--------------+\n| runoob_id | runoob_author | runoob_count |\n+-----------+---------------+--------------+\n|         1 | John Poul     |            1 |\n|         3 | Sanjay        |            1 |\n+-----------+---------------+--------------+\n等价于\nmysql> SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a, tcount_tbl b WHERE a.runoob_author = b.runoob_author;\n+-------------+-----------------+----------------+\n| runoob_id | runoob_author | runoob_count |\n+-------------+-----------------+----------------+\n|           1 | John Poul       |              1 |\n|           3 | Sanjay          |              1 |\n+-------------+-----------------+----------------+\n```\n### 左连接 LEFT JOIN\n```\nmysql> SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a LEFT JOIN tcount_tbl b ON a.runoob_author = b.runoob_author;\n+-------------+-----------------+----------------+\n| runoob_id | runoob_author | runoob_count |\n+-------------+-----------------+----------------+\n|           1 | John Poul       |              1 |\n|           2 | Abdul S         |           NULL |\n|           3 | Sanjay          |              1 |\n+-------------+-----------------+----------------+\nLEFT JOIN，该语句会读取左边的数据表runoob_tbl的所有选取的字段数据，即便在右侧表tcount_tbl中没有对应的runoob_author字段值\n```\n### 右连接 RIGHT JOIN\n```\nmysql> SELECT b.runoob_id, b.runoob_author, a.runoob_count FROM tcount_tbl a LEFT JOIN runoob_tbl b ON a.runoob_author = b.runoob_author;\n+-------------+-----------------+----------------+\n| runoob_id | runoob_author | runoob_count |\n+-------------+-----------------+----------------+\n|           1 | John Poul       |              1 |\n|           2 | Abdul S         |           NULL |\n|           3 | Sanjay          |              1 |\n+-------------+-----------------+----------------+\nRIGHT JOIN，该语句会读取右边的数据表 runoob_tbl 的所有选取的字段数据，即便在左侧表tcount_tbl中没有对应的runoob_author字段值。\n```\n## MySQL NULL 值处理\n> - is null 　查询包括null的数据　\n\n```\nmysql> SELECT * FROM tcount_tbl WHERE runoob_count IS NULL;\n+-----------------+----------------+\n| runoob_author | runoob_count |\n+-----------------+----------------+\n| mahnaz          |           NULL |\n| Jen             |           NULL |\n+-----------------+----------------+\nmysql> SELECT * FROM tcount_tbl WHERE runoob_count = NULL;\nEmpty set (0.00 sec)\n```\n\n> - is not null 查询不包括null的数据\n\n```\nmysql> SELECT * from tcount_tbl \n       WHERE runoob_count IS NOT NULL;\n+-----------------+----------------+\n| runoob_author | runoob_count |\n+-----------------+----------------+\n| mahran          |             20 |\n| Gill            |             20 |\n+-----------------+----------------+\nmysql> SELECT * FROM tcount_tbl WHERE runoob_count != NULL;\nEmpty set (0.01 sec)\n```\n## MySQL 正则表达式 REGEXP\n\n```\n查找name字段中以'st'为开头的所有数据：\nmysql> SELECT name FROM person_tbl WHERE name REGEXP '^st';\n查找name字段中以'ok'为结尾的所有数据：\nmysql> SELECT name FROM person_tbl WHERE name REGEXP 'ok$';\n查找name字段中包含'mar'字符串的所有数据：\nmysql> SELECT name FROM person_tbl WHERE name REGEXP 'mar';\n查找name字段中以元音字符开头或以'ok'字符串结尾的所有数据：\nmysql> SELECT name FROM person_tbl WHERE name REGEXP '^[aeiou]|ok$';\n```\n## MySQL ALTER命令\n### 删除，添加字段\n\n```\nmysql> ALTER TABLE testalter_tbl  DROP i; 删除表的ｉ字段\nmysql> ALTER TABLE testalter_tbl ADD i INT;　添加表的ｉ字段并且为int型\n```\n### 修改字段类型及名称 在ALTER命令中使用 MODIFY 或 CHANGE 子句 。\n\n```\nmysql> ALTER TABLE testalter_tbl MODIFY c CHAR(10); 把字段 c 的类型从 CHAR(1) 改为 CHAR(10)\n\nmysql> ALTER TABLE testalter_tbl CHANGE j j INT; \n使用 CHANGE 子句, 语法有很大的不同。 在 CHANGE 关键字之后，紧跟着的是你要修改的字段名，然后指定新字段名及类型。\n```\n### 修改表名\n```\nALTER TABLE testalter_tbl RENAME TO alter_tbl; 将数据表 testalter_tbl 重命名为 alter_tbl\n```\n","source":"_posts/mysql.md","raw":"---\ntitle: Mysql 简易学习\ndate: 2017-04-15 15:20:33\ncategories: Mysql\ntags:\n     - Mysql\n---\n\n## mysql 连接到mysql服务器\n\n```\nmysql -u user -p password\n```\n## 管理MySQL的命令\n\n> - SHOW DATABASES; 列出 MySQL 数据库管理系统的数据库列表。 \n> - SHOW TABLES;显示指定数据库的所有表，使用该命令前需要使用 use 命令来选择要操作的数据库。\n> - SHOW COLUMNS FROM 数据表;显示数据表的属性，属性类型，主键信息 ，是否为 NULL，默认值等其他信息。\n> - SHOW INDEX FROM 数据表;显示数据表的详细索引信息，包括PRIMARY KEY（主键）。\n> - USE 数据库名；选择要操作的Mysql数据库，使用该命令后所有Mysql命令都只针对该数据库。\n\n## MySQL 创建数据库\n```\ncreate database 数据库名;\n```\n## MySQL 删除数据库\n```\ndrop database 数据库名;\n```\n## MySQL 创建数据表\n```\ncrate table tablename(\n  id int not null auto_increment,\n  name varchar(80) not null,\n  primary key(id)\n);\n```\n## MySQL 删除数据表\n```\ndrop table tablename;\n```\n## MySQL 清空数据表\n```\ntruncate 数据库名;\n```\n## MySQL 插入数据\n```\ninsert into tablename (field1, field2,...fieldN ) VALUES ( value1, value2,...valueN );\n```\n## MySQL where 子句\n```\nSELECT field1, field2,...fieldN FROM table_name1, table_name2... \n[WHERE condition1 [AND [OR]] condition2.....\n```\n## MySQL UPDATE 查询\n```\nUPDATE table_name SET field1=new-value1, field2=new-value2 [WHERE Clause]\n```\n\n> - 你可以同时更新一个或多个字段。\n> - 你可以在 WHERE 子句中指定任何条件。\n> - 你可以在一个单独表中同时更新数据。\n\n## MySQL DELETE 语句\n```\nDELETE FROM table_name [WHERE Clause]\n```\n## MySQL LIKE 子句\n\n```\nSELECT field1, field2,...fieldN from table_name1, table_name2... \nWHERE field1 LIKE condition1 [AND [OR]] filed2 = 'somevalue'\n\nselect name from user where name like \"%cai%\"\n```\n## MySQL UNION 操作符\n\n```\nMySQL UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中。多个 SELECT 语句会删除重复的数据。\nSELECT expression1, expression2, ... expression_n \nFROM tables [WHERE conditions]\nUNION [ALL | DISTINCT]\n\nSELECT expression1, expression2, ... expression_n FROM tables [WHERE conditions];\n\nSELECT country FROM Websites UNION SELECT country FROM apps ORDER BY country;\n```\n## MySQL 排序\n\n```\nSELECT field1, field2,...fieldN \nfrom table_name1, table_name2... \nORDER BY field1, [field2...] [ASC [DESC]]\n\nselect * from user order by name asc\n```\n## MySQL GROUP BY 语句\n\n```\nSELECT column_name, function(column_name)\nFROM table_name\nWHERE column_name operator value\nGROUP BY column_name;\n\nmysql> select * from user;\n+----+---------+------------+\n| id | name    | time_count |\n+----+---------+------------+\n|  1 | caicai2 |          1 |\n|  2 | caicai3 |          2 |\n|  3 | caicai3 |          3 |\n|  5 | caicai5 |          5 |\n|  6 | caicai5 |          5 |\n+----+---------+------------+\n\nmysql> select name,sum(time_count) from user group by name;　name字段对应的名字出现的总次数的和\n+---------+-----------------+\n| name    | sum(time_count) |\n+---------+-----------------+\n| caicai2 |               1 |\n| caicai3 |               5 |\n| caicai5 |              10 |\n+---------+-----------------+\n\nmysql> select name,count(time_count) from user group by name;　name字段对应的名字出现的次数　\n+---------+-------------------+\n| name    | count(time_count) |\n+---------+-------------------+\n| caicai2 |                 1 |\n| caicai3 |                 2 |\n| caicai5 |                 2 |\n+---------+-------------------+\n\n```\n## Mysql 连接的使用\n\n> - INNER JOIN（内连接,或等值连接）：获取两个表中字段匹配关系的记录。\n> - LEFT JOIN（左连接）：获取左表所有记录，即使右表没有对应匹配的记录。\n> - RIGHT JOIN（右连接）： 与 LEFT JOIN 相反，用于获取右表所有记录，即使左表没有对应匹配的记录。\n\n```\nmysql> SELECT * FROM tcount_tbl;\n+-----------------+----------------+\n| runoob_author | runoob_count |\n+-----------------+----------------+\n| mahran          |             20 |\n| mahnaz          |           NULL |\n| Jen             |           NULL |\n| Gill            |             20 |\n| John Poul       |              1 |\n| Sanjay          |              1 |\n+-----------------+----------------+\nmysql> SELECT * from runoob_tbl;\n+-------------+----------------+-----------------+-----------------+\n| runoob_id | runoob_title | runoob_author | submission_date |\n+-------------+----------------+-----------------+-----------------+\n|           1 | Learn PHP      | John Poul       | 2007-05-24      |\n|           2 | Learn MySQL    | Abdul S         | 2007-05-24      |\n|           3 | JAVA Tutorial  | Sanjay          | 2007-05-06      |\n+-------------+----------------+-----------------+-----------------+\n```\n### 内连接 INNER JOIN\n```\nmysql> SELECT a.runoob_id, a.runoob_author, b.runoob_count \nFROM runoob_tbl a \nINNER JOIN tcount_tbl b \nON a.runoob_author = b.runoob_author;\n\n+-----------+---------------+--------------+\n| runoob_id | runoob_author | runoob_count |\n+-----------+---------------+--------------+\n|         1 | John Poul     |            1 |\n|         3 | Sanjay        |            1 |\n+-----------+---------------+--------------+\n等价于\nmysql> SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a, tcount_tbl b WHERE a.runoob_author = b.runoob_author;\n+-------------+-----------------+----------------+\n| runoob_id | runoob_author | runoob_count |\n+-------------+-----------------+----------------+\n|           1 | John Poul       |              1 |\n|           3 | Sanjay          |              1 |\n+-------------+-----------------+----------------+\n```\n### 左连接 LEFT JOIN\n```\nmysql> SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a LEFT JOIN tcount_tbl b ON a.runoob_author = b.runoob_author;\n+-------------+-----------------+----------------+\n| runoob_id | runoob_author | runoob_count |\n+-------------+-----------------+----------------+\n|           1 | John Poul       |              1 |\n|           2 | Abdul S         |           NULL |\n|           3 | Sanjay          |              1 |\n+-------------+-----------------+----------------+\nLEFT JOIN，该语句会读取左边的数据表runoob_tbl的所有选取的字段数据，即便在右侧表tcount_tbl中没有对应的runoob_author字段值\n```\n### 右连接 RIGHT JOIN\n```\nmysql> SELECT b.runoob_id, b.runoob_author, a.runoob_count FROM tcount_tbl a LEFT JOIN runoob_tbl b ON a.runoob_author = b.runoob_author;\n+-------------+-----------------+----------------+\n| runoob_id | runoob_author | runoob_count |\n+-------------+-----------------+----------------+\n|           1 | John Poul       |              1 |\n|           2 | Abdul S         |           NULL |\n|           3 | Sanjay          |              1 |\n+-------------+-----------------+----------------+\nRIGHT JOIN，该语句会读取右边的数据表 runoob_tbl 的所有选取的字段数据，即便在左侧表tcount_tbl中没有对应的runoob_author字段值。\n```\n## MySQL NULL 值处理\n> - is null 　查询包括null的数据　\n\n```\nmysql> SELECT * FROM tcount_tbl WHERE runoob_count IS NULL;\n+-----------------+----------------+\n| runoob_author | runoob_count |\n+-----------------+----------------+\n| mahnaz          |           NULL |\n| Jen             |           NULL |\n+-----------------+----------------+\nmysql> SELECT * FROM tcount_tbl WHERE runoob_count = NULL;\nEmpty set (0.00 sec)\n```\n\n> - is not null 查询不包括null的数据\n\n```\nmysql> SELECT * from tcount_tbl \n       WHERE runoob_count IS NOT NULL;\n+-----------------+----------------+\n| runoob_author | runoob_count |\n+-----------------+----------------+\n| mahran          |             20 |\n| Gill            |             20 |\n+-----------------+----------------+\nmysql> SELECT * FROM tcount_tbl WHERE runoob_count != NULL;\nEmpty set (0.01 sec)\n```\n## MySQL 正则表达式 REGEXP\n\n```\n查找name字段中以'st'为开头的所有数据：\nmysql> SELECT name FROM person_tbl WHERE name REGEXP '^st';\n查找name字段中以'ok'为结尾的所有数据：\nmysql> SELECT name FROM person_tbl WHERE name REGEXP 'ok$';\n查找name字段中包含'mar'字符串的所有数据：\nmysql> SELECT name FROM person_tbl WHERE name REGEXP 'mar';\n查找name字段中以元音字符开头或以'ok'字符串结尾的所有数据：\nmysql> SELECT name FROM person_tbl WHERE name REGEXP '^[aeiou]|ok$';\n```\n## MySQL ALTER命令\n### 删除，添加字段\n\n```\nmysql> ALTER TABLE testalter_tbl  DROP i; 删除表的ｉ字段\nmysql> ALTER TABLE testalter_tbl ADD i INT;　添加表的ｉ字段并且为int型\n```\n### 修改字段类型及名称 在ALTER命令中使用 MODIFY 或 CHANGE 子句 。\n\n```\nmysql> ALTER TABLE testalter_tbl MODIFY c CHAR(10); 把字段 c 的类型从 CHAR(1) 改为 CHAR(10)\n\nmysql> ALTER TABLE testalter_tbl CHANGE j j INT; \n使用 CHANGE 子句, 语法有很大的不同。 在 CHANGE 关键字之后，紧跟着的是你要修改的字段名，然后指定新字段名及类型。\n```\n### 修改表名\n```\nALTER TABLE testalter_tbl RENAME TO alter_tbl; 将数据表 testalter_tbl 重命名为 alter_tbl\n```\n","slug":"mysql","published":1,"updated":"2020-03-23T11:05:23.945Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgbydgo20022ofo9ahawh4y4","content":"<h2 id=\"mysql-连接到mysql服务器\"><a href=\"#mysql-连接到mysql服务器\" class=\"headerlink\" title=\"mysql 连接到mysql服务器\"></a>mysql 连接到mysql服务器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u user -p password</span><br></pre></td></tr></table></figure>\n<h2 id=\"管理MySQL的命令\"><a href=\"#管理MySQL的命令\" class=\"headerlink\" title=\"管理MySQL的命令\"></a>管理MySQL的命令</h2><blockquote>\n<ul>\n<li>SHOW DATABASES; 列出 MySQL 数据库管理系统的数据库列表。 </li>\n<li>SHOW TABLES;显示指定数据库的所有表，使用该命令前需要使用 use 命令来选择要操作的数据库。</li>\n<li>SHOW COLUMNS FROM 数据表;显示数据表的属性，属性类型，主键信息 ，是否为 NULL，默认值等其他信息。</li>\n<li>SHOW INDEX FROM 数据表;显示数据表的详细索引信息，包括PRIMARY KEY（主键）。</li>\n<li>USE 数据库名；选择要操作的Mysql数据库，使用该命令后所有Mysql命令都只针对该数据库。</li>\n</ul>\n</blockquote>\n<h2 id=\"MySQL-创建数据库\"><a href=\"#MySQL-创建数据库\" class=\"headerlink\" title=\"MySQL 创建数据库\"></a>MySQL 创建数据库</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create database 数据库名;</span><br></pre></td></tr></table></figure>\n<h2 id=\"MySQL-删除数据库\"><a href=\"#MySQL-删除数据库\" class=\"headerlink\" title=\"MySQL 删除数据库\"></a>MySQL 删除数据库</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drop database 数据库名;</span><br></pre></td></tr></table></figure>\n<h2 id=\"MySQL-创建数据表\"><a href=\"#MySQL-创建数据表\" class=\"headerlink\" title=\"MySQL 创建数据表\"></a>MySQL 创建数据表</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crate table tablename(</span><br><span class=\"line\">  id int not null auto_increment,</span><br><span class=\"line\">  name varchar(80) not null,</span><br><span class=\"line\">  primary key(id)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h2 id=\"MySQL-删除数据表\"><a href=\"#MySQL-删除数据表\" class=\"headerlink\" title=\"MySQL 删除数据表\"></a>MySQL 删除数据表</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drop table tablename;</span><br></pre></td></tr></table></figure>\n<h2 id=\"MySQL-清空数据表\"><a href=\"#MySQL-清空数据表\" class=\"headerlink\" title=\"MySQL 清空数据表\"></a>MySQL 清空数据表</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">truncate 数据库名;</span><br></pre></td></tr></table></figure>\n<h2 id=\"MySQL-插入数据\"><a href=\"#MySQL-插入数据\" class=\"headerlink\" title=\"MySQL 插入数据\"></a>MySQL 插入数据</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">insert into tablename (field1, field2,...fieldN ) VALUES ( value1, value2,...valueN );</span><br></pre></td></tr></table></figure>\n<h2 id=\"MySQL-where-子句\"><a href=\"#MySQL-where-子句\" class=\"headerlink\" title=\"MySQL where 子句\"></a>MySQL where 子句</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT field1, field2,...fieldN FROM table_name1, table_name2... </span><br><span class=\"line\">[WHERE condition1 [AND [OR]] condition2.....</span><br></pre></td></tr></table></figure>\n<h2 id=\"MySQL-UPDATE-查询\"><a href=\"#MySQL-UPDATE-查询\" class=\"headerlink\" title=\"MySQL UPDATE 查询\"></a>MySQL UPDATE 查询</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE table_name SET field1=new-value1, field2=new-value2 [WHERE Clause]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>你可以同时更新一个或多个字段。</li>\n<li>你可以在 WHERE 子句中指定任何条件。</li>\n<li>你可以在一个单独表中同时更新数据。</li>\n</ul>\n</blockquote>\n<h2 id=\"MySQL-DELETE-语句\"><a href=\"#MySQL-DELETE-语句\" class=\"headerlink\" title=\"MySQL DELETE 语句\"></a>MySQL DELETE 语句</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELETE FROM table_name [WHERE Clause]</span><br></pre></td></tr></table></figure>\n<h2 id=\"MySQL-LIKE-子句\"><a href=\"#MySQL-LIKE-子句\" class=\"headerlink\" title=\"MySQL LIKE 子句\"></a>MySQL LIKE 子句</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT field1, field2,...fieldN from table_name1, table_name2... </span><br><span class=\"line\">WHERE field1 LIKE condition1 [AND [OR]] filed2 = &apos;somevalue&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">select name from user where name like &quot;%cai%&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"MySQL-UNION-操作符\"><a href=\"#MySQL-UNION-操作符\" class=\"headerlink\" title=\"MySQL UNION 操作符\"></a>MySQL UNION 操作符</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MySQL UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中。多个 SELECT 语句会删除重复的数据。</span><br><span class=\"line\">SELECT expression1, expression2, ... expression_n </span><br><span class=\"line\">FROM tables [WHERE conditions]</span><br><span class=\"line\">UNION [ALL | DISTINCT]</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT expression1, expression2, ... expression_n FROM tables [WHERE conditions];</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT country FROM Websites UNION SELECT country FROM apps ORDER BY country;</span><br></pre></td></tr></table></figure>\n<h2 id=\"MySQL-排序\"><a href=\"#MySQL-排序\" class=\"headerlink\" title=\"MySQL 排序\"></a>MySQL 排序</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT field1, field2,...fieldN </span><br><span class=\"line\">from table_name1, table_name2... </span><br><span class=\"line\">ORDER BY field1, [field2...] [ASC [DESC]]</span><br><span class=\"line\"></span><br><span class=\"line\">select * from user order by name asc</span><br></pre></td></tr></table></figure>\n<h2 id=\"MySQL-GROUP-BY-语句\"><a href=\"#MySQL-GROUP-BY-语句\" class=\"headerlink\" title=\"MySQL GROUP BY 语句\"></a>MySQL GROUP BY 语句</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT column_name, function(column_name)</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE column_name operator value</span><br><span class=\"line\">GROUP BY column_name;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select * from user;</span><br><span class=\"line\">+----+---------+------------+</span><br><span class=\"line\">| id | name    | time_count |</span><br><span class=\"line\">+----+---------+------------+</span><br><span class=\"line\">|  1 | caicai2 |          1 |</span><br><span class=\"line\">|  2 | caicai3 |          2 |</span><br><span class=\"line\">|  3 | caicai3 |          3 |</span><br><span class=\"line\">|  5 | caicai5 |          5 |</span><br><span class=\"line\">|  6 | caicai5 |          5 |</span><br><span class=\"line\">+----+---------+------------+</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select name,sum(time_count) from user group by name;　name字段对应的名字出现的总次数的和</span><br><span class=\"line\">+---------+-----------------+</span><br><span class=\"line\">| name    | sum(time_count) |</span><br><span class=\"line\">+---------+-----------------+</span><br><span class=\"line\">| caicai2 |               1 |</span><br><span class=\"line\">| caicai3 |               5 |</span><br><span class=\"line\">| caicai5 |              10 |</span><br><span class=\"line\">+---------+-----------------+</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select name,count(time_count) from user group by name;　name字段对应的名字出现的次数　</span><br><span class=\"line\">+---------+-------------------+</span><br><span class=\"line\">| name    | count(time_count) |</span><br><span class=\"line\">+---------+-------------------+</span><br><span class=\"line\">| caicai2 |                 1 |</span><br><span class=\"line\">| caicai3 |                 2 |</span><br><span class=\"line\">| caicai5 |                 2 |</span><br><span class=\"line\">+---------+-------------------+</span><br></pre></td></tr></table></figure>\n<h2 id=\"Mysql-连接的使用\"><a href=\"#Mysql-连接的使用\" class=\"headerlink\" title=\"Mysql 连接的使用\"></a>Mysql 连接的使用</h2><blockquote>\n<ul>\n<li>INNER JOIN（内连接,或等值连接）：获取两个表中字段匹配关系的记录。</li>\n<li>LEFT JOIN（左连接）：获取左表所有记录，即使右表没有对应匹配的记录。</li>\n<li>RIGHT JOIN（右连接）： 与 LEFT JOIN 相反，用于获取右表所有记录，即使左表没有对应匹配的记录。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT * FROM tcount_tbl;</span><br><span class=\"line\">+-----------------+----------------+</span><br><span class=\"line\">| runoob_author | runoob_count |</span><br><span class=\"line\">+-----------------+----------------+</span><br><span class=\"line\">| mahran          |             20 |</span><br><span class=\"line\">| mahnaz          |           NULL |</span><br><span class=\"line\">| Jen             |           NULL |</span><br><span class=\"line\">| Gill            |             20 |</span><br><span class=\"line\">| John Poul       |              1 |</span><br><span class=\"line\">| Sanjay          |              1 |</span><br><span class=\"line\">+-----------------+----------------+</span><br><span class=\"line\">mysql&gt; SELECT * from runoob_tbl;</span><br><span class=\"line\">+-------------+----------------+-----------------+-----------------+</span><br><span class=\"line\">| runoob_id | runoob_title | runoob_author | submission_date |</span><br><span class=\"line\">+-------------+----------------+-----------------+-----------------+</span><br><span class=\"line\">|           1 | Learn PHP      | John Poul       | 2007-05-24      |</span><br><span class=\"line\">|           2 | Learn MySQL    | Abdul S         | 2007-05-24      |</span><br><span class=\"line\">|           3 | JAVA Tutorial  | Sanjay          | 2007-05-06      |</span><br><span class=\"line\">+-------------+----------------+-----------------+-----------------+</span><br></pre></td></tr></table></figure>\n<h3 id=\"内连接-INNER-JOIN\"><a href=\"#内连接-INNER-JOIN\" class=\"headerlink\" title=\"内连接 INNER JOIN\"></a>内连接 INNER JOIN</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT a.runoob_id, a.runoob_author, b.runoob_count </span><br><span class=\"line\">FROM runoob_tbl a </span><br><span class=\"line\">INNER JOIN tcount_tbl b </span><br><span class=\"line\">ON a.runoob_author = b.runoob_author;</span><br><span class=\"line\"></span><br><span class=\"line\">+-----------+---------------+--------------+</span><br><span class=\"line\">| runoob_id | runoob_author | runoob_count |</span><br><span class=\"line\">+-----------+---------------+--------------+</span><br><span class=\"line\">|         1 | John Poul     |            1 |</span><br><span class=\"line\">|         3 | Sanjay        |            1 |</span><br><span class=\"line\">+-----------+---------------+--------------+</span><br><span class=\"line\">等价于</span><br><span class=\"line\">mysql&gt; SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a, tcount_tbl b WHERE a.runoob_author = b.runoob_author;</span><br><span class=\"line\">+-------------+-----------------+----------------+</span><br><span class=\"line\">| runoob_id | runoob_author | runoob_count |</span><br><span class=\"line\">+-------------+-----------------+----------------+</span><br><span class=\"line\">|           1 | John Poul       |              1 |</span><br><span class=\"line\">|           3 | Sanjay          |              1 |</span><br><span class=\"line\">+-------------+-----------------+----------------+</span><br></pre></td></tr></table></figure>\n<h3 id=\"左连接-LEFT-JOIN\"><a href=\"#左连接-LEFT-JOIN\" class=\"headerlink\" title=\"左连接 LEFT JOIN\"></a>左连接 LEFT JOIN</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a LEFT JOIN tcount_tbl b ON a.runoob_author = b.runoob_author;</span><br><span class=\"line\">+-------------+-----------------+----------------+</span><br><span class=\"line\">| runoob_id | runoob_author | runoob_count |</span><br><span class=\"line\">+-------------+-----------------+----------------+</span><br><span class=\"line\">|           1 | John Poul       |              1 |</span><br><span class=\"line\">|           2 | Abdul S         |           NULL |</span><br><span class=\"line\">|           3 | Sanjay          |              1 |</span><br><span class=\"line\">+-------------+-----------------+----------------+</span><br><span class=\"line\">LEFT JOIN，该语句会读取左边的数据表runoob_tbl的所有选取的字段数据，即便在右侧表tcount_tbl中没有对应的runoob_author字段值</span><br></pre></td></tr></table></figure>\n<h3 id=\"右连接-RIGHT-JOIN\"><a href=\"#右连接-RIGHT-JOIN\" class=\"headerlink\" title=\"右连接 RIGHT JOIN\"></a>右连接 RIGHT JOIN</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT b.runoob_id, b.runoob_author, a.runoob_count FROM tcount_tbl a LEFT JOIN runoob_tbl b ON a.runoob_author = b.runoob_author;</span><br><span class=\"line\">+-------------+-----------------+----------------+</span><br><span class=\"line\">| runoob_id | runoob_author | runoob_count |</span><br><span class=\"line\">+-------------+-----------------+----------------+</span><br><span class=\"line\">|           1 | John Poul       |              1 |</span><br><span class=\"line\">|           2 | Abdul S         |           NULL |</span><br><span class=\"line\">|           3 | Sanjay          |              1 |</span><br><span class=\"line\">+-------------+-----------------+----------------+</span><br><span class=\"line\">RIGHT JOIN，该语句会读取右边的数据表 runoob_tbl 的所有选取的字段数据，即便在左侧表tcount_tbl中没有对应的runoob_author字段值。</span><br></pre></td></tr></table></figure>\n<h2 id=\"MySQL-NULL-值处理\"><a href=\"#MySQL-NULL-值处理\" class=\"headerlink\" title=\"MySQL NULL 值处理\"></a>MySQL NULL 值处理</h2><blockquote>\n<ul>\n<li>is null 　查询包括null的数据　</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT * FROM tcount_tbl WHERE runoob_count IS NULL;</span><br><span class=\"line\">+-----------------+----------------+</span><br><span class=\"line\">| runoob_author | runoob_count |</span><br><span class=\"line\">+-----------------+----------------+</span><br><span class=\"line\">| mahnaz          |           NULL |</span><br><span class=\"line\">| Jen             |           NULL |</span><br><span class=\"line\">+-----------------+----------------+</span><br><span class=\"line\">mysql&gt; SELECT * FROM tcount_tbl WHERE runoob_count = NULL;</span><br><span class=\"line\">Empty set (0.00 sec)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>is not null 查询不包括null的数据</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT * from tcount_tbl </span><br><span class=\"line\">       WHERE runoob_count IS NOT NULL;</span><br><span class=\"line\">+-----------------+----------------+</span><br><span class=\"line\">| runoob_author | runoob_count |</span><br><span class=\"line\">+-----------------+----------------+</span><br><span class=\"line\">| mahran          |             20 |</span><br><span class=\"line\">| Gill            |             20 |</span><br><span class=\"line\">+-----------------+----------------+</span><br><span class=\"line\">mysql&gt; SELECT * FROM tcount_tbl WHERE runoob_count != NULL;</span><br><span class=\"line\">Empty set (0.01 sec)</span><br></pre></td></tr></table></figure>\n<h2 id=\"MySQL-正则表达式-REGEXP\"><a href=\"#MySQL-正则表达式-REGEXP\" class=\"headerlink\" title=\"MySQL 正则表达式 REGEXP\"></a>MySQL 正则表达式 REGEXP</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查找name字段中以&apos;st&apos;为开头的所有数据：</span><br><span class=\"line\">mysql&gt; SELECT name FROM person_tbl WHERE name REGEXP &apos;^st&apos;;</span><br><span class=\"line\">查找name字段中以&apos;ok&apos;为结尾的所有数据：</span><br><span class=\"line\">mysql&gt; SELECT name FROM person_tbl WHERE name REGEXP &apos;ok$&apos;;</span><br><span class=\"line\">查找name字段中包含&apos;mar&apos;字符串的所有数据：</span><br><span class=\"line\">mysql&gt; SELECT name FROM person_tbl WHERE name REGEXP &apos;mar&apos;;</span><br><span class=\"line\">查找name字段中以元音字符开头或以&apos;ok&apos;字符串结尾的所有数据：</span><br><span class=\"line\">mysql&gt; SELECT name FROM person_tbl WHERE name REGEXP &apos;^[aeiou]|ok$&apos;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"MySQL-ALTER命令\"><a href=\"#MySQL-ALTER命令\" class=\"headerlink\" title=\"MySQL ALTER命令\"></a>MySQL ALTER命令</h2><h3 id=\"删除，添加字段\"><a href=\"#删除，添加字段\" class=\"headerlink\" title=\"删除，添加字段\"></a>删除，添加字段</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; ALTER TABLE testalter_tbl  DROP i; 删除表的ｉ字段</span><br><span class=\"line\">mysql&gt; ALTER TABLE testalter_tbl ADD i INT;　添加表的ｉ字段并且为int型</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改字段类型及名称-在ALTER命令中使用-MODIFY-或-CHANGE-子句-。\"><a href=\"#修改字段类型及名称-在ALTER命令中使用-MODIFY-或-CHANGE-子句-。\" class=\"headerlink\" title=\"修改字段类型及名称 在ALTER命令中使用 MODIFY 或 CHANGE 子句 。\"></a>修改字段类型及名称 在ALTER命令中使用 MODIFY 或 CHANGE 子句 。</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; ALTER TABLE testalter_tbl MODIFY c CHAR(10); 把字段 c 的类型从 CHAR(1) 改为 CHAR(10)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; ALTER TABLE testalter_tbl CHANGE j j INT; </span><br><span class=\"line\">使用 CHANGE 子句, 语法有很大的不同。 在 CHANGE 关键字之后，紧跟着的是你要修改的字段名，然后指定新字段名及类型。</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改表名\"><a href=\"#修改表名\" class=\"headerlink\" title=\"修改表名\"></a>修改表名</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE testalter_tbl RENAME TO alter_tbl; 将数据表 testalter_tbl 重命名为 alter_tbl</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"mysql-连接到mysql服务器\"><a href=\"#mysql-连接到mysql服务器\" class=\"headerlink\" title=\"mysql 连接到mysql服务器\"></a>mysql 连接到mysql服务器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u user -p password</span><br></pre></td></tr></table></figure>\n<h2 id=\"管理MySQL的命令\"><a href=\"#管理MySQL的命令\" class=\"headerlink\" title=\"管理MySQL的命令\"></a>管理MySQL的命令</h2><blockquote>\n<ul>\n<li>SHOW DATABASES; 列出 MySQL 数据库管理系统的数据库列表。 </li>\n<li>SHOW TABLES;显示指定数据库的所有表，使用该命令前需要使用 use 命令来选择要操作的数据库。</li>\n<li>SHOW COLUMNS FROM 数据表;显示数据表的属性，属性类型，主键信息 ，是否为 NULL，默认值等其他信息。</li>\n<li>SHOW INDEX FROM 数据表;显示数据表的详细索引信息，包括PRIMARY KEY（主键）。</li>\n<li>USE 数据库名；选择要操作的Mysql数据库，使用该命令后所有Mysql命令都只针对该数据库。</li>\n</ul>\n</blockquote>\n<h2 id=\"MySQL-创建数据库\"><a href=\"#MySQL-创建数据库\" class=\"headerlink\" title=\"MySQL 创建数据库\"></a>MySQL 创建数据库</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create database 数据库名;</span><br></pre></td></tr></table></figure>\n<h2 id=\"MySQL-删除数据库\"><a href=\"#MySQL-删除数据库\" class=\"headerlink\" title=\"MySQL 删除数据库\"></a>MySQL 删除数据库</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drop database 数据库名;</span><br></pre></td></tr></table></figure>\n<h2 id=\"MySQL-创建数据表\"><a href=\"#MySQL-创建数据表\" class=\"headerlink\" title=\"MySQL 创建数据表\"></a>MySQL 创建数据表</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crate table tablename(</span><br><span class=\"line\">  id int not null auto_increment,</span><br><span class=\"line\">  name varchar(80) not null,</span><br><span class=\"line\">  primary key(id)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h2 id=\"MySQL-删除数据表\"><a href=\"#MySQL-删除数据表\" class=\"headerlink\" title=\"MySQL 删除数据表\"></a>MySQL 删除数据表</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drop table tablename;</span><br></pre></td></tr></table></figure>\n<h2 id=\"MySQL-清空数据表\"><a href=\"#MySQL-清空数据表\" class=\"headerlink\" title=\"MySQL 清空数据表\"></a>MySQL 清空数据表</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">truncate 数据库名;</span><br></pre></td></tr></table></figure>\n<h2 id=\"MySQL-插入数据\"><a href=\"#MySQL-插入数据\" class=\"headerlink\" title=\"MySQL 插入数据\"></a>MySQL 插入数据</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">insert into tablename (field1, field2,...fieldN ) VALUES ( value1, value2,...valueN );</span><br></pre></td></tr></table></figure>\n<h2 id=\"MySQL-where-子句\"><a href=\"#MySQL-where-子句\" class=\"headerlink\" title=\"MySQL where 子句\"></a>MySQL where 子句</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT field1, field2,...fieldN FROM table_name1, table_name2... </span><br><span class=\"line\">[WHERE condition1 [AND [OR]] condition2.....</span><br></pre></td></tr></table></figure>\n<h2 id=\"MySQL-UPDATE-查询\"><a href=\"#MySQL-UPDATE-查询\" class=\"headerlink\" title=\"MySQL UPDATE 查询\"></a>MySQL UPDATE 查询</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE table_name SET field1=new-value1, field2=new-value2 [WHERE Clause]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>你可以同时更新一个或多个字段。</li>\n<li>你可以在 WHERE 子句中指定任何条件。</li>\n<li>你可以在一个单独表中同时更新数据。</li>\n</ul>\n</blockquote>\n<h2 id=\"MySQL-DELETE-语句\"><a href=\"#MySQL-DELETE-语句\" class=\"headerlink\" title=\"MySQL DELETE 语句\"></a>MySQL DELETE 语句</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELETE FROM table_name [WHERE Clause]</span><br></pre></td></tr></table></figure>\n<h2 id=\"MySQL-LIKE-子句\"><a href=\"#MySQL-LIKE-子句\" class=\"headerlink\" title=\"MySQL LIKE 子句\"></a>MySQL LIKE 子句</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT field1, field2,...fieldN from table_name1, table_name2... </span><br><span class=\"line\">WHERE field1 LIKE condition1 [AND [OR]] filed2 = &apos;somevalue&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">select name from user where name like &quot;%cai%&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"MySQL-UNION-操作符\"><a href=\"#MySQL-UNION-操作符\" class=\"headerlink\" title=\"MySQL UNION 操作符\"></a>MySQL UNION 操作符</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MySQL UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中。多个 SELECT 语句会删除重复的数据。</span><br><span class=\"line\">SELECT expression1, expression2, ... expression_n </span><br><span class=\"line\">FROM tables [WHERE conditions]</span><br><span class=\"line\">UNION [ALL | DISTINCT]</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT expression1, expression2, ... expression_n FROM tables [WHERE conditions];</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT country FROM Websites UNION SELECT country FROM apps ORDER BY country;</span><br></pre></td></tr></table></figure>\n<h2 id=\"MySQL-排序\"><a href=\"#MySQL-排序\" class=\"headerlink\" title=\"MySQL 排序\"></a>MySQL 排序</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT field1, field2,...fieldN </span><br><span class=\"line\">from table_name1, table_name2... </span><br><span class=\"line\">ORDER BY field1, [field2...] [ASC [DESC]]</span><br><span class=\"line\"></span><br><span class=\"line\">select * from user order by name asc</span><br></pre></td></tr></table></figure>\n<h2 id=\"MySQL-GROUP-BY-语句\"><a href=\"#MySQL-GROUP-BY-语句\" class=\"headerlink\" title=\"MySQL GROUP BY 语句\"></a>MySQL GROUP BY 语句</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT column_name, function(column_name)</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE column_name operator value</span><br><span class=\"line\">GROUP BY column_name;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select * from user;</span><br><span class=\"line\">+----+---------+------------+</span><br><span class=\"line\">| id | name    | time_count |</span><br><span class=\"line\">+----+---------+------------+</span><br><span class=\"line\">|  1 | caicai2 |          1 |</span><br><span class=\"line\">|  2 | caicai3 |          2 |</span><br><span class=\"line\">|  3 | caicai3 |          3 |</span><br><span class=\"line\">|  5 | caicai5 |          5 |</span><br><span class=\"line\">|  6 | caicai5 |          5 |</span><br><span class=\"line\">+----+---------+------------+</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select name,sum(time_count) from user group by name;　name字段对应的名字出现的总次数的和</span><br><span class=\"line\">+---------+-----------------+</span><br><span class=\"line\">| name    | sum(time_count) |</span><br><span class=\"line\">+---------+-----------------+</span><br><span class=\"line\">| caicai2 |               1 |</span><br><span class=\"line\">| caicai3 |               5 |</span><br><span class=\"line\">| caicai5 |              10 |</span><br><span class=\"line\">+---------+-----------------+</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select name,count(time_count) from user group by name;　name字段对应的名字出现的次数　</span><br><span class=\"line\">+---------+-------------------+</span><br><span class=\"line\">| name    | count(time_count) |</span><br><span class=\"line\">+---------+-------------------+</span><br><span class=\"line\">| caicai2 |                 1 |</span><br><span class=\"line\">| caicai3 |                 2 |</span><br><span class=\"line\">| caicai5 |                 2 |</span><br><span class=\"line\">+---------+-------------------+</span><br></pre></td></tr></table></figure>\n<h2 id=\"Mysql-连接的使用\"><a href=\"#Mysql-连接的使用\" class=\"headerlink\" title=\"Mysql 连接的使用\"></a>Mysql 连接的使用</h2><blockquote>\n<ul>\n<li>INNER JOIN（内连接,或等值连接）：获取两个表中字段匹配关系的记录。</li>\n<li>LEFT JOIN（左连接）：获取左表所有记录，即使右表没有对应匹配的记录。</li>\n<li>RIGHT JOIN（右连接）： 与 LEFT JOIN 相反，用于获取右表所有记录，即使左表没有对应匹配的记录。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT * FROM tcount_tbl;</span><br><span class=\"line\">+-----------------+----------------+</span><br><span class=\"line\">| runoob_author | runoob_count |</span><br><span class=\"line\">+-----------------+----------------+</span><br><span class=\"line\">| mahran          |             20 |</span><br><span class=\"line\">| mahnaz          |           NULL |</span><br><span class=\"line\">| Jen             |           NULL |</span><br><span class=\"line\">| Gill            |             20 |</span><br><span class=\"line\">| John Poul       |              1 |</span><br><span class=\"line\">| Sanjay          |              1 |</span><br><span class=\"line\">+-----------------+----------------+</span><br><span class=\"line\">mysql&gt; SELECT * from runoob_tbl;</span><br><span class=\"line\">+-------------+----------------+-----------------+-----------------+</span><br><span class=\"line\">| runoob_id | runoob_title | runoob_author | submission_date |</span><br><span class=\"line\">+-------------+----------------+-----------------+-----------------+</span><br><span class=\"line\">|           1 | Learn PHP      | John Poul       | 2007-05-24      |</span><br><span class=\"line\">|           2 | Learn MySQL    | Abdul S         | 2007-05-24      |</span><br><span class=\"line\">|           3 | JAVA Tutorial  | Sanjay          | 2007-05-06      |</span><br><span class=\"line\">+-------------+----------------+-----------------+-----------------+</span><br></pre></td></tr></table></figure>\n<h3 id=\"内连接-INNER-JOIN\"><a href=\"#内连接-INNER-JOIN\" class=\"headerlink\" title=\"内连接 INNER JOIN\"></a>内连接 INNER JOIN</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT a.runoob_id, a.runoob_author, b.runoob_count </span><br><span class=\"line\">FROM runoob_tbl a </span><br><span class=\"line\">INNER JOIN tcount_tbl b </span><br><span class=\"line\">ON a.runoob_author = b.runoob_author;</span><br><span class=\"line\"></span><br><span class=\"line\">+-----------+---------------+--------------+</span><br><span class=\"line\">| runoob_id | runoob_author | runoob_count |</span><br><span class=\"line\">+-----------+---------------+--------------+</span><br><span class=\"line\">|         1 | John Poul     |            1 |</span><br><span class=\"line\">|         3 | Sanjay        |            1 |</span><br><span class=\"line\">+-----------+---------------+--------------+</span><br><span class=\"line\">等价于</span><br><span class=\"line\">mysql&gt; SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a, tcount_tbl b WHERE a.runoob_author = b.runoob_author;</span><br><span class=\"line\">+-------------+-----------------+----------------+</span><br><span class=\"line\">| runoob_id | runoob_author | runoob_count |</span><br><span class=\"line\">+-------------+-----------------+----------------+</span><br><span class=\"line\">|           1 | John Poul       |              1 |</span><br><span class=\"line\">|           3 | Sanjay          |              1 |</span><br><span class=\"line\">+-------------+-----------------+----------------+</span><br></pre></td></tr></table></figure>\n<h3 id=\"左连接-LEFT-JOIN\"><a href=\"#左连接-LEFT-JOIN\" class=\"headerlink\" title=\"左连接 LEFT JOIN\"></a>左连接 LEFT JOIN</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a LEFT JOIN tcount_tbl b ON a.runoob_author = b.runoob_author;</span><br><span class=\"line\">+-------------+-----------------+----------------+</span><br><span class=\"line\">| runoob_id | runoob_author | runoob_count |</span><br><span class=\"line\">+-------------+-----------------+----------------+</span><br><span class=\"line\">|           1 | John Poul       |              1 |</span><br><span class=\"line\">|           2 | Abdul S         |           NULL |</span><br><span class=\"line\">|           3 | Sanjay          |              1 |</span><br><span class=\"line\">+-------------+-----------------+----------------+</span><br><span class=\"line\">LEFT JOIN，该语句会读取左边的数据表runoob_tbl的所有选取的字段数据，即便在右侧表tcount_tbl中没有对应的runoob_author字段值</span><br></pre></td></tr></table></figure>\n<h3 id=\"右连接-RIGHT-JOIN\"><a href=\"#右连接-RIGHT-JOIN\" class=\"headerlink\" title=\"右连接 RIGHT JOIN\"></a>右连接 RIGHT JOIN</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT b.runoob_id, b.runoob_author, a.runoob_count FROM tcount_tbl a LEFT JOIN runoob_tbl b ON a.runoob_author = b.runoob_author;</span><br><span class=\"line\">+-------------+-----------------+----------------+</span><br><span class=\"line\">| runoob_id | runoob_author | runoob_count |</span><br><span class=\"line\">+-------------+-----------------+----------------+</span><br><span class=\"line\">|           1 | John Poul       |              1 |</span><br><span class=\"line\">|           2 | Abdul S         |           NULL |</span><br><span class=\"line\">|           3 | Sanjay          |              1 |</span><br><span class=\"line\">+-------------+-----------------+----------------+</span><br><span class=\"line\">RIGHT JOIN，该语句会读取右边的数据表 runoob_tbl 的所有选取的字段数据，即便在左侧表tcount_tbl中没有对应的runoob_author字段值。</span><br></pre></td></tr></table></figure>\n<h2 id=\"MySQL-NULL-值处理\"><a href=\"#MySQL-NULL-值处理\" class=\"headerlink\" title=\"MySQL NULL 值处理\"></a>MySQL NULL 值处理</h2><blockquote>\n<ul>\n<li>is null 　查询包括null的数据　</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT * FROM tcount_tbl WHERE runoob_count IS NULL;</span><br><span class=\"line\">+-----------------+----------------+</span><br><span class=\"line\">| runoob_author | runoob_count |</span><br><span class=\"line\">+-----------------+----------------+</span><br><span class=\"line\">| mahnaz          |           NULL |</span><br><span class=\"line\">| Jen             |           NULL |</span><br><span class=\"line\">+-----------------+----------------+</span><br><span class=\"line\">mysql&gt; SELECT * FROM tcount_tbl WHERE runoob_count = NULL;</span><br><span class=\"line\">Empty set (0.00 sec)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>is not null 查询不包括null的数据</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT * from tcount_tbl </span><br><span class=\"line\">       WHERE runoob_count IS NOT NULL;</span><br><span class=\"line\">+-----------------+----------------+</span><br><span class=\"line\">| runoob_author | runoob_count |</span><br><span class=\"line\">+-----------------+----------------+</span><br><span class=\"line\">| mahran          |             20 |</span><br><span class=\"line\">| Gill            |             20 |</span><br><span class=\"line\">+-----------------+----------------+</span><br><span class=\"line\">mysql&gt; SELECT * FROM tcount_tbl WHERE runoob_count != NULL;</span><br><span class=\"line\">Empty set (0.01 sec)</span><br></pre></td></tr></table></figure>\n<h2 id=\"MySQL-正则表达式-REGEXP\"><a href=\"#MySQL-正则表达式-REGEXP\" class=\"headerlink\" title=\"MySQL 正则表达式 REGEXP\"></a>MySQL 正则表达式 REGEXP</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查找name字段中以&apos;st&apos;为开头的所有数据：</span><br><span class=\"line\">mysql&gt; SELECT name FROM person_tbl WHERE name REGEXP &apos;^st&apos;;</span><br><span class=\"line\">查找name字段中以&apos;ok&apos;为结尾的所有数据：</span><br><span class=\"line\">mysql&gt; SELECT name FROM person_tbl WHERE name REGEXP &apos;ok$&apos;;</span><br><span class=\"line\">查找name字段中包含&apos;mar&apos;字符串的所有数据：</span><br><span class=\"line\">mysql&gt; SELECT name FROM person_tbl WHERE name REGEXP &apos;mar&apos;;</span><br><span class=\"line\">查找name字段中以元音字符开头或以&apos;ok&apos;字符串结尾的所有数据：</span><br><span class=\"line\">mysql&gt; SELECT name FROM person_tbl WHERE name REGEXP &apos;^[aeiou]|ok$&apos;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"MySQL-ALTER命令\"><a href=\"#MySQL-ALTER命令\" class=\"headerlink\" title=\"MySQL ALTER命令\"></a>MySQL ALTER命令</h2><h3 id=\"删除，添加字段\"><a href=\"#删除，添加字段\" class=\"headerlink\" title=\"删除，添加字段\"></a>删除，添加字段</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; ALTER TABLE testalter_tbl  DROP i; 删除表的ｉ字段</span><br><span class=\"line\">mysql&gt; ALTER TABLE testalter_tbl ADD i INT;　添加表的ｉ字段并且为int型</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改字段类型及名称-在ALTER命令中使用-MODIFY-或-CHANGE-子句-。\"><a href=\"#修改字段类型及名称-在ALTER命令中使用-MODIFY-或-CHANGE-子句-。\" class=\"headerlink\" title=\"修改字段类型及名称 在ALTER命令中使用 MODIFY 或 CHANGE 子句 。\"></a>修改字段类型及名称 在ALTER命令中使用 MODIFY 或 CHANGE 子句 。</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; ALTER TABLE testalter_tbl MODIFY c CHAR(10); 把字段 c 的类型从 CHAR(1) 改为 CHAR(10)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; ALTER TABLE testalter_tbl CHANGE j j INT; </span><br><span class=\"line\">使用 CHANGE 子句, 语法有很大的不同。 在 CHANGE 关键字之后，紧跟着的是你要修改的字段名，然后指定新字段名及类型。</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改表名\"><a href=\"#修改表名\" class=\"headerlink\" title=\"修改表名\"></a>修改表名</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE testalter_tbl RENAME TO alter_tbl; 将数据表 testalter_tbl 重命名为 alter_tbl</span><br></pre></td></tr></table></figure>\n"},{"title":"nodeJS开发指南","date":"2017-12-11T06:43:54.000Z","_content":"\n# nodeJS创建服务器\n\n```javascript 1.8\nvar http = require(\"http\");\nhttp.createServer(function(req, res) {\nres.writeHead(200, {'Content-Type': 'text/html'});\nres.write('<h1>Node.js</h1>');\nres.end('<p>Hello World</p>');\n}).listen(3000);\nconsole.log(\"HTTP server is listening at port 3000.\");\n```\n\n可以利用supervisor进行实时监控代码的修改 \n\n# 异步式I/O与事件编程\n\n## 阻塞\n\n线程在执行中如果遇到磁盘的读写和网络通信通常需要耗费较长时间,这时操作系统会剥夺该线程的CPU控制权,使其暂停执行,同时,将资源让给其它的工作线程,\n这种线程调度即为阻塞.\n\n## 同步式I/O和阻塞式I/O\n\n在阻塞的基础上,当I/O操作完毕时,操作系统将这个线程的阻塞解除,恢复其对CPU的控制权,另其继续执行\n\n## 非阻塞式的I/O和异步式的I/O\n\n针对所有的I/O操作不采用阻塞的策略,当线程遇到I/O操作时,不会以阻塞的方式等待I/O操作的完成或数据的返回,只是将I/O操作请求发送给操作系统,继续执行\n下一条语句,当操作系统完成I/O操作时,以事件的形式通知I/O操作的线程,线程会在特定的时间处理这个事件。\n为了处理异步 I/O，线程必须有事件循环，不断地检查有没有未处理的事件，依次予以处理。\n\n## 为什么 Node.js 使用了单线程、非阻塞的事件编程模式\n\n阻塞模式下，一个线程只能处理一项任务，要想提高吞吐量必须通过多线程。而非阻塞模式下，一个线程永远在执行计算操作，这个线程所使用的 CPU 核心利用率永远是 100%，\nI/O 以事件的方式通知。在阻塞模式下，多线程往往能提高系统吞吐量，因为一个线程阻塞时还有其他线程在工作，多线程可以让 CPU 资源不被阻塞中的线程浪费。而在非阻塞模式\n下，线程不会被 I/O 阻塞，永远在利用 CPU。多线程带来的好处仅仅是在多核 CPU 的情况下利用更多的核，而Node.js的单线程也能带来同样的好处\n\n## 事件\n\nNodeJS中的异步I/O操作在完成时都会发送一个事件到事件队列(都是通过一个事件去触发的回调函数)\n\n## NodeJS的事件循环机制\n\nNode.js 程序由事件循环开始，到事件循环结束，所有的逻辑都是事件的回调函数，所以 Node.js 始终在事件循环中，程序入口就是\n事件循环第一个事件的回调函数。事件的回调函数在执行的过程中，可能会发出 I/O 请求或直接发射（emit）事件，执行完毕后再返回事件循环，事件循环会检查事件队列中有没有未\n处理的事件，直到程序结束。\n\n## 包和模块\n\n模块即为平常自己写的js代码,然后通过exports或者module.export导出的\n\n包在模块的基础上更抽象一点,可以理解为实现了某个功能模块的集合\n\n### 创建包\n\nNodeJS的包是一个目录,其中包含一个JSON格式的包说明文件(package.json),严格符合CommonJS规范的包应该包括以下内容\n\n- package.json  必须在包的根目录下\n\n- bin目录        二进制文件\n\n- lib目录        JavaScript文件\n\n- DOC目录        文档目录\n\n- Test目录        测试目录\n\n-[ ]  简单的包 \n\n创建一个目录,在该目录下创建一个js文件,这种方法就将一个目录封装为一个模块,就是所谓的包(因为就是一个目录)\n\n```javascript 1.8\n//创建一个somepackage 目录\n\n//在该目录下创建一个index.js文件 \n\n// somepackage/index.js\nexports.hello = function() {\nconsole.log('Hello.');\n};\n\n// 然后在包外建立一个js文件 getsomepackage.js文件 ,引入刚才建立的包\n\nvar hello = require(\"./somepackage\").hello;\nhello() // Hello.\n```\n\n-[ ]  package.json\n\n在前面例子中的somepackage目录下创建一个package.json文件,然后将index.js改名为interface.js\n\n```json\n{\n    \"main\":\"./lib/interface.js\"\n}\n```\n\n继续调用这个包,依然可以访问,因为Node.js 在调用某个包时，会首先检查包中 package.json 文件的 main 字段，将其作为\n包的接口模块，如果 package.json 或 main 字段不存在，会尝试寻找 index.js 或 index.node 作为包的接口。\n\n### NodeJS包管理器\n\n1. 获取包 \n    \n    npm install [packageName]\n\n2. 全局包和本地包 \n\n    全局包  npm install -g [packageName]\n    \n    本地包  npm install 安装到跟目录下的node_modules\n    \n3. 创建全局链接\n    \n    全局--->本地\n    \n    安装一个包为全局的  npm install -g [packageName]\n    \n    如果想在项目下使用这个包,即可使用 npm link [packageName]\n    \n    本地--->全局\n    \n    在项目的根目录下(package.json所在的目录),运行npm link [packageName] 即可\n    \n4. 包的发布\n\n    1) 通过npm init 命令根据交互式回答完成package.json文件,创建一个入口文件,这样就生成了一个包\n    \n    2) 创建一个帐号,用于维护自己的包 npm adduser 根据提示输入自己的用户名 密码 邮箱 \n    \n    3) 通过npm whoami 检测是否拿到了帐号\n    \n    4) 然后在根目录下运行npm publish 然后就发布成功了\n    \n    5) 如果你的包将来有更新,请修改version字段,然后重新npm publish就可以了\n    \n    6) 卸载包 npm unpublish\n\n### NodeJS代码调试\n\n    1) 利用node debug  xxx.js 进行调试 \n    \n    2) node --debug-drk[=port] xxx.js进行调试  //这个会暂停js代码执行\n    \n    2) 利用node-inspector 调试NodeJS\n    \n    全局安装 npm install node-inspector -g \n    \n    然后在终端中通过 node --debug-brk=5858 xxx.js \n    \n    命令行启动 node-inspector \n    \n    在窗口中输入 localhost:8080/debug?port=5858\n\n<img src=\"http://caicaibrid.github.io/img/debug.png\" width=\"100%\"/>\n\n\n\n\n\n","source":"_posts/nodeJS开发指南.md","raw":"---\ntitle: nodeJS开发指南\ndate: 2017-12-11 14:43:54\ncategories: NodeJS\ntags:\n     - NodeJS\n---\n\n# nodeJS创建服务器\n\n```javascript 1.8\nvar http = require(\"http\");\nhttp.createServer(function(req, res) {\nres.writeHead(200, {'Content-Type': 'text/html'});\nres.write('<h1>Node.js</h1>');\nres.end('<p>Hello World</p>');\n}).listen(3000);\nconsole.log(\"HTTP server is listening at port 3000.\");\n```\n\n可以利用supervisor进行实时监控代码的修改 \n\n# 异步式I/O与事件编程\n\n## 阻塞\n\n线程在执行中如果遇到磁盘的读写和网络通信通常需要耗费较长时间,这时操作系统会剥夺该线程的CPU控制权,使其暂停执行,同时,将资源让给其它的工作线程,\n这种线程调度即为阻塞.\n\n## 同步式I/O和阻塞式I/O\n\n在阻塞的基础上,当I/O操作完毕时,操作系统将这个线程的阻塞解除,恢复其对CPU的控制权,另其继续执行\n\n## 非阻塞式的I/O和异步式的I/O\n\n针对所有的I/O操作不采用阻塞的策略,当线程遇到I/O操作时,不会以阻塞的方式等待I/O操作的完成或数据的返回,只是将I/O操作请求发送给操作系统,继续执行\n下一条语句,当操作系统完成I/O操作时,以事件的形式通知I/O操作的线程,线程会在特定的时间处理这个事件。\n为了处理异步 I/O，线程必须有事件循环，不断地检查有没有未处理的事件，依次予以处理。\n\n## 为什么 Node.js 使用了单线程、非阻塞的事件编程模式\n\n阻塞模式下，一个线程只能处理一项任务，要想提高吞吐量必须通过多线程。而非阻塞模式下，一个线程永远在执行计算操作，这个线程所使用的 CPU 核心利用率永远是 100%，\nI/O 以事件的方式通知。在阻塞模式下，多线程往往能提高系统吞吐量，因为一个线程阻塞时还有其他线程在工作，多线程可以让 CPU 资源不被阻塞中的线程浪费。而在非阻塞模式\n下，线程不会被 I/O 阻塞，永远在利用 CPU。多线程带来的好处仅仅是在多核 CPU 的情况下利用更多的核，而Node.js的单线程也能带来同样的好处\n\n## 事件\n\nNodeJS中的异步I/O操作在完成时都会发送一个事件到事件队列(都是通过一个事件去触发的回调函数)\n\n## NodeJS的事件循环机制\n\nNode.js 程序由事件循环开始，到事件循环结束，所有的逻辑都是事件的回调函数，所以 Node.js 始终在事件循环中，程序入口就是\n事件循环第一个事件的回调函数。事件的回调函数在执行的过程中，可能会发出 I/O 请求或直接发射（emit）事件，执行完毕后再返回事件循环，事件循环会检查事件队列中有没有未\n处理的事件，直到程序结束。\n\n## 包和模块\n\n模块即为平常自己写的js代码,然后通过exports或者module.export导出的\n\n包在模块的基础上更抽象一点,可以理解为实现了某个功能模块的集合\n\n### 创建包\n\nNodeJS的包是一个目录,其中包含一个JSON格式的包说明文件(package.json),严格符合CommonJS规范的包应该包括以下内容\n\n- package.json  必须在包的根目录下\n\n- bin目录        二进制文件\n\n- lib目录        JavaScript文件\n\n- DOC目录        文档目录\n\n- Test目录        测试目录\n\n-[ ]  简单的包 \n\n创建一个目录,在该目录下创建一个js文件,这种方法就将一个目录封装为一个模块,就是所谓的包(因为就是一个目录)\n\n```javascript 1.8\n//创建一个somepackage 目录\n\n//在该目录下创建一个index.js文件 \n\n// somepackage/index.js\nexports.hello = function() {\nconsole.log('Hello.');\n};\n\n// 然后在包外建立一个js文件 getsomepackage.js文件 ,引入刚才建立的包\n\nvar hello = require(\"./somepackage\").hello;\nhello() // Hello.\n```\n\n-[ ]  package.json\n\n在前面例子中的somepackage目录下创建一个package.json文件,然后将index.js改名为interface.js\n\n```json\n{\n    \"main\":\"./lib/interface.js\"\n}\n```\n\n继续调用这个包,依然可以访问,因为Node.js 在调用某个包时，会首先检查包中 package.json 文件的 main 字段，将其作为\n包的接口模块，如果 package.json 或 main 字段不存在，会尝试寻找 index.js 或 index.node 作为包的接口。\n\n### NodeJS包管理器\n\n1. 获取包 \n    \n    npm install [packageName]\n\n2. 全局包和本地包 \n\n    全局包  npm install -g [packageName]\n    \n    本地包  npm install 安装到跟目录下的node_modules\n    \n3. 创建全局链接\n    \n    全局--->本地\n    \n    安装一个包为全局的  npm install -g [packageName]\n    \n    如果想在项目下使用这个包,即可使用 npm link [packageName]\n    \n    本地--->全局\n    \n    在项目的根目录下(package.json所在的目录),运行npm link [packageName] 即可\n    \n4. 包的发布\n\n    1) 通过npm init 命令根据交互式回答完成package.json文件,创建一个入口文件,这样就生成了一个包\n    \n    2) 创建一个帐号,用于维护自己的包 npm adduser 根据提示输入自己的用户名 密码 邮箱 \n    \n    3) 通过npm whoami 检测是否拿到了帐号\n    \n    4) 然后在根目录下运行npm publish 然后就发布成功了\n    \n    5) 如果你的包将来有更新,请修改version字段,然后重新npm publish就可以了\n    \n    6) 卸载包 npm unpublish\n\n### NodeJS代码调试\n\n    1) 利用node debug  xxx.js 进行调试 \n    \n    2) node --debug-drk[=port] xxx.js进行调试  //这个会暂停js代码执行\n    \n    2) 利用node-inspector 调试NodeJS\n    \n    全局安装 npm install node-inspector -g \n    \n    然后在终端中通过 node --debug-brk=5858 xxx.js \n    \n    命令行启动 node-inspector \n    \n    在窗口中输入 localhost:8080/debug?port=5858\n\n<img src=\"http://caicaibrid.github.io/img/debug.png\" width=\"100%\"/>\n\n\n\n\n\n","slug":"nodeJS开发指南","published":1,"updated":"2020-03-23T11:05:23.945Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgbydgo30026ofo9tgbhits7","content":"<h1 id=\"nodeJS创建服务器\"><a href=\"#nodeJS创建服务器\" class=\"headerlink\" title=\"nodeJS创建服务器\"></a>nodeJS创建服务器</h1><figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</span><br><span class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">res.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/html'</span>&#125;);</span><br><span class=\"line\">res.write(<span class=\"string\">'&lt;h1&gt;Node.js&lt;/h1&gt;'</span>);</span><br><span class=\"line\">res.end(<span class=\"string\">'&lt;p&gt;Hello World&lt;/p&gt;'</span>);</span><br><span class=\"line\">&#125;).listen(<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"HTTP server is listening at port 3000.\"</span>);</span><br></pre></td></tr></table></figure>\n<p>可以利用supervisor进行实时监控代码的修改 </p>\n<h1 id=\"异步式I-O与事件编程\"><a href=\"#异步式I-O与事件编程\" class=\"headerlink\" title=\"异步式I/O与事件编程\"></a>异步式I/O与事件编程</h1><h2 id=\"阻塞\"><a href=\"#阻塞\" class=\"headerlink\" title=\"阻塞\"></a>阻塞</h2><p>线程在执行中如果遇到磁盘的读写和网络通信通常需要耗费较长时间,这时操作系统会剥夺该线程的CPU控制权,使其暂停执行,同时,将资源让给其它的工作线程,<br>这种线程调度即为阻塞.</p>\n<h2 id=\"同步式I-O和阻塞式I-O\"><a href=\"#同步式I-O和阻塞式I-O\" class=\"headerlink\" title=\"同步式I/O和阻塞式I/O\"></a>同步式I/O和阻塞式I/O</h2><p>在阻塞的基础上,当I/O操作完毕时,操作系统将这个线程的阻塞解除,恢复其对CPU的控制权,另其继续执行</p>\n<h2 id=\"非阻塞式的I-O和异步式的I-O\"><a href=\"#非阻塞式的I-O和异步式的I-O\" class=\"headerlink\" title=\"非阻塞式的I/O和异步式的I/O\"></a>非阻塞式的I/O和异步式的I/O</h2><p>针对所有的I/O操作不采用阻塞的策略,当线程遇到I/O操作时,不会以阻塞的方式等待I/O操作的完成或数据的返回,只是将I/O操作请求发送给操作系统,继续执行<br>下一条语句,当操作系统完成I/O操作时,以事件的形式通知I/O操作的线程,线程会在特定的时间处理这个事件。<br>为了处理异步 I/O，线程必须有事件循环，不断地检查有没有未处理的事件，依次予以处理。</p>\n<h2 id=\"为什么-Node-js-使用了单线程、非阻塞的事件编程模式\"><a href=\"#为什么-Node-js-使用了单线程、非阻塞的事件编程模式\" class=\"headerlink\" title=\"为什么 Node.js 使用了单线程、非阻塞的事件编程模式\"></a>为什么 Node.js 使用了单线程、非阻塞的事件编程模式</h2><p>阻塞模式下，一个线程只能处理一项任务，要想提高吞吐量必须通过多线程。而非阻塞模式下，一个线程永远在执行计算操作，这个线程所使用的 CPU 核心利用率永远是 100%，<br>I/O 以事件的方式通知。在阻塞模式下，多线程往往能提高系统吞吐量，因为一个线程阻塞时还有其他线程在工作，多线程可以让 CPU 资源不被阻塞中的线程浪费。而在非阻塞模式<br>下，线程不会被 I/O 阻塞，永远在利用 CPU。多线程带来的好处仅仅是在多核 CPU 的情况下利用更多的核，而Node.js的单线程也能带来同样的好处</p>\n<h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h2><p>NodeJS中的异步I/O操作在完成时都会发送一个事件到事件队列(都是通过一个事件去触发的回调函数)</p>\n<h2 id=\"NodeJS的事件循环机制\"><a href=\"#NodeJS的事件循环机制\" class=\"headerlink\" title=\"NodeJS的事件循环机制\"></a>NodeJS的事件循环机制</h2><p>Node.js 程序由事件循环开始，到事件循环结束，所有的逻辑都是事件的回调函数，所以 Node.js 始终在事件循环中，程序入口就是<br>事件循环第一个事件的回调函数。事件的回调函数在执行的过程中，可能会发出 I/O 请求或直接发射（emit）事件，执行完毕后再返回事件循环，事件循环会检查事件队列中有没有未<br>处理的事件，直到程序结束。</p>\n<h2 id=\"包和模块\"><a href=\"#包和模块\" class=\"headerlink\" title=\"包和模块\"></a>包和模块</h2><p>模块即为平常自己写的js代码,然后通过exports或者module.export导出的</p>\n<p>包在模块的基础上更抽象一点,可以理解为实现了某个功能模块的集合</p>\n<h3 id=\"创建包\"><a href=\"#创建包\" class=\"headerlink\" title=\"创建包\"></a>创建包</h3><p>NodeJS的包是一个目录,其中包含一个JSON格式的包说明文件(package.json),严格符合CommonJS规范的包应该包括以下内容</p>\n<ul>\n<li><p>package.json  必须在包的根目录下</p>\n</li>\n<li><p>bin目录        二进制文件</p>\n</li>\n<li><p>lib目录        JavaScript文件</p>\n</li>\n<li><p>DOC目录        文档目录</p>\n</li>\n<li><p>Test目录        测试目录</p>\n</li>\n</ul>\n<p>-[ ]  简单的包 </p>\n<p>创建一个目录,在该目录下创建一个js文件,这种方法就将一个目录封装为一个模块,就是所谓的包(因为就是一个目录)</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建一个somepackage 目录</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在该目录下创建一个index.js文件 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// somepackage/index.js</span></span><br><span class=\"line\">exports.hello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello.'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 然后在包外建立一个js文件 getsomepackage.js文件 ,引入刚才建立的包</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> hello = <span class=\"built_in\">require</span>(<span class=\"string\">\"./somepackage\"</span>).hello;</span><br><span class=\"line\">hello() <span class=\"comment\">// Hello.</span></span><br></pre></td></tr></table></figure>\n<p>-[ ]  package.json</p>\n<p>在前面例子中的somepackage目录下创建一个package.json文件,然后将index.js改名为interface.js</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"main\"</span>:<span class=\"string\">\"./lib/interface.js\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>继续调用这个包,依然可以访问,因为Node.js 在调用某个包时，会首先检查包中 package.json 文件的 main 字段，将其作为<br>包的接口模块，如果 package.json 或 main 字段不存在，会尝试寻找 index.js 或 index.node 作为包的接口。</p>\n<h3 id=\"NodeJS包管理器\"><a href=\"#NodeJS包管理器\" class=\"headerlink\" title=\"NodeJS包管理器\"></a>NodeJS包管理器</h3><ol>\n<li><p>获取包 </p>\n<p> npm install [packageName]</p>\n</li>\n<li><p>全局包和本地包 </p>\n<p> 全局包  npm install -g [packageName]</p>\n<p> 本地包  npm install 安装到跟目录下的node_modules</p>\n</li>\n<li><p>创建全局链接</p>\n<p> 全局—&gt;本地</p>\n<p> 安装一个包为全局的  npm install -g [packageName]</p>\n<p> 如果想在项目下使用这个包,即可使用 npm link [packageName]</p>\n<p> 本地—&gt;全局</p>\n<p> 在项目的根目录下(package.json所在的目录),运行npm link [packageName] 即可</p>\n</li>\n<li><p>包的发布</p>\n<p> 1) 通过npm init 命令根据交互式回答完成package.json文件,创建一个入口文件,这样就生成了一个包</p>\n<p> 2) 创建一个帐号,用于维护自己的包 npm adduser 根据提示输入自己的用户名 密码 邮箱 </p>\n<p> 3) 通过npm whoami 检测是否拿到了帐号</p>\n<p> 4) 然后在根目录下运行npm publish 然后就发布成功了</p>\n<p> 5) 如果你的包将来有更新,请修改version字段,然后重新npm publish就可以了</p>\n<p> 6) 卸载包 npm unpublish</p>\n</li>\n</ol>\n<h3 id=\"NodeJS代码调试\"><a href=\"#NodeJS代码调试\" class=\"headerlink\" title=\"NodeJS代码调试\"></a>NodeJS代码调试</h3><pre><code>1) 利用node debug  xxx.js 进行调试 \n\n2) node --debug-drk[=port] xxx.js进行调试  //这个会暂停js代码执行\n\n2) 利用node-inspector 调试NodeJS\n\n全局安装 npm install node-inspector -g \n\n然后在终端中通过 node --debug-brk=5858 xxx.js \n\n命令行启动 node-inspector \n\n在窗口中输入 localhost:8080/debug?port=5858\n</code></pre><p><img src=\"http://caicaibrid.github.io/img/debug.png\" width=\"100%\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"nodeJS创建服务器\"><a href=\"#nodeJS创建服务器\" class=\"headerlink\" title=\"nodeJS创建服务器\"></a>nodeJS创建服务器</h1><figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</span><br><span class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">res.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/html'</span>&#125;);</span><br><span class=\"line\">res.write(<span class=\"string\">'&lt;h1&gt;Node.js&lt;/h1&gt;'</span>);</span><br><span class=\"line\">res.end(<span class=\"string\">'&lt;p&gt;Hello World&lt;/p&gt;'</span>);</span><br><span class=\"line\">&#125;).listen(<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"HTTP server is listening at port 3000.\"</span>);</span><br></pre></td></tr></table></figure>\n<p>可以利用supervisor进行实时监控代码的修改 </p>\n<h1 id=\"异步式I-O与事件编程\"><a href=\"#异步式I-O与事件编程\" class=\"headerlink\" title=\"异步式I/O与事件编程\"></a>异步式I/O与事件编程</h1><h2 id=\"阻塞\"><a href=\"#阻塞\" class=\"headerlink\" title=\"阻塞\"></a>阻塞</h2><p>线程在执行中如果遇到磁盘的读写和网络通信通常需要耗费较长时间,这时操作系统会剥夺该线程的CPU控制权,使其暂停执行,同时,将资源让给其它的工作线程,<br>这种线程调度即为阻塞.</p>\n<h2 id=\"同步式I-O和阻塞式I-O\"><a href=\"#同步式I-O和阻塞式I-O\" class=\"headerlink\" title=\"同步式I/O和阻塞式I/O\"></a>同步式I/O和阻塞式I/O</h2><p>在阻塞的基础上,当I/O操作完毕时,操作系统将这个线程的阻塞解除,恢复其对CPU的控制权,另其继续执行</p>\n<h2 id=\"非阻塞式的I-O和异步式的I-O\"><a href=\"#非阻塞式的I-O和异步式的I-O\" class=\"headerlink\" title=\"非阻塞式的I/O和异步式的I/O\"></a>非阻塞式的I/O和异步式的I/O</h2><p>针对所有的I/O操作不采用阻塞的策略,当线程遇到I/O操作时,不会以阻塞的方式等待I/O操作的完成或数据的返回,只是将I/O操作请求发送给操作系统,继续执行<br>下一条语句,当操作系统完成I/O操作时,以事件的形式通知I/O操作的线程,线程会在特定的时间处理这个事件。<br>为了处理异步 I/O，线程必须有事件循环，不断地检查有没有未处理的事件，依次予以处理。</p>\n<h2 id=\"为什么-Node-js-使用了单线程、非阻塞的事件编程模式\"><a href=\"#为什么-Node-js-使用了单线程、非阻塞的事件编程模式\" class=\"headerlink\" title=\"为什么 Node.js 使用了单线程、非阻塞的事件编程模式\"></a>为什么 Node.js 使用了单线程、非阻塞的事件编程模式</h2><p>阻塞模式下，一个线程只能处理一项任务，要想提高吞吐量必须通过多线程。而非阻塞模式下，一个线程永远在执行计算操作，这个线程所使用的 CPU 核心利用率永远是 100%，<br>I/O 以事件的方式通知。在阻塞模式下，多线程往往能提高系统吞吐量，因为一个线程阻塞时还有其他线程在工作，多线程可以让 CPU 资源不被阻塞中的线程浪费。而在非阻塞模式<br>下，线程不会被 I/O 阻塞，永远在利用 CPU。多线程带来的好处仅仅是在多核 CPU 的情况下利用更多的核，而Node.js的单线程也能带来同样的好处</p>\n<h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h2><p>NodeJS中的异步I/O操作在完成时都会发送一个事件到事件队列(都是通过一个事件去触发的回调函数)</p>\n<h2 id=\"NodeJS的事件循环机制\"><a href=\"#NodeJS的事件循环机制\" class=\"headerlink\" title=\"NodeJS的事件循环机制\"></a>NodeJS的事件循环机制</h2><p>Node.js 程序由事件循环开始，到事件循环结束，所有的逻辑都是事件的回调函数，所以 Node.js 始终在事件循环中，程序入口就是<br>事件循环第一个事件的回调函数。事件的回调函数在执行的过程中，可能会发出 I/O 请求或直接发射（emit）事件，执行完毕后再返回事件循环，事件循环会检查事件队列中有没有未<br>处理的事件，直到程序结束。</p>\n<h2 id=\"包和模块\"><a href=\"#包和模块\" class=\"headerlink\" title=\"包和模块\"></a>包和模块</h2><p>模块即为平常自己写的js代码,然后通过exports或者module.export导出的</p>\n<p>包在模块的基础上更抽象一点,可以理解为实现了某个功能模块的集合</p>\n<h3 id=\"创建包\"><a href=\"#创建包\" class=\"headerlink\" title=\"创建包\"></a>创建包</h3><p>NodeJS的包是一个目录,其中包含一个JSON格式的包说明文件(package.json),严格符合CommonJS规范的包应该包括以下内容</p>\n<ul>\n<li><p>package.json  必须在包的根目录下</p>\n</li>\n<li><p>bin目录        二进制文件</p>\n</li>\n<li><p>lib目录        JavaScript文件</p>\n</li>\n<li><p>DOC目录        文档目录</p>\n</li>\n<li><p>Test目录        测试目录</p>\n</li>\n</ul>\n<p>-[ ]  简单的包 </p>\n<p>创建一个目录,在该目录下创建一个js文件,这种方法就将一个目录封装为一个模块,就是所谓的包(因为就是一个目录)</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建一个somepackage 目录</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在该目录下创建一个index.js文件 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// somepackage/index.js</span></span><br><span class=\"line\">exports.hello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello.'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 然后在包外建立一个js文件 getsomepackage.js文件 ,引入刚才建立的包</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> hello = <span class=\"built_in\">require</span>(<span class=\"string\">\"./somepackage\"</span>).hello;</span><br><span class=\"line\">hello() <span class=\"comment\">// Hello.</span></span><br></pre></td></tr></table></figure>\n<p>-[ ]  package.json</p>\n<p>在前面例子中的somepackage目录下创建一个package.json文件,然后将index.js改名为interface.js</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"main\"</span>:<span class=\"string\">\"./lib/interface.js\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>继续调用这个包,依然可以访问,因为Node.js 在调用某个包时，会首先检查包中 package.json 文件的 main 字段，将其作为<br>包的接口模块，如果 package.json 或 main 字段不存在，会尝试寻找 index.js 或 index.node 作为包的接口。</p>\n<h3 id=\"NodeJS包管理器\"><a href=\"#NodeJS包管理器\" class=\"headerlink\" title=\"NodeJS包管理器\"></a>NodeJS包管理器</h3><ol>\n<li><p>获取包 </p>\n<p> npm install [packageName]</p>\n</li>\n<li><p>全局包和本地包 </p>\n<p> 全局包  npm install -g [packageName]</p>\n<p> 本地包  npm install 安装到跟目录下的node_modules</p>\n</li>\n<li><p>创建全局链接</p>\n<p> 全局—&gt;本地</p>\n<p> 安装一个包为全局的  npm install -g [packageName]</p>\n<p> 如果想在项目下使用这个包,即可使用 npm link [packageName]</p>\n<p> 本地—&gt;全局</p>\n<p> 在项目的根目录下(package.json所在的目录),运行npm link [packageName] 即可</p>\n</li>\n<li><p>包的发布</p>\n<p> 1) 通过npm init 命令根据交互式回答完成package.json文件,创建一个入口文件,这样就生成了一个包</p>\n<p> 2) 创建一个帐号,用于维护自己的包 npm adduser 根据提示输入自己的用户名 密码 邮箱 </p>\n<p> 3) 通过npm whoami 检测是否拿到了帐号</p>\n<p> 4) 然后在根目录下运行npm publish 然后就发布成功了</p>\n<p> 5) 如果你的包将来有更新,请修改version字段,然后重新npm publish就可以了</p>\n<p> 6) 卸载包 npm unpublish</p>\n</li>\n</ol>\n<h3 id=\"NodeJS代码调试\"><a href=\"#NodeJS代码调试\" class=\"headerlink\" title=\"NodeJS代码调试\"></a>NodeJS代码调试</h3><pre><code>1) 利用node debug  xxx.js 进行调试 \n\n2) node --debug-drk[=port] xxx.js进行调试  //这个会暂停js代码执行\n\n2) 利用node-inspector 调试NodeJS\n\n全局安装 npm install node-inspector -g \n\n然后在终端中通过 node --debug-brk=5858 xxx.js \n\n命令行启动 node-inspector \n\n在窗口中输入 localhost:8080/debug?port=5858\n</code></pre><p><img src=\"http://caicaibrid.github.io/img/debug.png\" width=\"100%\"></p>\n"},{"title":"react总结","date":"2017-08-03T08:03:02.000Z","_content":"\n# react 总结\n\n[react-ppt下载](/img/react.ppt)\n\n## react 中的坑\n\n1. 获取store \n    \n   在子组件中通过设置 contextTypes ,然后在生命周期中通过 this.context.store 获取对应的 state dispatch subscribe 等方法\n   \n2. 父子组件通信\n\n   1). 可以通过props进行页面传值\n   \n   2). 可以通过context进行传值  (可以跨级传递数据)\n        \n        (1). 在父组件声明子组件的contextTypes接收类型的值 (childContextTypes)\n         \n         ```\n            FundManageDetail.childContextTypes = {\n                funding_doc:PropTypes.array,\n                props:PropTypes.object,\n            }\n         ```\n        (2). 在父组件中设置子组件的值 (getChildContext()) , getChildContext 该方法将funding_doc的值放在context中,同时必须声明了childrenContextTypes,这样子组件就可以获取了\n       \n        ```\n            getChildContext(){\n                return {\n                    funding_doc:this.state.funding_doc,\n                    props:this.props,\n                }\n            }\n        ```\n        \n        (3). 子组件通过获取父组件 childContextTypes 对象中设置对应子页面的字段类型的contextTypes\n        \n        (4). 子组件中就可以通过 this.context 获取到父组件传过来的值\n\n3. componentWillUpdate生命周期造成死循环(在组件接收到新的props或者state但还没有render时被调用)\n   \n   造成死循环的原因: 该生命周期在接收到新的props会被触发,但是在这里setState的话,也会触发该生命周期,因此造成死循环\n   \n   解决办法: 1). 可以直接在render里进行逻辑处理\n            \n            2). 通过 shouldComponentUpdate 生命周期进行判断是否需要触发render的更新\n            \n            3). 通过 componentWillReceiveProps 生命周期 (在组件接收到一个新的prop时被调用)\n            \n4. 在项目中同时使用 antd-mobeil 和 rcTable 的时候的一些坑\n\n    1). 可以滚动的 rcTable 嵌套在 tab 里面时,会造成 rcTable 的滚动条失效 \n        \n        解决办法: 将tab选项卡的 prop swipeable 改为 {false}\n         \n    2). 在使用 Popup 弹出层的时候,因为第一个参数为html结构,因此在弹出来以后,如果里面有个文本框在修改内容的时候,通过setState不会把值立马显示出来,\n        原因是因为需要再次Popup.show 这样才会显示\n        \n        解决办法: 将html结构写为一个组件,这样在输入的时候,其实改变的是html结构里的state,这样就会实时更新了\n        \n        官网事例:\n        \n        ```\n            import { Popup, List, Button, InputItem } from 'antd-mobile';\n            \n            class PopupContent extends React.Component {\n              state = {\n                sel: '',\n              };\n              onSel = (sel) => {\n                this.setState({ sel });\n                this.props.onClose();\n              };\n              render() {\n                return (\n                  <List renderHeader={() => `账户总览，选择了：${this.state.sel}`}>\n                    <List.Item\n                      thumb=\"https://zos.alipayobjects.com/rmsportal/dNuvNrtqUztHCwM.png\"\n                      onClick={() => { this.onSel('东吴证券'); }}\n                    >东吴证券</List.Item>\n                    <List.Item\n                      thumb=\"https://zos.alipayobjects.com/rmsportal/UmbJMbWOejVOpxe.png\"\n                      onClick={() => { this.onSel('西吴证券'); }}\n                    >西吴证券</List.Item>\n                    <InputItem value={this.state.val} onChange={val => this.setState({ val })}>输入内容</InputItem>\n                  </List>\n                );\n              }\n            }\n            \n            const Test = () => {\n              const onMaskClose = () => {\n                console.log('onMaskClose');\n                // also support Promise\n                // return new Promise((resolve) => {\n                //   console.log('1000ms 后关闭');\n                //   setTimeout(resolve, 1000);\n                // });\n              };\n              const onClick = (e) => {\n                e.preventDefault(); // 修复 Android 上点击穿透\n                Popup.show(<PopupContent onClose={() => Popup.hide()} />, { onMaskClose });\n              };\n              // newInstance() {\n              //  const ins = Popup.newInstance();\n              //  ins.show(<Button onClick={() => ins.hide()}>关闭</Button>);\n              // },\n              return (\n                <div style={{ padding: '0.3rem' }}>\n                  <Button onClick={onClick}>显示</Button>\n                </div>\n              );\n            };\n            \n            ReactDOM.render(<Test />, mountNode);\n        ```\n\n5. webpack中的一个坑,使用es6写完代码,打包的过程中,有些方法低级浏览器不可以识别,造成页面报错\n\n   例如: \"caicai\".repeat(3)  //es6写法  include some 等方法在低级浏览器都会报错\n         => //转化以后\n         \"caicai\".repeat(3)\n         \n   原因是因为没有配置:babel-polyfill  \n   \n   解决办法: 在webpack的入口处配置\n   \n   ```javascript 1.8\n        module.exports = {\n            entry: [\n                   require.resolve('webpack-dev-server/client') + '?/',\n                   require.resolve('webpack/hot/dev-server'),\n                   \"babel-polyfill\",// 垫片,加入是为了使用某个浏览器或者其他执行环境不支持的函数或者对象能够使用而添加的原型方法，或者第三方库\n                   paths.appIndexJs //入口文件\n               ]\n        } \n   ```\n   \n6. refs 可以通过设置 ref 属性获取对应的dom结构 this.refs.属性值\n\n7. 全局获取store 引入store.js (import store from '@/store/store.js') 通过 store.getState() 获取对应的store信息\n\n\n## 参考链接\n\n[react环境搭建](/file/react.txt)\n","source":"_posts/react总结.md","raw":"---\ntitle: react总结\ndate: 2017-08-03 16:03:02\ncategories: Javascript\ntags:\n    - Javascript\n---\n\n# react 总结\n\n[react-ppt下载](/img/react.ppt)\n\n## react 中的坑\n\n1. 获取store \n    \n   在子组件中通过设置 contextTypes ,然后在生命周期中通过 this.context.store 获取对应的 state dispatch subscribe 等方法\n   \n2. 父子组件通信\n\n   1). 可以通过props进行页面传值\n   \n   2). 可以通过context进行传值  (可以跨级传递数据)\n        \n        (1). 在父组件声明子组件的contextTypes接收类型的值 (childContextTypes)\n         \n         ```\n            FundManageDetail.childContextTypes = {\n                funding_doc:PropTypes.array,\n                props:PropTypes.object,\n            }\n         ```\n        (2). 在父组件中设置子组件的值 (getChildContext()) , getChildContext 该方法将funding_doc的值放在context中,同时必须声明了childrenContextTypes,这样子组件就可以获取了\n       \n        ```\n            getChildContext(){\n                return {\n                    funding_doc:this.state.funding_doc,\n                    props:this.props,\n                }\n            }\n        ```\n        \n        (3). 子组件通过获取父组件 childContextTypes 对象中设置对应子页面的字段类型的contextTypes\n        \n        (4). 子组件中就可以通过 this.context 获取到父组件传过来的值\n\n3. componentWillUpdate生命周期造成死循环(在组件接收到新的props或者state但还没有render时被调用)\n   \n   造成死循环的原因: 该生命周期在接收到新的props会被触发,但是在这里setState的话,也会触发该生命周期,因此造成死循环\n   \n   解决办法: 1). 可以直接在render里进行逻辑处理\n            \n            2). 通过 shouldComponentUpdate 生命周期进行判断是否需要触发render的更新\n            \n            3). 通过 componentWillReceiveProps 生命周期 (在组件接收到一个新的prop时被调用)\n            \n4. 在项目中同时使用 antd-mobeil 和 rcTable 的时候的一些坑\n\n    1). 可以滚动的 rcTable 嵌套在 tab 里面时,会造成 rcTable 的滚动条失效 \n        \n        解决办法: 将tab选项卡的 prop swipeable 改为 {false}\n         \n    2). 在使用 Popup 弹出层的时候,因为第一个参数为html结构,因此在弹出来以后,如果里面有个文本框在修改内容的时候,通过setState不会把值立马显示出来,\n        原因是因为需要再次Popup.show 这样才会显示\n        \n        解决办法: 将html结构写为一个组件,这样在输入的时候,其实改变的是html结构里的state,这样就会实时更新了\n        \n        官网事例:\n        \n        ```\n            import { Popup, List, Button, InputItem } from 'antd-mobile';\n            \n            class PopupContent extends React.Component {\n              state = {\n                sel: '',\n              };\n              onSel = (sel) => {\n                this.setState({ sel });\n                this.props.onClose();\n              };\n              render() {\n                return (\n                  <List renderHeader={() => `账户总览，选择了：${this.state.sel}`}>\n                    <List.Item\n                      thumb=\"https://zos.alipayobjects.com/rmsportal/dNuvNrtqUztHCwM.png\"\n                      onClick={() => { this.onSel('东吴证券'); }}\n                    >东吴证券</List.Item>\n                    <List.Item\n                      thumb=\"https://zos.alipayobjects.com/rmsportal/UmbJMbWOejVOpxe.png\"\n                      onClick={() => { this.onSel('西吴证券'); }}\n                    >西吴证券</List.Item>\n                    <InputItem value={this.state.val} onChange={val => this.setState({ val })}>输入内容</InputItem>\n                  </List>\n                );\n              }\n            }\n            \n            const Test = () => {\n              const onMaskClose = () => {\n                console.log('onMaskClose');\n                // also support Promise\n                // return new Promise((resolve) => {\n                //   console.log('1000ms 后关闭');\n                //   setTimeout(resolve, 1000);\n                // });\n              };\n              const onClick = (e) => {\n                e.preventDefault(); // 修复 Android 上点击穿透\n                Popup.show(<PopupContent onClose={() => Popup.hide()} />, { onMaskClose });\n              };\n              // newInstance() {\n              //  const ins = Popup.newInstance();\n              //  ins.show(<Button onClick={() => ins.hide()}>关闭</Button>);\n              // },\n              return (\n                <div style={{ padding: '0.3rem' }}>\n                  <Button onClick={onClick}>显示</Button>\n                </div>\n              );\n            };\n            \n            ReactDOM.render(<Test />, mountNode);\n        ```\n\n5. webpack中的一个坑,使用es6写完代码,打包的过程中,有些方法低级浏览器不可以识别,造成页面报错\n\n   例如: \"caicai\".repeat(3)  //es6写法  include some 等方法在低级浏览器都会报错\n         => //转化以后\n         \"caicai\".repeat(3)\n         \n   原因是因为没有配置:babel-polyfill  \n   \n   解决办法: 在webpack的入口处配置\n   \n   ```javascript 1.8\n        module.exports = {\n            entry: [\n                   require.resolve('webpack-dev-server/client') + '?/',\n                   require.resolve('webpack/hot/dev-server'),\n                   \"babel-polyfill\",// 垫片,加入是为了使用某个浏览器或者其他执行环境不支持的函数或者对象能够使用而添加的原型方法，或者第三方库\n                   paths.appIndexJs //入口文件\n               ]\n        } \n   ```\n   \n6. refs 可以通过设置 ref 属性获取对应的dom结构 this.refs.属性值\n\n7. 全局获取store 引入store.js (import store from '@/store/store.js') 通过 store.getState() 获取对应的store信息\n\n\n## 参考链接\n\n[react环境搭建](/file/react.txt)\n","slug":"react总结","published":1,"updated":"2020-03-23T11:05:23.945Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgbydgo4002aofo91gmkvfj2","content":"<h1 id=\"react-总结\"><a href=\"#react-总结\" class=\"headerlink\" title=\"react 总结\"></a>react 总结</h1><p><a href=\"/img/react.ppt\">react-ppt下载</a></p>\n<h2 id=\"react-中的坑\"><a href=\"#react-中的坑\" class=\"headerlink\" title=\"react 中的坑\"></a>react 中的坑</h2><ol>\n<li><p>获取store </p>\n<p>在子组件中通过设置 contextTypes ,然后在生命周期中通过 this.context.store 获取对应的 state dispatch subscribe 等方法</p>\n</li>\n<li><p>父子组件通信</p>\n<p>1). 可以通过props进行页面传值</p>\n<p>2). 可以通过context进行传值  (可以跨级传递数据)</p>\n<pre><code>(1). 在父组件声明子组件的contextTypes接收类型的值 (childContextTypes)\n\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FundManageDetail.childContextTypes = &#123;</span><br><span class=\"line\">    funding_doc:PropTypes.array,</span><br><span class=\"line\">    props:PropTypes.object,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n(2). 在父组件中设置子组件的值 (getChildContext()) , getChildContext 该方法将funding_doc的值放在context中,同时必须声明了childrenContextTypes,这样子组件就可以获取了\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getChildContext()&#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        funding_doc:this.state.funding_doc,</span><br><span class=\"line\">        props:this.props,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre></li>\n</ol>\n<pre><code>(3). 子组件通过获取父组件 childContextTypes 对象中设置对应子页面的字段类型的contextTypes\n\n(4). 子组件中就可以通过 this.context 获取到父组件传过来的值\n</code></pre><ol start=\"3\">\n<li><p>componentWillUpdate生命周期造成死循环(在组件接收到新的props或者state但还没有render时被调用)</p>\n<p>造成死循环的原因: 该生命周期在接收到新的props会被触发,但是在这里setState的话,也会触发该生命周期,因此造成死循环</p>\n<p>解决办法: 1). 可以直接在render里进行逻辑处理</p>\n<pre><code>2). 通过 shouldComponentUpdate 生命周期进行判断是否需要触发render的更新\n\n3). 通过 componentWillReceiveProps 生命周期 (在组件接收到一个新的prop时被调用)\n</code></pre></li>\n<li><p>在项目中同时使用 antd-mobeil 和 rcTable 的时候的一些坑</p>\n<p> 1). 可以滚动的 rcTable 嵌套在 tab 里面时,会造成 rcTable 的滚动条失效 </p>\n<pre><code>解决办法: 将tab选项卡的 prop swipeable 改为 {false}\n</code></pre><p> 2). 在使用 Popup 弹出层的时候,因为第一个参数为html结构,因此在弹出来以后,如果里面有个文本框在修改内容的时候,通过setState不会把值立马显示出来,</p>\n<pre><code>原因是因为需要再次Popup.show 这样才会显示\n\n解决办法: 将html结构写为一个组件,这样在输入的时候,其实改变的是html结构里的state,这样就会实时更新了\n\n官网事例:\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; Popup, List, Button, InputItem &#125; from &apos;antd-mobile&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class PopupContent extends React.Component &#123;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    sel: &apos;&apos;,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  onSel = (sel) =&gt; &#123;</span><br><span class=\"line\">    this.setState(&#123; sel &#125;);</span><br><span class=\"line\">    this.props.onClose();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;List renderHeader=&#123;() =&gt; `账户总览，选择了：$&#123;this.state.sel&#125;`&#125;&gt;</span><br><span class=\"line\">        &lt;List.Item</span><br><span class=\"line\">          thumb=&quot;https://zos.alipayobjects.com/rmsportal/dNuvNrtqUztHCwM.png&quot;</span><br><span class=\"line\">          onClick=&#123;() =&gt; &#123; this.onSel(&apos;东吴证券&apos;); &#125;&#125;</span><br><span class=\"line\">        &gt;东吴证券&lt;/List.Item&gt;</span><br><span class=\"line\">        &lt;List.Item</span><br><span class=\"line\">          thumb=&quot;https://zos.alipayobjects.com/rmsportal/UmbJMbWOejVOpxe.png&quot;</span><br><span class=\"line\">          onClick=&#123;() =&gt; &#123; this.onSel(&apos;西吴证券&apos;); &#125;&#125;</span><br><span class=\"line\">        &gt;西吴证券&lt;/List.Item&gt;</span><br><span class=\"line\">        &lt;InputItem value=&#123;this.state.val&#125; onChange=&#123;val =&gt; this.setState(&#123; val &#125;)&#125;&gt;输入内容&lt;/InputItem&gt;</span><br><span class=\"line\">      &lt;/List&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const Test = () =&gt; &#123;</span><br><span class=\"line\">  const onMaskClose = () =&gt; &#123;</span><br><span class=\"line\">    console.log(&apos;onMaskClose&apos;);</span><br><span class=\"line\">    // also support Promise</span><br><span class=\"line\">    // return new Promise((resolve) =&gt; &#123;</span><br><span class=\"line\">    //   console.log(&apos;1000ms 后关闭&apos;);</span><br><span class=\"line\">    //   setTimeout(resolve, 1000);</span><br><span class=\"line\">    // &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  const onClick = (e) =&gt; &#123;</span><br><span class=\"line\">    e.preventDefault(); // 修复 Android 上点击穿透</span><br><span class=\"line\">    Popup.show(&lt;PopupContent onClose=&#123;() =&gt; Popup.hide()&#125; /&gt;, &#123; onMaskClose &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  // newInstance() &#123;</span><br><span class=\"line\">  //  const ins = Popup.newInstance();</span><br><span class=\"line\">  //  ins.show(&lt;Button onClick=&#123;() =&gt; ins.hide()&#125;&gt;关闭&lt;/Button&gt;);</span><br><span class=\"line\">  // &#125;,</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div style=&#123;&#123; padding: &apos;0.3rem&apos; &#125;&#125;&gt;</span><br><span class=\"line\">      &lt;Button onClick=&#123;onClick&#125;&gt;显示&lt;/Button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(&lt;Test /&gt;, mountNode);</span><br></pre></td></tr></table></figure>\n</code></pre></li>\n<li><p>webpack中的一个坑,使用es6写完代码,打包的过程中,有些方法低级浏览器不可以识别,造成页面报错</p>\n<p>例如: “caicai”.repeat(3)  //es6写法  include some 等方法在低级浏览器都会报错</p>\n<pre><code>=&gt; //转化以后\n&quot;caicai&quot;.repeat(3)\n</code></pre><p>原因是因为没有配置:babel-polyfill  </p>\n<p>解决办法: 在webpack的入口处配置</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: [</span><br><span class=\"line\">           <span class=\"built_in\">require</span>.resolve(<span class=\"string\">'webpack-dev-server/client'</span>) + <span class=\"string\">'?/'</span>,</span><br><span class=\"line\">           <span class=\"built_in\">require</span>.resolve(<span class=\"string\">'webpack/hot/dev-server'</span>),</span><br><span class=\"line\">           <span class=\"string\">\"babel-polyfill\"</span>,<span class=\"comment\">// 垫片,加入是为了使用某个浏览器或者其他执行环境不支持的函数或者对象能够使用而添加的原型方法，或者第三方库</span></span><br><span class=\"line\">           paths.appIndexJs <span class=\"comment\">//入口文件</span></span><br><span class=\"line\">       ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"6\">\n<li><p>refs 可以通过设置 ref 属性获取对应的dom结构 this.refs.属性值</p>\n</li>\n<li><p>全局获取store 引入store.js (import store from ‘@/store/store.js’) 通过 store.getState() 获取对应的store信息</p>\n</li>\n</ol>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"/file/react.txt\">react环境搭建</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"react-总结\"><a href=\"#react-总结\" class=\"headerlink\" title=\"react 总结\"></a>react 总结</h1><p><a href=\"/img/react.ppt\">react-ppt下载</a></p>\n<h2 id=\"react-中的坑\"><a href=\"#react-中的坑\" class=\"headerlink\" title=\"react 中的坑\"></a>react 中的坑</h2><ol>\n<li><p>获取store </p>\n<p>在子组件中通过设置 contextTypes ,然后在生命周期中通过 this.context.store 获取对应的 state dispatch subscribe 等方法</p>\n</li>\n<li><p>父子组件通信</p>\n<p>1). 可以通过props进行页面传值</p>\n<p>2). 可以通过context进行传值  (可以跨级传递数据)</p>\n<pre><code>(1). 在父组件声明子组件的contextTypes接收类型的值 (childContextTypes)\n\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FundManageDetail.childContextTypes = &#123;</span><br><span class=\"line\">    funding_doc:PropTypes.array,</span><br><span class=\"line\">    props:PropTypes.object,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n(2). 在父组件中设置子组件的值 (getChildContext()) , getChildContext 该方法将funding_doc的值放在context中,同时必须声明了childrenContextTypes,这样子组件就可以获取了\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getChildContext()&#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        funding_doc:this.state.funding_doc,</span><br><span class=\"line\">        props:this.props,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre></li>\n</ol>\n<pre><code>(3). 子组件通过获取父组件 childContextTypes 对象中设置对应子页面的字段类型的contextTypes\n\n(4). 子组件中就可以通过 this.context 获取到父组件传过来的值\n</code></pre><ol start=\"3\">\n<li><p>componentWillUpdate生命周期造成死循环(在组件接收到新的props或者state但还没有render时被调用)</p>\n<p>造成死循环的原因: 该生命周期在接收到新的props会被触发,但是在这里setState的话,也会触发该生命周期,因此造成死循环</p>\n<p>解决办法: 1). 可以直接在render里进行逻辑处理</p>\n<pre><code>2). 通过 shouldComponentUpdate 生命周期进行判断是否需要触发render的更新\n\n3). 通过 componentWillReceiveProps 生命周期 (在组件接收到一个新的prop时被调用)\n</code></pre></li>\n<li><p>在项目中同时使用 antd-mobeil 和 rcTable 的时候的一些坑</p>\n<p> 1). 可以滚动的 rcTable 嵌套在 tab 里面时,会造成 rcTable 的滚动条失效 </p>\n<pre><code>解决办法: 将tab选项卡的 prop swipeable 改为 {false}\n</code></pre><p> 2). 在使用 Popup 弹出层的时候,因为第一个参数为html结构,因此在弹出来以后,如果里面有个文本框在修改内容的时候,通过setState不会把值立马显示出来,</p>\n<pre><code>原因是因为需要再次Popup.show 这样才会显示\n\n解决办法: 将html结构写为一个组件,这样在输入的时候,其实改变的是html结构里的state,这样就会实时更新了\n\n官网事例:\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; Popup, List, Button, InputItem &#125; from &apos;antd-mobile&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class PopupContent extends React.Component &#123;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    sel: &apos;&apos;,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  onSel = (sel) =&gt; &#123;</span><br><span class=\"line\">    this.setState(&#123; sel &#125;);</span><br><span class=\"line\">    this.props.onClose();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;List renderHeader=&#123;() =&gt; `账户总览，选择了：$&#123;this.state.sel&#125;`&#125;&gt;</span><br><span class=\"line\">        &lt;List.Item</span><br><span class=\"line\">          thumb=&quot;https://zos.alipayobjects.com/rmsportal/dNuvNrtqUztHCwM.png&quot;</span><br><span class=\"line\">          onClick=&#123;() =&gt; &#123; this.onSel(&apos;东吴证券&apos;); &#125;&#125;</span><br><span class=\"line\">        &gt;东吴证券&lt;/List.Item&gt;</span><br><span class=\"line\">        &lt;List.Item</span><br><span class=\"line\">          thumb=&quot;https://zos.alipayobjects.com/rmsportal/UmbJMbWOejVOpxe.png&quot;</span><br><span class=\"line\">          onClick=&#123;() =&gt; &#123; this.onSel(&apos;西吴证券&apos;); &#125;&#125;</span><br><span class=\"line\">        &gt;西吴证券&lt;/List.Item&gt;</span><br><span class=\"line\">        &lt;InputItem value=&#123;this.state.val&#125; onChange=&#123;val =&gt; this.setState(&#123; val &#125;)&#125;&gt;输入内容&lt;/InputItem&gt;</span><br><span class=\"line\">      &lt;/List&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const Test = () =&gt; &#123;</span><br><span class=\"line\">  const onMaskClose = () =&gt; &#123;</span><br><span class=\"line\">    console.log(&apos;onMaskClose&apos;);</span><br><span class=\"line\">    // also support Promise</span><br><span class=\"line\">    // return new Promise((resolve) =&gt; &#123;</span><br><span class=\"line\">    //   console.log(&apos;1000ms 后关闭&apos;);</span><br><span class=\"line\">    //   setTimeout(resolve, 1000);</span><br><span class=\"line\">    // &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  const onClick = (e) =&gt; &#123;</span><br><span class=\"line\">    e.preventDefault(); // 修复 Android 上点击穿透</span><br><span class=\"line\">    Popup.show(&lt;PopupContent onClose=&#123;() =&gt; Popup.hide()&#125; /&gt;, &#123; onMaskClose &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  // newInstance() &#123;</span><br><span class=\"line\">  //  const ins = Popup.newInstance();</span><br><span class=\"line\">  //  ins.show(&lt;Button onClick=&#123;() =&gt; ins.hide()&#125;&gt;关闭&lt;/Button&gt;);</span><br><span class=\"line\">  // &#125;,</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div style=&#123;&#123; padding: &apos;0.3rem&apos; &#125;&#125;&gt;</span><br><span class=\"line\">      &lt;Button onClick=&#123;onClick&#125;&gt;显示&lt;/Button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(&lt;Test /&gt;, mountNode);</span><br></pre></td></tr></table></figure>\n</code></pre></li>\n<li><p>webpack中的一个坑,使用es6写完代码,打包的过程中,有些方法低级浏览器不可以识别,造成页面报错</p>\n<p>例如: “caicai”.repeat(3)  //es6写法  include some 等方法在低级浏览器都会报错</p>\n<pre><code>=&gt; //转化以后\n&quot;caicai&quot;.repeat(3)\n</code></pre><p>原因是因为没有配置:babel-polyfill  </p>\n<p>解决办法: 在webpack的入口处配置</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: [</span><br><span class=\"line\">           <span class=\"built_in\">require</span>.resolve(<span class=\"string\">'webpack-dev-server/client'</span>) + <span class=\"string\">'?/'</span>,</span><br><span class=\"line\">           <span class=\"built_in\">require</span>.resolve(<span class=\"string\">'webpack/hot/dev-server'</span>),</span><br><span class=\"line\">           <span class=\"string\">\"babel-polyfill\"</span>,<span class=\"comment\">// 垫片,加入是为了使用某个浏览器或者其他执行环境不支持的函数或者对象能够使用而添加的原型方法，或者第三方库</span></span><br><span class=\"line\">           paths.appIndexJs <span class=\"comment\">//入口文件</span></span><br><span class=\"line\">       ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"6\">\n<li><p>refs 可以通过设置 ref 属性获取对应的dom结构 this.refs.属性值</p>\n</li>\n<li><p>全局获取store 引入store.js (import store from ‘@/store/store.js’) 通过 store.getState() 获取对应的store信息</p>\n</li>\n</ol>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"/file/react.txt\">react环境搭建</a></p>\n"},{"title":"sass中的Map","date":"2017-07-01T09:54:17.000Z","_content":"### Map\n\n> * map 常常被称为数据地图，也有人称其为数组，因为他总是以 key:value 成对的出现\n\n```css\n// 以下为一个map\n$map:(\n    $key:value,\n    ...\n)\n$theme-color: (\n    default: (\n        bgcolor: #fff,\n        text-color: #444,\n        link-color: #39f\n    ),\n    primary:(\n        bgcolor: #000,\n        text-color:#fff,\n        link-color: #93f\n    ),\n    negative: (\n        bgcolor: #f36,\n        text-color: #fefefe,\n        link-color: #d4e\n    )\n);\n```\n\n> * map-get($map,$key) 根据 $key 参数，返回 $key 在 $map 中对应的 value 值。如果 $key 不存在 $map中，将返回 null 值。\n\n```css\n$social-colors: (\n    dribble: #ea4c89,\n    facebook: #3b5998,\n    github: #171515,\n    google: #db4437,\n    twitter: #55acee\n);\n.btn-dribble{\n  color: map-get($social-colors,facebook);\n}\n//编译结果\n.btn-dribble {\n  color: #3b5998; }\n```\n\n> * map-has-key($map,$key) 函数将返回一个布尔值。当 $map 中有这个 $key，则函数返回 true，否则返回 false\n\n```css\n$social-colors: (\n    dribble: #ea4c89,\n    facebook: #3b5998,\n    github: #171515,\n    google: #db4437,\n    twitter: #55acee\n);\n@function colors($color){\n    @if not map-has-key($social-colors,$color){\n        @warn \"No color found for `#{$color}` in $social-colors map. Property omitted.\";\n    }\n    @return map-get($social-colors,$color);\n}\n.btn-dribble {\n    color: colors(dribble);\n}\n.btn-facebook {\n    color: colors(facebook);\n}\n.btn-github {\n    color: colors(github);\n}\n.btn-google {\n    color: colors(google);\n}\n.btn-twitter {\n    color: colors(twitter);\n}\n.btn-weibo {\n    color: colors(weibo);\n}\n//编译结果\nWARNING: No color found for `weibo` in $social-colors map. Property omitted.\n         on line 10 of ./8457/5JPS/index.scss\n.btn-dribble {\n  color: #ea4c89; }\n.btn-facebook {\n  color: #3b5998; }\n.btn-github {\n  color: #171515; }\n.btn-google {\n  color: #db4437; }\n.btn-twitter {\n  color: #55acee; }\n```\n\n> * map-keys($map) 函数将会返回 $map 中的所有 key。这些值赋予给一个变量，那他就是一个列表\n\n```css\n$social-colors: (\n    dribble: #ea4c89,\n    facebook: #3b5998,\n    github: #171515,\n    google: #db4437,\n    twitter: #55acee\n);\nmap-keys($social-colors);\n= > \"dribble\",\"facebook\",\"github\",\"google\",\"twitter\"\n```\n\n> * map-values($map) 类似于 map-keys($map) 功能，不同的是 map-values($map )获取的是 $map 的所有 value 值\n\n```css\n$social-colors: (\n    dribble: #ea4c89,\n    facebook: #3b5998,\n    github: #171515,\n    google: #db4437,\n    twitter: #55acee\n);\nmap-values($social-colors);\n= > #ea4c89,#3b5998,#171515,#db4437,#55acee\n```\n\n> * map-merge($map1,$map2) 函数是将 $map1 和 $map2 合并，然后得到一个新的 $map\n\n```css\n$color: (\n    text: #f36,\n    link: #f63,\n    border: #ddd,\n    backround: #fff\n);\n$typo:(\n    font-size: 12px,\n    line-height: 1.6\n);\n$newmap: map-merge($color,$typo);\n=> $newmap:(\n       text: #f36,\n       link: #f63,\n       border: #ddd,\n       background: #fff,\n       font-size: 12px,\n       line-height: 1.6\n   );\n```\n\n> * map-remove($map,$key) \n\n1. map-remove($map,$key) 函数是用来删除当前 $map 中的某一个 $key，从而得到一个新的 map。其返回的值还是一个 map。他并不能直接从一个 map 中删除另一个 map，仅能通过删除 map 中的某个 key 得到新 map。\n2. 如果删除的 key 并不存在于 $map 中，那么 map-remove() 函数返回的新 map 和以前的 map 一样。 \n\n```css\n$social-colors: (\n    dribble: #ea4c89,\n    facebook: #3b5998,\n    github: #171515,\n    google: #db4437,\n    twitter: #55acee\n);\n$map:map-remove($social-colors,dribble);\n=> $map:(\n       facebook: #3b5998,\n       github: #171515,\n       google: #db4437,\n       twitter: #55acee\n   );\n```\n","source":"_posts/sass中的Map.md","raw":"---\ntitle: sass中的Map\ndate: 2017-07-01 17:54:17\ntags:\n    - Sass\ncategories: Sass\n---\n### Map\n\n> * map 常常被称为数据地图，也有人称其为数组，因为他总是以 key:value 成对的出现\n\n```css\n// 以下为一个map\n$map:(\n    $key:value,\n    ...\n)\n$theme-color: (\n    default: (\n        bgcolor: #fff,\n        text-color: #444,\n        link-color: #39f\n    ),\n    primary:(\n        bgcolor: #000,\n        text-color:#fff,\n        link-color: #93f\n    ),\n    negative: (\n        bgcolor: #f36,\n        text-color: #fefefe,\n        link-color: #d4e\n    )\n);\n```\n\n> * map-get($map,$key) 根据 $key 参数，返回 $key 在 $map 中对应的 value 值。如果 $key 不存在 $map中，将返回 null 值。\n\n```css\n$social-colors: (\n    dribble: #ea4c89,\n    facebook: #3b5998,\n    github: #171515,\n    google: #db4437,\n    twitter: #55acee\n);\n.btn-dribble{\n  color: map-get($social-colors,facebook);\n}\n//编译结果\n.btn-dribble {\n  color: #3b5998; }\n```\n\n> * map-has-key($map,$key) 函数将返回一个布尔值。当 $map 中有这个 $key，则函数返回 true，否则返回 false\n\n```css\n$social-colors: (\n    dribble: #ea4c89,\n    facebook: #3b5998,\n    github: #171515,\n    google: #db4437,\n    twitter: #55acee\n);\n@function colors($color){\n    @if not map-has-key($social-colors,$color){\n        @warn \"No color found for `#{$color}` in $social-colors map. Property omitted.\";\n    }\n    @return map-get($social-colors,$color);\n}\n.btn-dribble {\n    color: colors(dribble);\n}\n.btn-facebook {\n    color: colors(facebook);\n}\n.btn-github {\n    color: colors(github);\n}\n.btn-google {\n    color: colors(google);\n}\n.btn-twitter {\n    color: colors(twitter);\n}\n.btn-weibo {\n    color: colors(weibo);\n}\n//编译结果\nWARNING: No color found for `weibo` in $social-colors map. Property omitted.\n         on line 10 of ./8457/5JPS/index.scss\n.btn-dribble {\n  color: #ea4c89; }\n.btn-facebook {\n  color: #3b5998; }\n.btn-github {\n  color: #171515; }\n.btn-google {\n  color: #db4437; }\n.btn-twitter {\n  color: #55acee; }\n```\n\n> * map-keys($map) 函数将会返回 $map 中的所有 key。这些值赋予给一个变量，那他就是一个列表\n\n```css\n$social-colors: (\n    dribble: #ea4c89,\n    facebook: #3b5998,\n    github: #171515,\n    google: #db4437,\n    twitter: #55acee\n);\nmap-keys($social-colors);\n= > \"dribble\",\"facebook\",\"github\",\"google\",\"twitter\"\n```\n\n> * map-values($map) 类似于 map-keys($map) 功能，不同的是 map-values($map )获取的是 $map 的所有 value 值\n\n```css\n$social-colors: (\n    dribble: #ea4c89,\n    facebook: #3b5998,\n    github: #171515,\n    google: #db4437,\n    twitter: #55acee\n);\nmap-values($social-colors);\n= > #ea4c89,#3b5998,#171515,#db4437,#55acee\n```\n\n> * map-merge($map1,$map2) 函数是将 $map1 和 $map2 合并，然后得到一个新的 $map\n\n```css\n$color: (\n    text: #f36,\n    link: #f63,\n    border: #ddd,\n    backround: #fff\n);\n$typo:(\n    font-size: 12px,\n    line-height: 1.6\n);\n$newmap: map-merge($color,$typo);\n=> $newmap:(\n       text: #f36,\n       link: #f63,\n       border: #ddd,\n       background: #fff,\n       font-size: 12px,\n       line-height: 1.6\n   );\n```\n\n> * map-remove($map,$key) \n\n1. map-remove($map,$key) 函数是用来删除当前 $map 中的某一个 $key，从而得到一个新的 map。其返回的值还是一个 map。他并不能直接从一个 map 中删除另一个 map，仅能通过删除 map 中的某个 key 得到新 map。\n2. 如果删除的 key 并不存在于 $map 中，那么 map-remove() 函数返回的新 map 和以前的 map 一样。 \n\n```css\n$social-colors: (\n    dribble: #ea4c89,\n    facebook: #3b5998,\n    github: #171515,\n    google: #db4437,\n    twitter: #55acee\n);\n$map:map-remove($social-colors,dribble);\n=> $map:(\n       facebook: #3b5998,\n       github: #171515,\n       google: #db4437,\n       twitter: #55acee\n   );\n```\n","slug":"sass中的Map","published":1,"updated":"2020-03-23T11:05:23.945Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgbydgo5002dofo9gykjt0bw","content":"<h3 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h3><blockquote>\n<ul>\n<li>map 常常被称为数据地图，也有人称其为数组，因为他总是以 key:value 成对的出现</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 以下为一个map</span><br><span class=\"line\">$map:(</span><br><span class=\"line\">    $key:value,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">)</span><br><span class=\"line\">$theme-color: (</span><br><span class=\"line\">    <span class=\"selector-tag\">default</span>: (</span><br><span class=\"line\">        <span class=\"selector-tag\">bgcolor</span>: <span class=\"selector-id\">#fff</span>,</span><br><span class=\"line\">        <span class=\"selector-tag\">text-color</span>: <span class=\"selector-id\">#444</span>,</span><br><span class=\"line\">        <span class=\"selector-tag\">link-color</span>: <span class=\"selector-id\">#39f</span></span><br><span class=\"line\">    ),</span><br><span class=\"line\">    <span class=\"selector-tag\">primary</span><span class=\"selector-pseudo\">:(</span></span><br><span class=\"line\">        <span class=\"selector-tag\">bgcolor</span>: <span class=\"selector-id\">#000</span>,</span><br><span class=\"line\">        <span class=\"selector-tag\">text-color</span>:<span class=\"selector-id\">#fff</span>,</span><br><span class=\"line\">        <span class=\"selector-tag\">link-color</span>: <span class=\"selector-id\">#93f</span></span><br><span class=\"line\">    ),</span><br><span class=\"line\">    <span class=\"selector-tag\">negative</span>: (</span><br><span class=\"line\">        <span class=\"selector-tag\">bgcolor</span>: <span class=\"selector-id\">#f36</span>,</span><br><span class=\"line\">        <span class=\"selector-tag\">text-color</span>: <span class=\"selector-id\">#fefefe</span>,</span><br><span class=\"line\">        <span class=\"selector-tag\">link-color</span>: <span class=\"selector-id\">#d4e</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>map-get($map,$key) 根据 $key 参数，返回 $key 在 $map 中对应的 value 值。如果 $key 不存在 $map中，将返回 null 值。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$social-colors: (</span><br><span class=\"line\">    <span class=\"selector-tag\">dribble</span>: <span class=\"selector-id\">#ea4c89</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">facebook</span>: <span class=\"selector-id\">#3b5998</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">github</span>: <span class=\"selector-id\">#171515</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">google</span>: <span class=\"selector-id\">#db4437</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">twitter</span>: <span class=\"selector-id\">#55acee</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"selector-class\">.btn-dribble</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">map-get</span>($social-colors,facebook);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//编译结果</span><br><span class=\"line\"><span class=\"selector-class\">.btn-dribble</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#3b5998</span>; &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>map-has-key($map,$key) 函数将返回一个布尔值。当 $map 中有这个 $key，则函数返回 true，否则返回 false</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$social-colors: (</span><br><span class=\"line\">    <span class=\"selector-tag\">dribble</span>: <span class=\"selector-id\">#ea4c89</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">facebook</span>: <span class=\"selector-id\">#3b5998</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">github</span>: <span class=\"selector-id\">#171515</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">google</span>: <span class=\"selector-id\">#db4437</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">twitter</span>: <span class=\"selector-id\">#55acee</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">@function</span> colors($color)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@if</span> <span class=\"keyword\">not</span> map-has-key($social-colors,$color)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">@warn</span> <span class=\"string\">\"No color found for `#&#123;$color&#125;` in $social-colors map. Property omitted.\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">@return</span> map-get($social-colors,$color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.btn-dribble</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"built_in\">colors</span>(dribble);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.btn-facebook</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"built_in\">colors</span>(facebook);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.btn-github</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"built_in\">colors</span>(github);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.btn-google</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"built_in\">colors</span>(google);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.btn-twitter</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"built_in\">colors</span>(twitter);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.btn-weibo</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"built_in\">colors</span>(weibo);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//编译结果</span><br><span class=\"line\">WARNING: No color found for `weibo` in $social-colors map. Property omitted.</span><br><span class=\"line\">         on line 10 of ./8457/5JPS/index.scss</span><br><span class=\"line\"><span class=\"selector-class\">.btn-dribble</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#ea4c89</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.btn-facebook</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#3b5998</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.btn-github</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#171515</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.btn-google</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#db4437</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.btn-twitter</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#55acee</span>; &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>map-keys($map) 函数将会返回 $map 中的所有 key。这些值赋予给一个变量，那他就是一个列表</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$social-colors: (</span><br><span class=\"line\">    <span class=\"selector-tag\">dribble</span>: <span class=\"selector-id\">#ea4c89</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">facebook</span>: <span class=\"selector-id\">#3b5998</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">github</span>: <span class=\"selector-id\">#171515</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">google</span>: <span class=\"selector-id\">#db4437</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">twitter</span>: <span class=\"selector-id\">#55acee</span></span><br><span class=\"line\">);</span><br><span class=\"line\">map-keys($social-colors);</span><br><span class=\"line\">= &gt; \"dribble\",\"facebook\",\"github\",\"google\",\"twitter\"</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>map-values($map) 类似于 map-keys($map) 功能，不同的是 map-values($map )获取的是 $map 的所有 value 值</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$social-colors: (</span><br><span class=\"line\">    <span class=\"selector-tag\">dribble</span>: <span class=\"selector-id\">#ea4c89</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">facebook</span>: <span class=\"selector-id\">#3b5998</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">github</span>: <span class=\"selector-id\">#171515</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">google</span>: <span class=\"selector-id\">#db4437</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">twitter</span>: <span class=\"selector-id\">#55acee</span></span><br><span class=\"line\">);</span><br><span class=\"line\">map-values($social-colors);</span><br><span class=\"line\">= &gt; #ea4c89,#3b5998,#171515,#db4437,#55acee</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>map-merge($map1,$map2) 函数是将 $map1 和 $map2 合并，然后得到一个新的 $map</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$color: (</span><br><span class=\"line\">    <span class=\"selector-tag\">text</span>: <span class=\"selector-id\">#f36</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">link</span>: <span class=\"selector-id\">#f63</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">border</span>: <span class=\"selector-id\">#ddd</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">backround</span>: <span class=\"selector-id\">#fff</span></span><br><span class=\"line\">);</span><br><span class=\"line\">$typo:(</span><br><span class=\"line\">    <span class=\"selector-tag\">font-size</span>: 12<span class=\"selector-tag\">px</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">line-height</span>: 1<span class=\"selector-class\">.6</span></span><br><span class=\"line\">);</span><br><span class=\"line\">$newmap: map-merge($color,$typo);</span><br><span class=\"line\">=&gt; $newmap:(</span><br><span class=\"line\">       <span class=\"selector-tag\">text</span>: <span class=\"selector-id\">#f36</span>,</span><br><span class=\"line\">       <span class=\"selector-tag\">link</span>: <span class=\"selector-id\">#f63</span>,</span><br><span class=\"line\">       <span class=\"selector-tag\">border</span>: <span class=\"selector-id\">#ddd</span>,</span><br><span class=\"line\">       <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#fff</span>,</span><br><span class=\"line\">       <span class=\"selector-tag\">font-size</span>: 12<span class=\"selector-tag\">px</span>,</span><br><span class=\"line\">       <span class=\"selector-tag\">line-height</span>: 1<span class=\"selector-class\">.6</span></span><br><span class=\"line\">   );</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>map-remove($map,$key) </li>\n</ul>\n</blockquote>\n<ol>\n<li>map-remove($map,$key) 函数是用来删除当前 $map 中的某一个 $key，从而得到一个新的 map。其返回的值还是一个 map。他并不能直接从一个 map 中删除另一个 map，仅能通过删除 map 中的某个 key 得到新 map。</li>\n<li>如果删除的 key 并不存在于 $map 中，那么 map-remove() 函数返回的新 map 和以前的 map 一样。 </li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$social-colors: (</span><br><span class=\"line\">    <span class=\"selector-tag\">dribble</span>: <span class=\"selector-id\">#ea4c89</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">facebook</span>: <span class=\"selector-id\">#3b5998</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">github</span>: <span class=\"selector-id\">#171515</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">google</span>: <span class=\"selector-id\">#db4437</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">twitter</span>: <span class=\"selector-id\">#55acee</span></span><br><span class=\"line\">);</span><br><span class=\"line\">$map:map-remove($social-colors,dribble);</span><br><span class=\"line\">=&gt; $map:(</span><br><span class=\"line\">       <span class=\"selector-tag\">facebook</span>: <span class=\"selector-id\">#3b5998</span>,</span><br><span class=\"line\">       <span class=\"selector-tag\">github</span>: <span class=\"selector-id\">#171515</span>,</span><br><span class=\"line\">       <span class=\"selector-tag\">google</span>: <span class=\"selector-id\">#db4437</span>,</span><br><span class=\"line\">       <span class=\"selector-tag\">twitter</span>: <span class=\"selector-id\">#55acee</span></span><br><span class=\"line\">   );</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h3><blockquote>\n<ul>\n<li>map 常常被称为数据地图，也有人称其为数组，因为他总是以 key:value 成对的出现</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 以下为一个map</span><br><span class=\"line\">$map:(</span><br><span class=\"line\">    $key:value,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">)</span><br><span class=\"line\">$theme-color: (</span><br><span class=\"line\">    <span class=\"selector-tag\">default</span>: (</span><br><span class=\"line\">        <span class=\"selector-tag\">bgcolor</span>: <span class=\"selector-id\">#fff</span>,</span><br><span class=\"line\">        <span class=\"selector-tag\">text-color</span>: <span class=\"selector-id\">#444</span>,</span><br><span class=\"line\">        <span class=\"selector-tag\">link-color</span>: <span class=\"selector-id\">#39f</span></span><br><span class=\"line\">    ),</span><br><span class=\"line\">    <span class=\"selector-tag\">primary</span><span class=\"selector-pseudo\">:(</span></span><br><span class=\"line\">        <span class=\"selector-tag\">bgcolor</span>: <span class=\"selector-id\">#000</span>,</span><br><span class=\"line\">        <span class=\"selector-tag\">text-color</span>:<span class=\"selector-id\">#fff</span>,</span><br><span class=\"line\">        <span class=\"selector-tag\">link-color</span>: <span class=\"selector-id\">#93f</span></span><br><span class=\"line\">    ),</span><br><span class=\"line\">    <span class=\"selector-tag\">negative</span>: (</span><br><span class=\"line\">        <span class=\"selector-tag\">bgcolor</span>: <span class=\"selector-id\">#f36</span>,</span><br><span class=\"line\">        <span class=\"selector-tag\">text-color</span>: <span class=\"selector-id\">#fefefe</span>,</span><br><span class=\"line\">        <span class=\"selector-tag\">link-color</span>: <span class=\"selector-id\">#d4e</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>map-get($map,$key) 根据 $key 参数，返回 $key 在 $map 中对应的 value 值。如果 $key 不存在 $map中，将返回 null 值。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$social-colors: (</span><br><span class=\"line\">    <span class=\"selector-tag\">dribble</span>: <span class=\"selector-id\">#ea4c89</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">facebook</span>: <span class=\"selector-id\">#3b5998</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">github</span>: <span class=\"selector-id\">#171515</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">google</span>: <span class=\"selector-id\">#db4437</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">twitter</span>: <span class=\"selector-id\">#55acee</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"selector-class\">.btn-dribble</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">map-get</span>($social-colors,facebook);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//编译结果</span><br><span class=\"line\"><span class=\"selector-class\">.btn-dribble</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#3b5998</span>; &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>map-has-key($map,$key) 函数将返回一个布尔值。当 $map 中有这个 $key，则函数返回 true，否则返回 false</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$social-colors: (</span><br><span class=\"line\">    <span class=\"selector-tag\">dribble</span>: <span class=\"selector-id\">#ea4c89</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">facebook</span>: <span class=\"selector-id\">#3b5998</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">github</span>: <span class=\"selector-id\">#171515</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">google</span>: <span class=\"selector-id\">#db4437</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">twitter</span>: <span class=\"selector-id\">#55acee</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">@function</span> colors($color)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@if</span> <span class=\"keyword\">not</span> map-has-key($social-colors,$color)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">@warn</span> <span class=\"string\">\"No color found for `#&#123;$color&#125;` in $social-colors map. Property omitted.\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">@return</span> map-get($social-colors,$color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.btn-dribble</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"built_in\">colors</span>(dribble);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.btn-facebook</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"built_in\">colors</span>(facebook);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.btn-github</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"built_in\">colors</span>(github);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.btn-google</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"built_in\">colors</span>(google);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.btn-twitter</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"built_in\">colors</span>(twitter);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.btn-weibo</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"built_in\">colors</span>(weibo);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//编译结果</span><br><span class=\"line\">WARNING: No color found for `weibo` in $social-colors map. Property omitted.</span><br><span class=\"line\">         on line 10 of ./8457/5JPS/index.scss</span><br><span class=\"line\"><span class=\"selector-class\">.btn-dribble</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#ea4c89</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.btn-facebook</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#3b5998</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.btn-github</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#171515</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.btn-google</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#db4437</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.btn-twitter</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#55acee</span>; &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>map-keys($map) 函数将会返回 $map 中的所有 key。这些值赋予给一个变量，那他就是一个列表</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$social-colors: (</span><br><span class=\"line\">    <span class=\"selector-tag\">dribble</span>: <span class=\"selector-id\">#ea4c89</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">facebook</span>: <span class=\"selector-id\">#3b5998</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">github</span>: <span class=\"selector-id\">#171515</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">google</span>: <span class=\"selector-id\">#db4437</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">twitter</span>: <span class=\"selector-id\">#55acee</span></span><br><span class=\"line\">);</span><br><span class=\"line\">map-keys($social-colors);</span><br><span class=\"line\">= &gt; \"dribble\",\"facebook\",\"github\",\"google\",\"twitter\"</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>map-values($map) 类似于 map-keys($map) 功能，不同的是 map-values($map )获取的是 $map 的所有 value 值</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$social-colors: (</span><br><span class=\"line\">    <span class=\"selector-tag\">dribble</span>: <span class=\"selector-id\">#ea4c89</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">facebook</span>: <span class=\"selector-id\">#3b5998</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">github</span>: <span class=\"selector-id\">#171515</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">google</span>: <span class=\"selector-id\">#db4437</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">twitter</span>: <span class=\"selector-id\">#55acee</span></span><br><span class=\"line\">);</span><br><span class=\"line\">map-values($social-colors);</span><br><span class=\"line\">= &gt; #ea4c89,#3b5998,#171515,#db4437,#55acee</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>map-merge($map1,$map2) 函数是将 $map1 和 $map2 合并，然后得到一个新的 $map</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$color: (</span><br><span class=\"line\">    <span class=\"selector-tag\">text</span>: <span class=\"selector-id\">#f36</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">link</span>: <span class=\"selector-id\">#f63</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">border</span>: <span class=\"selector-id\">#ddd</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">backround</span>: <span class=\"selector-id\">#fff</span></span><br><span class=\"line\">);</span><br><span class=\"line\">$typo:(</span><br><span class=\"line\">    <span class=\"selector-tag\">font-size</span>: 12<span class=\"selector-tag\">px</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">line-height</span>: 1<span class=\"selector-class\">.6</span></span><br><span class=\"line\">);</span><br><span class=\"line\">$newmap: map-merge($color,$typo);</span><br><span class=\"line\">=&gt; $newmap:(</span><br><span class=\"line\">       <span class=\"selector-tag\">text</span>: <span class=\"selector-id\">#f36</span>,</span><br><span class=\"line\">       <span class=\"selector-tag\">link</span>: <span class=\"selector-id\">#f63</span>,</span><br><span class=\"line\">       <span class=\"selector-tag\">border</span>: <span class=\"selector-id\">#ddd</span>,</span><br><span class=\"line\">       <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#fff</span>,</span><br><span class=\"line\">       <span class=\"selector-tag\">font-size</span>: 12<span class=\"selector-tag\">px</span>,</span><br><span class=\"line\">       <span class=\"selector-tag\">line-height</span>: 1<span class=\"selector-class\">.6</span></span><br><span class=\"line\">   );</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>map-remove($map,$key) </li>\n</ul>\n</blockquote>\n<ol>\n<li>map-remove($map,$key) 函数是用来删除当前 $map 中的某一个 $key，从而得到一个新的 map。其返回的值还是一个 map。他并不能直接从一个 map 中删除另一个 map，仅能通过删除 map 中的某个 key 得到新 map。</li>\n<li>如果删除的 key 并不存在于 $map 中，那么 map-remove() 函数返回的新 map 和以前的 map 一样。 </li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$social-colors: (</span><br><span class=\"line\">    <span class=\"selector-tag\">dribble</span>: <span class=\"selector-id\">#ea4c89</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">facebook</span>: <span class=\"selector-id\">#3b5998</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">github</span>: <span class=\"selector-id\">#171515</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">google</span>: <span class=\"selector-id\">#db4437</span>,</span><br><span class=\"line\">    <span class=\"selector-tag\">twitter</span>: <span class=\"selector-id\">#55acee</span></span><br><span class=\"line\">);</span><br><span class=\"line\">$map:map-remove($social-colors,dribble);</span><br><span class=\"line\">=&gt; $map:(</span><br><span class=\"line\">       <span class=\"selector-tag\">facebook</span>: <span class=\"selector-id\">#3b5998</span>,</span><br><span class=\"line\">       <span class=\"selector-tag\">github</span>: <span class=\"selector-id\">#171515</span>,</span><br><span class=\"line\">       <span class=\"selector-tag\">google</span>: <span class=\"selector-id\">#db4437</span>,</span><br><span class=\"line\">       <span class=\"selector-tag\">twitter</span>: <span class=\"selector-id\">#55acee</span></span><br><span class=\"line\">   );</span><br></pre></td></tr></table></figure>\n"},{"title":"sass中的@规则","date":"2017-07-01T09:54:55.000Z","_content":"### scss @规则\n\n> * @import\n\n\n1. Sass 扩展了 CSS 的 @import 规则，让它能够引入 SCSS 和 Sass 文件。 所有引入的 SCSS 和 Sass 文件都会被合并并输出一个单一的 CSS 文件。\n2. 引入多个文件 @import \"rounded-corners\", \"text-shadow\";\n3. 嵌套引入\n\n```css\n//假设要引入的样式文件`example.scss`文件中包含这样的代码：\n.example {\n  color: red;\n}\n//然后这样引用：\n\n#main {\n  @import \"example\";\n}\n//编译出来的 CSS：\n#main .example {\n  color: red;\n}\n```\n\n> * @media 指令和 CSS 的使用规则一样的简单，但它有另外一个功能，可以嵌套在 CSS 规则中。\n\n```css\n.sidebar {\n  width: 300px;\n  @media screen and (orientation: landscape) {\n    width: 500px;\n  }\n}\n//编译出来：\n.sidebar {\n  width: 300px; \n}\n@media screen and (orientation: landscape) {\n    .sidebar {\n      width: 500px; \n    } \n}\n//@media 也可以嵌套 @media：\n@media screen {\n  .sidebar {\n    @media (orientation: landscape) {\n      width: 500px;\n    }\n  }\n}\n//此时编译出来：\n@media screen and (orientation: landscape) {\n  .sidebar {\n    width: 500px; } }\n//在使用 @media 时，还可以使用插件#{}:\n$media: screen;\n$feature: -webkit-min-device-pixel-ratio;\n$value: 1.5;\n@media #{$media} and ($feature: $value) {\n  .sidebar {\n    width: 500px;\n  }\n}\n//编译出来的 CSS：\n@media screen and (-webkit-min-device-pixel-ratio: 1.5) {\n  .sidebar {\n    width: 500px; \n  } \n}\n```\n\n> * @extend 是用来扩展选择器或占位符\n\n```css\n.error {\n  border: 1px #f00;\n  background-color: #fdd;\n}\n.error.intrusion {\n  background-image: url(\"/image/hacked.png\");\n}\n.seriousError {\n  @extend .error;\n  border-width: 3px;\n}\n//编译结果\n.error, .seriousError {\n  border: 1px #f00;\n  background-color: #fdd; }\n.error.intrusion, .seriousError.intrusion {\n  background-image: url(\"/image/hacked.png\"); \n}\n.seriousError {\n  border-width: 3px; \n}\n```\n\n> * @at-root 从字面上解释就是跳出根元素\n\n```css\n.a {\n  color: red;\n  .b {\n    color: orange;\n    .c {\n      color: yellow;\n      @at-root .d {\n        color: green;\n      }\n    }\n  }  \n}\n//编译结果\n.a {\n  color: red;\n}\n.a .b {\n  color: orange;\n}\n.a .b .c {\n  color: yellow;\n}\n.d {\n  color: green;\n}\n```\n\n> * @debug 在 Sass 中是用来调试的，当你的在 Sass 的源码中使用了 @debug 指令之后，Sass 代码在编译出错时，在命令终端会输出你设置的提示 Bug\n\n```css\n@debug 10em + 12em;\n会输出：\nLine 1 DEBUG: 22em\n```\n\n> * @warn 和 @debug 功能类似，用来帮助我们更好的调试 Sass。\n\n> * @error 和 @warn、@debug 功能是如出一辙。\n\n```css\n@mixin error($x){\n  @if $x < 10 {\n    width: $x * 10px;\n  } @else if $x == 10 {\n    width: $x;\n  } @else {\n    @error \"你需要将#{$x}值设置在10以内的数\";\n  }\n\n}\n.test {\n  @include error(15);\n}\n//编译结果\n=> 你需要将15值设置在10以内的数 on line 7 at column 5\n```","source":"_posts/sass中的规则.md","raw":"---\ntitle: sass中的@规则\ndate: 2017-07-01 17:54:55\ntags:\n    - Sass\ncategories: Sass\n---\n### scss @规则\n\n> * @import\n\n\n1. Sass 扩展了 CSS 的 @import 规则，让它能够引入 SCSS 和 Sass 文件。 所有引入的 SCSS 和 Sass 文件都会被合并并输出一个单一的 CSS 文件。\n2. 引入多个文件 @import \"rounded-corners\", \"text-shadow\";\n3. 嵌套引入\n\n```css\n//假设要引入的样式文件`example.scss`文件中包含这样的代码：\n.example {\n  color: red;\n}\n//然后这样引用：\n\n#main {\n  @import \"example\";\n}\n//编译出来的 CSS：\n#main .example {\n  color: red;\n}\n```\n\n> * @media 指令和 CSS 的使用规则一样的简单，但它有另外一个功能，可以嵌套在 CSS 规则中。\n\n```css\n.sidebar {\n  width: 300px;\n  @media screen and (orientation: landscape) {\n    width: 500px;\n  }\n}\n//编译出来：\n.sidebar {\n  width: 300px; \n}\n@media screen and (orientation: landscape) {\n    .sidebar {\n      width: 500px; \n    } \n}\n//@media 也可以嵌套 @media：\n@media screen {\n  .sidebar {\n    @media (orientation: landscape) {\n      width: 500px;\n    }\n  }\n}\n//此时编译出来：\n@media screen and (orientation: landscape) {\n  .sidebar {\n    width: 500px; } }\n//在使用 @media 时，还可以使用插件#{}:\n$media: screen;\n$feature: -webkit-min-device-pixel-ratio;\n$value: 1.5;\n@media #{$media} and ($feature: $value) {\n  .sidebar {\n    width: 500px;\n  }\n}\n//编译出来的 CSS：\n@media screen and (-webkit-min-device-pixel-ratio: 1.5) {\n  .sidebar {\n    width: 500px; \n  } \n}\n```\n\n> * @extend 是用来扩展选择器或占位符\n\n```css\n.error {\n  border: 1px #f00;\n  background-color: #fdd;\n}\n.error.intrusion {\n  background-image: url(\"/image/hacked.png\");\n}\n.seriousError {\n  @extend .error;\n  border-width: 3px;\n}\n//编译结果\n.error, .seriousError {\n  border: 1px #f00;\n  background-color: #fdd; }\n.error.intrusion, .seriousError.intrusion {\n  background-image: url(\"/image/hacked.png\"); \n}\n.seriousError {\n  border-width: 3px; \n}\n```\n\n> * @at-root 从字面上解释就是跳出根元素\n\n```css\n.a {\n  color: red;\n  .b {\n    color: orange;\n    .c {\n      color: yellow;\n      @at-root .d {\n        color: green;\n      }\n    }\n  }  \n}\n//编译结果\n.a {\n  color: red;\n}\n.a .b {\n  color: orange;\n}\n.a .b .c {\n  color: yellow;\n}\n.d {\n  color: green;\n}\n```\n\n> * @debug 在 Sass 中是用来调试的，当你的在 Sass 的源码中使用了 @debug 指令之后，Sass 代码在编译出错时，在命令终端会输出你设置的提示 Bug\n\n```css\n@debug 10em + 12em;\n会输出：\nLine 1 DEBUG: 22em\n```\n\n> * @warn 和 @debug 功能类似，用来帮助我们更好的调试 Sass。\n\n> * @error 和 @warn、@debug 功能是如出一辙。\n\n```css\n@mixin error($x){\n  @if $x < 10 {\n    width: $x * 10px;\n  } @else if $x == 10 {\n    width: $x;\n  } @else {\n    @error \"你需要将#{$x}值设置在10以内的数\";\n  }\n\n}\n.test {\n  @include error(15);\n}\n//编译结果\n=> 你需要将15值设置在10以内的数 on line 7 at column 5\n```","slug":"sass中的规则","published":1,"updated":"2020-03-23T11:05:23.945Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgbydgo6002hofo95ny80kjx","content":"<h3 id=\"scss-规则\"><a href=\"#scss-规则\" class=\"headerlink\" title=\"scss @规则\"></a>scss @规则</h3><blockquote>\n<ul>\n<li>@import</li>\n</ul>\n</blockquote>\n<ol>\n<li>Sass 扩展了 CSS 的 @import 规则，让它能够引入 SCSS 和 Sass 文件。 所有引入的 SCSS 和 Sass 文件都会被合并并输出一个单一的 CSS 文件。</li>\n<li>引入多个文件 @import “rounded-corners”, “text-shadow”;</li>\n<li>嵌套引入</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//假设要引入的样式文件`example.scss`文件中包含这样的代码：</span><br><span class=\"line\"><span class=\"selector-class\">.example</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//然后这样引用：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\">  @import \"example\";</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//编译出来的 CSS：</span><br><span class=\"line\"><span class=\"selector-id\">#main</span> <span class=\"selector-class\">.example</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>@media 指令和 CSS 的使用规则一样的简单，但它有另外一个功能，可以嵌套在 CSS 规则中。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.sidebar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  @media screen and (orientation: landscape) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">width</span>: 500<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//编译出来：</span><br><span class=\"line\"><span class=\"selector-class\">.sidebar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">orientation:</span> landscape) &#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.sidebar</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//@media 也可以嵌套 @media：</span><br><span class=\"line\"><span class=\"keyword\">@media</span> screen &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.sidebar</span> &#123;</span><br><span class=\"line\">    @media (orientation: landscape) &#123;</span><br><span class=\"line\">      <span class=\"selector-tag\">width</span>: 500<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//此时编译出来：</span><br><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">orientation:</span> landscape) &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.sidebar</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>; &#125; &#125;</span><br><span class=\"line\">//在使用 @media 时，还可以使用插件#&#123;&#125;:</span><br><span class=\"line\">$media: screen;</span><br><span class=\"line\">$feature: -webkit-min-device-pixel-ratio;</span><br><span class=\"line\">$value: 1.5;</span><br><span class=\"line\">@media #&#123;$media&#125; and ($feature: $value) &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.sidebar</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//编译出来的 CSS：</span><br><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">-webkit-min-device-pixel-ratio:</span> <span class=\"number\">1.5</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.sidebar</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>@extend 是用来扩展选择器或占位符</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.error</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> <span class=\"number\">#f00</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#fdd</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.error</span><span class=\"selector-class\">.intrusion</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"/image/hacked.png\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.seriousError</span> &#123;</span><br><span class=\"line\">  @extend .error;</span><br><span class=\"line\">  <span class=\"selector-tag\">border-width</span>: 3<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//编译结果</span><br><span class=\"line\"><span class=\"selector-class\">.error</span>, <span class=\"selector-class\">.seriousError</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> <span class=\"number\">#f00</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#fdd</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.error</span><span class=\"selector-class\">.intrusion</span>, <span class=\"selector-class\">.seriousError</span><span class=\"selector-class\">.intrusion</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"/image/hacked.png\"</span>); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.seriousError</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-width</span>: <span class=\"number\">3px</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>@at-root 从字面上解释就是跳出根元素</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">  .b &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">color</span>: <span class=\"selector-tag\">orange</span>;</span><br><span class=\"line\">    <span class=\"selector-class\">.c</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">color</span>: yellow;</span><br><span class=\"line\">      @at-root .d &#123;</span><br><span class=\"line\">        <span class=\"selector-tag\">color</span>: <span class=\"selector-tag\">green</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//编译结果</span><br><span class=\"line\"><span class=\"selector-class\">.a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.a</span> <span class=\"selector-class\">.b</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: orange;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.a</span> <span class=\"selector-class\">.b</span> <span class=\"selector-class\">.c</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: yellow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.d</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: green;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>@debug 在 Sass 中是用来调试的，当你的在 Sass 的源码中使用了 @debug 指令之后，Sass 代码在编译出错时，在命令终端会输出你设置的提示 Bug</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@debug</span> <span class=\"number\">10em</span> + <span class=\"number\">12em</span>;</span><br><span class=\"line\">会输出：</span><br><span class=\"line\"><span class=\"selector-tag\">Line</span> 1 <span class=\"selector-tag\">DEBUG</span>: 22<span class=\"selector-tag\">em</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>@warn 和 @debug 功能类似，用来帮助我们更好的调试 Sass。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>@error 和 @warn、@debug 功能是如出一辙。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@mixin</span> error($x)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">@if</span> $x &lt; <span class=\"number\">10</span> &#123;</span><br><span class=\"line\">    width: $x * 10px;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">@else</span> if $x == <span class=\"number\">10</span> &#123;</span><br><span class=\"line\">    width: $x;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">@else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">@error</span> <span class=\"string\">\"你需要将#&#123;$x&#125;值设置在10以内的数\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">  @include error(15);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//编译结果</span><br><span class=\"line\">=&gt; 你需要将15值设置在10以内的数 on line 7 at column 5</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"scss-规则\"><a href=\"#scss-规则\" class=\"headerlink\" title=\"scss @规则\"></a>scss @规则</h3><blockquote>\n<ul>\n<li>@import</li>\n</ul>\n</blockquote>\n<ol>\n<li>Sass 扩展了 CSS 的 @import 规则，让它能够引入 SCSS 和 Sass 文件。 所有引入的 SCSS 和 Sass 文件都会被合并并输出一个单一的 CSS 文件。</li>\n<li>引入多个文件 @import “rounded-corners”, “text-shadow”;</li>\n<li>嵌套引入</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//假设要引入的样式文件`example.scss`文件中包含这样的代码：</span><br><span class=\"line\"><span class=\"selector-class\">.example</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//然后这样引用：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\">  @import \"example\";</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//编译出来的 CSS：</span><br><span class=\"line\"><span class=\"selector-id\">#main</span> <span class=\"selector-class\">.example</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>@media 指令和 CSS 的使用规则一样的简单，但它有另外一个功能，可以嵌套在 CSS 规则中。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.sidebar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  @media screen and (orientation: landscape) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">width</span>: 500<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//编译出来：</span><br><span class=\"line\"><span class=\"selector-class\">.sidebar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">orientation:</span> landscape) &#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.sidebar</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//@media 也可以嵌套 @media：</span><br><span class=\"line\"><span class=\"keyword\">@media</span> screen &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.sidebar</span> &#123;</span><br><span class=\"line\">    @media (orientation: landscape) &#123;</span><br><span class=\"line\">      <span class=\"selector-tag\">width</span>: 500<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//此时编译出来：</span><br><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">orientation:</span> landscape) &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.sidebar</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>; &#125; &#125;</span><br><span class=\"line\">//在使用 @media 时，还可以使用插件#&#123;&#125;:</span><br><span class=\"line\">$media: screen;</span><br><span class=\"line\">$feature: -webkit-min-device-pixel-ratio;</span><br><span class=\"line\">$value: 1.5;</span><br><span class=\"line\">@media #&#123;$media&#125; and ($feature: $value) &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.sidebar</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//编译出来的 CSS：</span><br><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">-webkit-min-device-pixel-ratio:</span> <span class=\"number\">1.5</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.sidebar</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>@extend 是用来扩展选择器或占位符</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.error</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> <span class=\"number\">#f00</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#fdd</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.error</span><span class=\"selector-class\">.intrusion</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"/image/hacked.png\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.seriousError</span> &#123;</span><br><span class=\"line\">  @extend .error;</span><br><span class=\"line\">  <span class=\"selector-tag\">border-width</span>: 3<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//编译结果</span><br><span class=\"line\"><span class=\"selector-class\">.error</span>, <span class=\"selector-class\">.seriousError</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> <span class=\"number\">#f00</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#fdd</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.error</span><span class=\"selector-class\">.intrusion</span>, <span class=\"selector-class\">.seriousError</span><span class=\"selector-class\">.intrusion</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"/image/hacked.png\"</span>); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.seriousError</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-width</span>: <span class=\"number\">3px</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>@at-root 从字面上解释就是跳出根元素</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">  .b &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">color</span>: <span class=\"selector-tag\">orange</span>;</span><br><span class=\"line\">    <span class=\"selector-class\">.c</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">color</span>: yellow;</span><br><span class=\"line\">      @at-root .d &#123;</span><br><span class=\"line\">        <span class=\"selector-tag\">color</span>: <span class=\"selector-tag\">green</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//编译结果</span><br><span class=\"line\"><span class=\"selector-class\">.a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.a</span> <span class=\"selector-class\">.b</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: orange;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.a</span> <span class=\"selector-class\">.b</span> <span class=\"selector-class\">.c</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: yellow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.d</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: green;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>@debug 在 Sass 中是用来调试的，当你的在 Sass 的源码中使用了 @debug 指令之后，Sass 代码在编译出错时，在命令终端会输出你设置的提示 Bug</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@debug</span> <span class=\"number\">10em</span> + <span class=\"number\">12em</span>;</span><br><span class=\"line\">会输出：</span><br><span class=\"line\"><span class=\"selector-tag\">Line</span> 1 <span class=\"selector-tag\">DEBUG</span>: 22<span class=\"selector-tag\">em</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>@warn 和 @debug 功能类似，用来帮助我们更好的调试 Sass。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>@error 和 @warn、@debug 功能是如出一辙。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@mixin</span> error($x)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">@if</span> $x &lt; <span class=\"number\">10</span> &#123;</span><br><span class=\"line\">    width: $x * 10px;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">@else</span> if $x == <span class=\"number\">10</span> &#123;</span><br><span class=\"line\">    width: $x;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">@else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">@error</span> <span class=\"string\">\"你需要将#&#123;$x&#125;值设置在10以内的数\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">  @include error(15);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//编译结果</span><br><span class=\"line\">=&gt; 你需要将15值设置在10以内的数 on line 7 at column 5</span><br></pre></td></tr></table></figure>"},{"title":"sass函数","date":"2017-07-01T09:52:54.000Z","_content":"## scss 函数\n\n### 字符串函数\n\n> * unquote()函数 删除字符串中的引号,没有引号，返回原字符串\n\n```css\n.test1 {\n    content:  unquote('Hello Sass!') ;\n}\n.test2 {\n    content: unquote(\"'Hello Sass!\");\n/*编译结果*/\n.test1 {\n  content: Hello Sass!; }\n.test2 {\n  content: 'Hello Sass!; }\n\n```\n\n> * quote()函数 主要用来给字符串添加引号。如果字符串，自身带有引号会统一换成双引号 \"\"\n\n```css\n.test2 {\n    content: quote(\"Hello Sass!\");\n}\n.test3 {\n    content: quote(ImWebDesigner);\n}\n/*编译结果*/\n.test2 {\n  content: \"Hello Sass!\";\n}\n.test3 {\n  content: \"ImWebDesigner\";\n}\n```\n\n> * To-upper-case() 函数将字符串小写字母转换成大写字母\n\n```css\n.test {\n  text: to-upper-case(aaaaa);\n  text: to-upper-case(aA-aAAA-aaa);\n}\n/*编译结果*/\n//CSS\n.test {\n  text: AAAAA;\n  text: AA-AAAA-AAA;\n}\n```\n\n> * To-lower-case() 将字符串转换成小写字母\n\n```css\n//SCSS\n.test {\n  text: to-lower-case(AAAAA);\n  text: to-lower-case(aA-aAAA-aaa);\n}\n//编译出来的 css 代码\n.test {\n  text: aaaaa;\n  text: aa-aaaa-aaa;\n}\n```\n\n### 数字函数\n\n> * percentage() 要是将一个不带单位的数字转换成百分比形式\n\n```css \n.footer{\n    width : percentage(.2)\n}\n// 编译结果\n.footer{\n    width : 20%\n}\n```\n\n> * round() 函数可以将一个数四舍五入为一个最接近的整数\n\n```css\n.footer {\n   width:round(12.3px)\n}\n//编译结果\n.footer {\n  width: 12px;\n}\n```\n\n> * ceil() 函数将一个数转换成最接近于自己的整数\n\n```css\n.footer {\n   width:ceil(12.3px);\n}\n//编译结果\n.footer {\n  width: 13px;\n}\n```\n\n> * floor() 函数将一个数去除其小数部分\n\n```css\n.footer {\n   width:floor(12.3px);\n}\n//编译结果\n.footer {\n  width: 12px;\n}\n```\n\n> *  abs( ) 函数会返回一个数的绝对值\n\n```css\n.footer {\n   width:abs(-12.3px);\n}\n//编译结果\n.footer {\n  width: 12.3px;\n}\n```\n\n> * min() 函数功能主要是在多个数之中找到最小的一个\n\n```css\nbody {\n    width:min(1,2,1%,3,300%)\n}\n// 编译结果\nbody {\n  width: 1%; }\n```\n\n> * max() 函数用来获取一系列数中的最大那个值\n\n```css\nbody {\n    width:max(1,2,1%,3,300%)\n}\n//编译结果\nbody {\n  width: 300%; }\n```\n\n> * random() 函数用来获取一个随机数\n\n```css\nbody{\n    width: ceil(random()*100)px\n}\n//编译结果\nbody {\n  width: 35 px; }\n```\n\n### 列表函数\n\n> * length()函数 返回一个列表中的长度\n\n```css\nlength(10px,20px,(border 1px solid),2em)\n=> 4 \n```\n\n> * nth($list,$n) 函数用来指定列表中某个位置的值。不过在 Sass 中，nth() 函数和其他语言不同，1 是指列表中的第一个标签值，2 是指列给中的第二个标签值\n\n```css\nbody{\n    width: nth(10px 20px 30px,1);\n}\n//编译结果\nbody{\n    width: 10px;\n}\n```\n\n> * join() 函数是将两个列表连接合并成一个列表,最多两个列表\n\n```css\njoin((blue,red),(#abc,#def))\n=> (#0000ff, #ff0000, #aabbcc, #ddeeff)\n```\n\n> * append() 函数是用来将某个值插入到列表中，并且处于最末位\n\n```css\nappend(10px 20px ,30px)\n=> (10px 20px 30px)\n```\n\n> * zip()函数将多个列表值转成一个多维的列表\n\n```css\nzip(1px 2px 3px,solid dashed dotted,green blue red)\n=> ((1px \"solid\" #008000), (2px \"dashed\" #0000ff), (3px \"dotted\" #ff0000))\n```\n\n> * index() 函数类似于索引一样，主要让你找到某个值在列表中所处的位置\n\n```css \nindex(1px solid red, solid)\n=> 2\n```\n","source":"_posts/sass函数.md","raw":"---\ntitle: sass函数\ndate: 2017-07-01 17:52:54\ntags:\n    - Sass\ncategories: Sass\n---\n## scss 函数\n\n### 字符串函数\n\n> * unquote()函数 删除字符串中的引号,没有引号，返回原字符串\n\n```css\n.test1 {\n    content:  unquote('Hello Sass!') ;\n}\n.test2 {\n    content: unquote(\"'Hello Sass!\");\n/*编译结果*/\n.test1 {\n  content: Hello Sass!; }\n.test2 {\n  content: 'Hello Sass!; }\n\n```\n\n> * quote()函数 主要用来给字符串添加引号。如果字符串，自身带有引号会统一换成双引号 \"\"\n\n```css\n.test2 {\n    content: quote(\"Hello Sass!\");\n}\n.test3 {\n    content: quote(ImWebDesigner);\n}\n/*编译结果*/\n.test2 {\n  content: \"Hello Sass!\";\n}\n.test3 {\n  content: \"ImWebDesigner\";\n}\n```\n\n> * To-upper-case() 函数将字符串小写字母转换成大写字母\n\n```css\n.test {\n  text: to-upper-case(aaaaa);\n  text: to-upper-case(aA-aAAA-aaa);\n}\n/*编译结果*/\n//CSS\n.test {\n  text: AAAAA;\n  text: AA-AAAA-AAA;\n}\n```\n\n> * To-lower-case() 将字符串转换成小写字母\n\n```css\n//SCSS\n.test {\n  text: to-lower-case(AAAAA);\n  text: to-lower-case(aA-aAAA-aaa);\n}\n//编译出来的 css 代码\n.test {\n  text: aaaaa;\n  text: aa-aaaa-aaa;\n}\n```\n\n### 数字函数\n\n> * percentage() 要是将一个不带单位的数字转换成百分比形式\n\n```css \n.footer{\n    width : percentage(.2)\n}\n// 编译结果\n.footer{\n    width : 20%\n}\n```\n\n> * round() 函数可以将一个数四舍五入为一个最接近的整数\n\n```css\n.footer {\n   width:round(12.3px)\n}\n//编译结果\n.footer {\n  width: 12px;\n}\n```\n\n> * ceil() 函数将一个数转换成最接近于自己的整数\n\n```css\n.footer {\n   width:ceil(12.3px);\n}\n//编译结果\n.footer {\n  width: 13px;\n}\n```\n\n> * floor() 函数将一个数去除其小数部分\n\n```css\n.footer {\n   width:floor(12.3px);\n}\n//编译结果\n.footer {\n  width: 12px;\n}\n```\n\n> *  abs( ) 函数会返回一个数的绝对值\n\n```css\n.footer {\n   width:abs(-12.3px);\n}\n//编译结果\n.footer {\n  width: 12.3px;\n}\n```\n\n> * min() 函数功能主要是在多个数之中找到最小的一个\n\n```css\nbody {\n    width:min(1,2,1%,3,300%)\n}\n// 编译结果\nbody {\n  width: 1%; }\n```\n\n> * max() 函数用来获取一系列数中的最大那个值\n\n```css\nbody {\n    width:max(1,2,1%,3,300%)\n}\n//编译结果\nbody {\n  width: 300%; }\n```\n\n> * random() 函数用来获取一个随机数\n\n```css\nbody{\n    width: ceil(random()*100)px\n}\n//编译结果\nbody {\n  width: 35 px; }\n```\n\n### 列表函数\n\n> * length()函数 返回一个列表中的长度\n\n```css\nlength(10px,20px,(border 1px solid),2em)\n=> 4 \n```\n\n> * nth($list,$n) 函数用来指定列表中某个位置的值。不过在 Sass 中，nth() 函数和其他语言不同，1 是指列表中的第一个标签值，2 是指列给中的第二个标签值\n\n```css\nbody{\n    width: nth(10px 20px 30px,1);\n}\n//编译结果\nbody{\n    width: 10px;\n}\n```\n\n> * join() 函数是将两个列表连接合并成一个列表,最多两个列表\n\n```css\njoin((blue,red),(#abc,#def))\n=> (#0000ff, #ff0000, #aabbcc, #ddeeff)\n```\n\n> * append() 函数是用来将某个值插入到列表中，并且处于最末位\n\n```css\nappend(10px 20px ,30px)\n=> (10px 20px 30px)\n```\n\n> * zip()函数将多个列表值转成一个多维的列表\n\n```css\nzip(1px 2px 3px,solid dashed dotted,green blue red)\n=> ((1px \"solid\" #008000), (2px \"dashed\" #0000ff), (3px \"dotted\" #ff0000))\n```\n\n> * index() 函数类似于索引一样，主要让你找到某个值在列表中所处的位置\n\n```css \nindex(1px solid red, solid)\n=> 2\n```\n","slug":"sass函数","published":1,"updated":"2020-03-23T11:05:23.946Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgbydgo7002lofo94ru4feh9","content":"<h2 id=\"scss-函数\"><a href=\"#scss-函数\" class=\"headerlink\" title=\"scss 函数\"></a>scss 函数</h2><h3 id=\"字符串函数\"><a href=\"#字符串函数\" class=\"headerlink\" title=\"字符串函数\"></a>字符串函数</h3><blockquote>\n<ul>\n<li>unquote()函数 删除字符串中的引号,没有引号，返回原字符串</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test1</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>:  <span class=\"built_in\">unquote</span>(<span class=\"string\">'Hello Sass!'</span>) ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.test2</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">unquote</span>(<span class=\"string\">\"'Hello Sass!\"</span>);</span><br><span class=\"line\"><span class=\"comment\">/*编译结果*/</span></span><br><span class=\"line\">.test1 &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">content</span>: <span class=\"selector-tag\">Hello</span> <span class=\"selector-tag\">Sass</span>!; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.test2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">'Hello Sass!; &#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>quote()函数 主要用来给字符串添加引号。如果字符串，自身带有引号会统一换成双引号 “”</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test2</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">quote</span>(<span class=\"string\">\"Hello Sass!\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.test3</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">quote</span>(ImWebDesigner);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*编译结果*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.test2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">\"Hello Sass!\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.test3</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">\"ImWebDesigner\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>To-upper-case() 函数将字符串小写字母转换成大写字母</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">text</span>: <span class=\"built_in\">to-upper-case</span>(aaaaa);</span><br><span class=\"line\">  <span class=\"attribute\">text</span>: <span class=\"built_in\">to-upper-case</span>(aA-aAAA-aaa);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*编译结果*/</span></span><br><span class=\"line\">//CSS</span><br><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">text</span>: AAAAA;</span><br><span class=\"line\">  <span class=\"attribute\">text</span>: AA-AAAA-AAA;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>To-lower-case() 将字符串转换成小写字母</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//SCSS</span><br><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">text</span>: <span class=\"built_in\">to-lower-case</span>(AAAAA);</span><br><span class=\"line\">  <span class=\"attribute\">text</span>: <span class=\"built_in\">to-lower-case</span>(aA-aAAA-aaa);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//编译出来的 css 代码</span><br><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">text</span>: aaaaa;</span><br><span class=\"line\">  <span class=\"attribute\">text</span>: aa-aaaa-aaa;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"数字函数\"><a href=\"#数字函数\" class=\"headerlink\" title=\"数字函数\"></a>数字函数</h3><blockquote>\n<ul>\n<li>percentage() 要是将一个不带单位的数字转换成百分比形式</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.footer</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width </span>: <span class=\"built_in\">percentage</span>(.<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 编译结果</span><br><span class=\"line\"><span class=\"selector-class\">.footer</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width </span>: <span class=\"number\">20%</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>round() 函数可以将一个数四舍五入为一个最接近的整数</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.footer</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">width</span>:<span class=\"built_in\">round</span>(<span class=\"number\">12.3px</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//编译结果</span><br><span class=\"line\"><span class=\"selector-class\">.footer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>ceil() 函数将一个数转换成最接近于自己的整数</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.footer</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">width</span>:<span class=\"built_in\">ceil</span>(<span class=\"number\">12.3px</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//编译结果</span><br><span class=\"line\"><span class=\"selector-class\">.footer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">13px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>floor() 函数将一个数去除其小数部分</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.footer</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">width</span>:<span class=\"built_in\">floor</span>(<span class=\"number\">12.3px</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//编译结果</span><br><span class=\"line\"><span class=\"selector-class\">.footer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>abs( ) 函数会返回一个数的绝对值</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.footer</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">width</span>:<span class=\"built_in\">abs</span>(-<span class=\"number\">12.3px</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//编译结果</span><br><span class=\"line\"><span class=\"selector-class\">.footer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">12.3px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>min() 函数功能主要是在多个数之中找到最小的一个</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"built_in\">min</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">1%</span>,<span class=\"number\">3</span>,<span class=\"number\">300%</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 编译结果</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">1%</span>; &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>max() 函数用来获取一系列数中的最大那个值</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"built_in\">max</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">1%</span>,<span class=\"number\">3</span>,<span class=\"number\">300%</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//编译结果</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300%</span>; &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>random() 函数用来获取一个随机数</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"built_in\">ceil</span>(random()*<span class=\"number\">100</span>)px</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//编译结果</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">35</span> px; &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"列表函数\"><a href=\"#列表函数\" class=\"headerlink\" title=\"列表函数\"></a>列表函数</h3><blockquote>\n<ul>\n<li>length()函数 返回一个列表中的长度</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">length</span>(10<span class=\"selector-tag\">px</span>,20<span class=\"selector-tag\">px</span>,(<span class=\"selector-tag\">border</span> 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span>),2<span class=\"selector-tag\">em</span>)</span><br><span class=\"line\">=&gt; 4</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>nth($list,$n) 函数用来指定列表中某个位置的值。不过在 Sass 中，nth() 函数和其他语言不同，1 是指列表中的第一个标签值，2 是指列给中的第二个标签值</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"built_in\">nth</span>(<span class=\"number\">10px</span> <span class=\"number\">20px</span> <span class=\"number\">30px</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//编译结果</span><br><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>join() 函数是将两个列表连接合并成一个列表,最多两个列表</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">join</span>((<span class=\"selector-tag\">blue</span>,<span class=\"selector-tag\">red</span>),(<span class=\"selector-id\">#abc</span>,<span class=\"selector-id\">#def</span>))</span><br><span class=\"line\">=&gt; (#0000ff, #ff0000, #aabbcc, #ddeeff)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>append() 函数是用来将某个值插入到列表中，并且处于最末位</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">append</span>(10<span class=\"selector-tag\">px</span> 20<span class=\"selector-tag\">px</span> ,30<span class=\"selector-tag\">px</span>)</span><br><span class=\"line\">=&gt; (10px 20px 30px)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>zip()函数将多个列表值转成一个多维的列表</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">zip</span>(1<span class=\"selector-tag\">px</span> 2<span class=\"selector-tag\">px</span> 3<span class=\"selector-tag\">px</span>,<span class=\"selector-tag\">solid</span> <span class=\"selector-tag\">dashed</span> <span class=\"selector-tag\">dotted</span>,<span class=\"selector-tag\">green</span> <span class=\"selector-tag\">blue</span> <span class=\"selector-tag\">red</span>)</span><br><span class=\"line\">=&gt; ((1px \"solid\" #008000), (2px \"dashed\" #0000ff), (3px \"dotted\" #ff0000))</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>index() 函数类似于索引一样，主要让你找到某个值在列表中所处的位置</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">index</span>(1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-tag\">red</span>, <span class=\"selector-tag\">solid</span>)</span><br><span class=\"line\">=&gt; 2</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"scss-函数\"><a href=\"#scss-函数\" class=\"headerlink\" title=\"scss 函数\"></a>scss 函数</h2><h3 id=\"字符串函数\"><a href=\"#字符串函数\" class=\"headerlink\" title=\"字符串函数\"></a>字符串函数</h3><blockquote>\n<ul>\n<li>unquote()函数 删除字符串中的引号,没有引号，返回原字符串</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test1</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>:  <span class=\"built_in\">unquote</span>(<span class=\"string\">'Hello Sass!'</span>) ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.test2</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">unquote</span>(<span class=\"string\">\"'Hello Sass!\"</span>);</span><br><span class=\"line\"><span class=\"comment\">/*编译结果*/</span></span><br><span class=\"line\">.test1 &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">content</span>: <span class=\"selector-tag\">Hello</span> <span class=\"selector-tag\">Sass</span>!; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.test2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">'Hello Sass!; &#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>quote()函数 主要用来给字符串添加引号。如果字符串，自身带有引号会统一换成双引号 “”</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test2</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">quote</span>(<span class=\"string\">\"Hello Sass!\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.test3</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"built_in\">quote</span>(ImWebDesigner);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*编译结果*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.test2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">\"Hello Sass!\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.test3</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">\"ImWebDesigner\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>To-upper-case() 函数将字符串小写字母转换成大写字母</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">text</span>: <span class=\"built_in\">to-upper-case</span>(aaaaa);</span><br><span class=\"line\">  <span class=\"attribute\">text</span>: <span class=\"built_in\">to-upper-case</span>(aA-aAAA-aaa);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*编译结果*/</span></span><br><span class=\"line\">//CSS</span><br><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">text</span>: AAAAA;</span><br><span class=\"line\">  <span class=\"attribute\">text</span>: AA-AAAA-AAA;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>To-lower-case() 将字符串转换成小写字母</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//SCSS</span><br><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">text</span>: <span class=\"built_in\">to-lower-case</span>(AAAAA);</span><br><span class=\"line\">  <span class=\"attribute\">text</span>: <span class=\"built_in\">to-lower-case</span>(aA-aAAA-aaa);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//编译出来的 css 代码</span><br><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">text</span>: aaaaa;</span><br><span class=\"line\">  <span class=\"attribute\">text</span>: aa-aaaa-aaa;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"数字函数\"><a href=\"#数字函数\" class=\"headerlink\" title=\"数字函数\"></a>数字函数</h3><blockquote>\n<ul>\n<li>percentage() 要是将一个不带单位的数字转换成百分比形式</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.footer</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width </span>: <span class=\"built_in\">percentage</span>(.<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 编译结果</span><br><span class=\"line\"><span class=\"selector-class\">.footer</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width </span>: <span class=\"number\">20%</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>round() 函数可以将一个数四舍五入为一个最接近的整数</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.footer</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">width</span>:<span class=\"built_in\">round</span>(<span class=\"number\">12.3px</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//编译结果</span><br><span class=\"line\"><span class=\"selector-class\">.footer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>ceil() 函数将一个数转换成最接近于自己的整数</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.footer</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">width</span>:<span class=\"built_in\">ceil</span>(<span class=\"number\">12.3px</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//编译结果</span><br><span class=\"line\"><span class=\"selector-class\">.footer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">13px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>floor() 函数将一个数去除其小数部分</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.footer</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">width</span>:<span class=\"built_in\">floor</span>(<span class=\"number\">12.3px</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//编译结果</span><br><span class=\"line\"><span class=\"selector-class\">.footer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>abs( ) 函数会返回一个数的绝对值</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.footer</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">width</span>:<span class=\"built_in\">abs</span>(-<span class=\"number\">12.3px</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//编译结果</span><br><span class=\"line\"><span class=\"selector-class\">.footer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">12.3px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>min() 函数功能主要是在多个数之中找到最小的一个</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"built_in\">min</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">1%</span>,<span class=\"number\">3</span>,<span class=\"number\">300%</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 编译结果</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">1%</span>; &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>max() 函数用来获取一系列数中的最大那个值</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"built_in\">max</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">1%</span>,<span class=\"number\">3</span>,<span class=\"number\">300%</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//编译结果</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300%</span>; &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>random() 函数用来获取一个随机数</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"built_in\">ceil</span>(random()*<span class=\"number\">100</span>)px</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//编译结果</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">35</span> px; &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"列表函数\"><a href=\"#列表函数\" class=\"headerlink\" title=\"列表函数\"></a>列表函数</h3><blockquote>\n<ul>\n<li>length()函数 返回一个列表中的长度</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">length</span>(10<span class=\"selector-tag\">px</span>,20<span class=\"selector-tag\">px</span>,(<span class=\"selector-tag\">border</span> 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span>),2<span class=\"selector-tag\">em</span>)</span><br><span class=\"line\">=&gt; 4</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>nth($list,$n) 函数用来指定列表中某个位置的值。不过在 Sass 中，nth() 函数和其他语言不同，1 是指列表中的第一个标签值，2 是指列给中的第二个标签值</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"built_in\">nth</span>(<span class=\"number\">10px</span> <span class=\"number\">20px</span> <span class=\"number\">30px</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//编译结果</span><br><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>join() 函数是将两个列表连接合并成一个列表,最多两个列表</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">join</span>((<span class=\"selector-tag\">blue</span>,<span class=\"selector-tag\">red</span>),(<span class=\"selector-id\">#abc</span>,<span class=\"selector-id\">#def</span>))</span><br><span class=\"line\">=&gt; (#0000ff, #ff0000, #aabbcc, #ddeeff)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>append() 函数是用来将某个值插入到列表中，并且处于最末位</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">append</span>(10<span class=\"selector-tag\">px</span> 20<span class=\"selector-tag\">px</span> ,30<span class=\"selector-tag\">px</span>)</span><br><span class=\"line\">=&gt; (10px 20px 30px)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>zip()函数将多个列表值转成一个多维的列表</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">zip</span>(1<span class=\"selector-tag\">px</span> 2<span class=\"selector-tag\">px</span> 3<span class=\"selector-tag\">px</span>,<span class=\"selector-tag\">solid</span> <span class=\"selector-tag\">dashed</span> <span class=\"selector-tag\">dotted</span>,<span class=\"selector-tag\">green</span> <span class=\"selector-tag\">blue</span> <span class=\"selector-tag\">red</span>)</span><br><span class=\"line\">=&gt; ((1px \"solid\" #008000), (2px \"dashed\" #0000ff), (3px \"dotted\" #ff0000))</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>index() 函数类似于索引一样，主要让你找到某个值在列表中所处的位置</li>\n</ul>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">index</span>(1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-tag\">red</span>, <span class=\"selector-tag\">solid</span>)</span><br><span class=\"line\">=&gt; 2</span><br></pre></td></tr></table></figure>\n"},{"title":"sass基本用法","date":"2017-07-01T07:06:31.000Z","_content":"## 选择器嵌套\n\n假设我们有一段这样的结构：\n\n```css\n<header>\n    <nav>\n        <a href=\"#\">Home</a>\n        <a href=\"#\">About</a>\n        <a href=\"#\">Blog</a>\n    </nav>\n<header>\n/*css写法*/\nnav a {\n  color:red;\n}\nheader nav a {\n  color:green;\n}\n/*scss写法*/\nnav {\n  a {\n    color: red;\n    header & {\n      color:green;\n    }\n  }  \n}\n```\n## 属性嵌套\n```css\n/*css写法*/\n.box {\n    border-top: 1px solid red;\n    border-bottom: 1px solid green;\n}\n/*scss写法*/\n.box{\n    border:{\n        top: 1px solid red;\n        bottom:1px solid green;\n    }\n}\n```\n## 伪类嵌套\n```css\n/*css写法*/\n.clearfix:before, .clearfix:after {\n  content: \"\";\n  display: table;\n}\n.clearfix:after {\n  clear: both;\n  overflow: hidden;\n}\n/*scss写法*/\n.clearfix {\n    &:before,&:after{\n        content: \"\";\n        display: table;\n    }\n    &:after{\n        overflow: hidden;\n        clear: both;\n    }\n}\n```\n## 混合宏  @mixin\n* 优点:将共用的代码块定义为宏，直接引用\n* 缺点:会生成冗余的代码块，不会合并在一起\n```css\n/*声明混合宏*/\n@mixin border-radius($raidus:5px){ \n    //单个参数加默认值($radius:5px) \n    //多个参数用逗号隔开($radius,$width,$height)\n    //多个参数还可以用[...]表示($shadows...)\n    border-radius: $radius;\n}\n/*调用混合宏*/\ndiv{\n    @include border-radius(10px);\n}\n/*多个参数使用...为参数*/\n@mixin box-shadow($shadows...){\n  @if length($shadows) >= 1 {\n    -webkit-box-shadow: $shadows;\n    box-shadow: $shadows;\n  } @else {\n    $shadows: 0 0 2px rgba(#000,.25); // 默认参数  如果没有传 就用这个  传了就用传过来的参数\n    -webkit-box-shadow: $shadow;\n    box-shadow: $shadow;\n  }\n}\n/*调用宏*/\n.box {\n  @include box-shadow(0 0 1px rgba(#000,.5),0 0 2px rgba(#000,.2));\n}\n/*编译结果*/\n.box {\n  -webkit-box-shadow: 0 0 1px rgba(0, 0, 0, 0.5), 0 0 2px rgba(0, 0, 0, 0.2);\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0.5), 0 0 2px rgba(0, 0, 0, 0.2);\n}\n```\n## 继承 @extend 可以将公用的代码合并在一起\n```css\n/*scss写法*/\n.btn {\n  border: 1px solid #ccc;\n  padding: 6px 10px;\n  font-size: 14px;\n}\n\n.btn-primary {\n  background-color: #f36;\n  color: #fff;\n  @extend .btn;\n}\n\n.btn-second {\n  background-color: orange;\n  color: #fff;\n  @extend .btn;\n}\n/*编译结果*/\n.btn, .btn-primary, .btn-second {\n  border: 1px solid #ccc;\n  padding: 6px 10px;\n  font-size: 14px;\n}\n\n.btn-primary {\n  background-color: #f36;\n  color: #fff;\n}\n\n.btn-second {\n  background-clor: orange;\n  color: #fff;\n}\n```\n## 占位符 %placeholder 编译出来的代码会将相同的代码合并在一起\n* %placeholder 功能是一个很强大，很实用的一个功能，\n他可以取代以前 CSS 中的基类造成的代码冗余的情形,\n因为 %placeholder 声明的代码，如果不被 @extend 调用的话，\n不会产生任何代码。因此，需要配合@extend使用\n```css\n/*占位符代码*/\n%mt5 {\n  margin-top: 5px;\n}\n%pt5{\n  padding-top: 5px;\n}\n/*继承占位符*/\n.btn {\n  @extend %mt5;\n  @extend %pt5;\n}\n\n.block {\n  @extend %mt5;\n\n  span {\n    @extend %pt5;\n  }\n}\n/*编译结果*/\n.btn, .block {\n  margin-top: 5px;\n}\n\n.btn, .block span {\n  padding-top: 5px;\n}\n```\n## 混合宏 VS 继承 VS 占位符\n\n![](/img/scss.jpg)\n\n## 插值#{} 为了使让变量和属性工作的很完美\n\n```css\n/*scss*/\n$properties: (margin, padding);\n@mixin set-value($side, $value) {\n    @each $prop in $properties {\n        #{$prop}-#{$side}: $value;\n    }\n}\n.login-box {\n    @include set-value(top, 14px);\n}\n\n@mixin generate-sizes($class, $small, $medium, $big) {\n    .#{$class}-small { font-size: $small; }\n    .#{$class}-medium { font-size: $medium; }\n    .#{$class}-big { font-size: $big; }\n}\n@include generate-sizes(\"header-text\", 12px, 20px, 40px);\n\n\n/*编译结果*/\n.login-box {\n    margin-top: 14px;\n    padding-top: 14px;\n}\n.header-text-small { font-size: 12px; }\n.header-text-medium { font-size: 20px; }\n.header-text-big { font-size: 40px; }\n\n```\n## scss中的注释\n\n1、类似 CSS 的注释方式，使用 \"/* \"开头，结属使用 \"*/ \"\n\n2、类似 JavaScript 的注释方式，使用\"//\"\n\n<p style=\"color:red\">区别</p>\n\n前者会在编译出来的 CSS 显示，后者在编译出来的 CSS 中不会显示，来看一个示例：\n\n## Sass运算\n\n* 加法运算 单位必须相同\n```css\nbody{\n    width: 100px + 100px;\n}\n```\n* 减法运算 单位必须相同\n```css\nbody{\n    width: 100px - 10px;\n}\n```\n* 乘法运算 单位必须相同且数值只能有一个单位\n```css\n/*scss写法*/\nbody{\n     width: 10px * 3;\n}\n$list: twitter,facebook,github,weibo;\n\n@for $i from 1 through length($list){\n  .icon-#{nth($list,$i)}{\n    background-postion: 0 - 20px * $i;\n  }\n}\n/*编译结果*/\nbody{\n    width: 30px;\n}\n.icon-twitter {\n  background-postion: -20px; }\n.icon-facebook {\n  background-postion: -40px; }\n.icon-github {\n  background-postion: -60px; }\n.icon-weibo {\n  background-postion: -80px; }\n```\n* 除法运算\n\n    <p style=\"color:red\">\"/\" 符号被当作除法运算符时有以下几种情况：</p>\n    \n    •    如果数值或它的任意部分是存储在一个变量中或是函数的返回值。\n    \n    •    如果数值被圆括号包围。\n    \n    •    如果数值是另一个数学表达式的一部分。\n```css\nbody{\n  font: 10px/8px;             // 纯 CSS，不是除法运算\n  $width: 1000px;\n  width: $width/2;            // 使用了变量，是除法运算\n  width: round(1.5)/2;        // 使用了函数，是除法运算\n  height: (500px/2);          // 使用了圆括号，是除法运算\n  margin-left: 5px + 8px/2px; // 使用了加（+）号，是除法运算\n}\n```\n","source":"_posts/sass基本用法.md","raw":"---\ntitle: sass基本用法\ndate: 2017-07-01 15:06:31\ntags:\n    - Sass\ncategories: Sass\n---\n## 选择器嵌套\n\n假设我们有一段这样的结构：\n\n```css\n<header>\n    <nav>\n        <a href=\"#\">Home</a>\n        <a href=\"#\">About</a>\n        <a href=\"#\">Blog</a>\n    </nav>\n<header>\n/*css写法*/\nnav a {\n  color:red;\n}\nheader nav a {\n  color:green;\n}\n/*scss写法*/\nnav {\n  a {\n    color: red;\n    header & {\n      color:green;\n    }\n  }  \n}\n```\n## 属性嵌套\n```css\n/*css写法*/\n.box {\n    border-top: 1px solid red;\n    border-bottom: 1px solid green;\n}\n/*scss写法*/\n.box{\n    border:{\n        top: 1px solid red;\n        bottom:1px solid green;\n    }\n}\n```\n## 伪类嵌套\n```css\n/*css写法*/\n.clearfix:before, .clearfix:after {\n  content: \"\";\n  display: table;\n}\n.clearfix:after {\n  clear: both;\n  overflow: hidden;\n}\n/*scss写法*/\n.clearfix {\n    &:before,&:after{\n        content: \"\";\n        display: table;\n    }\n    &:after{\n        overflow: hidden;\n        clear: both;\n    }\n}\n```\n## 混合宏  @mixin\n* 优点:将共用的代码块定义为宏，直接引用\n* 缺点:会生成冗余的代码块，不会合并在一起\n```css\n/*声明混合宏*/\n@mixin border-radius($raidus:5px){ \n    //单个参数加默认值($radius:5px) \n    //多个参数用逗号隔开($radius,$width,$height)\n    //多个参数还可以用[...]表示($shadows...)\n    border-radius: $radius;\n}\n/*调用混合宏*/\ndiv{\n    @include border-radius(10px);\n}\n/*多个参数使用...为参数*/\n@mixin box-shadow($shadows...){\n  @if length($shadows) >= 1 {\n    -webkit-box-shadow: $shadows;\n    box-shadow: $shadows;\n  } @else {\n    $shadows: 0 0 2px rgba(#000,.25); // 默认参数  如果没有传 就用这个  传了就用传过来的参数\n    -webkit-box-shadow: $shadow;\n    box-shadow: $shadow;\n  }\n}\n/*调用宏*/\n.box {\n  @include box-shadow(0 0 1px rgba(#000,.5),0 0 2px rgba(#000,.2));\n}\n/*编译结果*/\n.box {\n  -webkit-box-shadow: 0 0 1px rgba(0, 0, 0, 0.5), 0 0 2px rgba(0, 0, 0, 0.2);\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0.5), 0 0 2px rgba(0, 0, 0, 0.2);\n}\n```\n## 继承 @extend 可以将公用的代码合并在一起\n```css\n/*scss写法*/\n.btn {\n  border: 1px solid #ccc;\n  padding: 6px 10px;\n  font-size: 14px;\n}\n\n.btn-primary {\n  background-color: #f36;\n  color: #fff;\n  @extend .btn;\n}\n\n.btn-second {\n  background-color: orange;\n  color: #fff;\n  @extend .btn;\n}\n/*编译结果*/\n.btn, .btn-primary, .btn-second {\n  border: 1px solid #ccc;\n  padding: 6px 10px;\n  font-size: 14px;\n}\n\n.btn-primary {\n  background-color: #f36;\n  color: #fff;\n}\n\n.btn-second {\n  background-clor: orange;\n  color: #fff;\n}\n```\n## 占位符 %placeholder 编译出来的代码会将相同的代码合并在一起\n* %placeholder 功能是一个很强大，很实用的一个功能，\n他可以取代以前 CSS 中的基类造成的代码冗余的情形,\n因为 %placeholder 声明的代码，如果不被 @extend 调用的话，\n不会产生任何代码。因此，需要配合@extend使用\n```css\n/*占位符代码*/\n%mt5 {\n  margin-top: 5px;\n}\n%pt5{\n  padding-top: 5px;\n}\n/*继承占位符*/\n.btn {\n  @extend %mt5;\n  @extend %pt5;\n}\n\n.block {\n  @extend %mt5;\n\n  span {\n    @extend %pt5;\n  }\n}\n/*编译结果*/\n.btn, .block {\n  margin-top: 5px;\n}\n\n.btn, .block span {\n  padding-top: 5px;\n}\n```\n## 混合宏 VS 继承 VS 占位符\n\n![](/img/scss.jpg)\n\n## 插值#{} 为了使让变量和属性工作的很完美\n\n```css\n/*scss*/\n$properties: (margin, padding);\n@mixin set-value($side, $value) {\n    @each $prop in $properties {\n        #{$prop}-#{$side}: $value;\n    }\n}\n.login-box {\n    @include set-value(top, 14px);\n}\n\n@mixin generate-sizes($class, $small, $medium, $big) {\n    .#{$class}-small { font-size: $small; }\n    .#{$class}-medium { font-size: $medium; }\n    .#{$class}-big { font-size: $big; }\n}\n@include generate-sizes(\"header-text\", 12px, 20px, 40px);\n\n\n/*编译结果*/\n.login-box {\n    margin-top: 14px;\n    padding-top: 14px;\n}\n.header-text-small { font-size: 12px; }\n.header-text-medium { font-size: 20px; }\n.header-text-big { font-size: 40px; }\n\n```\n## scss中的注释\n\n1、类似 CSS 的注释方式，使用 \"/* \"开头，结属使用 \"*/ \"\n\n2、类似 JavaScript 的注释方式，使用\"//\"\n\n<p style=\"color:red\">区别</p>\n\n前者会在编译出来的 CSS 显示，后者在编译出来的 CSS 中不会显示，来看一个示例：\n\n## Sass运算\n\n* 加法运算 单位必须相同\n```css\nbody{\n    width: 100px + 100px;\n}\n```\n* 减法运算 单位必须相同\n```css\nbody{\n    width: 100px - 10px;\n}\n```\n* 乘法运算 单位必须相同且数值只能有一个单位\n```css\n/*scss写法*/\nbody{\n     width: 10px * 3;\n}\n$list: twitter,facebook,github,weibo;\n\n@for $i from 1 through length($list){\n  .icon-#{nth($list,$i)}{\n    background-postion: 0 - 20px * $i;\n  }\n}\n/*编译结果*/\nbody{\n    width: 30px;\n}\n.icon-twitter {\n  background-postion: -20px; }\n.icon-facebook {\n  background-postion: -40px; }\n.icon-github {\n  background-postion: -60px; }\n.icon-weibo {\n  background-postion: -80px; }\n```\n* 除法运算\n\n    <p style=\"color:red\">\"/\" 符号被当作除法运算符时有以下几种情况：</p>\n    \n    •    如果数值或它的任意部分是存储在一个变量中或是函数的返回值。\n    \n    •    如果数值被圆括号包围。\n    \n    •    如果数值是另一个数学表达式的一部分。\n```css\nbody{\n  font: 10px/8px;             // 纯 CSS，不是除法运算\n  $width: 1000px;\n  width: $width/2;            // 使用了变量，是除法运算\n  width: round(1.5)/2;        // 使用了函数，是除法运算\n  height: (500px/2);          // 使用了圆括号，是除法运算\n  margin-left: 5px + 8px/2px; // 使用了加（+）号，是除法运算\n}\n```\n","slug":"sass基本用法","published":1,"updated":"2020-03-23T11:05:23.946Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgbydgo9002pofo9jod4kajh","content":"<h2 id=\"选择器嵌套\"><a href=\"#选择器嵌套\" class=\"headerlink\" title=\"选择器嵌套\"></a>选择器嵌套</h2><p>假设我们有一段这样的结构：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"selector-tag\">header</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"selector-tag\">nav</span>&gt;</span><br><span class=\"line\">        &lt;a href=\"#\"&gt;Home&lt;/a&gt;</span><br><span class=\"line\">        &lt;a href=\"#\"&gt;About&lt;/a&gt;</span><br><span class=\"line\">        &lt;a href=\"#\"&gt;Blog&lt;/a&gt;</span><br><span class=\"line\">    &lt;/nav&gt;</span><br><span class=\"line\">&lt;<span class=\"selector-tag\">header</span>&gt;</span><br><span class=\"line\"><span class=\"comment\">/*css写法*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">nav</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>:red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">header</span> <span class=\"selector-tag\">nav</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>:green;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*scss写法*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">nav</span> &#123;</span><br><span class=\"line\">  a &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">color</span>: <span class=\"selector-tag\">red</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">header</span> &amp; &#123;</span><br><span class=\"line\">      <span class=\"attribute\">color</span>:green;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"属性嵌套\"><a href=\"#属性嵌套\" class=\"headerlink\" title=\"属性嵌套\"></a>属性嵌套</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*css写法*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">1px</span> solid red;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid green;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*scss写法*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>:&#123;</span><br><span class=\"line\">        top: <span class=\"number\">1px</span> solid red;</span><br><span class=\"line\">        <span class=\"attribute\">bottom</span>:<span class=\"number\">1px</span> solid green;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"伪类嵌套\"><a href=\"#伪类嵌套\" class=\"headerlink\" title=\"伪类嵌套\"></a>伪类嵌套</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*css写法*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:before</span>, <span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*scss写法*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span> &#123;</span><br><span class=\"line\">    &amp;:before,&amp;:after&#123;</span><br><span class=\"line\">        <span class=\"selector-tag\">content</span>: \"\";</span><br><span class=\"line\">        <span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">table</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &amp;<span class=\"selector-pseudo\">:after</span>&#123;</span><br><span class=\"line\">        <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">        <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"混合宏-mixin\"><a href=\"#混合宏-mixin\" class=\"headerlink\" title=\"混合宏  @mixin\"></a>混合宏  @mixin</h2><ul>\n<li>优点:将共用的代码块定义为宏，直接引用</li>\n<li>缺点:会生成冗余的代码块，不会合并在一起<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*声明混合宏*/</span></span><br><span class=\"line\"><span class=\"keyword\">@mixin</span> border-radius($<span class=\"attribute\">raidus:</span><span class=\"number\">5px</span>)&#123; </span><br><span class=\"line\">    //单个参数加默认值($radius:5px) </span><br><span class=\"line\">    //多个参数用逗号隔开($radius,$width,$height)</span><br><span class=\"line\">    //多个参数还可以用[...]表示($shadows...)</span><br><span class=\"line\">    border-radius: $radius;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*调用混合宏*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">    @include border-radius(10px);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*多个参数使用...为参数*/</span></span><br><span class=\"line\"><span class=\"keyword\">@mixin</span> box-shadow($shadows...)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">@if</span> length($shadows) &gt;= <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">    -webkit-box-shadow: $shadows;</span><br><span class=\"line\">    box-shadow: $shadows;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">@else</span> &#123;</span><br><span class=\"line\">    $shadows: 0 0 2px rgba(#000,.25); // 默认参数  如果没有传 就用这个  传了就用传过来的参数</span><br><span class=\"line\">    -webkit-box-shadow: $shadow;</span><br><span class=\"line\">    box-shadow: $shadow;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*调用宏*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  @include box-shadow(0 0 1px rgba(#000,.5),0 0 2px rgba(#000,.2));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*编译结果*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">1px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.5</span>), <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.2</span>);</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">1px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.5</span>), <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"继承-extend-可以将公用的代码合并在一起\"><a href=\"#继承-extend-可以将公用的代码合并在一起\" class=\"headerlink\" title=\"继承 @extend 可以将公用的代码合并在一起\"></a>继承 @extend 可以将公用的代码合并在一起</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*scss写法*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.btn</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">6px</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn-primary</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#f36</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  @extend .btn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn-second</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: orange;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  @extend .btn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*编译结果*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.btn</span>, <span class=\"selector-class\">.btn-primary</span>, <span class=\"selector-class\">.btn-second</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">6px</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn-primary</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#f36</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn-second</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-clor</span>: orange;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"占位符-placeholder-编译出来的代码会将相同的代码合并在一起\"><a href=\"#占位符-placeholder-编译出来的代码会将相同的代码合并在一起\" class=\"headerlink\" title=\"占位符 %placeholder 编译出来的代码会将相同的代码合并在一起\"></a>占位符 %placeholder 编译出来的代码会将相同的代码合并在一起</h2><ul>\n<li>%placeholder 功能是一个很强大，很实用的一个功能，<br>他可以取代以前 CSS 中的基类造成的代码冗余的情形,<br>因为 %placeholder 声明的代码，如果不被 @extend 调用的话，<br>不会产生任何代码。因此，需要配合@extend使用<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*占位符代码*/</span></span><br><span class=\"line\">%<span class=\"selector-tag\">mt5</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">%<span class=\"selector-tag\">pt5</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding-top</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*继承占位符*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.btn</span> &#123;</span><br><span class=\"line\">  @extend %mt5;</span><br><span class=\"line\">  <span class=\"keyword\">@extend</span> %pt5;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.block</span> &#123;</span><br><span class=\"line\">  @extend %mt5;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">    @extend %pt5;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*编译结果*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.btn</span>, <span class=\"selector-class\">.block</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn</span>, <span class=\"selector-class\">.block</span> <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding-top</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"混合宏-VS-继承-VS-占位符\"><a href=\"#混合宏-VS-继承-VS-占位符\" class=\"headerlink\" title=\"混合宏 VS 继承 VS 占位符\"></a>混合宏 VS 继承 VS 占位符</h2><p><img src=\"/img/scss.jpg\" alt></p>\n<h2 id=\"插值-为了使让变量和属性工作的很完美\"><a href=\"#插值-为了使让变量和属性工作的很完美\" class=\"headerlink\" title=\"插值#{} 为了使让变量和属性工作的很完美\"></a>插值#{} 为了使让变量和属性工作的很完美</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*scss*/</span></span><br><span class=\"line\">$properties: (margin, padding);</span><br><span class=\"line\"><span class=\"keyword\">@mixin</span> set-value($side, $value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">@each</span> $prop in $properties &#123;</span><br><span class=\"line\">        #&#123;$prop&#125;-#&#123;$side&#125;: $value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.login-box</span> &#123;</span><br><span class=\"line\">    @include set-value(top, 14px);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@mixin</span> generate-sizes($class, $small, $medium, $big) &#123;</span><br><span class=\"line\">    .#&#123;$class&#125;-small &#123; font-size: $small; &#125;</span><br><span class=\"line\">    .#&#123;$class&#125;-medium &#123; font-size: $medium; &#125;</span><br><span class=\"line\">    .#&#123;$class&#125;-big &#123; font-size: $big; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@include</span> generate-sizes(<span class=\"string\">\"header-text\"</span>, <span class=\"number\">12px</span>, <span class=\"number\">20px</span>, <span class=\"number\">40px</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*编译结果*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.login-box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding-top</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.header-text-small</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.header-text-medium</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.header-text-big</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">40px</span>; &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"scss中的注释\"><a href=\"#scss中的注释\" class=\"headerlink\" title=\"scss中的注释\"></a>scss中的注释</h2><p>1、类似 CSS 的注释方式，使用 “/<em> “开头，结属使用 “</em>/ “</p>\n<p>2、类似 JavaScript 的注释方式，使用”//“</p>\n<p style=\"color:red\">区别</p>\n\n<p>前者会在编译出来的 CSS 显示，后者在编译出来的 CSS 中不会显示，来看一个示例：</p>\n<h2 id=\"Sass运算\"><a href=\"#Sass运算\" class=\"headerlink\" title=\"Sass运算\"></a>Sass运算</h2><ul>\n<li><p>加法运算 单位必须相同</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span> + <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>减法运算 单位必须相同</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span> - <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>乘法运算 单位必须相同且数值只能有一个单位</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*scss写法*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">     <span class=\"attribute\">width</span>: <span class=\"number\">10px</span> * <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$list: twitter,facebook,github,weibo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@for</span> $i from <span class=\"number\">1</span> through length($list)&#123;</span><br><span class=\"line\">  .icon-#&#123;nth($list,$i)&#125;&#123;</span><br><span class=\"line\">    background-postion: 0 - 20px * $i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*编译结果*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.icon-twitter</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-postion</span>: -<span class=\"number\">20px</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.icon-facebook</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-postion</span>: -<span class=\"number\">40px</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.icon-github</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-postion</span>: -<span class=\"number\">60px</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.icon-weibo</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-postion</span>: -<span class=\"number\">80px</span>; &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>除法运算</p>\n  <p style=\"color:red\">“/“ 符号被当作除法运算符时有以下几种情况：</p>\n\n<p>  •    如果数值或它的任意部分是存储在一个变量中或是函数的返回值。</p>\n<p>  •    如果数值被圆括号包围。</p>\n<p>  •    如果数值是另一个数学表达式的一部分。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">  font: 10px/8px;             // 纯 CSS，不是除法运算</span><br><span class=\"line\">  $width: 1000px;</span><br><span class=\"line\">  width: $width/2;            // 使用了变量，是除法运算</span><br><span class=\"line\">  width: round(1.5)/2;        // 使用了函数，是除法运算</span><br><span class=\"line\">  height: (500px/2);          // 使用了圆括号，是除法运算</span><br><span class=\"line\">  margin-left: 5px + 8px/2px; // 使用了加（+）号，是除法运算</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"选择器嵌套\"><a href=\"#选择器嵌套\" class=\"headerlink\" title=\"选择器嵌套\"></a>选择器嵌套</h2><p>假设我们有一段这样的结构：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"selector-tag\">header</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"selector-tag\">nav</span>&gt;</span><br><span class=\"line\">        &lt;a href=\"#\"&gt;Home&lt;/a&gt;</span><br><span class=\"line\">        &lt;a href=\"#\"&gt;About&lt;/a&gt;</span><br><span class=\"line\">        &lt;a href=\"#\"&gt;Blog&lt;/a&gt;</span><br><span class=\"line\">    &lt;/nav&gt;</span><br><span class=\"line\">&lt;<span class=\"selector-tag\">header</span>&gt;</span><br><span class=\"line\"><span class=\"comment\">/*css写法*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">nav</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>:red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">header</span> <span class=\"selector-tag\">nav</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>:green;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*scss写法*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">nav</span> &#123;</span><br><span class=\"line\">  a &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">color</span>: <span class=\"selector-tag\">red</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">header</span> &amp; &#123;</span><br><span class=\"line\">      <span class=\"attribute\">color</span>:green;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"属性嵌套\"><a href=\"#属性嵌套\" class=\"headerlink\" title=\"属性嵌套\"></a>属性嵌套</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*css写法*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">1px</span> solid red;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid green;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*scss写法*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>:&#123;</span><br><span class=\"line\">        top: <span class=\"number\">1px</span> solid red;</span><br><span class=\"line\">        <span class=\"attribute\">bottom</span>:<span class=\"number\">1px</span> solid green;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"伪类嵌套\"><a href=\"#伪类嵌套\" class=\"headerlink\" title=\"伪类嵌套\"></a>伪类嵌套</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*css写法*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:before</span>, <span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*scss写法*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span> &#123;</span><br><span class=\"line\">    &amp;:before,&amp;:after&#123;</span><br><span class=\"line\">        <span class=\"selector-tag\">content</span>: \"\";</span><br><span class=\"line\">        <span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">table</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &amp;<span class=\"selector-pseudo\">:after</span>&#123;</span><br><span class=\"line\">        <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">        <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"混合宏-mixin\"><a href=\"#混合宏-mixin\" class=\"headerlink\" title=\"混合宏  @mixin\"></a>混合宏  @mixin</h2><ul>\n<li>优点:将共用的代码块定义为宏，直接引用</li>\n<li>缺点:会生成冗余的代码块，不会合并在一起<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*声明混合宏*/</span></span><br><span class=\"line\"><span class=\"keyword\">@mixin</span> border-radius($<span class=\"attribute\">raidus:</span><span class=\"number\">5px</span>)&#123; </span><br><span class=\"line\">    //单个参数加默认值($radius:5px) </span><br><span class=\"line\">    //多个参数用逗号隔开($radius,$width,$height)</span><br><span class=\"line\">    //多个参数还可以用[...]表示($shadows...)</span><br><span class=\"line\">    border-radius: $radius;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*调用混合宏*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">    @include border-radius(10px);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*多个参数使用...为参数*/</span></span><br><span class=\"line\"><span class=\"keyword\">@mixin</span> box-shadow($shadows...)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">@if</span> length($shadows) &gt;= <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">    -webkit-box-shadow: $shadows;</span><br><span class=\"line\">    box-shadow: $shadows;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">@else</span> &#123;</span><br><span class=\"line\">    $shadows: 0 0 2px rgba(#000,.25); // 默认参数  如果没有传 就用这个  传了就用传过来的参数</span><br><span class=\"line\">    -webkit-box-shadow: $shadow;</span><br><span class=\"line\">    box-shadow: $shadow;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*调用宏*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  @include box-shadow(0 0 1px rgba(#000,.5),0 0 2px rgba(#000,.2));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*编译结果*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">1px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.5</span>), <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.2</span>);</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">1px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.5</span>), <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"继承-extend-可以将公用的代码合并在一起\"><a href=\"#继承-extend-可以将公用的代码合并在一起\" class=\"headerlink\" title=\"继承 @extend 可以将公用的代码合并在一起\"></a>继承 @extend 可以将公用的代码合并在一起</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*scss写法*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.btn</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">6px</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn-primary</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#f36</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  @extend .btn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn-second</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: orange;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  @extend .btn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*编译结果*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.btn</span>, <span class=\"selector-class\">.btn-primary</span>, <span class=\"selector-class\">.btn-second</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">6px</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn-primary</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#f36</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn-second</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-clor</span>: orange;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"占位符-placeholder-编译出来的代码会将相同的代码合并在一起\"><a href=\"#占位符-placeholder-编译出来的代码会将相同的代码合并在一起\" class=\"headerlink\" title=\"占位符 %placeholder 编译出来的代码会将相同的代码合并在一起\"></a>占位符 %placeholder 编译出来的代码会将相同的代码合并在一起</h2><ul>\n<li>%placeholder 功能是一个很强大，很实用的一个功能，<br>他可以取代以前 CSS 中的基类造成的代码冗余的情形,<br>因为 %placeholder 声明的代码，如果不被 @extend 调用的话，<br>不会产生任何代码。因此，需要配合@extend使用<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*占位符代码*/</span></span><br><span class=\"line\">%<span class=\"selector-tag\">mt5</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">%<span class=\"selector-tag\">pt5</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding-top</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*继承占位符*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.btn</span> &#123;</span><br><span class=\"line\">  @extend %mt5;</span><br><span class=\"line\">  <span class=\"keyword\">@extend</span> %pt5;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.block</span> &#123;</span><br><span class=\"line\">  @extend %mt5;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">    @extend %pt5;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*编译结果*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.btn</span>, <span class=\"selector-class\">.block</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn</span>, <span class=\"selector-class\">.block</span> <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding-top</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"混合宏-VS-继承-VS-占位符\"><a href=\"#混合宏-VS-继承-VS-占位符\" class=\"headerlink\" title=\"混合宏 VS 继承 VS 占位符\"></a>混合宏 VS 继承 VS 占位符</h2><p><img src=\"/img/scss.jpg\" alt></p>\n<h2 id=\"插值-为了使让变量和属性工作的很完美\"><a href=\"#插值-为了使让变量和属性工作的很完美\" class=\"headerlink\" title=\"插值#{} 为了使让变量和属性工作的很完美\"></a>插值#{} 为了使让变量和属性工作的很完美</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*scss*/</span></span><br><span class=\"line\">$properties: (margin, padding);</span><br><span class=\"line\"><span class=\"keyword\">@mixin</span> set-value($side, $value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">@each</span> $prop in $properties &#123;</span><br><span class=\"line\">        #&#123;$prop&#125;-#&#123;$side&#125;: $value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.login-box</span> &#123;</span><br><span class=\"line\">    @include set-value(top, 14px);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@mixin</span> generate-sizes($class, $small, $medium, $big) &#123;</span><br><span class=\"line\">    .#&#123;$class&#125;-small &#123; font-size: $small; &#125;</span><br><span class=\"line\">    .#&#123;$class&#125;-medium &#123; font-size: $medium; &#125;</span><br><span class=\"line\">    .#&#123;$class&#125;-big &#123; font-size: $big; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@include</span> generate-sizes(<span class=\"string\">\"header-text\"</span>, <span class=\"number\">12px</span>, <span class=\"number\">20px</span>, <span class=\"number\">40px</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*编译结果*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.login-box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding-top</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.header-text-small</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.header-text-medium</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.header-text-big</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">40px</span>; &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"scss中的注释\"><a href=\"#scss中的注释\" class=\"headerlink\" title=\"scss中的注释\"></a>scss中的注释</h2><p>1、类似 CSS 的注释方式，使用 “/<em> “开头，结属使用 “</em>/ “</p>\n<p>2、类似 JavaScript 的注释方式，使用”//“</p>\n<p style=\"color:red\">区别</p>\n\n<p>前者会在编译出来的 CSS 显示，后者在编译出来的 CSS 中不会显示，来看一个示例：</p>\n<h2 id=\"Sass运算\"><a href=\"#Sass运算\" class=\"headerlink\" title=\"Sass运算\"></a>Sass运算</h2><ul>\n<li><p>加法运算 单位必须相同</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span> + <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>减法运算 单位必须相同</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span> - <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>乘法运算 单位必须相同且数值只能有一个单位</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*scss写法*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">     <span class=\"attribute\">width</span>: <span class=\"number\">10px</span> * <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$list: twitter,facebook,github,weibo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@for</span> $i from <span class=\"number\">1</span> through length($list)&#123;</span><br><span class=\"line\">  .icon-#&#123;nth($list,$i)&#125;&#123;</span><br><span class=\"line\">    background-postion: 0 - 20px * $i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*编译结果*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.icon-twitter</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-postion</span>: -<span class=\"number\">20px</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.icon-facebook</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-postion</span>: -<span class=\"number\">40px</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.icon-github</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-postion</span>: -<span class=\"number\">60px</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.icon-weibo</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-postion</span>: -<span class=\"number\">80px</span>; &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>除法运算</p>\n  <p style=\"color:red\">“/“ 符号被当作除法运算符时有以下几种情况：</p>\n\n<p>  •    如果数值或它的任意部分是存储在一个变量中或是函数的返回值。</p>\n<p>  •    如果数值被圆括号包围。</p>\n<p>  •    如果数值是另一个数学表达式的一部分。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">  font: 10px/8px;             // 纯 CSS，不是除法运算</span><br><span class=\"line\">  $width: 1000px;</span><br><span class=\"line\">  width: $width/2;            // 使用了变量，是除法运算</span><br><span class=\"line\">  width: round(1.5)/2;        // 使用了函数，是除法运算</span><br><span class=\"line\">  height: (500px/2);          // 使用了圆括号，是除法运算</span><br><span class=\"line\">  margin-left: 5px + 8px/2px; // 使用了加（+）号，是除法运算</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"sass控制命令","date":"2017-07-01T07:06:31.000Z","_content":"\n## scss控制命令\n\n> * @if\n\n```css\n/*scss写法*/\n@mixin blockOrHidden($boolean:true) {\n  @if $boolean {\n      @debug \"$boolean is #{$boolean}\";\n      display: block;\n    }\n  @else {\n      @debug \"$boolean is #{$boolean}\";\n      display: none;\n    }\n}\n\n.block {\n  @include blockOrHidden;\n}\n\n.hidden{\n  @include blockOrHidden(false);\n}\n/*编译结果*/\n.block {\n  display: block;\n}\n\n.hidden {\n  display: none;\n}\n```\n\n```css\n/*scss写法*/\n$num:10;\n\n@mixin size($num){\n    @if $num > 5  and $num < 8{\n        width:$num * 10px;\n    }\n    @else if $num < 5{\n        width:$num * $num * 10px;\n    }\n    @else{\n        width:#{$num}px\n    }\n}\n\nbody{\n    //@include size(7) \n    //@include size(10)\n    @include size(3)\n}\n/*编译结果*/\nbody{\n    //width:70px;\n    //width:10px;\n    width:90px;\n}\n```\n\n> * @for \n\n1.@for $i from <start> through <end>\n\n2.@for $i from <start> to <end>\n\n$i 表示变量 start 表示起始值 end 表示结束值\n\n两个的区别是关键字 through 表示包括 end 这个数，而 to 则不包括 end 这个数\n\n```css\n$col:8.33%;\n//through\n@for $i from  1 through 2 {\n    .col-xs-#{$i} {\n        width: $i * $col;\n    }\n} \n\n\n//to\n@for $i from  1 to 2 {\n    .col-md-#{$i} {\n        width: $i * $col;\n    }\n} \n/*编译结果*/\n.col-xs-1 {\n  width: 8.33%; }\n.col-xs-2 {\n  width: 16.66%; }\n.col-md-1 {\n  width: 8.33%; }\n```\n\n> * @while \n\n```css\n$types: 4;\n$type-width: 20px;\n\n@while $types > 0 {\n    .while-#{$types} {\n        width: $type-width + $types;\n    }\n    $types: $types - 1;\n}\n/*编译结果*/\n.while-4 {\n  width: 24px;\n}\n.while-3 {\n  width: 23px;\n}\n.while-2 {\n  width: 22px;\n}\n.while-1 {\n  width: 21px;\n}\n```\n\n> * @each \n\n@each $var in <list>\n\n```css\n$list: adam john wynn mason kuroir;\n@mixin author-images {\n    @each $author in $list {\n        .photo-#{$author} {\n            background: url(\"/images/avatars/#{$author}.png\") no-repeat;\n        }\n    }\n}\n\n.author-bio {\n    @include author-images;\n}\n/*编译结果*/\n.author-bio .photo-adam {\n  background: url(\"/images/avatars/adam.png\") no-repeat; }\n.author-bio .photo-john {\n  background: url(\"/images/avatars/john.png\") no-repeat; }\n.author-bio .photo-wynn {\n  background: url(\"/images/avatars/wynn.png\") no-repeat; }\n.author-bio .photo-mason {\n  background: url(\"/images/avatars/mason.png\") no-repeat; }\n.author-bio .photo-kuroir {\n  background: url(\"/images/avatars/kuroir.png\") no-repeat; }\n```\n","source":"_posts/sass控制命令.md","raw":"---\ntitle: sass控制命令\ndate: 2017-07-01 15:06:31\ntags:\n    - Sass\ncategories: Sass\n---\n\n## scss控制命令\n\n> * @if\n\n```css\n/*scss写法*/\n@mixin blockOrHidden($boolean:true) {\n  @if $boolean {\n      @debug \"$boolean is #{$boolean}\";\n      display: block;\n    }\n  @else {\n      @debug \"$boolean is #{$boolean}\";\n      display: none;\n    }\n}\n\n.block {\n  @include blockOrHidden;\n}\n\n.hidden{\n  @include blockOrHidden(false);\n}\n/*编译结果*/\n.block {\n  display: block;\n}\n\n.hidden {\n  display: none;\n}\n```\n\n```css\n/*scss写法*/\n$num:10;\n\n@mixin size($num){\n    @if $num > 5  and $num < 8{\n        width:$num * 10px;\n    }\n    @else if $num < 5{\n        width:$num * $num * 10px;\n    }\n    @else{\n        width:#{$num}px\n    }\n}\n\nbody{\n    //@include size(7) \n    //@include size(10)\n    @include size(3)\n}\n/*编译结果*/\nbody{\n    //width:70px;\n    //width:10px;\n    width:90px;\n}\n```\n\n> * @for \n\n1.@for $i from <start> through <end>\n\n2.@for $i from <start> to <end>\n\n$i 表示变量 start 表示起始值 end 表示结束值\n\n两个的区别是关键字 through 表示包括 end 这个数，而 to 则不包括 end 这个数\n\n```css\n$col:8.33%;\n//through\n@for $i from  1 through 2 {\n    .col-xs-#{$i} {\n        width: $i * $col;\n    }\n} \n\n\n//to\n@for $i from  1 to 2 {\n    .col-md-#{$i} {\n        width: $i * $col;\n    }\n} \n/*编译结果*/\n.col-xs-1 {\n  width: 8.33%; }\n.col-xs-2 {\n  width: 16.66%; }\n.col-md-1 {\n  width: 8.33%; }\n```\n\n> * @while \n\n```css\n$types: 4;\n$type-width: 20px;\n\n@while $types > 0 {\n    .while-#{$types} {\n        width: $type-width + $types;\n    }\n    $types: $types - 1;\n}\n/*编译结果*/\n.while-4 {\n  width: 24px;\n}\n.while-3 {\n  width: 23px;\n}\n.while-2 {\n  width: 22px;\n}\n.while-1 {\n  width: 21px;\n}\n```\n\n> * @each \n\n@each $var in <list>\n\n```css\n$list: adam john wynn mason kuroir;\n@mixin author-images {\n    @each $author in $list {\n        .photo-#{$author} {\n            background: url(\"/images/avatars/#{$author}.png\") no-repeat;\n        }\n    }\n}\n\n.author-bio {\n    @include author-images;\n}\n/*编译结果*/\n.author-bio .photo-adam {\n  background: url(\"/images/avatars/adam.png\") no-repeat; }\n.author-bio .photo-john {\n  background: url(\"/images/avatars/john.png\") no-repeat; }\n.author-bio .photo-wynn {\n  background: url(\"/images/avatars/wynn.png\") no-repeat; }\n.author-bio .photo-mason {\n  background: url(\"/images/avatars/mason.png\") no-repeat; }\n.author-bio .photo-kuroir {\n  background: url(\"/images/avatars/kuroir.png\") no-repeat; }\n```\n","slug":"sass控制命令","published":1,"updated":"2020-03-23T11:05:23.946Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgbydgoa002tofo90wpllmia","content":"<h2 id=\"scss控制命令\"><a href=\"#scss控制命令\" class=\"headerlink\" title=\"scss控制命令\"></a>scss控制命令</h2><blockquote>\n<ul>\n<li>@if</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*scss写法*/</span></span><br><span class=\"line\"><span class=\"keyword\">@mixin</span> blockOrHidden($<span class=\"attribute\">boolean:</span>true) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">@if</span> $boolean &#123;</span><br><span class=\"line\">      <span class=\"keyword\">@debug</span> <span class=\"string\">\"$boolean is #&#123;$boolean&#125;\"</span>;</span><br><span class=\"line\">      <span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">block</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"keyword\">@else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">@debug</span> <span class=\"string\">\"$boolean is #&#123;$boolean&#125;\"</span>;</span><br><span class=\"line\">      <span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">none</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.block</span> &#123;</span><br><span class=\"line\">  @include blockOrHidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.hidden</span>&#123;</span><br><span class=\"line\">  @include blockOrHidden(false);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*编译结果*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.block</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.hidden</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*scss写法*/</span></span><br><span class=\"line\">$num:10;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@mixin</span> size($num)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@if</span> $num &gt; <span class=\"number\">5</span>  <span class=\"keyword\">and</span> $num &lt; <span class=\"number\">8</span>&#123;</span><br><span class=\"line\">        width:$num * 10px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">@else</span> if $num &lt; <span class=\"number\">5</span>&#123;</span><br><span class=\"line\">        width:$num * $num * 10px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">@else</span>&#123;</span><br><span class=\"line\">        width:#&#123;$num&#125;px</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    //@include size(7) </span><br><span class=\"line\">    //@include size(10)</span><br><span class=\"line\">    <span class=\"keyword\">@include</span> size(<span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/*编译结果*/</span><br><span class=\"line\">body&#123;</span><br><span class=\"line\">    //width:70px;</span><br><span class=\"line\">    //width:10px;</span><br><span class=\"line\">    <span class=\"selector-tag\">width</span><span class=\"selector-pseudo\">:90px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>@for </li>\n</ul>\n</blockquote>\n<p>1.@for $i from <start> through <end></end></start></p>\n<p>2.@for $i from <start> to <end></end></start></p>\n<p>$i 表示变量 start 表示起始值 end 表示结束值</p>\n<p>两个的区别是关键字 through 表示包括 end 这个数，而 to 则不包括 end 这个数</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$col:8.33%;</span><br><span class=\"line\">//through</span><br><span class=\"line\"><span class=\"keyword\">@for</span> $i from  <span class=\"number\">1</span> through <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">    .col-xs-#&#123;$i&#125; &#123;</span><br><span class=\"line\">        width: $i * $col;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//to</span><br><span class=\"line\"><span class=\"keyword\">@for</span> $i from  <span class=\"number\">1</span> to <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">    .col-md-#&#123;$i&#125; &#123;</span><br><span class=\"line\">        width: $i * $col;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">/*编译结果*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.col-xs-1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">8.33%</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.col-xs-2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">16.66%</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.col-md-1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">8.33%</span>; &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>@while </li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$types: 4;</span><br><span class=\"line\">$type-width: 20px;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@while</span> $types &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">    .while-#&#123;$types&#125; &#123;</span><br><span class=\"line\">        width: $type-width + $types;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $types: $types - 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*编译结果*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.while-4</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">24px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.while-3</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">23px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.while-2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">22px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.while-1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">21px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>@each </li>\n</ul>\n</blockquote>\n<p>@each $var in <list></list></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$list: adam john wynn mason kuroir;</span><br><span class=\"line\"><span class=\"keyword\">@mixin</span> author-images &#123;</span><br><span class=\"line\">    <span class=\"keyword\">@each</span> $author in $list &#123;</span><br><span class=\"line\">        .photo-#&#123;$author&#125; &#123;</span><br><span class=\"line\">            background: url(\"/images/avatars/#&#123;$author&#125;.png\") no-repeat;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.author-bio</span> &#123;</span><br><span class=\"line\">    @include author-images;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*编译结果*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.author-bio</span> <span class=\"selector-class\">.photo-adam</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"/images/avatars/adam.png\"</span>) no-repeat; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.author-bio</span> <span class=\"selector-class\">.photo-john</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"/images/avatars/john.png\"</span>) no-repeat; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.author-bio</span> <span class=\"selector-class\">.photo-wynn</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"/images/avatars/wynn.png\"</span>) no-repeat; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.author-bio</span> <span class=\"selector-class\">.photo-mason</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"/images/avatars/mason.png\"</span>) no-repeat; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.author-bio</span> <span class=\"selector-class\">.photo-kuroir</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"/images/avatars/kuroir.png\"</span>) no-repeat; &#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"scss控制命令\"><a href=\"#scss控制命令\" class=\"headerlink\" title=\"scss控制命令\"></a>scss控制命令</h2><blockquote>\n<ul>\n<li>@if</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*scss写法*/</span></span><br><span class=\"line\"><span class=\"keyword\">@mixin</span> blockOrHidden($<span class=\"attribute\">boolean:</span>true) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">@if</span> $boolean &#123;</span><br><span class=\"line\">      <span class=\"keyword\">@debug</span> <span class=\"string\">\"$boolean is #&#123;$boolean&#125;\"</span>;</span><br><span class=\"line\">      <span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">block</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"keyword\">@else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">@debug</span> <span class=\"string\">\"$boolean is #&#123;$boolean&#125;\"</span>;</span><br><span class=\"line\">      <span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">none</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.block</span> &#123;</span><br><span class=\"line\">  @include blockOrHidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.hidden</span>&#123;</span><br><span class=\"line\">  @include blockOrHidden(false);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*编译结果*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.block</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.hidden</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*scss写法*/</span></span><br><span class=\"line\">$num:10;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@mixin</span> size($num)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@if</span> $num &gt; <span class=\"number\">5</span>  <span class=\"keyword\">and</span> $num &lt; <span class=\"number\">8</span>&#123;</span><br><span class=\"line\">        width:$num * 10px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">@else</span> if $num &lt; <span class=\"number\">5</span>&#123;</span><br><span class=\"line\">        width:$num * $num * 10px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">@else</span>&#123;</span><br><span class=\"line\">        width:#&#123;$num&#125;px</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    //@include size(7) </span><br><span class=\"line\">    //@include size(10)</span><br><span class=\"line\">    <span class=\"keyword\">@include</span> size(<span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/*编译结果*/</span><br><span class=\"line\">body&#123;</span><br><span class=\"line\">    //width:70px;</span><br><span class=\"line\">    //width:10px;</span><br><span class=\"line\">    <span class=\"selector-tag\">width</span><span class=\"selector-pseudo\">:90px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>@for </li>\n</ul>\n</blockquote>\n<p>1.@for $i from <start> through <end></end></start></p>\n<p>2.@for $i from <start> to <end></end></start></p>\n<p>$i 表示变量 start 表示起始值 end 表示结束值</p>\n<p>两个的区别是关键字 through 表示包括 end 这个数，而 to 则不包括 end 这个数</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$col:8.33%;</span><br><span class=\"line\">//through</span><br><span class=\"line\"><span class=\"keyword\">@for</span> $i from  <span class=\"number\">1</span> through <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">    .col-xs-#&#123;$i&#125; &#123;</span><br><span class=\"line\">        width: $i * $col;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//to</span><br><span class=\"line\"><span class=\"keyword\">@for</span> $i from  <span class=\"number\">1</span> to <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">    .col-md-#&#123;$i&#125; &#123;</span><br><span class=\"line\">        width: $i * $col;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">/*编译结果*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.col-xs-1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">8.33%</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.col-xs-2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">16.66%</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.col-md-1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">8.33%</span>; &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>@while </li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$types: 4;</span><br><span class=\"line\">$type-width: 20px;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@while</span> $types &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">    .while-#&#123;$types&#125; &#123;</span><br><span class=\"line\">        width: $type-width + $types;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $types: $types - 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*编译结果*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.while-4</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">24px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.while-3</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">23px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.while-2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">22px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.while-1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">21px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>@each </li>\n</ul>\n</blockquote>\n<p>@each $var in <list></list></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$list: adam john wynn mason kuroir;</span><br><span class=\"line\"><span class=\"keyword\">@mixin</span> author-images &#123;</span><br><span class=\"line\">    <span class=\"keyword\">@each</span> $author in $list &#123;</span><br><span class=\"line\">        .photo-#&#123;$author&#125; &#123;</span><br><span class=\"line\">            background: url(\"/images/avatars/#&#123;$author&#125;.png\") no-repeat;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.author-bio</span> &#123;</span><br><span class=\"line\">    @include author-images;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*编译结果*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.author-bio</span> <span class=\"selector-class\">.photo-adam</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"/images/avatars/adam.png\"</span>) no-repeat; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.author-bio</span> <span class=\"selector-class\">.photo-john</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"/images/avatars/john.png\"</span>) no-repeat; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.author-bio</span> <span class=\"selector-class\">.photo-wynn</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"/images/avatars/wynn.png\"</span>) no-repeat; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.author-bio</span> <span class=\"selector-class\">.photo-mason</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"/images/avatars/mason.png\"</span>) no-repeat; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.author-bio</span> <span class=\"selector-class\">.photo-kuroir</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"/images/avatars/kuroir.png\"</span>) no-repeat; &#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"ubuntu中的命令","date":"2016-08-01T13:18:17.000Z","_content":"\n# ubuntu中的命令\n### 1. 全局安装的包目录在 /usr/local/nodejs/lib/node_modules/ 下边\n### 2. /usr/local/bin 环境变量的配置\n### 3. cp xxx.js xxx.js 目标目录  复制文件到目标目录\n### 4. rm -rf xxx.js 删除文件\n### 5. mv xxx.js 目标目录  移动文件到目标目录","source":"_posts/ubuntu中的命令.md","raw":"---\ntitle: ubuntu中的命令\ndate: 2016-08-01 21:18:17\ncategories: ubuntu\ntags:\n    - ubuntu\n---\n\n# ubuntu中的命令\n### 1. 全局安装的包目录在 /usr/local/nodejs/lib/node_modules/ 下边\n### 2. /usr/local/bin 环境变量的配置\n### 3. cp xxx.js xxx.js 目标目录  复制文件到目标目录\n### 4. rm -rf xxx.js 删除文件\n### 5. mv xxx.js 目标目录  移动文件到目标目录","slug":"ubuntu中的命令","published":1,"updated":"2020-03-23T11:05:23.946Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgbydgob002xofo9xccuwh5y","content":"<h1 id=\"ubuntu中的命令\"><a href=\"#ubuntu中的命令\" class=\"headerlink\" title=\"ubuntu中的命令\"></a>ubuntu中的命令</h1><h3 id=\"1-全局安装的包目录在-usr-local-nodejs-lib-node-modules-下边\"><a href=\"#1-全局安装的包目录在-usr-local-nodejs-lib-node-modules-下边\" class=\"headerlink\" title=\"1. 全局安装的包目录在 /usr/local/nodejs/lib/node_modules/ 下边\"></a>1. 全局安装的包目录在 /usr/local/nodejs/lib/node_modules/ 下边</h3><h3 id=\"2-usr-local-bin-环境变量的配置\"><a href=\"#2-usr-local-bin-环境变量的配置\" class=\"headerlink\" title=\"2. /usr/local/bin 环境变量的配置\"></a>2. /usr/local/bin 环境变量的配置</h3><h3 id=\"3-cp-xxx-js-xxx-js-目标目录-复制文件到目标目录\"><a href=\"#3-cp-xxx-js-xxx-js-目标目录-复制文件到目标目录\" class=\"headerlink\" title=\"3. cp xxx.js xxx.js 目标目录  复制文件到目标目录\"></a>3. cp xxx.js xxx.js 目标目录  复制文件到目标目录</h3><h3 id=\"4-rm-rf-xxx-js-删除文件\"><a href=\"#4-rm-rf-xxx-js-删除文件\" class=\"headerlink\" title=\"4. rm -rf xxx.js 删除文件\"></a>4. rm -rf xxx.js 删除文件</h3><h3 id=\"5-mv-xxx-js-目标目录-移动文件到目标目录\"><a href=\"#5-mv-xxx-js-目标目录-移动文件到目标目录\" class=\"headerlink\" title=\"5. mv xxx.js 目标目录  移动文件到目标目录\"></a>5. mv xxx.js 目标目录  移动文件到目标目录</h3>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ubuntu中的命令\"><a href=\"#ubuntu中的命令\" class=\"headerlink\" title=\"ubuntu中的命令\"></a>ubuntu中的命令</h1><h3 id=\"1-全局安装的包目录在-usr-local-nodejs-lib-node-modules-下边\"><a href=\"#1-全局安装的包目录在-usr-local-nodejs-lib-node-modules-下边\" class=\"headerlink\" title=\"1. 全局安装的包目录在 /usr/local/nodejs/lib/node_modules/ 下边\"></a>1. 全局安装的包目录在 /usr/local/nodejs/lib/node_modules/ 下边</h3><h3 id=\"2-usr-local-bin-环境变量的配置\"><a href=\"#2-usr-local-bin-环境变量的配置\" class=\"headerlink\" title=\"2. /usr/local/bin 环境变量的配置\"></a>2. /usr/local/bin 环境变量的配置</h3><h3 id=\"3-cp-xxx-js-xxx-js-目标目录-复制文件到目标目录\"><a href=\"#3-cp-xxx-js-xxx-js-目标目录-复制文件到目标目录\" class=\"headerlink\" title=\"3. cp xxx.js xxx.js 目标目录  复制文件到目标目录\"></a>3. cp xxx.js xxx.js 目标目录  复制文件到目标目录</h3><h3 id=\"4-rm-rf-xxx-js-删除文件\"><a href=\"#4-rm-rf-xxx-js-删除文件\" class=\"headerlink\" title=\"4. rm -rf xxx.js 删除文件\"></a>4. rm -rf xxx.js 删除文件</h3><h3 id=\"5-mv-xxx-js-目标目录-移动文件到目标目录\"><a href=\"#5-mv-xxx-js-目标目录-移动文件到目标目录\" class=\"headerlink\" title=\"5. mv xxx.js 目标目录  移动文件到目标目录\"></a>5. mv xxx.js 目标目录  移动文件到目标目录</h3>"},{"title":"vue非父子之间的通信","date":"2017-08-24T02:01:38.000Z","_content":"\n## 非父子组件通信\n\n如果2个组件不是父子组件那么如何通信呢？这时可以通过eventHub来实现通信. \n\n所谓eventHub就是创建一个事件中心，相当于中转站，可以用它来传递事件和接收事件.\n\n```javascript 1.8\n// 1.在跟实例的data里定义一个基于vue的实例\n    // 根组件（this.$root)\n    new Vue({\n     el: '#app',\n     router,\n     render: h => h(App),\n     data: {\n      // 空的实例放到根组件下，所有的子组件都能调用\n      Bus: new Vue()\n     }\n    })\n//2.在某个组件中绑定方法\n    // 当前实例创建完成就监听这个事件\n    created(){\n     this.$root.Bus.$on('eventName', value => {\n      this.print(value)\n     })\n    },\n    methods: {\n     print(value) {\n      console.log(value)\n     }\n    },\n    // 在组件销毁时别忘了解除事件绑定\n    beforeDestroy() {\n      this.$root.Bus.$off('eventName')\n    },\n// 3.在另外一个组件里调取跟实例绑定的事件\n    <button @click=\"submit\">提交<button>\n     \n    methods: {\n      submit() {\n       // 事件名字自定义，用不同的名字区别事件\n       this.$root.Bus.$emit('eventName', 123)\n      }\n     }\n\n```\n\n## 父组件传递数据给子组件\n\n直接通过props传递数据给子组件,然后子组件定义props获取传过来的属性\n\n```javascript 1.8\n// 父组件\n    <Child :msg=\"msg\"/>\n// 子组件\n    // 1.直接获取\n    props:[\"msg\"]\n    // 2.指定传入的类型\n    props: {\n        msg: String //这样可以指定传入的类型，如果类型不对，会警告\n    }\n    // 3.指定默认值\n    props: {\n        msg: {\n            type: String,\n            default: \"hello world\" //这样可以指定默认的值\n        }\n    }\n```\n\n## 子组件与父组件通信\n\n如果子组件想要改变数据呢？这在vue中是不允许的，因为vue只允许单向数据传递，这时候我们可以通过触发事件来通知父组件改变数据，\n从而达到改变子组件数据的目的.\n\n```javascript 1.8\n// 父组件\n    <div>\n        <child @upup=\"change\" :msg=\"msg\"></child> //监听子组件触发的upup事件,然后调用change方法\n    </div>\n    methods: {\n        change(msg) {\n            this.msg = msg;\n        }\n    }\n// 子组件\n    <template>\n        <div @click=\"up\"></div>\n    </template>\n    \n    methods: {\n        up() {\n            this.$emit('upup','hehe'); //主动触发upup方法，'hehe'为向父组件传递的数据\n        }\n    }\n```\n","source":"_posts/vue非父子之间的通信.md","raw":"---\ntitle: vue非父子之间的通信\ndate: 2017-08-24 10:01:38\ncategories: Vue\ntags:\n     - Vue\n---\n\n## 非父子组件通信\n\n如果2个组件不是父子组件那么如何通信呢？这时可以通过eventHub来实现通信. \n\n所谓eventHub就是创建一个事件中心，相当于中转站，可以用它来传递事件和接收事件.\n\n```javascript 1.8\n// 1.在跟实例的data里定义一个基于vue的实例\n    // 根组件（this.$root)\n    new Vue({\n     el: '#app',\n     router,\n     render: h => h(App),\n     data: {\n      // 空的实例放到根组件下，所有的子组件都能调用\n      Bus: new Vue()\n     }\n    })\n//2.在某个组件中绑定方法\n    // 当前实例创建完成就监听这个事件\n    created(){\n     this.$root.Bus.$on('eventName', value => {\n      this.print(value)\n     })\n    },\n    methods: {\n     print(value) {\n      console.log(value)\n     }\n    },\n    // 在组件销毁时别忘了解除事件绑定\n    beforeDestroy() {\n      this.$root.Bus.$off('eventName')\n    },\n// 3.在另外一个组件里调取跟实例绑定的事件\n    <button @click=\"submit\">提交<button>\n     \n    methods: {\n      submit() {\n       // 事件名字自定义，用不同的名字区别事件\n       this.$root.Bus.$emit('eventName', 123)\n      }\n     }\n\n```\n\n## 父组件传递数据给子组件\n\n直接通过props传递数据给子组件,然后子组件定义props获取传过来的属性\n\n```javascript 1.8\n// 父组件\n    <Child :msg=\"msg\"/>\n// 子组件\n    // 1.直接获取\n    props:[\"msg\"]\n    // 2.指定传入的类型\n    props: {\n        msg: String //这样可以指定传入的类型，如果类型不对，会警告\n    }\n    // 3.指定默认值\n    props: {\n        msg: {\n            type: String,\n            default: \"hello world\" //这样可以指定默认的值\n        }\n    }\n```\n\n## 子组件与父组件通信\n\n如果子组件想要改变数据呢？这在vue中是不允许的，因为vue只允许单向数据传递，这时候我们可以通过触发事件来通知父组件改变数据，\n从而达到改变子组件数据的目的.\n\n```javascript 1.8\n// 父组件\n    <div>\n        <child @upup=\"change\" :msg=\"msg\"></child> //监听子组件触发的upup事件,然后调用change方法\n    </div>\n    methods: {\n        change(msg) {\n            this.msg = msg;\n        }\n    }\n// 子组件\n    <template>\n        <div @click=\"up\"></div>\n    </template>\n    \n    methods: {\n        up() {\n            this.$emit('upup','hehe'); //主动触发upup方法，'hehe'为向父组件传递的数据\n        }\n    }\n```\n","slug":"vue非父子之间的通信","published":1,"updated":"2020-03-23T11:05:23.947Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgbydgod0030ofo9hf3923iz","content":"<h2 id=\"非父子组件通信\"><a href=\"#非父子组件通信\" class=\"headerlink\" title=\"非父子组件通信\"></a>非父子组件通信</h2><p>如果2个组件不是父子组件那么如何通信呢？这时可以通过eventHub来实现通信. </p>\n<p>所谓eventHub就是创建一个事件中心，相当于中转站，可以用它来传递事件和接收事件.</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.在跟实例的data里定义一个基于vue的实例</span></span><br><span class=\"line\">    <span class=\"comment\">// 根组件（this.$root)</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">     el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">     router,</span><br><span class=\"line\">     render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App),</span><br><span class=\"line\">     data: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 空的实例放到根组件下，所有的子组件都能调用</span></span><br><span class=\"line\">      Bus: <span class=\"keyword\">new</span> Vue()</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"><span class=\"comment\">//2.在某个组件中绑定方法</span></span><br><span class=\"line\">    <span class=\"comment\">// 当前实例创建完成就监听这个事件</span></span><br><span class=\"line\">    created()&#123;</span><br><span class=\"line\">     <span class=\"keyword\">this</span>.$root.Bus.$on(<span class=\"string\">'eventName'</span>, value =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.print(value)</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">     print(value) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 在组件销毁时别忘了解除事件绑定</span></span><br><span class=\"line\">    beforeDestroy() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$root.Bus.$off(<span class=\"string\">'eventName'</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"><span class=\"comment\">// 3.在另外一个组件里调取跟实例绑定的事件</span></span><br><span class=\"line\">    &lt;button @click=<span class=\"string\">\"submit\"</span>&gt;提交&lt;button&gt;</span><br><span class=\"line\">     </span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      submit() &#123;</span><br><span class=\"line\">       <span class=\"comment\">// 事件名字自定义，用不同的名字区别事件</span></span><br><span class=\"line\">       <span class=\"keyword\">this</span>.$root.Bus.$emit(<span class=\"string\">'eventName'</span>, <span class=\"number\">123</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"父组件传递数据给子组件\"><a href=\"#父组件传递数据给子组件\" class=\"headerlink\" title=\"父组件传递数据给子组件\"></a>父组件传递数据给子组件</h2><p>直接通过props传递数据给子组件,然后子组件定义props获取传过来的属性</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 父组件</span></span><br><span class=\"line\">    &lt;Child :msg=<span class=\"string\">\"msg\"</span>/&gt;</span><br><span class=\"line\"><span class=\"comment\">// 子组件</span></span><br><span class=\"line\">    <span class=\"comment\">// 1.直接获取</span></span><br><span class=\"line\">    props:[<span class=\"string\">\"msg\"</span>]</span><br><span class=\"line\">    <span class=\"comment\">// 2.指定传入的类型</span></span><br><span class=\"line\">    props: &#123;</span><br><span class=\"line\">        msg: <span class=\"built_in\">String</span> <span class=\"comment\">//这样可以指定传入的类型，如果类型不对，会警告</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 3.指定默认值</span></span><br><span class=\"line\">    props: &#123;</span><br><span class=\"line\">        msg: &#123;</span><br><span class=\"line\">            type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">            <span class=\"keyword\">default</span>: <span class=\"string\">\"hello world\"</span> <span class=\"comment\">//这样可以指定默认的值</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"子组件与父组件通信\"><a href=\"#子组件与父组件通信\" class=\"headerlink\" title=\"子组件与父组件通信\"></a>子组件与父组件通信</h2><p>如果子组件想要改变数据呢？这在vue中是不允许的，因为vue只允许单向数据传递，这时候我们可以通过触发事件来通知父组件改变数据，<br>从而达到改变子组件数据的目的.</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 父组件</span></span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;child @upup=<span class=\"string\">\"change\"</span> :msg=<span class=\"string\">\"msg\"</span>&gt;&lt;<span class=\"regexp\">/child&gt; /</span><span class=\"regexp\">/监听子组件触发的upup事件,然后调用change方法</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        change(msg) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.msg = msg;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">// 子组件</span></span><br><span class=\"line\">    &lt;template&gt;</span><br><span class=\"line\">        &lt;div @click=<span class=\"string\">\"up\"</span>&gt;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>template&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        up() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'upup'</span>,<span class=\"string\">'hehe'</span>); <span class=\"comment\">//主动触发upup方法，'hehe'为向父组件传递的数据</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"非父子组件通信\"><a href=\"#非父子组件通信\" class=\"headerlink\" title=\"非父子组件通信\"></a>非父子组件通信</h2><p>如果2个组件不是父子组件那么如何通信呢？这时可以通过eventHub来实现通信. </p>\n<p>所谓eventHub就是创建一个事件中心，相当于中转站，可以用它来传递事件和接收事件.</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.在跟实例的data里定义一个基于vue的实例</span></span><br><span class=\"line\">    <span class=\"comment\">// 根组件（this.$root)</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">     el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">     router,</span><br><span class=\"line\">     render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App),</span><br><span class=\"line\">     data: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 空的实例放到根组件下，所有的子组件都能调用</span></span><br><span class=\"line\">      Bus: <span class=\"keyword\">new</span> Vue()</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"><span class=\"comment\">//2.在某个组件中绑定方法</span></span><br><span class=\"line\">    <span class=\"comment\">// 当前实例创建完成就监听这个事件</span></span><br><span class=\"line\">    created()&#123;</span><br><span class=\"line\">     <span class=\"keyword\">this</span>.$root.Bus.$on(<span class=\"string\">'eventName'</span>, value =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.print(value)</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">     print(value) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 在组件销毁时别忘了解除事件绑定</span></span><br><span class=\"line\">    beforeDestroy() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$root.Bus.$off(<span class=\"string\">'eventName'</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"><span class=\"comment\">// 3.在另外一个组件里调取跟实例绑定的事件</span></span><br><span class=\"line\">    &lt;button @click=<span class=\"string\">\"submit\"</span>&gt;提交&lt;button&gt;</span><br><span class=\"line\">     </span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      submit() &#123;</span><br><span class=\"line\">       <span class=\"comment\">// 事件名字自定义，用不同的名字区别事件</span></span><br><span class=\"line\">       <span class=\"keyword\">this</span>.$root.Bus.$emit(<span class=\"string\">'eventName'</span>, <span class=\"number\">123</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"父组件传递数据给子组件\"><a href=\"#父组件传递数据给子组件\" class=\"headerlink\" title=\"父组件传递数据给子组件\"></a>父组件传递数据给子组件</h2><p>直接通过props传递数据给子组件,然后子组件定义props获取传过来的属性</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 父组件</span></span><br><span class=\"line\">    &lt;Child :msg=<span class=\"string\">\"msg\"</span>/&gt;</span><br><span class=\"line\"><span class=\"comment\">// 子组件</span></span><br><span class=\"line\">    <span class=\"comment\">// 1.直接获取</span></span><br><span class=\"line\">    props:[<span class=\"string\">\"msg\"</span>]</span><br><span class=\"line\">    <span class=\"comment\">// 2.指定传入的类型</span></span><br><span class=\"line\">    props: &#123;</span><br><span class=\"line\">        msg: <span class=\"built_in\">String</span> <span class=\"comment\">//这样可以指定传入的类型，如果类型不对，会警告</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 3.指定默认值</span></span><br><span class=\"line\">    props: &#123;</span><br><span class=\"line\">        msg: &#123;</span><br><span class=\"line\">            type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">            <span class=\"keyword\">default</span>: <span class=\"string\">\"hello world\"</span> <span class=\"comment\">//这样可以指定默认的值</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"子组件与父组件通信\"><a href=\"#子组件与父组件通信\" class=\"headerlink\" title=\"子组件与父组件通信\"></a>子组件与父组件通信</h2><p>如果子组件想要改变数据呢？这在vue中是不允许的，因为vue只允许单向数据传递，这时候我们可以通过触发事件来通知父组件改变数据，<br>从而达到改变子组件数据的目的.</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 父组件</span></span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;child @upup=<span class=\"string\">\"change\"</span> :msg=<span class=\"string\">\"msg\"</span>&gt;&lt;<span class=\"regexp\">/child&gt; /</span><span class=\"regexp\">/监听子组件触发的upup事件,然后调用change方法</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        change(msg) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.msg = msg;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">// 子组件</span></span><br><span class=\"line\">    &lt;template&gt;</span><br><span class=\"line\">        &lt;div @click=<span class=\"string\">\"up\"</span>&gt;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>template&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        up() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'upup'</span>,<span class=\"string\">'hehe'</span>); <span class=\"comment\">//主动触发upup方法，'hehe'为向父组件传递的数据</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"vue编译原理、渲染过程","date":"2020-10-16T07:17:58.000Z","_content":"\n## Vue 编译原理\n\n  关于 Vue 编译原理这块的整体逻辑主要分三个部分，也可以说是分三步，这三个部分是有前后关系的：\n\n* 第一步是将 模板字符串 转换成 element ASTs（解析器）\n\n* 第二步是对 AST 进行静态节点标记，主要用来做虚拟DOM的渲染优化（优化器）\n\n* 第三步是 使用 element ASTs 生成 render 函数代码字符串（代码生成器）\n\n![ss](/img/vue.jpeg)\n\n[Vue 编译原理](https://www.cnblogs.com/dhsz/p/8462227.html)\n\n## Vue 渲染过程\n\n* 第一步：解析模板成 render 函数\n\n* 第二步：响应式开始监听\n\n* 第三步：首次渲染，显示页面，且绑定依赖\n\n* 第四步：data 属性变化，触发 rerender\n\n[Vue 渲染过程](https://www.cnblogs.com/chrislinlin/p/12587723.html)\n\n\n","source":"_posts/vue编译原理、渲染过程.md","raw":"---\ntitle: vue编译原理、渲染过程\ndate: 2020-10-16 15:17:58\ncategories: Vue\n---\n\n## Vue 编译原理\n\n  关于 Vue 编译原理这块的整体逻辑主要分三个部分，也可以说是分三步，这三个部分是有前后关系的：\n\n* 第一步是将 模板字符串 转换成 element ASTs（解析器）\n\n* 第二步是对 AST 进行静态节点标记，主要用来做虚拟DOM的渲染优化（优化器）\n\n* 第三步是 使用 element ASTs 生成 render 函数代码字符串（代码生成器）\n\n![ss](/img/vue.jpeg)\n\n[Vue 编译原理](https://www.cnblogs.com/dhsz/p/8462227.html)\n\n## Vue 渲染过程\n\n* 第一步：解析模板成 render 函数\n\n* 第二步：响应式开始监听\n\n* 第三步：首次渲染，显示页面，且绑定依赖\n\n* 第四步：data 属性变化，触发 rerender\n\n[Vue 渲染过程](https://www.cnblogs.com/chrislinlin/p/12587723.html)\n\n\n","slug":"vue编译原理、渲染过程","published":1,"updated":"2020-10-16T07:53:28.576Z","_id":"ckgbydgoe0034ofo9cigmy18w","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Vue-编译原理\"><a href=\"#Vue-编译原理\" class=\"headerlink\" title=\"Vue 编译原理\"></a>Vue 编译原理</h2><p>  关于 Vue 编译原理这块的整体逻辑主要分三个部分，也可以说是分三步，这三个部分是有前后关系的：</p>\n<ul>\n<li><p>第一步是将 模板字符串 转换成 element ASTs（解析器）</p>\n</li>\n<li><p>第二步是对 AST 进行静态节点标记，主要用来做虚拟DOM的渲染优化（优化器）</p>\n</li>\n<li><p>第三步是 使用 element ASTs 生成 render 函数代码字符串（代码生成器）</p>\n</li>\n</ul>\n<p><img src=\"/img/vue.jpeg\" alt=\"ss\"></p>\n<p><a href=\"https://www.cnblogs.com/dhsz/p/8462227.html\" target=\"_blank\" rel=\"noopener\">Vue 编译原理</a></p>\n<h2 id=\"Vue-渲染过程\"><a href=\"#Vue-渲染过程\" class=\"headerlink\" title=\"Vue 渲染过程\"></a>Vue 渲染过程</h2><ul>\n<li><p>第一步：解析模板成 render 函数</p>\n</li>\n<li><p>第二步：响应式开始监听</p>\n</li>\n<li><p>第三步：首次渲染，显示页面，且绑定依赖</p>\n</li>\n<li><p>第四步：data 属性变化，触发 rerender</p>\n</li>\n</ul>\n<p><a href=\"https://www.cnblogs.com/chrislinlin/p/12587723.html\" target=\"_blank\" rel=\"noopener\">Vue 渲染过程</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Vue-编译原理\"><a href=\"#Vue-编译原理\" class=\"headerlink\" title=\"Vue 编译原理\"></a>Vue 编译原理</h2><p>  关于 Vue 编译原理这块的整体逻辑主要分三个部分，也可以说是分三步，这三个部分是有前后关系的：</p>\n<ul>\n<li><p>第一步是将 模板字符串 转换成 element ASTs（解析器）</p>\n</li>\n<li><p>第二步是对 AST 进行静态节点标记，主要用来做虚拟DOM的渲染优化（优化器）</p>\n</li>\n<li><p>第三步是 使用 element ASTs 生成 render 函数代码字符串（代码生成器）</p>\n</li>\n</ul>\n<p><img src=\"/img/vue.jpeg\" alt=\"ss\"></p>\n<p><a href=\"https://www.cnblogs.com/dhsz/p/8462227.html\" target=\"_blank\" rel=\"noopener\">Vue 编译原理</a></p>\n<h2 id=\"Vue-渲染过程\"><a href=\"#Vue-渲染过程\" class=\"headerlink\" title=\"Vue 渲染过程\"></a>Vue 渲染过程</h2><ul>\n<li><p>第一步：解析模板成 render 函数</p>\n</li>\n<li><p>第二步：响应式开始监听</p>\n</li>\n<li><p>第三步：首次渲染，显示页面，且绑定依赖</p>\n</li>\n<li><p>第四步：data 属性变化，触发 rerender</p>\n</li>\n</ul>\n<p><a href=\"https://www.cnblogs.com/chrislinlin/p/12587723.html\" target=\"_blank\" rel=\"noopener\">Vue 渲染过程</a></p>\n"},{"title":"微信小程序-JS调用组件","date":"2020-10-16T07:45:27.000Z","_content":"\n# Js调用微信小程序组件\n\n### 1. getCurrentPages\n\n场景：\n- 获取当前页面栈。数组中第一个元素为首页，最后一个元素为当前页面。\n- 可以在某个页面修改另一个页面的data或者调用另一个页面的方法。\n注意：\n- 不要尝试修改页面栈，会导致路由以及页面状态错误。\n- 不要在 App.onLaunch 的时候调用 getCurrentPages()，此时 page 还没有生成。\nvar pages = getCurrentPages();\nvar prevPage = pages[pages.length - 2];//当前页面的上一个页面\nprevPage.setData({})\n\n// 测试页面例子\ngetCurrentPages()[0].showToast()\n\n### 2. selectComponent\n\n返回组件的实例\nlet toast = this.selectComponent() // 返回这个组件\ntoast.setData({}) \ntoast.xxx() // 调用组件方法\n\n### 3. 小程序的生命周期\n\n- 小程序初始化完成后，页面首次加载触发onLoad，只会触发一次。\n- 当小程序进入到后台，先执行页面onHide方法再执行应用onHide方法。\n- 当小程序从后台进入到前台，先执行应用onShow方法再执行页面onShow方法。\n- App Page Component生命周期：https://www.jianshu.com/p/1e3b5b507771\n\n### 4. 微信小程序遇到的坑\n\ntextarea \n问题： ios默认有padding间距问题\n解决方案：获取系统信息getSystemInfoSync(),给ios不加padding去处理\n\ntextarea \n问题：显示在最顶层的问题\n解决方案：自定义组件，利用view代替textarea\n\nInput\n问题：设置靠右展示，当input获得焦点的时候，某些机型光标在placeholder左边的问题，正常是最右边\n解决方案：自定义组件，placeholder利用view代替，判断input是否有值输入去控制placeholder的显示隐藏\n\npicker选择器\n问题：当设置mode=\"date\"时，ios，start 和 end 两个属性必须为YYYY-MM-DD，Android是正常显示\n解决方案：start和end 都传YYYY-MM-DD，因为没有ios手机测试，爬坑爬出来的\n\n三个点的bug\n问题：某些机型设置text-overflow: ellipsis;三个点尽然显示在中间\n解决方案：利用substring截取字符串处理，开始不知道，后面修改有点麻烦。。\n\n防连击处理\n解决方案：因为小程序的ajax封装为异步的，Toast是渐入渐出，穿透了，必须放在callback里才不会连击\n\ngetDate()\n问题：安卓可以正常显示，ios不行，因为当时想在wxml进行转换日期，因此引用了wxs函数，从而导致ios出现bug\n解决方案：用moment函数进行转换，微信小程序提供的getDate有点鸡肋\n\n页面跳转和参数传递\n问题：因为我们从一个列表跳转详情，假如没有提供详情接口，需要把列表的这条参数携带过去，这样我们就会用到JSON.stringify()去序列化，但是，当这个json对象的value中包括&&这种字符串的时候，在详情页JSON.parse()去解析就会报错\n解决方案：把序列化后的参数进行加密处理，encodeURIComponent()，然后在详情页在进行decodeURIComponent()转换\n// 列表页处理\nvar obj = {a:1}\nvar obj1 = JSON.stringify(obj)\nvar encode = encodeURIComponent(obj1)\n\n// 详情页处理\nvar decode = decodeURIComponent(encode);\nvar obj2 = JSON.parse(decode)\n\n全局变量\n问题：初始化的时候把app.globalData的数据绑定到data上了，当某个页面把全局数据改变，导致data数据没有实时更新\n解决方案：在生命周期里重新设置这个data\n\n组件间的通讯\n在一个page里有两个相同的组件，但是处理逻辑不一样，他们各自有自己的data和生命周期，不能复用\n\nInput type=\"number\" \"digit\" \n问题：某些机型无法出来数字键盘\n解决方案：正则控制输入\n\nCheckbox radio \n问题：选中状态无法用checked属性清除\n解决方案：重新渲染checkbox radio 或者自定义\n\n穿透\n问题：因为之前用的view overflow-y:auto去滚动的，这样的话即使加了catchtouchmove也会穿透页面\n解决方案：在弹出层中用scroll-view去控制区块滚动，然后再最外层加catchtouchmove函数为空函数\n","source":"_posts/微信小程序-JS调用组件.md","raw":"---\ntitle: 微信小程序-JS调用组件\ndate: 2020-10-16 15:45:27\ncategories: 微信小程序\n---\n\n# Js调用微信小程序组件\n\n### 1. getCurrentPages\n\n场景：\n- 获取当前页面栈。数组中第一个元素为首页，最后一个元素为当前页面。\n- 可以在某个页面修改另一个页面的data或者调用另一个页面的方法。\n注意：\n- 不要尝试修改页面栈，会导致路由以及页面状态错误。\n- 不要在 App.onLaunch 的时候调用 getCurrentPages()，此时 page 还没有生成。\nvar pages = getCurrentPages();\nvar prevPage = pages[pages.length - 2];//当前页面的上一个页面\nprevPage.setData({})\n\n// 测试页面例子\ngetCurrentPages()[0].showToast()\n\n### 2. selectComponent\n\n返回组件的实例\nlet toast = this.selectComponent() // 返回这个组件\ntoast.setData({}) \ntoast.xxx() // 调用组件方法\n\n### 3. 小程序的生命周期\n\n- 小程序初始化完成后，页面首次加载触发onLoad，只会触发一次。\n- 当小程序进入到后台，先执行页面onHide方法再执行应用onHide方法。\n- 当小程序从后台进入到前台，先执行应用onShow方法再执行页面onShow方法。\n- App Page Component生命周期：https://www.jianshu.com/p/1e3b5b507771\n\n### 4. 微信小程序遇到的坑\n\ntextarea \n问题： ios默认有padding间距问题\n解决方案：获取系统信息getSystemInfoSync(),给ios不加padding去处理\n\ntextarea \n问题：显示在最顶层的问题\n解决方案：自定义组件，利用view代替textarea\n\nInput\n问题：设置靠右展示，当input获得焦点的时候，某些机型光标在placeholder左边的问题，正常是最右边\n解决方案：自定义组件，placeholder利用view代替，判断input是否有值输入去控制placeholder的显示隐藏\n\npicker选择器\n问题：当设置mode=\"date\"时，ios，start 和 end 两个属性必须为YYYY-MM-DD，Android是正常显示\n解决方案：start和end 都传YYYY-MM-DD，因为没有ios手机测试，爬坑爬出来的\n\n三个点的bug\n问题：某些机型设置text-overflow: ellipsis;三个点尽然显示在中间\n解决方案：利用substring截取字符串处理，开始不知道，后面修改有点麻烦。。\n\n防连击处理\n解决方案：因为小程序的ajax封装为异步的，Toast是渐入渐出，穿透了，必须放在callback里才不会连击\n\ngetDate()\n问题：安卓可以正常显示，ios不行，因为当时想在wxml进行转换日期，因此引用了wxs函数，从而导致ios出现bug\n解决方案：用moment函数进行转换，微信小程序提供的getDate有点鸡肋\n\n页面跳转和参数传递\n问题：因为我们从一个列表跳转详情，假如没有提供详情接口，需要把列表的这条参数携带过去，这样我们就会用到JSON.stringify()去序列化，但是，当这个json对象的value中包括&&这种字符串的时候，在详情页JSON.parse()去解析就会报错\n解决方案：把序列化后的参数进行加密处理，encodeURIComponent()，然后在详情页在进行decodeURIComponent()转换\n// 列表页处理\nvar obj = {a:1}\nvar obj1 = JSON.stringify(obj)\nvar encode = encodeURIComponent(obj1)\n\n// 详情页处理\nvar decode = decodeURIComponent(encode);\nvar obj2 = JSON.parse(decode)\n\n全局变量\n问题：初始化的时候把app.globalData的数据绑定到data上了，当某个页面把全局数据改变，导致data数据没有实时更新\n解决方案：在生命周期里重新设置这个data\n\n组件间的通讯\n在一个page里有两个相同的组件，但是处理逻辑不一样，他们各自有自己的data和生命周期，不能复用\n\nInput type=\"number\" \"digit\" \n问题：某些机型无法出来数字键盘\n解决方案：正则控制输入\n\nCheckbox radio \n问题：选中状态无法用checked属性清除\n解决方案：重新渲染checkbox radio 或者自定义\n\n穿透\n问题：因为之前用的view overflow-y:auto去滚动的，这样的话即使加了catchtouchmove也会穿透页面\n解决方案：在弹出层中用scroll-view去控制区块滚动，然后再最外层加catchtouchmove函数为空函数\n","slug":"微信小程序-JS调用组件","published":1,"updated":"2020-10-16T07:52:55.033Z","_id":"ckgbydgof0037ofo9mghytag1","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Js调用微信小程序组件\"><a href=\"#Js调用微信小程序组件\" class=\"headerlink\" title=\"Js调用微信小程序组件\"></a>Js调用微信小程序组件</h1><h3 id=\"1-getCurrentPages\"><a href=\"#1-getCurrentPages\" class=\"headerlink\" title=\"1. getCurrentPages\"></a>1. getCurrentPages</h3><p>场景：</p>\n<ul>\n<li>获取当前页面栈。数组中第一个元素为首页，最后一个元素为当前页面。</li>\n<li>可以在某个页面修改另一个页面的data或者调用另一个页面的方法。<br>注意：</li>\n<li>不要尝试修改页面栈，会导致路由以及页面状态错误。</li>\n<li>不要在 App.onLaunch 的时候调用 getCurrentPages()，此时 page 还没有生成。<br>var pages = getCurrentPages();<br>var prevPage = pages[pages.length - 2];//当前页面的上一个页面<br>prevPage.setData({})</li>\n</ul>\n<p>// 测试页面例子<br>getCurrentPages()[0].showToast()</p>\n<h3 id=\"2-selectComponent\"><a href=\"#2-selectComponent\" class=\"headerlink\" title=\"2. selectComponent\"></a>2. selectComponent</h3><p>返回组件的实例<br>let toast = this.selectComponent() // 返回这个组件<br>toast.setData({})<br>toast.xxx() // 调用组件方法</p>\n<h3 id=\"3-小程序的生命周期\"><a href=\"#3-小程序的生命周期\" class=\"headerlink\" title=\"3. 小程序的生命周期\"></a>3. 小程序的生命周期</h3><ul>\n<li>小程序初始化完成后，页面首次加载触发onLoad，只会触发一次。</li>\n<li>当小程序进入到后台，先执行页面onHide方法再执行应用onHide方法。</li>\n<li>当小程序从后台进入到前台，先执行应用onShow方法再执行页面onShow方法。</li>\n<li>App Page Component生命周期：<a href=\"https://www.jianshu.com/p/1e3b5b507771\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/1e3b5b507771</a></li>\n</ul>\n<h3 id=\"4-微信小程序遇到的坑\"><a href=\"#4-微信小程序遇到的坑\" class=\"headerlink\" title=\"4. 微信小程序遇到的坑\"></a>4. 微信小程序遇到的坑</h3><p>textarea<br>问题： ios默认有padding间距问题<br>解决方案：获取系统信息getSystemInfoSync(),给ios不加padding去处理</p>\n<p>textarea<br>问题：显示在最顶层的问题<br>解决方案：自定义组件，利用view代替textarea</p>\n<p>Input<br>问题：设置靠右展示，当input获得焦点的时候，某些机型光标在placeholder左边的问题，正常是最右边<br>解决方案：自定义组件，placeholder利用view代替，判断input是否有值输入去控制placeholder的显示隐藏</p>\n<p>picker选择器<br>问题：当设置mode=”date”时，ios，start 和 end 两个属性必须为YYYY-MM-DD，Android是正常显示<br>解决方案：start和end 都传YYYY-MM-DD，因为没有ios手机测试，爬坑爬出来的</p>\n<p>三个点的bug<br>问题：某些机型设置text-overflow: ellipsis;三个点尽然显示在中间<br>解决方案：利用substring截取字符串处理，开始不知道，后面修改有点麻烦。。</p>\n<p>防连击处理<br>解决方案：因为小程序的ajax封装为异步的，Toast是渐入渐出，穿透了，必须放在callback里才不会连击</p>\n<p>getDate()<br>问题：安卓可以正常显示，ios不行，因为当时想在wxml进行转换日期，因此引用了wxs函数，从而导致ios出现bug<br>解决方案：用moment函数进行转换，微信小程序提供的getDate有点鸡肋</p>\n<p>页面跳转和参数传递<br>问题：因为我们从一个列表跳转详情，假如没有提供详情接口，需要把列表的这条参数携带过去，这样我们就会用到JSON.stringify()去序列化，但是，当这个json对象的value中包括&amp;&amp;这种字符串的时候，在详情页JSON.parse()去解析就会报错<br>解决方案：把序列化后的参数进行加密处理，encodeURIComponent()，然后在详情页在进行decodeURIComponent()转换<br>// 列表页处理<br>var obj = {a:1}<br>var obj1 = JSON.stringify(obj)<br>var encode = encodeURIComponent(obj1)</p>\n<p>// 详情页处理<br>var decode = decodeURIComponent(encode);<br>var obj2 = JSON.parse(decode)</p>\n<p>全局变量<br>问题：初始化的时候把app.globalData的数据绑定到data上了，当某个页面把全局数据改变，导致data数据没有实时更新<br>解决方案：在生命周期里重新设置这个data</p>\n<p>组件间的通讯<br>在一个page里有两个相同的组件，但是处理逻辑不一样，他们各自有自己的data和生命周期，不能复用</p>\n<p>Input type=”number” “digit”<br>问题：某些机型无法出来数字键盘<br>解决方案：正则控制输入</p>\n<p>Checkbox radio<br>问题：选中状态无法用checked属性清除<br>解决方案：重新渲染checkbox radio 或者自定义</p>\n<p>穿透<br>问题：因为之前用的view overflow-y:auto去滚动的，这样的话即使加了catchtouchmove也会穿透页面<br>解决方案：在弹出层中用scroll-view去控制区块滚动，然后再最外层加catchtouchmove函数为空函数</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Js调用微信小程序组件\"><a href=\"#Js调用微信小程序组件\" class=\"headerlink\" title=\"Js调用微信小程序组件\"></a>Js调用微信小程序组件</h1><h3 id=\"1-getCurrentPages\"><a href=\"#1-getCurrentPages\" class=\"headerlink\" title=\"1. getCurrentPages\"></a>1. getCurrentPages</h3><p>场景：</p>\n<ul>\n<li>获取当前页面栈。数组中第一个元素为首页，最后一个元素为当前页面。</li>\n<li>可以在某个页面修改另一个页面的data或者调用另一个页面的方法。<br>注意：</li>\n<li>不要尝试修改页面栈，会导致路由以及页面状态错误。</li>\n<li>不要在 App.onLaunch 的时候调用 getCurrentPages()，此时 page 还没有生成。<br>var pages = getCurrentPages();<br>var prevPage = pages[pages.length - 2];//当前页面的上一个页面<br>prevPage.setData({})</li>\n</ul>\n<p>// 测试页面例子<br>getCurrentPages()[0].showToast()</p>\n<h3 id=\"2-selectComponent\"><a href=\"#2-selectComponent\" class=\"headerlink\" title=\"2. selectComponent\"></a>2. selectComponent</h3><p>返回组件的实例<br>let toast = this.selectComponent() // 返回这个组件<br>toast.setData({})<br>toast.xxx() // 调用组件方法</p>\n<h3 id=\"3-小程序的生命周期\"><a href=\"#3-小程序的生命周期\" class=\"headerlink\" title=\"3. 小程序的生命周期\"></a>3. 小程序的生命周期</h3><ul>\n<li>小程序初始化完成后，页面首次加载触发onLoad，只会触发一次。</li>\n<li>当小程序进入到后台，先执行页面onHide方法再执行应用onHide方法。</li>\n<li>当小程序从后台进入到前台，先执行应用onShow方法再执行页面onShow方法。</li>\n<li>App Page Component生命周期：<a href=\"https://www.jianshu.com/p/1e3b5b507771\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/1e3b5b507771</a></li>\n</ul>\n<h3 id=\"4-微信小程序遇到的坑\"><a href=\"#4-微信小程序遇到的坑\" class=\"headerlink\" title=\"4. 微信小程序遇到的坑\"></a>4. 微信小程序遇到的坑</h3><p>textarea<br>问题： ios默认有padding间距问题<br>解决方案：获取系统信息getSystemInfoSync(),给ios不加padding去处理</p>\n<p>textarea<br>问题：显示在最顶层的问题<br>解决方案：自定义组件，利用view代替textarea</p>\n<p>Input<br>问题：设置靠右展示，当input获得焦点的时候，某些机型光标在placeholder左边的问题，正常是最右边<br>解决方案：自定义组件，placeholder利用view代替，判断input是否有值输入去控制placeholder的显示隐藏</p>\n<p>picker选择器<br>问题：当设置mode=”date”时，ios，start 和 end 两个属性必须为YYYY-MM-DD，Android是正常显示<br>解决方案：start和end 都传YYYY-MM-DD，因为没有ios手机测试，爬坑爬出来的</p>\n<p>三个点的bug<br>问题：某些机型设置text-overflow: ellipsis;三个点尽然显示在中间<br>解决方案：利用substring截取字符串处理，开始不知道，后面修改有点麻烦。。</p>\n<p>防连击处理<br>解决方案：因为小程序的ajax封装为异步的，Toast是渐入渐出，穿透了，必须放在callback里才不会连击</p>\n<p>getDate()<br>问题：安卓可以正常显示，ios不行，因为当时想在wxml进行转换日期，因此引用了wxs函数，从而导致ios出现bug<br>解决方案：用moment函数进行转换，微信小程序提供的getDate有点鸡肋</p>\n<p>页面跳转和参数传递<br>问题：因为我们从一个列表跳转详情，假如没有提供详情接口，需要把列表的这条参数携带过去，这样我们就会用到JSON.stringify()去序列化，但是，当这个json对象的value中包括&amp;&amp;这种字符串的时候，在详情页JSON.parse()去解析就会报错<br>解决方案：把序列化后的参数进行加密处理，encodeURIComponent()，然后在详情页在进行decodeURIComponent()转换<br>// 列表页处理<br>var obj = {a:1}<br>var obj1 = JSON.stringify(obj)<br>var encode = encodeURIComponent(obj1)</p>\n<p>// 详情页处理<br>var decode = decodeURIComponent(encode);<br>var obj2 = JSON.parse(decode)</p>\n<p>全局变量<br>问题：初始化的时候把app.globalData的数据绑定到data上了，当某个页面把全局数据改变，导致data数据没有实时更新<br>解决方案：在生命周期里重新设置这个data</p>\n<p>组件间的通讯<br>在一个page里有两个相同的组件，但是处理逻辑不一样，他们各自有自己的data和生命周期，不能复用</p>\n<p>Input type=”number” “digit”<br>问题：某些机型无法出来数字键盘<br>解决方案：正则控制输入</p>\n<p>Checkbox radio<br>问题：选中状态无法用checked属性清除<br>解决方案：重新渲染checkbox radio 或者自定义</p>\n<p>穿透<br>问题：因为之前用的view overflow-y:auto去滚动的，这样的话即使加了catchtouchmove也会穿透页面<br>解决方案：在弹出层中用scroll-view去控制区块滚动，然后再最外层加catchtouchmove函数为空函数</p>\n"},{"title":"正则表达式","date":"2016-11-27T13:06:33.000Z","_content":"\n--------\n## 元字符\n\n([{+*?.$^\\|\n\n## 字符类\n\n>  简单类\n\n原则上正则的一个字符对应一个字符，我们可以用[]把它们括起来，让[　]这个整体对应***一个字符***。\n```\n/caicai/.test(\"caicai\") //true\n/[ca]i/.test(\"caicai\") //true\n\"caicai\".match(/[ca]i/) // [\"ai\"] 因此说明匹配不了cai整个字符，只能匹配［］中的一个字符和外边的ｉ想对应\n```\n\n> 预定义类\n\n还是在那个中括号里面做文章，不过它好像已经走到尽头了。由于是中括号的马甲，因此它们还是对应一个字符。\n\n<table><tr><td>字符</td><td>等同于</td><td>描述</td></tr><tr><td>.</td><td>[^\\n\\r]</td><td>一个除了换行和回车外的所有字符</td></tr><tr><td>\\d</td><td>[0-9]</td><td>一个数字字符</td></tr><tr><td>\\D</td><td>[^0-9]</td><td>一个非数字字符</td></tr><tr><td>\\w</td><td>[a-zA-Z0-9_]</td><td>一个单词字符(所有的字母)</td></tr><tr><td>\\W</td><td>[^a-zA-Z0-9_]</td><td>一个非单词字符</td></tr><tr><td>\\s</td><td>[\\t\\n\\x0B\\f\\r]</td><td>一个空白字符</td></tr><tr><td>\\S</td><td>[^\\t\\n\\x0B\\f\\r]</td><td>一个非空白字符</td></tr></table>\n\n```\nalert(/\\d/.test(\"3\"))//true\nalert(/\\d/.test(\"w\"))//false\nalert(/\\D/.test(\"w\"))//true\nalert(/\\w/.test(\"w\"))//true\nalert(/\\w/.test(\"菜\"))//false\nalert(/\\W/.test(\"菜\"))//true\nalert(/\\s/.test(\" \"))//true\nalert(/\\S/.test(\" \"))//false\nalert(/\\S/.test(\"菜菜\"))//true\nalert(/./.test(\"菜\"))//true\nalert(/./.test(\"  \"))//true\nvar a = \"\\n\\\n      \"\nalert(/./.test(a))//true\n/[\\u4e00-\\u9fa5]/用于匹配单个汉字。\n/[\\u4e00-\\u9fa5]{4}/.test(\"菜菜菜鸟\")　//true\n```\n\n## 量词\n\n<table><thead><tr><td>代码</td><td>类型</td><td>描述</td></tr></thead><tbody><tr><td>?</td><td>软性量词</td><td>出现零次或一次</td></tr><tr><td>*</td><td>软性量词</td><td>出现零次或多次(任意次)</td></tr><tr><td>+</td><td>软性量词</td><td>出现一次或多次（至少一次）</td></tr><tr><td>{n}</td><td>硬性量词</td><td>对应零次或者n次</td></tr><tr><td>{n,m}</td><td>软性量词</td><td>至少出现n次但不超过m次</td></tr><tr><td>{n,}</td><td>软性量词</td><td>至少出现n次(+的升级版)</td></tr></tbody></table>\n\n## 分组\n\n到目前为止，我们只能一个字符到匹配，虽然量词的出现，能帮助我们处理一排密紧密相连的同类型字符。但这是不够的，下面该轮到小括号出场了，***中括号表示范围内选择［］，大括号表示重复次数｛｝。小括号允许我们重复多个字符（）***。\n\n```\n/(cai){2}/.test(\"caicai\") //true\n/13(\\d)(\\d{8})/.test(\"13595687859\") //true\n//RegExp.$n　n为匹配最近的n个正则表达式的匹配结果,以上面电话号码为例:$1=(\\d) $2=(\\d{8})\nconsole.log(RegExp.$1) //会匹配到上面的第一个正则　此例为５　\nconsole.log(RegExp.$2) //会匹配到上面的第二个正则　此例为95687859\n```\n\n继续在分组上做文章。在分组中插入管道符（“|”），把它划分为两个或多个候多项。\n\n```\nvar reg = /(red|black|yellow)!!/;\nconsole.log(reg.test(\"red!!\"))//true\nconsole.log(reg.test(\"black!!\"))//true\nconsole.log(reg.test(\"yellow!!\"))//true\n//将＜＞括号和里面的都替换为空\nvar html = \"<p><a href='http://www.cnblogs.com/rubylouvre/'>caicai</a>by <em>asas</em></p>\";\nvar text = html.replace(/<(.)*?>/g, \"\");\nconsole.log(text) //caicai asas\n```\n","source":"_posts/正则表达式.md","raw":"---\ntitle: 正则表达式\ndate: 2016-11-27 21:06:33\ncategories: Javascript\ntags:\n     - Javascript\n---\n\n--------\n## 元字符\n\n([{+*?.$^\\|\n\n## 字符类\n\n>  简单类\n\n原则上正则的一个字符对应一个字符，我们可以用[]把它们括起来，让[　]这个整体对应***一个字符***。\n```\n/caicai/.test(\"caicai\") //true\n/[ca]i/.test(\"caicai\") //true\n\"caicai\".match(/[ca]i/) // [\"ai\"] 因此说明匹配不了cai整个字符，只能匹配［］中的一个字符和外边的ｉ想对应\n```\n\n> 预定义类\n\n还是在那个中括号里面做文章，不过它好像已经走到尽头了。由于是中括号的马甲，因此它们还是对应一个字符。\n\n<table><tr><td>字符</td><td>等同于</td><td>描述</td></tr><tr><td>.</td><td>[^\\n\\r]</td><td>一个除了换行和回车外的所有字符</td></tr><tr><td>\\d</td><td>[0-9]</td><td>一个数字字符</td></tr><tr><td>\\D</td><td>[^0-9]</td><td>一个非数字字符</td></tr><tr><td>\\w</td><td>[a-zA-Z0-9_]</td><td>一个单词字符(所有的字母)</td></tr><tr><td>\\W</td><td>[^a-zA-Z0-9_]</td><td>一个非单词字符</td></tr><tr><td>\\s</td><td>[\\t\\n\\x0B\\f\\r]</td><td>一个空白字符</td></tr><tr><td>\\S</td><td>[^\\t\\n\\x0B\\f\\r]</td><td>一个非空白字符</td></tr></table>\n\n```\nalert(/\\d/.test(\"3\"))//true\nalert(/\\d/.test(\"w\"))//false\nalert(/\\D/.test(\"w\"))//true\nalert(/\\w/.test(\"w\"))//true\nalert(/\\w/.test(\"菜\"))//false\nalert(/\\W/.test(\"菜\"))//true\nalert(/\\s/.test(\" \"))//true\nalert(/\\S/.test(\" \"))//false\nalert(/\\S/.test(\"菜菜\"))//true\nalert(/./.test(\"菜\"))//true\nalert(/./.test(\"  \"))//true\nvar a = \"\\n\\\n      \"\nalert(/./.test(a))//true\n/[\\u4e00-\\u9fa5]/用于匹配单个汉字。\n/[\\u4e00-\\u9fa5]{4}/.test(\"菜菜菜鸟\")　//true\n```\n\n## 量词\n\n<table><thead><tr><td>代码</td><td>类型</td><td>描述</td></tr></thead><tbody><tr><td>?</td><td>软性量词</td><td>出现零次或一次</td></tr><tr><td>*</td><td>软性量词</td><td>出现零次或多次(任意次)</td></tr><tr><td>+</td><td>软性量词</td><td>出现一次或多次（至少一次）</td></tr><tr><td>{n}</td><td>硬性量词</td><td>对应零次或者n次</td></tr><tr><td>{n,m}</td><td>软性量词</td><td>至少出现n次但不超过m次</td></tr><tr><td>{n,}</td><td>软性量词</td><td>至少出现n次(+的升级版)</td></tr></tbody></table>\n\n## 分组\n\n到目前为止，我们只能一个字符到匹配，虽然量词的出现，能帮助我们处理一排密紧密相连的同类型字符。但这是不够的，下面该轮到小括号出场了，***中括号表示范围内选择［］，大括号表示重复次数｛｝。小括号允许我们重复多个字符（）***。\n\n```\n/(cai){2}/.test(\"caicai\") //true\n/13(\\d)(\\d{8})/.test(\"13595687859\") //true\n//RegExp.$n　n为匹配最近的n个正则表达式的匹配结果,以上面电话号码为例:$1=(\\d) $2=(\\d{8})\nconsole.log(RegExp.$1) //会匹配到上面的第一个正则　此例为５　\nconsole.log(RegExp.$2) //会匹配到上面的第二个正则　此例为95687859\n```\n\n继续在分组上做文章。在分组中插入管道符（“|”），把它划分为两个或多个候多项。\n\n```\nvar reg = /(red|black|yellow)!!/;\nconsole.log(reg.test(\"red!!\"))//true\nconsole.log(reg.test(\"black!!\"))//true\nconsole.log(reg.test(\"yellow!!\"))//true\n//将＜＞括号和里面的都替换为空\nvar html = \"<p><a href='http://www.cnblogs.com/rubylouvre/'>caicai</a>by <em>asas</em></p>\";\nvar text = html.replace(/<(.)*?>/g, \"\");\nconsole.log(text) //caicai asas\n```\n","slug":"正则表达式","published":1,"updated":"2020-03-23T11:05:23.947Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgbydgoh003bofo9rovzi1wp","content":"<hr>\n<h2 id=\"元字符\"><a href=\"#元字符\" class=\"headerlink\" title=\"元字符\"></a>元字符</h2><p>([{+*?.$^|</p>\n<h2 id=\"字符类\"><a href=\"#字符类\" class=\"headerlink\" title=\"字符类\"></a>字符类</h2><blockquote>\n<p> 简单类</p>\n</blockquote>\n<p>原则上正则的一个字符对应一个字符，我们可以用[]把它们括起来，让[　]这个整体对应<strong><em>一个字符</em></strong>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/caicai/.test(&quot;caicai&quot;) //true</span><br><span class=\"line\">/[ca]i/.test(&quot;caicai&quot;) //true</span><br><span class=\"line\">&quot;caicai&quot;.match(/[ca]i/) // [&quot;ai&quot;] 因此说明匹配不了cai整个字符，只能匹配［］中的一个字符和外边的ｉ想对应</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>预定义类</p>\n</blockquote>\n<p>还是在那个中括号里面做文章，不过它好像已经走到尽头了。由于是中括号的马甲，因此它们还是对应一个字符。</p>\n<table><tr><td>字符</td><td>等同于</td><td>描述</td></tr><tr><td>.</td><td>[^\\n\\r]</td><td>一个除了换行和回车外的所有字符</td></tr><tr><td>\\d</td><td>[0-9]</td><td>一个数字字符</td></tr><tr><td>\\D</td><td>[^0-9]</td><td>一个非数字字符</td></tr><tr><td>\\w</td><td>[a-zA-Z0-9_]</td><td>一个单词字符(所有的字母)</td></tr><tr><td>\\W</td><td>[^a-zA-Z0-9_]</td><td>一个非单词字符</td></tr><tr><td>\\s</td><td>[\\t\\n\\x0B\\f\\r]</td><td>一个空白字符</td></tr><tr><td>\\S</td><td>[^\\t\\n\\x0B\\f\\r]</td><td>一个非空白字符</td></tr></table>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(/\\d/.test(&quot;3&quot;))//true</span><br><span class=\"line\">alert(/\\d/.test(&quot;w&quot;))//false</span><br><span class=\"line\">alert(/\\D/.test(&quot;w&quot;))//true</span><br><span class=\"line\">alert(/\\w/.test(&quot;w&quot;))//true</span><br><span class=\"line\">alert(/\\w/.test(&quot;菜&quot;))//false</span><br><span class=\"line\">alert(/\\W/.test(&quot;菜&quot;))//true</span><br><span class=\"line\">alert(/\\s/.test(&quot; &quot;))//true</span><br><span class=\"line\">alert(/\\S/.test(&quot; &quot;))//false</span><br><span class=\"line\">alert(/\\S/.test(&quot;菜菜&quot;))//true</span><br><span class=\"line\">alert(/./.test(&quot;菜&quot;))//true</span><br><span class=\"line\">alert(/./.test(&quot;  &quot;))//true</span><br><span class=\"line\">var a = &quot;\\n\\</span><br><span class=\"line\">      &quot;</span><br><span class=\"line\">alert(/./.test(a))//true</span><br><span class=\"line\">/[\\u4e00-\\u9fa5]/用于匹配单个汉字。</span><br><span class=\"line\">/[\\u4e00-\\u9fa5]&#123;4&#125;/.test(&quot;菜菜菜鸟&quot;)　//true</span><br></pre></td></tr></table></figure>\n<h2 id=\"量词\"><a href=\"#量词\" class=\"headerlink\" title=\"量词\"></a>量词</h2><table><thead><tr><td>代码</td><td>类型</td><td>描述</td></tr></thead><tbody><tr><td>?</td><td>软性量词</td><td>出现零次或一次</td></tr><tr><td>*</td><td>软性量词</td><td>出现零次或多次(任意次)</td></tr><tr><td>+</td><td>软性量词</td><td>出现一次或多次（至少一次）</td></tr><tr><td>{n}</td><td>硬性量词</td><td>对应零次或者n次</td></tr><tr><td>{n,m}</td><td>软性量词</td><td>至少出现n次但不超过m次</td></tr><tr><td>{n,}</td><td>软性量词</td><td>至少出现n次(+的升级版)</td></tr></tbody></table>\n\n<h2 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h2><p>到目前为止，我们只能一个字符到匹配，虽然量词的出现，能帮助我们处理一排密紧密相连的同类型字符。但这是不够的，下面该轮到小括号出场了，<strong><em>中括号表示范围内选择［］，大括号表示重复次数｛｝。小括号允许我们重复多个字符（）</em></strong>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/(cai)&#123;2&#125;/.test(&quot;caicai&quot;) //true</span><br><span class=\"line\">/13(\\d)(\\d&#123;8&#125;)/.test(&quot;13595687859&quot;) //true</span><br><span class=\"line\">//RegExp.$n　n为匹配最近的n个正则表达式的匹配结果,以上面电话号码为例:$1=(\\d) $2=(\\d&#123;8&#125;)</span><br><span class=\"line\">console.log(RegExp.$1) //会匹配到上面的第一个正则　此例为５　</span><br><span class=\"line\">console.log(RegExp.$2) //会匹配到上面的第二个正则　此例为95687859</span><br></pre></td></tr></table></figure>\n<p>继续在分组上做文章。在分组中插入管道符（“|”），把它划分为两个或多个候多项。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var reg = /(red|black|yellow)!!/;</span><br><span class=\"line\">console.log(reg.test(&quot;red!!&quot;))//true</span><br><span class=\"line\">console.log(reg.test(&quot;black!!&quot;))//true</span><br><span class=\"line\">console.log(reg.test(&quot;yellow!!&quot;))//true</span><br><span class=\"line\">//将＜＞括号和里面的都替换为空</span><br><span class=\"line\">var html = &quot;&lt;p&gt;&lt;a href=&apos;http://www.cnblogs.com/rubylouvre/&apos;&gt;caicai&lt;/a&gt;by &lt;em&gt;asas&lt;/em&gt;&lt;/p&gt;&quot;;</span><br><span class=\"line\">var text = html.replace(/&lt;(.)*?&gt;/g, &quot;&quot;);</span><br><span class=\"line\">console.log(text) //caicai asas</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<h2 id=\"元字符\"><a href=\"#元字符\" class=\"headerlink\" title=\"元字符\"></a>元字符</h2><p>([{+*?.$^|</p>\n<h2 id=\"字符类\"><a href=\"#字符类\" class=\"headerlink\" title=\"字符类\"></a>字符类</h2><blockquote>\n<p> 简单类</p>\n</blockquote>\n<p>原则上正则的一个字符对应一个字符，我们可以用[]把它们括起来，让[　]这个整体对应<strong><em>一个字符</em></strong>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/caicai/.test(&quot;caicai&quot;) //true</span><br><span class=\"line\">/[ca]i/.test(&quot;caicai&quot;) //true</span><br><span class=\"line\">&quot;caicai&quot;.match(/[ca]i/) // [&quot;ai&quot;] 因此说明匹配不了cai整个字符，只能匹配［］中的一个字符和外边的ｉ想对应</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>预定义类</p>\n</blockquote>\n<p>还是在那个中括号里面做文章，不过它好像已经走到尽头了。由于是中括号的马甲，因此它们还是对应一个字符。</p>\n<table><tr><td>字符</td><td>等同于</td><td>描述</td></tr><tr><td>.</td><td>[^\\n\\r]</td><td>一个除了换行和回车外的所有字符</td></tr><tr><td>\\d</td><td>[0-9]</td><td>一个数字字符</td></tr><tr><td>\\D</td><td>[^0-9]</td><td>一个非数字字符</td></tr><tr><td>\\w</td><td>[a-zA-Z0-9_]</td><td>一个单词字符(所有的字母)</td></tr><tr><td>\\W</td><td>[^a-zA-Z0-9_]</td><td>一个非单词字符</td></tr><tr><td>\\s</td><td>[\\t\\n\\x0B\\f\\r]</td><td>一个空白字符</td></tr><tr><td>\\S</td><td>[^\\t\\n\\x0B\\f\\r]</td><td>一个非空白字符</td></tr></table>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(/\\d/.test(&quot;3&quot;))//true</span><br><span class=\"line\">alert(/\\d/.test(&quot;w&quot;))//false</span><br><span class=\"line\">alert(/\\D/.test(&quot;w&quot;))//true</span><br><span class=\"line\">alert(/\\w/.test(&quot;w&quot;))//true</span><br><span class=\"line\">alert(/\\w/.test(&quot;菜&quot;))//false</span><br><span class=\"line\">alert(/\\W/.test(&quot;菜&quot;))//true</span><br><span class=\"line\">alert(/\\s/.test(&quot; &quot;))//true</span><br><span class=\"line\">alert(/\\S/.test(&quot; &quot;))//false</span><br><span class=\"line\">alert(/\\S/.test(&quot;菜菜&quot;))//true</span><br><span class=\"line\">alert(/./.test(&quot;菜&quot;))//true</span><br><span class=\"line\">alert(/./.test(&quot;  &quot;))//true</span><br><span class=\"line\">var a = &quot;\\n\\</span><br><span class=\"line\">      &quot;</span><br><span class=\"line\">alert(/./.test(a))//true</span><br><span class=\"line\">/[\\u4e00-\\u9fa5]/用于匹配单个汉字。</span><br><span class=\"line\">/[\\u4e00-\\u9fa5]&#123;4&#125;/.test(&quot;菜菜菜鸟&quot;)　//true</span><br></pre></td></tr></table></figure>\n<h2 id=\"量词\"><a href=\"#量词\" class=\"headerlink\" title=\"量词\"></a>量词</h2><table><thead><tr><td>代码</td><td>类型</td><td>描述</td></tr></thead><tbody><tr><td>?</td><td>软性量词</td><td>出现零次或一次</td></tr><tr><td>*</td><td>软性量词</td><td>出现零次或多次(任意次)</td></tr><tr><td>+</td><td>软性量词</td><td>出现一次或多次（至少一次）</td></tr><tr><td>{n}</td><td>硬性量词</td><td>对应零次或者n次</td></tr><tr><td>{n,m}</td><td>软性量词</td><td>至少出现n次但不超过m次</td></tr><tr><td>{n,}</td><td>软性量词</td><td>至少出现n次(+的升级版)</td></tr></tbody></table>\n\n<h2 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h2><p>到目前为止，我们只能一个字符到匹配，虽然量词的出现，能帮助我们处理一排密紧密相连的同类型字符。但这是不够的，下面该轮到小括号出场了，<strong><em>中括号表示范围内选择［］，大括号表示重复次数｛｝。小括号允许我们重复多个字符（）</em></strong>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/(cai)&#123;2&#125;/.test(&quot;caicai&quot;) //true</span><br><span class=\"line\">/13(\\d)(\\d&#123;8&#125;)/.test(&quot;13595687859&quot;) //true</span><br><span class=\"line\">//RegExp.$n　n为匹配最近的n个正则表达式的匹配结果,以上面电话号码为例:$1=(\\d) $2=(\\d&#123;8&#125;)</span><br><span class=\"line\">console.log(RegExp.$1) //会匹配到上面的第一个正则　此例为５　</span><br><span class=\"line\">console.log(RegExp.$2) //会匹配到上面的第二个正则　此例为95687859</span><br></pre></td></tr></table></figure>\n<p>继续在分组上做文章。在分组中插入管道符（“|”），把它划分为两个或多个候多项。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var reg = /(red|black|yellow)!!/;</span><br><span class=\"line\">console.log(reg.test(&quot;red!!&quot;))//true</span><br><span class=\"line\">console.log(reg.test(&quot;black!!&quot;))//true</span><br><span class=\"line\">console.log(reg.test(&quot;yellow!!&quot;))//true</span><br><span class=\"line\">//将＜＞括号和里面的都替换为空</span><br><span class=\"line\">var html = &quot;&lt;p&gt;&lt;a href=&apos;http://www.cnblogs.com/rubylouvre/&apos;&gt;caicai&lt;/a&gt;by &lt;em&gt;asas&lt;/em&gt;&lt;/p&gt;&quot;;</span><br><span class=\"line\">var text = html.replace(/&lt;(.)*?&gt;/g, &quot;&quot;);</span><br><span class=\"line\">console.log(text) //caicai asas</span><br></pre></td></tr></table></figure>\n"},{"title":"算法","date":"2016-07-23T02:00:33.000Z","_content":"\n<center><h1> 算法</h1></center>\n\n\n# 常用算法\n\n[算法与数据结构](https://juejin.im/entry/5b076242f265da0dbc087124)\n\n### 杨辉三角\n\n```\nfunction generator(rows){\n    let arr = [];\n    if(rows<=0){\n        return arr;\n    }\n    for(var i = 0;i<rows;i++){\n        let subArr = [];\n        for(var j = 0;j<=i;j++){\n            if(j>0 && j<i){\n                subArr.push(arr[i-1][j-1] + arr[i-1][j]);\n            }else{\n                subArr.push(1)\n            }\n        }\n        arr.push(subArr);\n    }\n    return arr;\n}\n\n```\n\n# 算法复杂度\n\n算法复杂度是指算法在编写成可执行程序后，运行时所需要的资源，资源包括时间资源和内存资源。\n\n同一问题可用不同算法解决，而一个算法的质量优劣将影响到算法乃至程序的效率。算法分析的目的在于选择合适算法和改进算法。一个算法的评价主要从时间复杂度和空间复杂度来考虑。\n\n## 时间复杂度\n\n### 为什么需要时间复杂度\n\n在实际项目开发中,我们理想状态是写出的这段代码是最优的,但是总不能把所有实现方式都写出来,然后去作比较,所以需要一个指标去衡量这段代码的效率,并且直接跑代码一定的局限性:\n\n1. 测试结果受当前运行环境影响\n\n   同样的代码,在不同的平台执行的时间明显不同\n\n2. 测试结果受测试数据的影响\n\n   不同的测试数据可能会带来不同的结果,比如我们按顺序查找的方法查找数组的一个元素,如果这个元素刚好在第一位,则执行了一次,但在最后的话,就得执行整个数组\n\n因此,我们就需要一个不受硬件,环境,数据影响的指标来去表示算法的执行效率,那就是算法的复杂度\n\n### 时间复杂度表示\n\n大O时间复杂度表示法\n\n```javascript\nfunction func(n){\n    let res = 1; // 执行一次\n    for(let i = 1; i < n; i++){ // 执行n次\n        res *= i; // 执行n-1次\n    }\n    return res; // 执行一次\n}\n```\n\n上面代码为求n!,我们初略计算下上述代码需要执行的时间,首先为了方便计算,假设执行每一行代码的时间都是相同的,在这里假设,每行代码执行一次的时间为t,代码的总时间为T(n),因此就能得到上述代码的总执行时间:\n\n```javascript\nT(n) = t + nt + (n - 1)t + t = (2n+1)t\n```\n\n我们以n为x轴,T(n)为y轴,因此就能得出结论: 代码总执行时间和每行代码执行的次数成正比,大O表示法就是用来表示这样的趋势,大O表示法**表示代码执行时间随数据规模增长的一种变化趋势**,下面就是大O表示法的公式:\n\n```javascript\nT(n) = O(F(n))\n```\n\n- **n**: 代表数据规模,相当于上面例子中的n\n\n- **F(n)**: 表示代码执行次数的总和,代码执行次数的总和与数据规模有关,所以用F(n)表示,F(n)对应上面例子中的\n\n  ( 2n + 1 ) \n\n- **T(n)**: 代表代码的执行时间,对应上面例子中的T(n)\n\n- **O**: 大O用来表示代码执行时间T(n) 与 代码执行次数总和F（n）之间的正比关系。\n\n上面说过大O表示法表示代码执行时间随数据规模增长的一种变化趋势,只代表趋势,不是实际执行的时间,当公司中的n无穷大时,系数和常数就可以忽略不计,所以忽略掉以后,大O表示法就变为:\n\n```javascript\nT(n) = O(n)\n```\n\n至此,我们就知道了什么是大O表示法以及怎么用大O表示法来表示时间复杂度,在看个例子,分析下代码的时间复杂度\n\n```javascript\nfunction func(arr){\n    let n = arr.length; // 执行一次\n \tlet i = 0; // 执行一次\n    for(; i< n - 1; i++){ //执行n次\n        let j = 0;// 执行n次\n        for(; j < n - 1; j++){ // 执行n次\n            if(arr[j]>arr[j+1]){// 执行n*n次\n                var temp = arr[j];\n            \tarr[j] = arr[j+1];\n            \tarr[j+1] = temp;\n            }\n        }\n    }\n    return arr;\n}\n```\n\n以上代码为最差的冒泡排序,先不管算法是否最优,只为分析时间复杂度,执行这段代码的时间复杂度为:\n\n```\nT(n) = t + t + nt + nt + nt + (n*n)t + (n*n)t = (2n²+3n+2)t = O(n²)\n```\n\n因此,我们通过两个例子可以发现时间复杂度大O规律:\n\n1. 不保留系数\n2. 只保留最高阶\n3. 嵌套代码的复杂度为内外代码复杂度的乘积\n\n### 怎么分析一段代码的时间复杂度\n\n通过上面的规律,可以得到,判断一段代码的时间复杂度,只需要关注这段代码执行次数最多的代码次数,其它都可忽略\n\n### 常见的时间复杂度\n\n最常见的时间复杂度有常数阶O(1),对数阶O(logn),线性阶O(n),线性对数阶O(nlogn),平方阶O(n²)\n\n```\n1 O(1) < O(logn) < O(n) < O(nlogn) < O(n²)\n```\n\n```javascript\nfunction func(arr,key){\n    const n = arr.length;\n    let low = 0;\n    let high = n -1;\n    let mid = Math.floor((low + high)/2);\n    while(low<=high){\n        mid = Math.floor((low + high)/2);// 执行次数\n    \tif(key === arr[mid]){\n            return mid;\n        }else if(key < arr[mid]){\n        \thigh =  mid - 1;         \n        }else{\n            low = mid + 1\n        }\n    }\n    return -1;\n}\n```\n\n以上代码为二分查找的代码,二分查找法是一个高效的查找算法,现在分析下上边代码的复杂度,发现执行次数最多为第7行,所以算法复杂度为这句代码的执行次数,分析以上代码,最坏的打算就是一直一半查找,直到只剩一个数,或者数组中不存在要找的元素\n\n```javascript\n第一次执行,剩余元素个数n/2\n第二次执行,剩余元素个数n/2/2\n... ...\n第n次执行,剩余元素个数n/2^T = 1 <==> 2^T = n <=> log2n\n```\n\n以上代码用大O表示时间复杂度即为O(logn),省略常数\n\n### 什么是对数?\n\n##### 对数符号\n\n以a为底N的对数记作![img](https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D46/sign=7c27e5b93f01213fcb334fda54e72d3f/50da81cb39dbb6fda35134460f24ab18972b374c.jpg),  对数符号log出自拉丁文logarithm，最早由意大利数学家卡瓦列里（Cavalieri）所使用。20世纪初，形成了对数的现代表示。为了使用方便，人们逐渐把以10为底的常用对数及以无理数e为底的自然对数分别记作lgN和lnN。\n\n##### 对数的定义\n\n如果 ![img](https://gss2.bdstatic.com/-fo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D134/sign=2a228f561b950a7b71354ac73ed1625c/8644ebf81a4c510fbfd3367a6659252dd42aa5bf.jpg) ，即a的x次方等于N（a>0，且a≠1），那么数x叫做以a为底N的对数（logarithm），记作  ![img](https://gss2.bdstatic.com/-fo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D72/sign=374d40bc0efa513d55aa6edc3c6d9940/e61190ef76c6a7ef68d97d46fbfaaf51f2de66d7.jpg) 。其中，a叫做对数的底数，N叫做真数，x叫做“以a为底N的对数”。\n\n##### 对数函数\n\n**定义**\n函数 ![img](https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D162/sign=c26ae4e5cfea15ce45eee40f84013a25/b8389b504fc2d56244645a8de11190ef76c66c66.jpg)   叫做对数函数（logarithmic function），其中x是自变量。对数函数的定义域是 ![img](https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D49/sign=a933c77dd22a283447a637025ab5f7f1/b03533fa828ba61e61b91f4f4734970a304e597f.jpg) 。\n\n**函数基本性质**\n1、过定点  ![img](https://gss0.bdstatic.com/94o3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D33/sign=5f60285976cf3bc7ec00cbefd0006afd/b999a9014c086e0625fceb1f04087bf40ad1cb0a.jpg),即x=1时,y=0。\n2、当![img](https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D58/sign=472bfe85ab6eddc422e7b4f338db7366/503d269759ee3d6d1c2457ab45166d224e4adef4.jpg)  时,在   ![img](https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D49/sign=a933c77dd22a283447a637025ab5f7f1/b03533fa828ba61e61b91f4f4734970a304e597f.jpg) 上是减函数；当  ![img](https://gss0.bdstatic.com/94o3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D33/sign=a7931d8cd700baa1be2c41b8461066ac/1c950a7b02087bf4327f8789f4d3572c11dfcf3b.jpg) 时,在   ![img](https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D49/sign=a933c77dd22a283447a637025ab5f7f1/b03533fa828ba61e61b91f4f4734970a304e597f.jpg)上是增函数。\n\n## 空间复杂度\n\n空间复杂度是指算法在计算机内执行时所需存储的度量\n\n**算法执行期间所需要的存储空间包括3个部分**\n\n- 算法程序所占的空间；\n- 输入的初始数据所占的存储空间；\n- 算法执行过程中所需要的额外空间。\n\n## JavaScript常见算法\n\n### 冒泡排序\n\n冒泡排序,是一种最基本的排序算法。它重复地走访要排序的元素列，依次比较两个相邻的元素，如果他们的顺序（如从大到小、首字母从A到Z）错误就把他们交换过来。走访元素的工作是重复地进行直到没有相邻元素需要交换，也就是说该元素列已经排序完成\n\n思想:\n\n1. 比较相邻的元素。如果第一个比第二个大，就交换他们两个。\n2. 对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。\n3. 针对所有的元素重复以上的步骤，除了最后一个。\n4. 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。\n\n```javascript\nfunction bubbleSort(arr) {\n    var i = arr.length, j;\n    var tempExchangVal;\n    while (i > 0) {\n        for (j = 0; j < i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                tempExchangVal = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = tempExchangVal;\n            }\n        }\n        i--;\n    }\n    return arr;\n}\n \nvar arr = [3, 2, 4, 9, 1, 5, 7, 6, 8];\nvar arrSorted = bubbleSort(arr);\n```\n\n### 插入排序\n\n插入排序（Insertion sort）是一种简单直观且稳定的排序算法,插入排序原理就像是打扑克,既在排好的顺序里插入到对应的位置\n\n思想:\n\n就是比大小，满足条件交换位置，**一开始会像冒泡排序一样，但会比冒泡多一步就是交换后原位置会继续和前面的数比较满足条件交换**，直到a[i+1]前面的数组是有序的\n\n```javascript\nvar arr = new Array(1, 3, 2, 8, 9, 1, 5);\n//插入排序\nfunction InsertionSort(arr) {\n    if (arr == null || arr.length < 2) {\n        return arr;\n    }\n    for (let i = 1; i < arr.length; i++) {\n        for (let j = i - 1; j >= 0 && arr[j] > arr[j + 1]; j--) {\n            let temp = arr[j];\n            arr[j] = arr[j + 1];\n            arr[j + 1] = temp;\n        }\n    }\n    return arr;\n}\n//控制台输出\nInsertionSort(arr);\n```\n\n### 快速排序\n\n快速排序（Quicksort）是对冒泡排序的一种改进\n\n[挖坑填数法](https://www.runoob.com/w3cnote/quick-sort.html)+分冶法\n\n分冶法:\n\n- 1．先从数列中取出一个数作为基准数。\n- 2．分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边。\n- 3．再对左右区间重复第二步，直到各区间只有一个数。\n\n思想:\n\n通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列\n\n```javascript\nvar arr = new Array(1, 3, 2, 8, 9, 1, 5);\nfunction Quicksort(arr,left = 0,right = arr.length-1) {\n    if (left >= right) { //如果左边的索引大于等于右边的索引说明整理完毕\n        return\n    }\n    let i = left;\n    let j = right;\n    const baseVal = arr[j]; // 取无序数组最后一个数为基准值\n    while (i < j) { //把所有比基准值小的数放在左边大的数放在右边\n        while (i < j && arr[i] <= baseVal) { //找到一个比基准值大的数交换\n            i++\n        }\n        arr[j] = arr[i] // 将较大的值放在右边如果没有比基准值大的数就是将自己赋值给自己（i 等于 j）\n        while (j > i && arr[j] >= baseVal) { //找到一个比基准值小的数交换\n            j--\n        }\n        arr[i] = arr[j] // 将较小的值放在左边如果没有找到比基准值小的数就是将自己赋值给自己（i 等于 j）\n    }\n    arr[j] = baseVal // 将基准值放至中央位置完成一次循环（这时候 j 等于 i ）\n    Quicksort(arr, left, j - 1) // 将左边的无序数组重复上面的操作\n    Quicksort(arr, j + 1, right) // 将右边的无序数组重复上面的操作\n\treturn arr\n}\nQuicksort(arr);\n```\n\n### 归并排序\n\n归并排序（MERGE-SORT）是建立在归并操作上的一种有效的排序算法,该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并\n\n![img](https://images2015.cnblogs.com/blog/1023577/201610/1023577-20161011232321687-190186195.png)\n\n```javascript\nfunction　merge(left, right){\n    console.log(left,right)\n    var　result=[];\n    while(left.length>0 && right.length>0){\n        if(left[0]<right[0]){\n            result.push(left.shift());\n        }else{\n            result.push(right.shift());\n        }\n    }\n    return　result.concat(left).concat(right);\n}\nfunction　mergeSort(items){\n    if(items.length == 1){\n        return　items;\n\t}\n\tvar　middle = Math.floor(items.length/2),\n    left = items.slice(0, middle),\n    right = items.slice(middle);\n    return　merge(mergeSort(left), mergeSort(right));\n}\nmergeSort([2,4,7,5,8,1,3,6])\n```\n\n### 选择排序\n\n选择排序工作原理是每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到全部待排序的数据元素排完。 选择排序是不稳定的排序方法。\n\n```javascript\nvar arr = new Array(1, 3, 2, 8, 9, 1, 5);\nfunction SelectionSort(arr) {\n    if (arr == null || arr.length < 2) {\n         return arr;\n    }\n    for (var i = 0; i < (arr.length - 1); i++) {\n        let minIndex = i;\n        for (let j = i + 1; j < arr.length; j++) {\n            minIndex = arr[j] < arr[minIndex] ? j : minIndex;\n        }\n        let temp = arr[i];\n        arr[i] = arr[minIndex];\n        arr[minIndex] = temp;\n    }\n    return arr;\n}\nSelectionSort(arr);\n```\n\n### 希尔排序\n\n希尔排序是插入排序的一种又称“缩小增量排序”，是直接插入排序算法的一种更高效的改进版本。希尔排序是非稳定排序算法(**三层for循环+if**)\n\n```javascript\nlet arr = [9,2,1,4,3,7,5,8,6,0];\nfunction sort(arr){\n    if(arr == null || arr.length <= 1){\n        return arr;\n    }\n    //希尔排序  升序 增量为5 2 1\n    for (let d = Math.floor(arr.length / 2);d>0;d = Math.floor(d/2)) { \n        for (let i = d; i < arr.length; i++){ \n            //i:代表即将插入的元素角标，作为每一组比较数据的最后一个元素角标 \n            //j:代表与i同一组的数组元素角标\n            for (let j = i-d; j>=0; j-=d){ //在此处-d 为了避免下面数组角标越界\n                if (arr[j] > arr[j + d]) {// j+d 代表即将插入的元素所在的角标\n                    //符合条件，插入元素（交换位置）\n                    let temp = arr[j];\n                    arr[j] = arr[j + d];\n                    arr[j + d] = temp;\n                }\n            }\n        } \n        console.log(arr);\n        //[7, 2, 1, 4, 0, 9, 5, 8, 6, 3] \n        //[0, 2, 1, 3, 5, 4, 6, 8, 7, 9]\n        //[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    }\n    return arr;\n}\nsort(arr);\n```\n\n### 堆排序\n\n堆是基于树抽象数据类型的一种特殊的数据结构,一个常见的例子就是优先队列,还有排序算法之一的堆排序\n\n最大堆: 父节点大于子节点\n\n最小堆: 父节点小于子节点\n\n### 计数排序\n\n\n\n### 桶排序\n\n\n\n### 基数排序\n\n\n\n### <span name=\"erfen\">二分查找</span>\n\n二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法。但是，折半查找要求线性表必须**采用顺序存储结构**，而且表中元素按关键字有序排列\n\n**思想**:\n\n折半查找法也称为二分查找法，它充分利用了元素间的次序关系，采用分治策略，可在最坏的情况下用O(log n)完成搜索任务。它的基本思想是：（这里假设数组元素呈升序排列）将n个元素分成个数大致相同的两半，取a[n/2]与欲查找的x作比较，如果x=a[n/2]则找到x，算法终止；如 果x <a[n/2]，则我们只要在数组a的左半部继续搜索x；如果x>a[n/2]，则我们只要在数组a的右半部继续搜索x。\n\n```javascript\nvar Arr = [3, 5, 6, 7, 9, 12, 15];\nfunction binary(find, arr, low, high) {\n    if (low <= high) {\n        if (arr[low] == find) {\n            return low;\n        }\n        if (arr[high] == find) {\n            return high;\n        }\n        var mid = Math.ceil((high + low) / 2);\n        if (arr[mid] == find) {\n            return mid;\n        } else if (arr[mid] > find) {\n            return binary(find, arr, low, mid - 1);\n        } else {\n            return binary(find, arr, mid + 1, high);\n        }\n    }\n    return -1;\n}\nbinary(15, Arr, 0, Arr.length - 1);\n```\n\n","source":"_posts/算法.md","raw":"---\ntitle: 算法\ndate: 2016-07-23 10:00:33\ncategories: Javascript\ntags:\n     - Javascript\n---\n\n<center><h1> 算法</h1></center>\n\n\n# 常用算法\n\n[算法与数据结构](https://juejin.im/entry/5b076242f265da0dbc087124)\n\n### 杨辉三角\n\n```\nfunction generator(rows){\n    let arr = [];\n    if(rows<=0){\n        return arr;\n    }\n    for(var i = 0;i<rows;i++){\n        let subArr = [];\n        for(var j = 0;j<=i;j++){\n            if(j>0 && j<i){\n                subArr.push(arr[i-1][j-1] + arr[i-1][j]);\n            }else{\n                subArr.push(1)\n            }\n        }\n        arr.push(subArr);\n    }\n    return arr;\n}\n\n```\n\n# 算法复杂度\n\n算法复杂度是指算法在编写成可执行程序后，运行时所需要的资源，资源包括时间资源和内存资源。\n\n同一问题可用不同算法解决，而一个算法的质量优劣将影响到算法乃至程序的效率。算法分析的目的在于选择合适算法和改进算法。一个算法的评价主要从时间复杂度和空间复杂度来考虑。\n\n## 时间复杂度\n\n### 为什么需要时间复杂度\n\n在实际项目开发中,我们理想状态是写出的这段代码是最优的,但是总不能把所有实现方式都写出来,然后去作比较,所以需要一个指标去衡量这段代码的效率,并且直接跑代码一定的局限性:\n\n1. 测试结果受当前运行环境影响\n\n   同样的代码,在不同的平台执行的时间明显不同\n\n2. 测试结果受测试数据的影响\n\n   不同的测试数据可能会带来不同的结果,比如我们按顺序查找的方法查找数组的一个元素,如果这个元素刚好在第一位,则执行了一次,但在最后的话,就得执行整个数组\n\n因此,我们就需要一个不受硬件,环境,数据影响的指标来去表示算法的执行效率,那就是算法的复杂度\n\n### 时间复杂度表示\n\n大O时间复杂度表示法\n\n```javascript\nfunction func(n){\n    let res = 1; // 执行一次\n    for(let i = 1; i < n; i++){ // 执行n次\n        res *= i; // 执行n-1次\n    }\n    return res; // 执行一次\n}\n```\n\n上面代码为求n!,我们初略计算下上述代码需要执行的时间,首先为了方便计算,假设执行每一行代码的时间都是相同的,在这里假设,每行代码执行一次的时间为t,代码的总时间为T(n),因此就能得到上述代码的总执行时间:\n\n```javascript\nT(n) = t + nt + (n - 1)t + t = (2n+1)t\n```\n\n我们以n为x轴,T(n)为y轴,因此就能得出结论: 代码总执行时间和每行代码执行的次数成正比,大O表示法就是用来表示这样的趋势,大O表示法**表示代码执行时间随数据规模增长的一种变化趋势**,下面就是大O表示法的公式:\n\n```javascript\nT(n) = O(F(n))\n```\n\n- **n**: 代表数据规模,相当于上面例子中的n\n\n- **F(n)**: 表示代码执行次数的总和,代码执行次数的总和与数据规模有关,所以用F(n)表示,F(n)对应上面例子中的\n\n  ( 2n + 1 ) \n\n- **T(n)**: 代表代码的执行时间,对应上面例子中的T(n)\n\n- **O**: 大O用来表示代码执行时间T(n) 与 代码执行次数总和F（n）之间的正比关系。\n\n上面说过大O表示法表示代码执行时间随数据规模增长的一种变化趋势,只代表趋势,不是实际执行的时间,当公司中的n无穷大时,系数和常数就可以忽略不计,所以忽略掉以后,大O表示法就变为:\n\n```javascript\nT(n) = O(n)\n```\n\n至此,我们就知道了什么是大O表示法以及怎么用大O表示法来表示时间复杂度,在看个例子,分析下代码的时间复杂度\n\n```javascript\nfunction func(arr){\n    let n = arr.length; // 执行一次\n \tlet i = 0; // 执行一次\n    for(; i< n - 1; i++){ //执行n次\n        let j = 0;// 执行n次\n        for(; j < n - 1; j++){ // 执行n次\n            if(arr[j]>arr[j+1]){// 执行n*n次\n                var temp = arr[j];\n            \tarr[j] = arr[j+1];\n            \tarr[j+1] = temp;\n            }\n        }\n    }\n    return arr;\n}\n```\n\n以上代码为最差的冒泡排序,先不管算法是否最优,只为分析时间复杂度,执行这段代码的时间复杂度为:\n\n```\nT(n) = t + t + nt + nt + nt + (n*n)t + (n*n)t = (2n²+3n+2)t = O(n²)\n```\n\n因此,我们通过两个例子可以发现时间复杂度大O规律:\n\n1. 不保留系数\n2. 只保留最高阶\n3. 嵌套代码的复杂度为内外代码复杂度的乘积\n\n### 怎么分析一段代码的时间复杂度\n\n通过上面的规律,可以得到,判断一段代码的时间复杂度,只需要关注这段代码执行次数最多的代码次数,其它都可忽略\n\n### 常见的时间复杂度\n\n最常见的时间复杂度有常数阶O(1),对数阶O(logn),线性阶O(n),线性对数阶O(nlogn),平方阶O(n²)\n\n```\n1 O(1) < O(logn) < O(n) < O(nlogn) < O(n²)\n```\n\n```javascript\nfunction func(arr,key){\n    const n = arr.length;\n    let low = 0;\n    let high = n -1;\n    let mid = Math.floor((low + high)/2);\n    while(low<=high){\n        mid = Math.floor((low + high)/2);// 执行次数\n    \tif(key === arr[mid]){\n            return mid;\n        }else if(key < arr[mid]){\n        \thigh =  mid - 1;         \n        }else{\n            low = mid + 1\n        }\n    }\n    return -1;\n}\n```\n\n以上代码为二分查找的代码,二分查找法是一个高效的查找算法,现在分析下上边代码的复杂度,发现执行次数最多为第7行,所以算法复杂度为这句代码的执行次数,分析以上代码,最坏的打算就是一直一半查找,直到只剩一个数,或者数组中不存在要找的元素\n\n```javascript\n第一次执行,剩余元素个数n/2\n第二次执行,剩余元素个数n/2/2\n... ...\n第n次执行,剩余元素个数n/2^T = 1 <==> 2^T = n <=> log2n\n```\n\n以上代码用大O表示时间复杂度即为O(logn),省略常数\n\n### 什么是对数?\n\n##### 对数符号\n\n以a为底N的对数记作![img](https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D46/sign=7c27e5b93f01213fcb334fda54e72d3f/50da81cb39dbb6fda35134460f24ab18972b374c.jpg),  对数符号log出自拉丁文logarithm，最早由意大利数学家卡瓦列里（Cavalieri）所使用。20世纪初，形成了对数的现代表示。为了使用方便，人们逐渐把以10为底的常用对数及以无理数e为底的自然对数分别记作lgN和lnN。\n\n##### 对数的定义\n\n如果 ![img](https://gss2.bdstatic.com/-fo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D134/sign=2a228f561b950a7b71354ac73ed1625c/8644ebf81a4c510fbfd3367a6659252dd42aa5bf.jpg) ，即a的x次方等于N（a>0，且a≠1），那么数x叫做以a为底N的对数（logarithm），记作  ![img](https://gss2.bdstatic.com/-fo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D72/sign=374d40bc0efa513d55aa6edc3c6d9940/e61190ef76c6a7ef68d97d46fbfaaf51f2de66d7.jpg) 。其中，a叫做对数的底数，N叫做真数，x叫做“以a为底N的对数”。\n\n##### 对数函数\n\n**定义**\n函数 ![img](https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D162/sign=c26ae4e5cfea15ce45eee40f84013a25/b8389b504fc2d56244645a8de11190ef76c66c66.jpg)   叫做对数函数（logarithmic function），其中x是自变量。对数函数的定义域是 ![img](https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D49/sign=a933c77dd22a283447a637025ab5f7f1/b03533fa828ba61e61b91f4f4734970a304e597f.jpg) 。\n\n**函数基本性质**\n1、过定点  ![img](https://gss0.bdstatic.com/94o3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D33/sign=5f60285976cf3bc7ec00cbefd0006afd/b999a9014c086e0625fceb1f04087bf40ad1cb0a.jpg),即x=1时,y=0。\n2、当![img](https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D58/sign=472bfe85ab6eddc422e7b4f338db7366/503d269759ee3d6d1c2457ab45166d224e4adef4.jpg)  时,在   ![img](https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D49/sign=a933c77dd22a283447a637025ab5f7f1/b03533fa828ba61e61b91f4f4734970a304e597f.jpg) 上是减函数；当  ![img](https://gss0.bdstatic.com/94o3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D33/sign=a7931d8cd700baa1be2c41b8461066ac/1c950a7b02087bf4327f8789f4d3572c11dfcf3b.jpg) 时,在   ![img](https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D49/sign=a933c77dd22a283447a637025ab5f7f1/b03533fa828ba61e61b91f4f4734970a304e597f.jpg)上是增函数。\n\n## 空间复杂度\n\n空间复杂度是指算法在计算机内执行时所需存储的度量\n\n**算法执行期间所需要的存储空间包括3个部分**\n\n- 算法程序所占的空间；\n- 输入的初始数据所占的存储空间；\n- 算法执行过程中所需要的额外空间。\n\n## JavaScript常见算法\n\n### 冒泡排序\n\n冒泡排序,是一种最基本的排序算法。它重复地走访要排序的元素列，依次比较两个相邻的元素，如果他们的顺序（如从大到小、首字母从A到Z）错误就把他们交换过来。走访元素的工作是重复地进行直到没有相邻元素需要交换，也就是说该元素列已经排序完成\n\n思想:\n\n1. 比较相邻的元素。如果第一个比第二个大，就交换他们两个。\n2. 对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。\n3. 针对所有的元素重复以上的步骤，除了最后一个。\n4. 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。\n\n```javascript\nfunction bubbleSort(arr) {\n    var i = arr.length, j;\n    var tempExchangVal;\n    while (i > 0) {\n        for (j = 0; j < i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                tempExchangVal = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = tempExchangVal;\n            }\n        }\n        i--;\n    }\n    return arr;\n}\n \nvar arr = [3, 2, 4, 9, 1, 5, 7, 6, 8];\nvar arrSorted = bubbleSort(arr);\n```\n\n### 插入排序\n\n插入排序（Insertion sort）是一种简单直观且稳定的排序算法,插入排序原理就像是打扑克,既在排好的顺序里插入到对应的位置\n\n思想:\n\n就是比大小，满足条件交换位置，**一开始会像冒泡排序一样，但会比冒泡多一步就是交换后原位置会继续和前面的数比较满足条件交换**，直到a[i+1]前面的数组是有序的\n\n```javascript\nvar arr = new Array(1, 3, 2, 8, 9, 1, 5);\n//插入排序\nfunction InsertionSort(arr) {\n    if (arr == null || arr.length < 2) {\n        return arr;\n    }\n    for (let i = 1; i < arr.length; i++) {\n        for (let j = i - 1; j >= 0 && arr[j] > arr[j + 1]; j--) {\n            let temp = arr[j];\n            arr[j] = arr[j + 1];\n            arr[j + 1] = temp;\n        }\n    }\n    return arr;\n}\n//控制台输出\nInsertionSort(arr);\n```\n\n### 快速排序\n\n快速排序（Quicksort）是对冒泡排序的一种改进\n\n[挖坑填数法](https://www.runoob.com/w3cnote/quick-sort.html)+分冶法\n\n分冶法:\n\n- 1．先从数列中取出一个数作为基准数。\n- 2．分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边。\n- 3．再对左右区间重复第二步，直到各区间只有一个数。\n\n思想:\n\n通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列\n\n```javascript\nvar arr = new Array(1, 3, 2, 8, 9, 1, 5);\nfunction Quicksort(arr,left = 0,right = arr.length-1) {\n    if (left >= right) { //如果左边的索引大于等于右边的索引说明整理完毕\n        return\n    }\n    let i = left;\n    let j = right;\n    const baseVal = arr[j]; // 取无序数组最后一个数为基准值\n    while (i < j) { //把所有比基准值小的数放在左边大的数放在右边\n        while (i < j && arr[i] <= baseVal) { //找到一个比基准值大的数交换\n            i++\n        }\n        arr[j] = arr[i] // 将较大的值放在右边如果没有比基准值大的数就是将自己赋值给自己（i 等于 j）\n        while (j > i && arr[j] >= baseVal) { //找到一个比基准值小的数交换\n            j--\n        }\n        arr[i] = arr[j] // 将较小的值放在左边如果没有找到比基准值小的数就是将自己赋值给自己（i 等于 j）\n    }\n    arr[j] = baseVal // 将基准值放至中央位置完成一次循环（这时候 j 等于 i ）\n    Quicksort(arr, left, j - 1) // 将左边的无序数组重复上面的操作\n    Quicksort(arr, j + 1, right) // 将右边的无序数组重复上面的操作\n\treturn arr\n}\nQuicksort(arr);\n```\n\n### 归并排序\n\n归并排序（MERGE-SORT）是建立在归并操作上的一种有效的排序算法,该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并\n\n![img](https://images2015.cnblogs.com/blog/1023577/201610/1023577-20161011232321687-190186195.png)\n\n```javascript\nfunction　merge(left, right){\n    console.log(left,right)\n    var　result=[];\n    while(left.length>0 && right.length>0){\n        if(left[0]<right[0]){\n            result.push(left.shift());\n        }else{\n            result.push(right.shift());\n        }\n    }\n    return　result.concat(left).concat(right);\n}\nfunction　mergeSort(items){\n    if(items.length == 1){\n        return　items;\n\t}\n\tvar　middle = Math.floor(items.length/2),\n    left = items.slice(0, middle),\n    right = items.slice(middle);\n    return　merge(mergeSort(left), mergeSort(right));\n}\nmergeSort([2,4,7,5,8,1,3,6])\n```\n\n### 选择排序\n\n选择排序工作原理是每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到全部待排序的数据元素排完。 选择排序是不稳定的排序方法。\n\n```javascript\nvar arr = new Array(1, 3, 2, 8, 9, 1, 5);\nfunction SelectionSort(arr) {\n    if (arr == null || arr.length < 2) {\n         return arr;\n    }\n    for (var i = 0; i < (arr.length - 1); i++) {\n        let minIndex = i;\n        for (let j = i + 1; j < arr.length; j++) {\n            minIndex = arr[j] < arr[minIndex] ? j : minIndex;\n        }\n        let temp = arr[i];\n        arr[i] = arr[minIndex];\n        arr[minIndex] = temp;\n    }\n    return arr;\n}\nSelectionSort(arr);\n```\n\n### 希尔排序\n\n希尔排序是插入排序的一种又称“缩小增量排序”，是直接插入排序算法的一种更高效的改进版本。希尔排序是非稳定排序算法(**三层for循环+if**)\n\n```javascript\nlet arr = [9,2,1,4,3,7,5,8,6,0];\nfunction sort(arr){\n    if(arr == null || arr.length <= 1){\n        return arr;\n    }\n    //希尔排序  升序 增量为5 2 1\n    for (let d = Math.floor(arr.length / 2);d>0;d = Math.floor(d/2)) { \n        for (let i = d; i < arr.length; i++){ \n            //i:代表即将插入的元素角标，作为每一组比较数据的最后一个元素角标 \n            //j:代表与i同一组的数组元素角标\n            for (let j = i-d; j>=0; j-=d){ //在此处-d 为了避免下面数组角标越界\n                if (arr[j] > arr[j + d]) {// j+d 代表即将插入的元素所在的角标\n                    //符合条件，插入元素（交换位置）\n                    let temp = arr[j];\n                    arr[j] = arr[j + d];\n                    arr[j + d] = temp;\n                }\n            }\n        } \n        console.log(arr);\n        //[7, 2, 1, 4, 0, 9, 5, 8, 6, 3] \n        //[0, 2, 1, 3, 5, 4, 6, 8, 7, 9]\n        //[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    }\n    return arr;\n}\nsort(arr);\n```\n\n### 堆排序\n\n堆是基于树抽象数据类型的一种特殊的数据结构,一个常见的例子就是优先队列,还有排序算法之一的堆排序\n\n最大堆: 父节点大于子节点\n\n最小堆: 父节点小于子节点\n\n### 计数排序\n\n\n\n### 桶排序\n\n\n\n### 基数排序\n\n\n\n### <span name=\"erfen\">二分查找</span>\n\n二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法。但是，折半查找要求线性表必须**采用顺序存储结构**，而且表中元素按关键字有序排列\n\n**思想**:\n\n折半查找法也称为二分查找法，它充分利用了元素间的次序关系，采用分治策略，可在最坏的情况下用O(log n)完成搜索任务。它的基本思想是：（这里假设数组元素呈升序排列）将n个元素分成个数大致相同的两半，取a[n/2]与欲查找的x作比较，如果x=a[n/2]则找到x，算法终止；如 果x <a[n/2]，则我们只要在数组a的左半部继续搜索x；如果x>a[n/2]，则我们只要在数组a的右半部继续搜索x。\n\n```javascript\nvar Arr = [3, 5, 6, 7, 9, 12, 15];\nfunction binary(find, arr, low, high) {\n    if (low <= high) {\n        if (arr[low] == find) {\n            return low;\n        }\n        if (arr[high] == find) {\n            return high;\n        }\n        var mid = Math.ceil((high + low) / 2);\n        if (arr[mid] == find) {\n            return mid;\n        } else if (arr[mid] > find) {\n            return binary(find, arr, low, mid - 1);\n        } else {\n            return binary(find, arr, mid + 1, high);\n        }\n    }\n    return -1;\n}\nbinary(15, Arr, 0, Arr.length - 1);\n```\n\n","slug":"算法","published":1,"updated":"2020-03-23T11:05:23.947Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgbydgoi003eofo9dbpdy210","content":"<center><h1> 算法</h1></center>\n\n\n<h1 id=\"常用算法\"><a href=\"#常用算法\" class=\"headerlink\" title=\"常用算法\"></a>常用算法</h1><p><a href=\"https://juejin.im/entry/5b076242f265da0dbc087124\" target=\"_blank\" rel=\"noopener\">算法与数据结构</a></p>\n<h3 id=\"杨辉三角\"><a href=\"#杨辉三角\" class=\"headerlink\" title=\"杨辉三角\"></a>杨辉三角</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function generator(rows)&#123;</span><br><span class=\"line\">    let arr = [];</span><br><span class=\"line\">    if(rows&lt;=0)&#123;</span><br><span class=\"line\">        return arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for(var i = 0;i&lt;rows;i++)&#123;</span><br><span class=\"line\">        let subArr = [];</span><br><span class=\"line\">        for(var j = 0;j&lt;=i;j++)&#123;</span><br><span class=\"line\">            if(j&gt;0 &amp;&amp; j&lt;i)&#123;</span><br><span class=\"line\">                subArr.push(arr[i-1][j-1] + arr[i-1][j]);</span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                subArr.push(1)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        arr.push(subArr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"算法复杂度\"><a href=\"#算法复杂度\" class=\"headerlink\" title=\"算法复杂度\"></a>算法复杂度</h1><p>算法复杂度是指算法在编写成可执行程序后，运行时所需要的资源，资源包括时间资源和内存资源。</p>\n<p>同一问题可用不同算法解决，而一个算法的质量优劣将影响到算法乃至程序的效率。算法分析的目的在于选择合适算法和改进算法。一个算法的评价主要从时间复杂度和空间复杂度来考虑。</p>\n<h2 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h2><h3 id=\"为什么需要时间复杂度\"><a href=\"#为什么需要时间复杂度\" class=\"headerlink\" title=\"为什么需要时间复杂度\"></a>为什么需要时间复杂度</h3><p>在实际项目开发中,我们理想状态是写出的这段代码是最优的,但是总不能把所有实现方式都写出来,然后去作比较,所以需要一个指标去衡量这段代码的效率,并且直接跑代码一定的局限性:</p>\n<ol>\n<li><p>测试结果受当前运行环境影响</p>\n<p>同样的代码,在不同的平台执行的时间明显不同</p>\n</li>\n<li><p>测试结果受测试数据的影响</p>\n<p>不同的测试数据可能会带来不同的结果,比如我们按顺序查找的方法查找数组的一个元素,如果这个元素刚好在第一位,则执行了一次,但在最后的话,就得执行整个数组</p>\n</li>\n</ol>\n<p>因此,我们就需要一个不受硬件,环境,数据影响的指标来去表示算法的执行效率,那就是算法的复杂度</p>\n<h3 id=\"时间复杂度表示\"><a href=\"#时间复杂度表示\" class=\"headerlink\" title=\"时间复杂度表示\"></a>时间复杂度表示</h3><p>大O时间复杂度表示法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"number\">1</span>; <span class=\"comment\">// 执行一次</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; n; i++)&#123; <span class=\"comment\">// 执行n次</span></span><br><span class=\"line\">        res *= i; <span class=\"comment\">// 执行n-1次</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res; <span class=\"comment\">// 执行一次</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码为求n!,我们初略计算下上述代码需要执行的时间,首先为了方便计算,假设执行每一行代码的时间都是相同的,在这里假设,每行代码执行一次的时间为t,代码的总时间为T(n),因此就能得到上述代码的总执行时间:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T(n) = t + nt + (n - <span class=\"number\">1</span>)t + t = (<span class=\"number\">2n</span>+<span class=\"number\">1</span>)t</span><br></pre></td></tr></table></figure>\n<p>我们以n为x轴,T(n)为y轴,因此就能得出结论: 代码总执行时间和每行代码执行的次数成正比,大O表示法就是用来表示这样的趋势,大O表示法<strong>表示代码执行时间随数据规模增长的一种变化趋势</strong>,下面就是大O表示法的公式:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T(n) = O(F(n))</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><strong>n</strong>: 代表数据规模,相当于上面例子中的n</p>\n</li>\n<li><p><strong>F(n)</strong>: 表示代码执行次数的总和,代码执行次数的总和与数据规模有关,所以用F(n)表示,F(n)对应上面例子中的</p>\n<p>( 2n + 1 ) </p>\n</li>\n<li><p><strong>T(n)</strong>: 代表代码的执行时间,对应上面例子中的T(n)</p>\n</li>\n<li><p><strong>O</strong>: 大O用来表示代码执行时间T(n) 与 代码执行次数总和F（n）之间的正比关系。</p>\n</li>\n</ul>\n<p>上面说过大O表示法表示代码执行时间随数据规模增长的一种变化趋势,只代表趋势,不是实际执行的时间,当公司中的n无穷大时,系数和常数就可以忽略不计,所以忽略掉以后,大O表示法就变为:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T(n) = O(n)</span><br></pre></td></tr></table></figure>\n<p>至此,我们就知道了什么是大O表示法以及怎么用大O表示法来表示时间复杂度,在看个例子,分析下代码的时间复杂度</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> n = arr.length; <span class=\"comment\">// 执行一次</span></span><br><span class=\"line\"> \t<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; <span class=\"comment\">// 执行一次</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; i&lt; n - <span class=\"number\">1</span>; i++)&#123; <span class=\"comment\">//执行n次</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> j = <span class=\"number\">0</span>;<span class=\"comment\">// 执行n次</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(; j &lt; n - <span class=\"number\">1</span>; j++)&#123; <span class=\"comment\">// 执行n次</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[j]&gt;arr[j+<span class=\"number\">1</span>])&#123;<span class=\"comment\">// 执行n*n次</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> temp = arr[j];</span><br><span class=\"line\">            \tarr[j] = arr[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">            \tarr[j+<span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码为最差的冒泡排序,先不管算法是否最优,只为分析时间复杂度,执行这段代码的时间复杂度为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T(n) = t + t + nt + nt + nt + (n*n)t + (n*n)t = (2n²+3n+2)t = O(n²)</span><br></pre></td></tr></table></figure>\n<p>因此,我们通过两个例子可以发现时间复杂度大O规律:</p>\n<ol>\n<li>不保留系数</li>\n<li>只保留最高阶</li>\n<li>嵌套代码的复杂度为内外代码复杂度的乘积</li>\n</ol>\n<h3 id=\"怎么分析一段代码的时间复杂度\"><a href=\"#怎么分析一段代码的时间复杂度\" class=\"headerlink\" title=\"怎么分析一段代码的时间复杂度\"></a>怎么分析一段代码的时间复杂度</h3><p>通过上面的规律,可以得到,判断一段代码的时间复杂度,只需要关注这段代码执行次数最多的代码次数,其它都可忽略</p>\n<h3 id=\"常见的时间复杂度\"><a href=\"#常见的时间复杂度\" class=\"headerlink\" title=\"常见的时间复杂度\"></a>常见的时间复杂度</h3><p>最常见的时间复杂度有常数阶O(1),对数阶O(logn),线性阶O(n),线性对数阶O(nlogn),平方阶O(n²)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n²)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">arr,key</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> n = arr.length;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> low = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> high = n <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mid = <span class=\"built_in\">Math</span>.floor((low + high)/<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(low&lt;=high)&#123;</span><br><span class=\"line\">        mid = <span class=\"built_in\">Math</span>.floor((low + high)/<span class=\"number\">2</span>);<span class=\"comment\">// 执行次数</span></span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(key === arr[mid])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(key &lt; arr[mid])&#123;</span><br><span class=\"line\">        \thigh =  mid - <span class=\"number\">1</span>;         </span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            low = mid + <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码为二分查找的代码,二分查找法是一个高效的查找算法,现在分析下上边代码的复杂度,发现执行次数最多为第7行,所以算法复杂度为这句代码的执行次数,分析以上代码,最坏的打算就是一直一半查找,直到只剩一个数,或者数组中不存在要找的元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一次执行,剩余元素个数n/<span class=\"number\">2</span></span><br><span class=\"line\">第二次执行,剩余元素个数n/<span class=\"number\">2</span>/<span class=\"number\">2</span></span><br><span class=\"line\">... ...</span><br><span class=\"line\">第n次执行,剩余元素个数n/<span class=\"number\">2</span>^T = <span class=\"number\">1</span> &lt;==&gt; <span class=\"number\">2</span>^T = n &lt;=&gt; log2n</span><br></pre></td></tr></table></figure>\n<p>以上代码用大O表示时间复杂度即为O(logn),省略常数</p>\n<h3 id=\"什么是对数\"><a href=\"#什么是对数\" class=\"headerlink\" title=\"什么是对数?\"></a>什么是对数?</h3><h5 id=\"对数符号\"><a href=\"#对数符号\" class=\"headerlink\" title=\"对数符号\"></a>对数符号</h5><p>以a为底N的对数记作<img src=\"https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D46/sign=7c27e5b93f01213fcb334fda54e72d3f/50da81cb39dbb6fda35134460f24ab18972b374c.jpg\" alt=\"img\">,  对数符号log出自拉丁文logarithm，最早由意大利数学家卡瓦列里（Cavalieri）所使用。20世纪初，形成了对数的现代表示。为了使用方便，人们逐渐把以10为底的常用对数及以无理数e为底的自然对数分别记作lgN和lnN。</p>\n<h5 id=\"对数的定义\"><a href=\"#对数的定义\" class=\"headerlink\" title=\"对数的定义\"></a>对数的定义</h5><p>如果 <img src=\"https://gss2.bdstatic.com/-fo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D134/sign=2a228f561b950a7b71354ac73ed1625c/8644ebf81a4c510fbfd3367a6659252dd42aa5bf.jpg\" alt=\"img\"> ，即a的x次方等于N（a&gt;0，且a≠1），那么数x叫做以a为底N的对数（logarithm），记作  <img src=\"https://gss2.bdstatic.com/-fo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D72/sign=374d40bc0efa513d55aa6edc3c6d9940/e61190ef76c6a7ef68d97d46fbfaaf51f2de66d7.jpg\" alt=\"img\"> 。其中，a叫做对数的底数，N叫做真数，x叫做“以a为底N的对数”。</p>\n<h5 id=\"对数函数\"><a href=\"#对数函数\" class=\"headerlink\" title=\"对数函数\"></a>对数函数</h5><p><strong>定义</strong><br>函数 <img src=\"https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D162/sign=c26ae4e5cfea15ce45eee40f84013a25/b8389b504fc2d56244645a8de11190ef76c66c66.jpg\" alt=\"img\">   叫做对数函数（logarithmic function），其中x是自变量。对数函数的定义域是 <img src=\"https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D49/sign=a933c77dd22a283447a637025ab5f7f1/b03533fa828ba61e61b91f4f4734970a304e597f.jpg\" alt=\"img\"> 。</p>\n<p><strong>函数基本性质</strong><br>1、过定点  <img src=\"https://gss0.bdstatic.com/94o3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D33/sign=5f60285976cf3bc7ec00cbefd0006afd/b999a9014c086e0625fceb1f04087bf40ad1cb0a.jpg\" alt=\"img\">,即x=1时,y=0。<br>2、当<img src=\"https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D58/sign=472bfe85ab6eddc422e7b4f338db7366/503d269759ee3d6d1c2457ab45166d224e4adef4.jpg\" alt=\"img\">  时,在   <img src=\"https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D49/sign=a933c77dd22a283447a637025ab5f7f1/b03533fa828ba61e61b91f4f4734970a304e597f.jpg\" alt=\"img\"> 上是减函数；当  <img src=\"https://gss0.bdstatic.com/94o3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D33/sign=a7931d8cd700baa1be2c41b8461066ac/1c950a7b02087bf4327f8789f4d3572c11dfcf3b.jpg\" alt=\"img\"> 时,在   <img src=\"https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D49/sign=a933c77dd22a283447a637025ab5f7f1/b03533fa828ba61e61b91f4f4734970a304e597f.jpg\" alt=\"img\">上是增函数。</p>\n<h2 id=\"空间复杂度\"><a href=\"#空间复杂度\" class=\"headerlink\" title=\"空间复杂度\"></a>空间复杂度</h2><p>空间复杂度是指算法在计算机内执行时所需存储的度量</p>\n<p><strong>算法执行期间所需要的存储空间包括3个部分</strong></p>\n<ul>\n<li>算法程序所占的空间；</li>\n<li>输入的初始数据所占的存储空间；</li>\n<li>算法执行过程中所需要的额外空间。</li>\n</ul>\n<h2 id=\"JavaScript常见算法\"><a href=\"#JavaScript常见算法\" class=\"headerlink\" title=\"JavaScript常见算法\"></a>JavaScript常见算法</h2><h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><p>冒泡排序,是一种最基本的排序算法。它重复地走访要排序的元素列，依次比较两个相邻的元素，如果他们的顺序（如从大到小、首字母从A到Z）错误就把他们交换过来。走访元素的工作是重复地进行直到没有相邻元素需要交换，也就是说该元素列已经排序完成</p>\n<p>思想:</p>\n<ol>\n<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>\n<li>对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。</li>\n<li>针对所有的元素重复以上的步骤，除了最后一个。</li>\n<li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bubbleSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = arr.length, j;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tempExchangVal;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; i - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                tempExchangVal = arr[j];</span><br><span class=\"line\">                arr[j] = arr[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">                arr[j + <span class=\"number\">1</span>] = tempExchangVal;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arrSorted = bubbleSort(arr);</span><br></pre></td></tr></table></figure>\n<h3 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h3><p>插入排序（Insertion sort）是一种简单直观且稳定的排序算法,插入排序原理就像是打扑克,既在排好的顺序里插入到对应的位置</p>\n<p>思想:</p>\n<p>就是比大小，满足条件交换位置，<strong>一开始会像冒泡排序一样，但会比冒泡多一步就是交换后原位置会继续和前面的数比较满足条件交换</strong>，直到a[i+1]前面的数组是有序的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"comment\">//插入排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">InsertionSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr == <span class=\"literal\">null</span> || arr.length &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span> &amp;&amp; arr[j] &gt; arr[j + <span class=\"number\">1</span>]; j--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> temp = arr[j];</span><br><span class=\"line\">            arr[j] = arr[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">            arr[j + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//控制台输出</span></span><br><span class=\"line\">InsertionSort(arr);</span><br></pre></td></tr></table></figure>\n<h3 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h3><p>快速排序（Quicksort）是对冒泡排序的一种改进</p>\n<p><a href=\"https://www.runoob.com/w3cnote/quick-sort.html\" target=\"_blank\" rel=\"noopener\">挖坑填数法</a>+分冶法</p>\n<p>分冶法:</p>\n<ul>\n<li>1．先从数列中取出一个数作为基准数。</li>\n<li>2．分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边。</li>\n<li>3．再对左右区间重复第二步，直到各区间只有一个数。</li>\n</ul>\n<p>思想:</p>\n<p>通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Quicksort</span>(<span class=\"params\">arr,left = <span class=\"number\">0</span>,right = arr.length<span class=\"number\">-1</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left &gt;= right) &#123; <span class=\"comment\">//如果左边的索引大于等于右边的索引说明整理完毕</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = left;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> j = right;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> baseVal = arr[j]; <span class=\"comment\">// 取无序数组最后一个数为基准值</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; j) &#123; <span class=\"comment\">//把所有比基准值小的数放在左边大的数放在右边</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; j &amp;&amp; arr[i] &lt;= baseVal) &#123; <span class=\"comment\">//找到一个比基准值大的数交换</span></span><br><span class=\"line\">            i++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        arr[j] = arr[i] <span class=\"comment\">// 将较大的值放在右边如果没有比基准值大的数就是将自己赋值给自己（i 等于 j）</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &gt; i &amp;&amp; arr[j] &gt;= baseVal) &#123; <span class=\"comment\">//找到一个比基准值小的数交换</span></span><br><span class=\"line\">            j--</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        arr[i] = arr[j] <span class=\"comment\">// 将较小的值放在左边如果没有找到比基准值小的数就是将自己赋值给自己（i 等于 j）</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    arr[j] = baseVal <span class=\"comment\">// 将基准值放至中央位置完成一次循环（这时候 j 等于 i ）</span></span><br><span class=\"line\">    Quicksort(arr, left, j - <span class=\"number\">1</span>) <span class=\"comment\">// 将左边的无序数组重复上面的操作</span></span><br><span class=\"line\">    Quicksort(arr, j + <span class=\"number\">1</span>, right) <span class=\"comment\">// 将右边的无序数组重复上面的操作</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Quicksort(arr);</span><br></pre></td></tr></table></figure>\n<h3 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h3><p>归并排序（MERGE-SORT）是建立在归并操作上的一种有效的排序算法,该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/1023577/201610/1023577-20161011232321687-190186195.png\" alt=\"img\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>　<span class=\"title\">merge</span>(<span class=\"params\">left, right</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(left,right)</span><br><span class=\"line\">    <span class=\"keyword\">var</span>　result=[];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left.length&gt;<span class=\"number\">0</span> &amp;&amp; right.length&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left[<span class=\"number\">0</span>]&lt;right[<span class=\"number\">0</span>])&#123;</span><br><span class=\"line\">            result.push(left.shift());</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            result.push(right.shift());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　result.concat(left).concat(right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>　<span class=\"title\">mergeSort</span>(<span class=\"params\">items</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(items.length == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>　items;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span>　middle = <span class=\"built_in\">Math</span>.floor(items.length/<span class=\"number\">2</span>),</span><br><span class=\"line\">    left = items.slice(<span class=\"number\">0</span>, middle),</span><br><span class=\"line\">    right = items.slice(middle);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　merge(mergeSort(left), mergeSort(right));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">mergeSort([<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">7</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>])</span><br></pre></td></tr></table></figure>\n<h3 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h3><p>选择排序工作原理是每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到全部待排序的数据元素排完。 选择排序是不稳定的排序方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SelectionSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr == <span class=\"literal\">null</span> || arr.length &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; (arr.length - <span class=\"number\">1</span>); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> minIndex = i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">            minIndex = arr[j] &lt; arr[minIndex] ? j : minIndex;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> temp = arr[i];</span><br><span class=\"line\">        arr[i] = arr[minIndex];</span><br><span class=\"line\">        arr[minIndex] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SelectionSort(arr);</span><br></pre></td></tr></table></figure>\n<h3 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h3><p>希尔排序是插入排序的一种又称“缩小增量排序”，是直接插入排序算法的一种更高效的改进版本。希尔排序是非稳定排序算法(<strong>三层for循环+if</strong>)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">9</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>,<span class=\"number\">6</span>,<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sort</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr == <span class=\"literal\">null</span> || arr.length &lt;= <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//希尔排序  升序 增量为5 2 1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> d = <span class=\"built_in\">Math</span>.floor(arr.length / <span class=\"number\">2</span>);d&gt;<span class=\"number\">0</span>;d = <span class=\"built_in\">Math</span>.floor(d/<span class=\"number\">2</span>)) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = d; i &lt; arr.length; i++)&#123; </span><br><span class=\"line\">            <span class=\"comment\">//i:代表即将插入的元素角标，作为每一组比较数据的最后一个元素角标 </span></span><br><span class=\"line\">            <span class=\"comment\">//j:代表与i同一组的数组元素角标</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i-d; j&gt;=<span class=\"number\">0</span>; j-=d)&#123; <span class=\"comment\">//在此处-d 为了避免下面数组角标越界</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + d]) &#123;<span class=\"comment\">// j+d 代表即将插入的元素所在的角标</span></span><br><span class=\"line\">                    <span class=\"comment\">//符合条件，插入元素（交换位置）</span></span><br><span class=\"line\">                    <span class=\"keyword\">let</span> temp = arr[j];</span><br><span class=\"line\">                    arr[j] = arr[j + d];</span><br><span class=\"line\">                    arr[j + d] = temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\">        <span class=\"comment\">//[7, 2, 1, 4, 0, 9, 5, 8, 6, 3] </span></span><br><span class=\"line\">        <span class=\"comment\">//[0, 2, 1, 3, 5, 4, 6, 8, 7, 9]</span></span><br><span class=\"line\">        <span class=\"comment\">//[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sort(arr);</span><br></pre></td></tr></table></figure>\n<h3 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h3><p>堆是基于树抽象数据类型的一种特殊的数据结构,一个常见的例子就是优先队列,还有排序算法之一的堆排序</p>\n<p>最大堆: 父节点大于子节点</p>\n<p>最小堆: 父节点小于子节点</p>\n<h3 id=\"计数排序\"><a href=\"#计数排序\" class=\"headerlink\" title=\"计数排序\"></a>计数排序</h3><h3 id=\"桶排序\"><a href=\"#桶排序\" class=\"headerlink\" title=\"桶排序\"></a>桶排序</h3><h3 id=\"基数排序\"><a href=\"#基数排序\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h3><h3 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a><span name=\"erfen\">二分查找</span></h3><p>二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法。但是，折半查找要求线性表必须<strong>采用顺序存储结构</strong>，而且表中元素按关键字有序排列</p>\n<p><strong>思想</strong>:</p>\n<p>折半查找法也称为二分查找法，它充分利用了元素间的次序关系，采用分治策略，可在最坏的情况下用O(log n)完成搜索任务。它的基本思想是：（这里假设数组元素呈升序排列）将n个元素分成个数大致相同的两半，取a[n/2]与欲查找的x作比较，如果x=a[n/2]则找到x，算法终止；如 果x &lt;a[n/2]，则我们只要在数组a的左半部继续搜索x；如果x&gt;a[n/2]，则我们只要在数组a的右半部继续搜索x。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Arr = [<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">15</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binary</span>(<span class=\"params\">find, arr, low, high</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (low &lt;= high) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[low] == find) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> low;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[high] == find) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> high;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> mid = <span class=\"built_in\">Math</span>.ceil((high + low) / <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[mid] == find) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[mid] &gt; find) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> binary(find, arr, low, mid - <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> binary(find, arr, mid + <span class=\"number\">1</span>, high);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">binary(<span class=\"number\">15</span>, Arr, <span class=\"number\">0</span>, Arr.length - <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<center><h1> 算法</h1></center>\n\n\n<h1 id=\"常用算法\"><a href=\"#常用算法\" class=\"headerlink\" title=\"常用算法\"></a>常用算法</h1><p><a href=\"https://juejin.im/entry/5b076242f265da0dbc087124\" target=\"_blank\" rel=\"noopener\">算法与数据结构</a></p>\n<h3 id=\"杨辉三角\"><a href=\"#杨辉三角\" class=\"headerlink\" title=\"杨辉三角\"></a>杨辉三角</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function generator(rows)&#123;</span><br><span class=\"line\">    let arr = [];</span><br><span class=\"line\">    if(rows&lt;=0)&#123;</span><br><span class=\"line\">        return arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for(var i = 0;i&lt;rows;i++)&#123;</span><br><span class=\"line\">        let subArr = [];</span><br><span class=\"line\">        for(var j = 0;j&lt;=i;j++)&#123;</span><br><span class=\"line\">            if(j&gt;0 &amp;&amp; j&lt;i)&#123;</span><br><span class=\"line\">                subArr.push(arr[i-1][j-1] + arr[i-1][j]);</span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                subArr.push(1)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        arr.push(subArr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"算法复杂度\"><a href=\"#算法复杂度\" class=\"headerlink\" title=\"算法复杂度\"></a>算法复杂度</h1><p>算法复杂度是指算法在编写成可执行程序后，运行时所需要的资源，资源包括时间资源和内存资源。</p>\n<p>同一问题可用不同算法解决，而一个算法的质量优劣将影响到算法乃至程序的效率。算法分析的目的在于选择合适算法和改进算法。一个算法的评价主要从时间复杂度和空间复杂度来考虑。</p>\n<h2 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h2><h3 id=\"为什么需要时间复杂度\"><a href=\"#为什么需要时间复杂度\" class=\"headerlink\" title=\"为什么需要时间复杂度\"></a>为什么需要时间复杂度</h3><p>在实际项目开发中,我们理想状态是写出的这段代码是最优的,但是总不能把所有实现方式都写出来,然后去作比较,所以需要一个指标去衡量这段代码的效率,并且直接跑代码一定的局限性:</p>\n<ol>\n<li><p>测试结果受当前运行环境影响</p>\n<p>同样的代码,在不同的平台执行的时间明显不同</p>\n</li>\n<li><p>测试结果受测试数据的影响</p>\n<p>不同的测试数据可能会带来不同的结果,比如我们按顺序查找的方法查找数组的一个元素,如果这个元素刚好在第一位,则执行了一次,但在最后的话,就得执行整个数组</p>\n</li>\n</ol>\n<p>因此,我们就需要一个不受硬件,环境,数据影响的指标来去表示算法的执行效率,那就是算法的复杂度</p>\n<h3 id=\"时间复杂度表示\"><a href=\"#时间复杂度表示\" class=\"headerlink\" title=\"时间复杂度表示\"></a>时间复杂度表示</h3><p>大O时间复杂度表示法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"number\">1</span>; <span class=\"comment\">// 执行一次</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; n; i++)&#123; <span class=\"comment\">// 执行n次</span></span><br><span class=\"line\">        res *= i; <span class=\"comment\">// 执行n-1次</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res; <span class=\"comment\">// 执行一次</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码为求n!,我们初略计算下上述代码需要执行的时间,首先为了方便计算,假设执行每一行代码的时间都是相同的,在这里假设,每行代码执行一次的时间为t,代码的总时间为T(n),因此就能得到上述代码的总执行时间:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T(n) = t + nt + (n - <span class=\"number\">1</span>)t + t = (<span class=\"number\">2n</span>+<span class=\"number\">1</span>)t</span><br></pre></td></tr></table></figure>\n<p>我们以n为x轴,T(n)为y轴,因此就能得出结论: 代码总执行时间和每行代码执行的次数成正比,大O表示法就是用来表示这样的趋势,大O表示法<strong>表示代码执行时间随数据规模增长的一种变化趋势</strong>,下面就是大O表示法的公式:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T(n) = O(F(n))</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><strong>n</strong>: 代表数据规模,相当于上面例子中的n</p>\n</li>\n<li><p><strong>F(n)</strong>: 表示代码执行次数的总和,代码执行次数的总和与数据规模有关,所以用F(n)表示,F(n)对应上面例子中的</p>\n<p>( 2n + 1 ) </p>\n</li>\n<li><p><strong>T(n)</strong>: 代表代码的执行时间,对应上面例子中的T(n)</p>\n</li>\n<li><p><strong>O</strong>: 大O用来表示代码执行时间T(n) 与 代码执行次数总和F（n）之间的正比关系。</p>\n</li>\n</ul>\n<p>上面说过大O表示法表示代码执行时间随数据规模增长的一种变化趋势,只代表趋势,不是实际执行的时间,当公司中的n无穷大时,系数和常数就可以忽略不计,所以忽略掉以后,大O表示法就变为:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T(n) = O(n)</span><br></pre></td></tr></table></figure>\n<p>至此,我们就知道了什么是大O表示法以及怎么用大O表示法来表示时间复杂度,在看个例子,分析下代码的时间复杂度</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> n = arr.length; <span class=\"comment\">// 执行一次</span></span><br><span class=\"line\"> \t<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; <span class=\"comment\">// 执行一次</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; i&lt; n - <span class=\"number\">1</span>; i++)&#123; <span class=\"comment\">//执行n次</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> j = <span class=\"number\">0</span>;<span class=\"comment\">// 执行n次</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(; j &lt; n - <span class=\"number\">1</span>; j++)&#123; <span class=\"comment\">// 执行n次</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[j]&gt;arr[j+<span class=\"number\">1</span>])&#123;<span class=\"comment\">// 执行n*n次</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> temp = arr[j];</span><br><span class=\"line\">            \tarr[j] = arr[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">            \tarr[j+<span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码为最差的冒泡排序,先不管算法是否最优,只为分析时间复杂度,执行这段代码的时间复杂度为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T(n) = t + t + nt + nt + nt + (n*n)t + (n*n)t = (2n²+3n+2)t = O(n²)</span><br></pre></td></tr></table></figure>\n<p>因此,我们通过两个例子可以发现时间复杂度大O规律:</p>\n<ol>\n<li>不保留系数</li>\n<li>只保留最高阶</li>\n<li>嵌套代码的复杂度为内外代码复杂度的乘积</li>\n</ol>\n<h3 id=\"怎么分析一段代码的时间复杂度\"><a href=\"#怎么分析一段代码的时间复杂度\" class=\"headerlink\" title=\"怎么分析一段代码的时间复杂度\"></a>怎么分析一段代码的时间复杂度</h3><p>通过上面的规律,可以得到,判断一段代码的时间复杂度,只需要关注这段代码执行次数最多的代码次数,其它都可忽略</p>\n<h3 id=\"常见的时间复杂度\"><a href=\"#常见的时间复杂度\" class=\"headerlink\" title=\"常见的时间复杂度\"></a>常见的时间复杂度</h3><p>最常见的时间复杂度有常数阶O(1),对数阶O(logn),线性阶O(n),线性对数阶O(nlogn),平方阶O(n²)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n²)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">arr,key</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> n = arr.length;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> low = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> high = n <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mid = <span class=\"built_in\">Math</span>.floor((low + high)/<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(low&lt;=high)&#123;</span><br><span class=\"line\">        mid = <span class=\"built_in\">Math</span>.floor((low + high)/<span class=\"number\">2</span>);<span class=\"comment\">// 执行次数</span></span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(key === arr[mid])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(key &lt; arr[mid])&#123;</span><br><span class=\"line\">        \thigh =  mid - <span class=\"number\">1</span>;         </span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            low = mid + <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码为二分查找的代码,二分查找法是一个高效的查找算法,现在分析下上边代码的复杂度,发现执行次数最多为第7行,所以算法复杂度为这句代码的执行次数,分析以上代码,最坏的打算就是一直一半查找,直到只剩一个数,或者数组中不存在要找的元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一次执行,剩余元素个数n/<span class=\"number\">2</span></span><br><span class=\"line\">第二次执行,剩余元素个数n/<span class=\"number\">2</span>/<span class=\"number\">2</span></span><br><span class=\"line\">... ...</span><br><span class=\"line\">第n次执行,剩余元素个数n/<span class=\"number\">2</span>^T = <span class=\"number\">1</span> &lt;==&gt; <span class=\"number\">2</span>^T = n &lt;=&gt; log2n</span><br></pre></td></tr></table></figure>\n<p>以上代码用大O表示时间复杂度即为O(logn),省略常数</p>\n<h3 id=\"什么是对数\"><a href=\"#什么是对数\" class=\"headerlink\" title=\"什么是对数?\"></a>什么是对数?</h3><h5 id=\"对数符号\"><a href=\"#对数符号\" class=\"headerlink\" title=\"对数符号\"></a>对数符号</h5><p>以a为底N的对数记作<img src=\"https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D46/sign=7c27e5b93f01213fcb334fda54e72d3f/50da81cb39dbb6fda35134460f24ab18972b374c.jpg\" alt=\"img\">,  对数符号log出自拉丁文logarithm，最早由意大利数学家卡瓦列里（Cavalieri）所使用。20世纪初，形成了对数的现代表示。为了使用方便，人们逐渐把以10为底的常用对数及以无理数e为底的自然对数分别记作lgN和lnN。</p>\n<h5 id=\"对数的定义\"><a href=\"#对数的定义\" class=\"headerlink\" title=\"对数的定义\"></a>对数的定义</h5><p>如果 <img src=\"https://gss2.bdstatic.com/-fo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D134/sign=2a228f561b950a7b71354ac73ed1625c/8644ebf81a4c510fbfd3367a6659252dd42aa5bf.jpg\" alt=\"img\"> ，即a的x次方等于N（a&gt;0，且a≠1），那么数x叫做以a为底N的对数（logarithm），记作  <img src=\"https://gss2.bdstatic.com/-fo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D72/sign=374d40bc0efa513d55aa6edc3c6d9940/e61190ef76c6a7ef68d97d46fbfaaf51f2de66d7.jpg\" alt=\"img\"> 。其中，a叫做对数的底数，N叫做真数，x叫做“以a为底N的对数”。</p>\n<h5 id=\"对数函数\"><a href=\"#对数函数\" class=\"headerlink\" title=\"对数函数\"></a>对数函数</h5><p><strong>定义</strong><br>函数 <img src=\"https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D162/sign=c26ae4e5cfea15ce45eee40f84013a25/b8389b504fc2d56244645a8de11190ef76c66c66.jpg\" alt=\"img\">   叫做对数函数（logarithmic function），其中x是自变量。对数函数的定义域是 <img src=\"https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D49/sign=a933c77dd22a283447a637025ab5f7f1/b03533fa828ba61e61b91f4f4734970a304e597f.jpg\" alt=\"img\"> 。</p>\n<p><strong>函数基本性质</strong><br>1、过定点  <img src=\"https://gss0.bdstatic.com/94o3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D33/sign=5f60285976cf3bc7ec00cbefd0006afd/b999a9014c086e0625fceb1f04087bf40ad1cb0a.jpg\" alt=\"img\">,即x=1时,y=0。<br>2、当<img src=\"https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D58/sign=472bfe85ab6eddc422e7b4f338db7366/503d269759ee3d6d1c2457ab45166d224e4adef4.jpg\" alt=\"img\">  时,在   <img src=\"https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D49/sign=a933c77dd22a283447a637025ab5f7f1/b03533fa828ba61e61b91f4f4734970a304e597f.jpg\" alt=\"img\"> 上是减函数；当  <img src=\"https://gss0.bdstatic.com/94o3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D33/sign=a7931d8cd700baa1be2c41b8461066ac/1c950a7b02087bf4327f8789f4d3572c11dfcf3b.jpg\" alt=\"img\"> 时,在   <img src=\"https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D49/sign=a933c77dd22a283447a637025ab5f7f1/b03533fa828ba61e61b91f4f4734970a304e597f.jpg\" alt=\"img\">上是增函数。</p>\n<h2 id=\"空间复杂度\"><a href=\"#空间复杂度\" class=\"headerlink\" title=\"空间复杂度\"></a>空间复杂度</h2><p>空间复杂度是指算法在计算机内执行时所需存储的度量</p>\n<p><strong>算法执行期间所需要的存储空间包括3个部分</strong></p>\n<ul>\n<li>算法程序所占的空间；</li>\n<li>输入的初始数据所占的存储空间；</li>\n<li>算法执行过程中所需要的额外空间。</li>\n</ul>\n<h2 id=\"JavaScript常见算法\"><a href=\"#JavaScript常见算法\" class=\"headerlink\" title=\"JavaScript常见算法\"></a>JavaScript常见算法</h2><h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><p>冒泡排序,是一种最基本的排序算法。它重复地走访要排序的元素列，依次比较两个相邻的元素，如果他们的顺序（如从大到小、首字母从A到Z）错误就把他们交换过来。走访元素的工作是重复地进行直到没有相邻元素需要交换，也就是说该元素列已经排序完成</p>\n<p>思想:</p>\n<ol>\n<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>\n<li>对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。</li>\n<li>针对所有的元素重复以上的步骤，除了最后一个。</li>\n<li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bubbleSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = arr.length, j;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tempExchangVal;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; i - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                tempExchangVal = arr[j];</span><br><span class=\"line\">                arr[j] = arr[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">                arr[j + <span class=\"number\">1</span>] = tempExchangVal;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arrSorted = bubbleSort(arr);</span><br></pre></td></tr></table></figure>\n<h3 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h3><p>插入排序（Insertion sort）是一种简单直观且稳定的排序算法,插入排序原理就像是打扑克,既在排好的顺序里插入到对应的位置</p>\n<p>思想:</p>\n<p>就是比大小，满足条件交换位置，<strong>一开始会像冒泡排序一样，但会比冒泡多一步就是交换后原位置会继续和前面的数比较满足条件交换</strong>，直到a[i+1]前面的数组是有序的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"comment\">//插入排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">InsertionSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr == <span class=\"literal\">null</span> || arr.length &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span> &amp;&amp; arr[j] &gt; arr[j + <span class=\"number\">1</span>]; j--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> temp = arr[j];</span><br><span class=\"line\">            arr[j] = arr[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">            arr[j + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//控制台输出</span></span><br><span class=\"line\">InsertionSort(arr);</span><br></pre></td></tr></table></figure>\n<h3 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h3><p>快速排序（Quicksort）是对冒泡排序的一种改进</p>\n<p><a href=\"https://www.runoob.com/w3cnote/quick-sort.html\" target=\"_blank\" rel=\"noopener\">挖坑填数法</a>+分冶法</p>\n<p>分冶法:</p>\n<ul>\n<li>1．先从数列中取出一个数作为基准数。</li>\n<li>2．分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边。</li>\n<li>3．再对左右区间重复第二步，直到各区间只有一个数。</li>\n</ul>\n<p>思想:</p>\n<p>通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Quicksort</span>(<span class=\"params\">arr,left = <span class=\"number\">0</span>,right = arr.length<span class=\"number\">-1</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left &gt;= right) &#123; <span class=\"comment\">//如果左边的索引大于等于右边的索引说明整理完毕</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = left;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> j = right;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> baseVal = arr[j]; <span class=\"comment\">// 取无序数组最后一个数为基准值</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; j) &#123; <span class=\"comment\">//把所有比基准值小的数放在左边大的数放在右边</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; j &amp;&amp; arr[i] &lt;= baseVal) &#123; <span class=\"comment\">//找到一个比基准值大的数交换</span></span><br><span class=\"line\">            i++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        arr[j] = arr[i] <span class=\"comment\">// 将较大的值放在右边如果没有比基准值大的数就是将自己赋值给自己（i 等于 j）</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &gt; i &amp;&amp; arr[j] &gt;= baseVal) &#123; <span class=\"comment\">//找到一个比基准值小的数交换</span></span><br><span class=\"line\">            j--</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        arr[i] = arr[j] <span class=\"comment\">// 将较小的值放在左边如果没有找到比基准值小的数就是将自己赋值给自己（i 等于 j）</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    arr[j] = baseVal <span class=\"comment\">// 将基准值放至中央位置完成一次循环（这时候 j 等于 i ）</span></span><br><span class=\"line\">    Quicksort(arr, left, j - <span class=\"number\">1</span>) <span class=\"comment\">// 将左边的无序数组重复上面的操作</span></span><br><span class=\"line\">    Quicksort(arr, j + <span class=\"number\">1</span>, right) <span class=\"comment\">// 将右边的无序数组重复上面的操作</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Quicksort(arr);</span><br></pre></td></tr></table></figure>\n<h3 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h3><p>归并排序（MERGE-SORT）是建立在归并操作上的一种有效的排序算法,该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/1023577/201610/1023577-20161011232321687-190186195.png\" alt=\"img\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>　<span class=\"title\">merge</span>(<span class=\"params\">left, right</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(left,right)</span><br><span class=\"line\">    <span class=\"keyword\">var</span>　result=[];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left.length&gt;<span class=\"number\">0</span> &amp;&amp; right.length&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left[<span class=\"number\">0</span>]&lt;right[<span class=\"number\">0</span>])&#123;</span><br><span class=\"line\">            result.push(left.shift());</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            result.push(right.shift());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　result.concat(left).concat(right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>　<span class=\"title\">mergeSort</span>(<span class=\"params\">items</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(items.length == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>　items;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span>　middle = <span class=\"built_in\">Math</span>.floor(items.length/<span class=\"number\">2</span>),</span><br><span class=\"line\">    left = items.slice(<span class=\"number\">0</span>, middle),</span><br><span class=\"line\">    right = items.slice(middle);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　merge(mergeSort(left), mergeSort(right));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">mergeSort([<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">7</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>])</span><br></pre></td></tr></table></figure>\n<h3 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h3><p>选择排序工作原理是每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到全部待排序的数据元素排完。 选择排序是不稳定的排序方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SelectionSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr == <span class=\"literal\">null</span> || arr.length &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; (arr.length - <span class=\"number\">1</span>); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> minIndex = i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">            minIndex = arr[j] &lt; arr[minIndex] ? j : minIndex;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> temp = arr[i];</span><br><span class=\"line\">        arr[i] = arr[minIndex];</span><br><span class=\"line\">        arr[minIndex] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SelectionSort(arr);</span><br></pre></td></tr></table></figure>\n<h3 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h3><p>希尔排序是插入排序的一种又称“缩小增量排序”，是直接插入排序算法的一种更高效的改进版本。希尔排序是非稳定排序算法(<strong>三层for循环+if</strong>)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">9</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>,<span class=\"number\">6</span>,<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sort</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr == <span class=\"literal\">null</span> || arr.length &lt;= <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//希尔排序  升序 增量为5 2 1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> d = <span class=\"built_in\">Math</span>.floor(arr.length / <span class=\"number\">2</span>);d&gt;<span class=\"number\">0</span>;d = <span class=\"built_in\">Math</span>.floor(d/<span class=\"number\">2</span>)) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = d; i &lt; arr.length; i++)&#123; </span><br><span class=\"line\">            <span class=\"comment\">//i:代表即将插入的元素角标，作为每一组比较数据的最后一个元素角标 </span></span><br><span class=\"line\">            <span class=\"comment\">//j:代表与i同一组的数组元素角标</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i-d; j&gt;=<span class=\"number\">0</span>; j-=d)&#123; <span class=\"comment\">//在此处-d 为了避免下面数组角标越界</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + d]) &#123;<span class=\"comment\">// j+d 代表即将插入的元素所在的角标</span></span><br><span class=\"line\">                    <span class=\"comment\">//符合条件，插入元素（交换位置）</span></span><br><span class=\"line\">                    <span class=\"keyword\">let</span> temp = arr[j];</span><br><span class=\"line\">                    arr[j] = arr[j + d];</span><br><span class=\"line\">                    arr[j + d] = temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\">        <span class=\"comment\">//[7, 2, 1, 4, 0, 9, 5, 8, 6, 3] </span></span><br><span class=\"line\">        <span class=\"comment\">//[0, 2, 1, 3, 5, 4, 6, 8, 7, 9]</span></span><br><span class=\"line\">        <span class=\"comment\">//[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sort(arr);</span><br></pre></td></tr></table></figure>\n<h3 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h3><p>堆是基于树抽象数据类型的一种特殊的数据结构,一个常见的例子就是优先队列,还有排序算法之一的堆排序</p>\n<p>最大堆: 父节点大于子节点</p>\n<p>最小堆: 父节点小于子节点</p>\n<h3 id=\"计数排序\"><a href=\"#计数排序\" class=\"headerlink\" title=\"计数排序\"></a>计数排序</h3><h3 id=\"桶排序\"><a href=\"#桶排序\" class=\"headerlink\" title=\"桶排序\"></a>桶排序</h3><h3 id=\"基数排序\"><a href=\"#基数排序\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h3><h3 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a><span name=\"erfen\">二分查找</span></h3><p>二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法。但是，折半查找要求线性表必须<strong>采用顺序存储结构</strong>，而且表中元素按关键字有序排列</p>\n<p><strong>思想</strong>:</p>\n<p>折半查找法也称为二分查找法，它充分利用了元素间的次序关系，采用分治策略，可在最坏的情况下用O(log n)完成搜索任务。它的基本思想是：（这里假设数组元素呈升序排列）将n个元素分成个数大致相同的两半，取a[n/2]与欲查找的x作比较，如果x=a[n/2]则找到x，算法终止；如 果x &lt;a[n/2]，则我们只要在数组a的左半部继续搜索x；如果x&gt;a[n/2]，则我们只要在数组a的右半部继续搜索x。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Arr = [<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">15</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binary</span>(<span class=\"params\">find, arr, low, high</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (low &lt;= high) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[low] == find) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> low;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[high] == find) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> high;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> mid = <span class=\"built_in\">Math</span>.ceil((high + low) / <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[mid] == find) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[mid] &gt; find) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> binary(find, arr, low, mid - <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> binary(find, arr, mid + <span class=\"number\">1</span>, high);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">binary(<span class=\"number\">15</span>, Arr, <span class=\"number\">0</span>, Arr.length - <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n"},{"title":"跨域","date":"2016-12-21T14:58:34.000Z","_content":"\n对于web开发来讲，由于浏览器的同源策略，我们需要经常使用一些hack的方法去跨域获取资源，但是hack的方法总归是hack。直到W3C出了一个标准－CORS－”跨域资源共享”（Cross-origin resource sharing）。\n它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。\n\n## jsonp跨域\n\n-------\n\njsonp 是最常用的一种解决跨域的方式，但是只能发送get请求，并且需要前端和服务端限制好格式，写法相当丑陋，下面介绍下jsonp的用法：\n\n前端：\n首先全局编写一个函数，记住这个函数名字，并且这个函数接受一个参数，这个参数就是服务端返回给前端的数据，函数体就是处理返回给前端数据的具体实现。 \n然后动态生成一个script 标签，src为：请求资源的地址＋获取函数的字段名＋回调函数名称，这里的获取函数的字段名是要和服务端约定好的，是为了让服务端拿到回调函数名称。（如：www.xxx.com?callbackName=resolveJson）。\n```\n//前端全局函数\nfunction resolveJosn(result) {\n\tconsole.log(result.name);\n}\n//访问后台代码\nvar jsonpScript= document.createElement(\"script\");\njsonpScript.type = \"text/javascript\";\njsonpScript.src = \"http://www.xxx.com?callbackName=resolveJson\";\ndocument.getElementsByTagName(\"head\")[0].appendChild(jsonpScript);\n\n```\n\n服务端\n在接受到浏览器端 script的请求之后，从url的query的callbackName获取到回调函数的名字，例子中是resolveJson。\n然后动态生成一段javascript片段去给这个函数传入参数执行这个函数。比如：\nresolveJson({name: 'xxx'});\n执行服务端返回这个 script 之后，浏览器端获取到 script 资源，然后会立即执行这个 javascript，也就是上面那个片段。这样就能根据之前写好的回调函数处理这些数据了。","source":"_posts/跨域.md","raw":"---\ntitle: 跨域\ndate: 2016-12-21 22:58:34\ncategories: Javascript\ntags:\n     - Javascript\n---\n\n对于web开发来讲，由于浏览器的同源策略，我们需要经常使用一些hack的方法去跨域获取资源，但是hack的方法总归是hack。直到W3C出了一个标准－CORS－”跨域资源共享”（Cross-origin resource sharing）。\n它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。\n\n## jsonp跨域\n\n-------\n\njsonp 是最常用的一种解决跨域的方式，但是只能发送get请求，并且需要前端和服务端限制好格式，写法相当丑陋，下面介绍下jsonp的用法：\n\n前端：\n首先全局编写一个函数，记住这个函数名字，并且这个函数接受一个参数，这个参数就是服务端返回给前端的数据，函数体就是处理返回给前端数据的具体实现。 \n然后动态生成一个script 标签，src为：请求资源的地址＋获取函数的字段名＋回调函数名称，这里的获取函数的字段名是要和服务端约定好的，是为了让服务端拿到回调函数名称。（如：www.xxx.com?callbackName=resolveJson）。\n```\n//前端全局函数\nfunction resolveJosn(result) {\n\tconsole.log(result.name);\n}\n//访问后台代码\nvar jsonpScript= document.createElement(\"script\");\njsonpScript.type = \"text/javascript\";\njsonpScript.src = \"http://www.xxx.com?callbackName=resolveJson\";\ndocument.getElementsByTagName(\"head\")[0].appendChild(jsonpScript);\n\n```\n\n服务端\n在接受到浏览器端 script的请求之后，从url的query的callbackName获取到回调函数的名字，例子中是resolveJson。\n然后动态生成一段javascript片段去给这个函数传入参数执行这个函数。比如：\nresolveJson({name: 'xxx'});\n执行服务端返回这个 script 之后，浏览器端获取到 script 资源，然后会立即执行这个 javascript，也就是上面那个片段。这样就能根据之前写好的回调函数处理这些数据了。","slug":"跨域","published":1,"updated":"2020-03-23T11:05:23.947Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgbydgok003iofo9eu0ldd31","content":"<p>对于web开发来讲，由于浏览器的同源策略，我们需要经常使用一些hack的方法去跨域获取资源，但是hack的方法总归是hack。直到W3C出了一个标准－CORS－”跨域资源共享”（Cross-origin resource sharing）。<br>它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。</p>\n<h2 id=\"jsonp跨域\"><a href=\"#jsonp跨域\" class=\"headerlink\" title=\"jsonp跨域\"></a>jsonp跨域</h2><hr>\n<p>jsonp 是最常用的一种解决跨域的方式，但是只能发送get请求，并且需要前端和服务端限制好格式，写法相当丑陋，下面介绍下jsonp的用法：</p>\n<p>前端：<br>首先全局编写一个函数，记住这个函数名字，并且这个函数接受一个参数，这个参数就是服务端返回给前端的数据，函数体就是处理返回给前端数据的具体实现。<br>然后动态生成一个script 标签，src为：请求资源的地址＋获取函数的字段名＋回调函数名称，这里的获取函数的字段名是要和服务端约定好的，是为了让服务端拿到回调函数名称。（如：<a href=\"http://www.xxx.com?callbackName=resolveJson）。\" target=\"_blank\" rel=\"noopener\">www.xxx.com?callbackName=resolveJson）。</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//前端全局函数</span><br><span class=\"line\">function resolveJosn(result) &#123;</span><br><span class=\"line\">\tconsole.log(result.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//访问后台代码</span><br><span class=\"line\">var jsonpScript= document.createElement(&quot;script&quot;);</span><br><span class=\"line\">jsonpScript.type = &quot;text/javascript&quot;;</span><br><span class=\"line\">jsonpScript.src = &quot;http://www.xxx.com?callbackName=resolveJson&quot;;</span><br><span class=\"line\">document.getElementsByTagName(&quot;head&quot;)[0].appendChild(jsonpScript);</span><br></pre></td></tr></table></figure></p>\n<p>服务端<br>在接受到浏览器端 script的请求之后，从url的query的callbackName获取到回调函数的名字，例子中是resolveJson。<br>然后动态生成一段javascript片段去给这个函数传入参数执行这个函数。比如：<br>resolveJson({name: ‘xxx’});<br>执行服务端返回这个 script 之后，浏览器端获取到 script 资源，然后会立即执行这个 javascript，也就是上面那个片段。这样就能根据之前写好的回调函数处理这些数据了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>对于web开发来讲，由于浏览器的同源策略，我们需要经常使用一些hack的方法去跨域获取资源，但是hack的方法总归是hack。直到W3C出了一个标准－CORS－”跨域资源共享”（Cross-origin resource sharing）。<br>它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。</p>\n<h2 id=\"jsonp跨域\"><a href=\"#jsonp跨域\" class=\"headerlink\" title=\"jsonp跨域\"></a>jsonp跨域</h2><hr>\n<p>jsonp 是最常用的一种解决跨域的方式，但是只能发送get请求，并且需要前端和服务端限制好格式，写法相当丑陋，下面介绍下jsonp的用法：</p>\n<p>前端：<br>首先全局编写一个函数，记住这个函数名字，并且这个函数接受一个参数，这个参数就是服务端返回给前端的数据，函数体就是处理返回给前端数据的具体实现。<br>然后动态生成一个script 标签，src为：请求资源的地址＋获取函数的字段名＋回调函数名称，这里的获取函数的字段名是要和服务端约定好的，是为了让服务端拿到回调函数名称。（如：<a href=\"http://www.xxx.com?callbackName=resolveJson）。\" target=\"_blank\" rel=\"noopener\">www.xxx.com?callbackName=resolveJson）。</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//前端全局函数</span><br><span class=\"line\">function resolveJosn(result) &#123;</span><br><span class=\"line\">\tconsole.log(result.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//访问后台代码</span><br><span class=\"line\">var jsonpScript= document.createElement(&quot;script&quot;);</span><br><span class=\"line\">jsonpScript.type = &quot;text/javascript&quot;;</span><br><span class=\"line\">jsonpScript.src = &quot;http://www.xxx.com?callbackName=resolveJson&quot;;</span><br><span class=\"line\">document.getElementsByTagName(&quot;head&quot;)[0].appendChild(jsonpScript);</span><br></pre></td></tr></table></figure></p>\n<p>服务端<br>在接受到浏览器端 script的请求之后，从url的query的callbackName获取到回调函数的名字，例子中是resolveJson。<br>然后动态生成一段javascript片段去给这个函数传入参数执行这个函数。比如：<br>resolveJson({name: ‘xxx’});<br>执行服务端返回这个 script 之后，浏览器端获取到 script 资源，然后会立即执行这个 javascript，也就是上面那个片段。这样就能根据之前写好的回调函数处理这些数据了。</p>\n"},{"title":"进制转换","date":"2018-03-13T02:00:33.000Z","_content":"\n# 进制间的转换\n\n## 二进制转八进制\n\n3位二进制数按权展开相加得到1位八进制数。（注意事项，3位二进制转成八进制是从右到左开始转换，不足时补0）\n\n```javascript 1.8\n10010110\n\n//先按3位分割 010 010 110 \n\n// 每三位按权展开求和\n\n010 = 1*2^1\n\n110 = 1*2^2 + 1*2^1\n\n结果为:226\n```\n\n## 二进制转十进制\n\n把二进制数按权展开、相加即得十进制数。\n\n```javascript 1.8\n101010\n\n1*2^5+0*2^4+1*2^3+0*2^2+1*2^1+0*2^0\n\n结果为:42\n```\n \n\n## 二进制转十六进制\n\n二进制转十六进制与二进制转八进制基本一样,转八进制为3位按权展开,十六进制为4位按权展开 \n\n```javascript 1.8\n10010101\n\n//先按3位分割 1001 0110\n\n// 每三位按权展开求和\n\n1001 = 1*2^0+1*2^3\n\n0101 = 1*2^2 + 1*2^0\n\n结果为:95\n```\n\n----------------------------------------------\n\n## 八进制转二进制\n\n八进制转二进制与二进制转八进制是反着来的\n\n```javascript 1.8\n226\n\n//先按3位分割 010 010 110 \n\n// 每三位按权展开求和\n\n2 = 010\n\n6 = 110 \n\n结果为:10010110\n```\n\n## 八进制转十进制\n\n把八进制按权展开、相加即得十进制数。\n\n```javascript 1.8\n226\n\n2*8^2 + 2*8^2 + 6*8^0\n\n结果为:150\n```\n\n## 八进制转十六进制\n\n\n\n\n----------------------------------------------\n\n## 十进制转二进制\n\n十进制数除以2从下往上取余数\n```javascript 1.8\n70\n\n70 = 1000110\n\n1*2^6+1*2^2+1*2^1\n\n结果为:1000110\n```\n\n## 十进制转八进制 和 十进制转十六进制\n\n第一：间接法—把十进制转成二进制，然后再由二进制转成八进制或者十六进制。\n\n第二：直接法—把十进制转八进制或者十六进制按照除8或者16取余，直到商为0为止。\n\n```\n十进制数150\n\n150/8 取余数即转为八进制数  226\n\n150/16 取余数即转为十六进制数  96\n```\n----------------------------------------------\n\n## 十六进制转二进制\n\n十六进制转二进制与二进制转十六进制也是反着来的\n\n```javascript 1.8\n95\n\n//先按3位分割 010 010 110 \n\n// 每三位按权展开求和\n\n9 = 1001\n\n5 = 0101\n\n结果为:10010101\n\n```\n\n## 十六进制转八进制 \n\n第一种：他们之间的转换可以先转成二进制然后再相互转换。\n\n第二种：他们之间的转换可以先转成十进制然后再相互转换。\n\n## 十六进制转十进制\n\n把十六进制按权展开、相加即得十进制数。\n\n```javascript 1.8\n96\n\n9*16^1 + 9*16^0\n\n结果为:150\n```\n\n# 总结\n\n1. 十进制转二进制 八进制 十六进制 都可以按照除2 8 16 然后倒着取余数即为对应的结果\n\n2. 十六进制与八进制的转换,只能通过专程二进制和十进制,然后进行转换","source":"_posts/进制转换.md","raw":"---\ntitle: 进制转换\ndate: 2018-03-13 10:00:33\ncategories: Javascript\ntags:\n     - Javascript\n---\n\n# 进制间的转换\n\n## 二进制转八进制\n\n3位二进制数按权展开相加得到1位八进制数。（注意事项，3位二进制转成八进制是从右到左开始转换，不足时补0）\n\n```javascript 1.8\n10010110\n\n//先按3位分割 010 010 110 \n\n// 每三位按权展开求和\n\n010 = 1*2^1\n\n110 = 1*2^2 + 1*2^1\n\n结果为:226\n```\n\n## 二进制转十进制\n\n把二进制数按权展开、相加即得十进制数。\n\n```javascript 1.8\n101010\n\n1*2^5+0*2^4+1*2^3+0*2^2+1*2^1+0*2^0\n\n结果为:42\n```\n \n\n## 二进制转十六进制\n\n二进制转十六进制与二进制转八进制基本一样,转八进制为3位按权展开,十六进制为4位按权展开 \n\n```javascript 1.8\n10010101\n\n//先按3位分割 1001 0110\n\n// 每三位按权展开求和\n\n1001 = 1*2^0+1*2^3\n\n0101 = 1*2^2 + 1*2^0\n\n结果为:95\n```\n\n----------------------------------------------\n\n## 八进制转二进制\n\n八进制转二进制与二进制转八进制是反着来的\n\n```javascript 1.8\n226\n\n//先按3位分割 010 010 110 \n\n// 每三位按权展开求和\n\n2 = 010\n\n6 = 110 \n\n结果为:10010110\n```\n\n## 八进制转十进制\n\n把八进制按权展开、相加即得十进制数。\n\n```javascript 1.8\n226\n\n2*8^2 + 2*8^2 + 6*8^0\n\n结果为:150\n```\n\n## 八进制转十六进制\n\n\n\n\n----------------------------------------------\n\n## 十进制转二进制\n\n十进制数除以2从下往上取余数\n```javascript 1.8\n70\n\n70 = 1000110\n\n1*2^6+1*2^2+1*2^1\n\n结果为:1000110\n```\n\n## 十进制转八进制 和 十进制转十六进制\n\n第一：间接法—把十进制转成二进制，然后再由二进制转成八进制或者十六进制。\n\n第二：直接法—把十进制转八进制或者十六进制按照除8或者16取余，直到商为0为止。\n\n```\n十进制数150\n\n150/8 取余数即转为八进制数  226\n\n150/16 取余数即转为十六进制数  96\n```\n----------------------------------------------\n\n## 十六进制转二进制\n\n十六进制转二进制与二进制转十六进制也是反着来的\n\n```javascript 1.8\n95\n\n//先按3位分割 010 010 110 \n\n// 每三位按权展开求和\n\n9 = 1001\n\n5 = 0101\n\n结果为:10010101\n\n```\n\n## 十六进制转八进制 \n\n第一种：他们之间的转换可以先转成二进制然后再相互转换。\n\n第二种：他们之间的转换可以先转成十进制然后再相互转换。\n\n## 十六进制转十进制\n\n把十六进制按权展开、相加即得十进制数。\n\n```javascript 1.8\n96\n\n9*16^1 + 9*16^0\n\n结果为:150\n```\n\n# 总结\n\n1. 十进制转二进制 八进制 十六进制 都可以按照除2 8 16 然后倒着取余数即为对应的结果\n\n2. 十六进制与八进制的转换,只能通过专程二进制和十进制,然后进行转换","slug":"进制转换","published":1,"updated":"2020-03-23T11:05:23.948Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgbydgol003lofo9x17iydvd","content":"<h1 id=\"进制间的转换\"><a href=\"#进制间的转换\" class=\"headerlink\" title=\"进制间的转换\"></a>进制间的转换</h1><h2 id=\"二进制转八进制\"><a href=\"#二进制转八进制\" class=\"headerlink\" title=\"二进制转八进制\"></a>二进制转八进制</h2><p>3位二进制数按权展开相加得到1位八进制数。（注意事项，3位二进制转成八进制是从右到左开始转换，不足时补0）</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10010110</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//先按3位分割 010 010 110 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 每三位按权展开求和</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">010</span> = <span class=\"number\">1</span>*<span class=\"number\">2</span>^<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">110</span> = <span class=\"number\">1</span>*<span class=\"number\">2</span>^<span class=\"number\">2</span> + <span class=\"number\">1</span>*<span class=\"number\">2</span>^<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">结果为:<span class=\"number\">226</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"二进制转十进制\"><a href=\"#二进制转十进制\" class=\"headerlink\" title=\"二进制转十进制\"></a>二进制转十进制</h2><p>把二进制数按权展开、相加即得十进制数。</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">101010</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span>*<span class=\"number\">2</span>^<span class=\"number\">5</span>+<span class=\"number\">0</span>*<span class=\"number\">2</span>^<span class=\"number\">4</span>+<span class=\"number\">1</span>*<span class=\"number\">2</span>^<span class=\"number\">3</span>+<span class=\"number\">0</span>*<span class=\"number\">2</span>^<span class=\"number\">2</span>+<span class=\"number\">1</span>*<span class=\"number\">2</span>^<span class=\"number\">1</span>+<span class=\"number\">0</span>*<span class=\"number\">2</span>^<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">结果为:<span class=\"number\">42</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"二进制转十六进制\"><a href=\"#二进制转十六进制\" class=\"headerlink\" title=\"二进制转十六进制\"></a>二进制转十六进制</h2><p>二进制转十六进制与二进制转八进制基本一样,转八进制为3位按权展开,十六进制为4位按权展开 </p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10010101</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//先按3位分割 1001 0110</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 每三位按权展开求和</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1001</span> = <span class=\"number\">1</span>*<span class=\"number\">2</span>^<span class=\"number\">0</span>+<span class=\"number\">1</span>*<span class=\"number\">2</span>^<span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0101</span> = <span class=\"number\">1</span>*<span class=\"number\">2</span>^<span class=\"number\">2</span> + <span class=\"number\">1</span>*<span class=\"number\">2</span>^<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">结果为:<span class=\"number\">95</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"八进制转二进制\"><a href=\"#八进制转二进制\" class=\"headerlink\" title=\"八进制转二进制\"></a>八进制转二进制</h2><p>八进制转二进制与二进制转八进制是反着来的</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">226</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//先按3位分割 010 010 110 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 每三位按权展开求和</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span> = <span class=\"number\">010</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">6</span> = <span class=\"number\">110</span> </span><br><span class=\"line\"></span><br><span class=\"line\">结果为:<span class=\"number\">10010110</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"八进制转十进制\"><a href=\"#八进制转十进制\" class=\"headerlink\" title=\"八进制转十进制\"></a>八进制转十进制</h2><p>把八进制按权展开、相加即得十进制数。</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">226</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>*<span class=\"number\">8</span>^<span class=\"number\">2</span> + <span class=\"number\">2</span>*<span class=\"number\">8</span>^<span class=\"number\">2</span> + <span class=\"number\">6</span>*<span class=\"number\">8</span>^<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">结果为:<span class=\"number\">150</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"八进制转十六进制\"><a href=\"#八进制转十六进制\" class=\"headerlink\" title=\"八进制转十六进制\"></a>八进制转十六进制</h2><hr>\n<h2 id=\"十进制转二进制\"><a href=\"#十进制转二进制\" class=\"headerlink\" title=\"十进制转二进制\"></a>十进制转二进制</h2><p>十进制数除以2从下往上取余数<br><figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">70</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">70</span> = <span class=\"number\">1000110</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span>*<span class=\"number\">2</span>^<span class=\"number\">6</span>+<span class=\"number\">1</span>*<span class=\"number\">2</span>^<span class=\"number\">2</span>+<span class=\"number\">1</span>*<span class=\"number\">2</span>^<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">结果为:<span class=\"number\">1000110</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"十进制转八进制-和-十进制转十六进制\"><a href=\"#十进制转八进制-和-十进制转十六进制\" class=\"headerlink\" title=\"十进制转八进制 和 十进制转十六进制\"></a>十进制转八进制 和 十进制转十六进制</h2><p>第一：间接法—把十进制转成二进制，然后再由二进制转成八进制或者十六进制。</p>\n<p>第二：直接法—把十进制转八进制或者十六进制按照除8或者16取余，直到商为0为止。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">十进制数150</span><br><span class=\"line\"></span><br><span class=\"line\">150/8 取余数即转为八进制数  226</span><br><span class=\"line\"></span><br><span class=\"line\">150/16 取余数即转为十六进制数  96</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"十六进制转二进制\"><a href=\"#十六进制转二进制\" class=\"headerlink\" title=\"十六进制转二进制\"></a>十六进制转二进制</h2><p>十六进制转二进制与二进制转十六进制也是反着来的</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">95</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//先按3位分割 010 010 110 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 每三位按权展开求和</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">9</span> = <span class=\"number\">1001</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5</span> = <span class=\"number\">0101</span></span><br><span class=\"line\"></span><br><span class=\"line\">结果为:<span class=\"number\">10010101</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"十六进制转八进制\"><a href=\"#十六进制转八进制\" class=\"headerlink\" title=\"十六进制转八进制\"></a>十六进制转八进制</h2><p>第一种：他们之间的转换可以先转成二进制然后再相互转换。</p>\n<p>第二种：他们之间的转换可以先转成十进制然后再相互转换。</p>\n<h2 id=\"十六进制转十进制\"><a href=\"#十六进制转十进制\" class=\"headerlink\" title=\"十六进制转十进制\"></a>十六进制转十进制</h2><p>把十六进制按权展开、相加即得十进制数。</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">96</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">9</span>*<span class=\"number\">16</span>^<span class=\"number\">1</span> + <span class=\"number\">9</span>*<span class=\"number\">16</span>^<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">结果为:<span class=\"number\">150</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ol>\n<li><p>十进制转二进制 八进制 十六进制 都可以按照除2 8 16 然后倒着取余数即为对应的结果</p>\n</li>\n<li><p>十六进制与八进制的转换,只能通过专程二进制和十进制,然后进行转换</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"进制间的转换\"><a href=\"#进制间的转换\" class=\"headerlink\" title=\"进制间的转换\"></a>进制间的转换</h1><h2 id=\"二进制转八进制\"><a href=\"#二进制转八进制\" class=\"headerlink\" title=\"二进制转八进制\"></a>二进制转八进制</h2><p>3位二进制数按权展开相加得到1位八进制数。（注意事项，3位二进制转成八进制是从右到左开始转换，不足时补0）</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10010110</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//先按3位分割 010 010 110 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 每三位按权展开求和</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">010</span> = <span class=\"number\">1</span>*<span class=\"number\">2</span>^<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">110</span> = <span class=\"number\">1</span>*<span class=\"number\">2</span>^<span class=\"number\">2</span> + <span class=\"number\">1</span>*<span class=\"number\">2</span>^<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">结果为:<span class=\"number\">226</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"二进制转十进制\"><a href=\"#二进制转十进制\" class=\"headerlink\" title=\"二进制转十进制\"></a>二进制转十进制</h2><p>把二进制数按权展开、相加即得十进制数。</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">101010</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span>*<span class=\"number\">2</span>^<span class=\"number\">5</span>+<span class=\"number\">0</span>*<span class=\"number\">2</span>^<span class=\"number\">4</span>+<span class=\"number\">1</span>*<span class=\"number\">2</span>^<span class=\"number\">3</span>+<span class=\"number\">0</span>*<span class=\"number\">2</span>^<span class=\"number\">2</span>+<span class=\"number\">1</span>*<span class=\"number\">2</span>^<span class=\"number\">1</span>+<span class=\"number\">0</span>*<span class=\"number\">2</span>^<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">结果为:<span class=\"number\">42</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"二进制转十六进制\"><a href=\"#二进制转十六进制\" class=\"headerlink\" title=\"二进制转十六进制\"></a>二进制转十六进制</h2><p>二进制转十六进制与二进制转八进制基本一样,转八进制为3位按权展开,十六进制为4位按权展开 </p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10010101</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//先按3位分割 1001 0110</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 每三位按权展开求和</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1001</span> = <span class=\"number\">1</span>*<span class=\"number\">2</span>^<span class=\"number\">0</span>+<span class=\"number\">1</span>*<span class=\"number\">2</span>^<span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0101</span> = <span class=\"number\">1</span>*<span class=\"number\">2</span>^<span class=\"number\">2</span> + <span class=\"number\">1</span>*<span class=\"number\">2</span>^<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">结果为:<span class=\"number\">95</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"八进制转二进制\"><a href=\"#八进制转二进制\" class=\"headerlink\" title=\"八进制转二进制\"></a>八进制转二进制</h2><p>八进制转二进制与二进制转八进制是反着来的</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">226</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//先按3位分割 010 010 110 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 每三位按权展开求和</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span> = <span class=\"number\">010</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">6</span> = <span class=\"number\">110</span> </span><br><span class=\"line\"></span><br><span class=\"line\">结果为:<span class=\"number\">10010110</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"八进制转十进制\"><a href=\"#八进制转十进制\" class=\"headerlink\" title=\"八进制转十进制\"></a>八进制转十进制</h2><p>把八进制按权展开、相加即得十进制数。</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">226</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>*<span class=\"number\">8</span>^<span class=\"number\">2</span> + <span class=\"number\">2</span>*<span class=\"number\">8</span>^<span class=\"number\">2</span> + <span class=\"number\">6</span>*<span class=\"number\">8</span>^<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">结果为:<span class=\"number\">150</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"八进制转十六进制\"><a href=\"#八进制转十六进制\" class=\"headerlink\" title=\"八进制转十六进制\"></a>八进制转十六进制</h2><hr>\n<h2 id=\"十进制转二进制\"><a href=\"#十进制转二进制\" class=\"headerlink\" title=\"十进制转二进制\"></a>十进制转二进制</h2><p>十进制数除以2从下往上取余数<br><figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">70</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">70</span> = <span class=\"number\">1000110</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span>*<span class=\"number\">2</span>^<span class=\"number\">6</span>+<span class=\"number\">1</span>*<span class=\"number\">2</span>^<span class=\"number\">2</span>+<span class=\"number\">1</span>*<span class=\"number\">2</span>^<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">结果为:<span class=\"number\">1000110</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"十进制转八进制-和-十进制转十六进制\"><a href=\"#十进制转八进制-和-十进制转十六进制\" class=\"headerlink\" title=\"十进制转八进制 和 十进制转十六进制\"></a>十进制转八进制 和 十进制转十六进制</h2><p>第一：间接法—把十进制转成二进制，然后再由二进制转成八进制或者十六进制。</p>\n<p>第二：直接法—把十进制转八进制或者十六进制按照除8或者16取余，直到商为0为止。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">十进制数150</span><br><span class=\"line\"></span><br><span class=\"line\">150/8 取余数即转为八进制数  226</span><br><span class=\"line\"></span><br><span class=\"line\">150/16 取余数即转为十六进制数  96</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"十六进制转二进制\"><a href=\"#十六进制转二进制\" class=\"headerlink\" title=\"十六进制转二进制\"></a>十六进制转二进制</h2><p>十六进制转二进制与二进制转十六进制也是反着来的</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">95</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//先按3位分割 010 010 110 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 每三位按权展开求和</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">9</span> = <span class=\"number\">1001</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5</span> = <span class=\"number\">0101</span></span><br><span class=\"line\"></span><br><span class=\"line\">结果为:<span class=\"number\">10010101</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"十六进制转八进制\"><a href=\"#十六进制转八进制\" class=\"headerlink\" title=\"十六进制转八进制\"></a>十六进制转八进制</h2><p>第一种：他们之间的转换可以先转成二进制然后再相互转换。</p>\n<p>第二种：他们之间的转换可以先转成十进制然后再相互转换。</p>\n<h2 id=\"十六进制转十进制\"><a href=\"#十六进制转十进制\" class=\"headerlink\" title=\"十六进制转十进制\"></a>十六进制转十进制</h2><p>把十六进制按权展开、相加即得十进制数。</p>\n<figure class=\"highlight javascript\"><figcaption><span>1.8</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">96</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">9</span>*<span class=\"number\">16</span>^<span class=\"number\">1</span> + <span class=\"number\">9</span>*<span class=\"number\">16</span>^<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">结果为:<span class=\"number\">150</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ol>\n<li><p>十进制转二进制 八进制 十六进制 都可以按照除2 8 16 然后倒着取余数即为对应的结果</p>\n</li>\n<li><p>十六进制与八进制的转换,只能通过专程二进制和十进制,然后进行转换</p>\n</li>\n</ol>\n"},{"title":"面试宝典","date":"2019-07-16T02:59:54.000Z","_content":"\n#### 手写promise的实现\n\nPromise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理和强大\n\nPromise包含三种状态：\n\n1. pending 过渡态\n\n2. fulfilled 完成态\n\n3. rejected 失败态\n\nPromise使用方法：\n\n```javascript\nlet promise = new Promise((resolve, reject) => {\n    //这里放入我们要执行的函数，可能是同步，也可能是异步, 这里我们就来写一个异步的执行\n    setTimeout(() => {\n        resolve('hello');\n    })\n})\npromise.then(data => {\n    console.log(data);\n}, err => {console.log(err)})\n```\n\n由上可见：\n\n当我们在new Promise的时候传入了一个函数，这个函数在规范中叫执行器(exector)，因此，我们可以构建自己的一个构造函数\n\n```javascript\nfunction Promise(exector){\n\n}\n```\n\n第一步已经完成，接着分析原生promise，在执行器中传入了两个参数，第一个参数是让promise状态变为resolve，即为成功，第二个参数则让promise变为reject，失败，并且这两个形参都可以传入参数\n\n```javascript\nfunction Promise(exector){\n    this.state = \"pending\";\n\tthis.result = null;\n    // 以下两行为了解决异步的Promise\n    this.onFulfilledFunc = [];//保存成功回调\n    this.onRejectedFunc = [];//保存失败回调\n    \n    var _this = this;\n    function resolve(value){\n        _this.state = 'FULFILLED';\n        _this.result = value; \n        // 同步数组长度为0，异步数组有长度，执行顺序不一样\n        _this.onFulfilledFunc.forEach(function(callback){\n            callback(value)\n        })\n    }\n    function reject(err){\n        // 异步执行\n        _this.state = 'REJECTED';\n        _this.result = err; \n        _this.onRejectedFunc.forEach(function(callback){\n            callback(err)\n        })\n    }\n    this.then = function(onFulfilled,onRejected){\n        if(this.state === \"FULFILLED\"){\n            onFulfilled(this.result);\n        }else if(this.state === \"REJECTED\"){\n            onRejected(this.result);\n        }else{\n            // 异步执行 存在回调里 resolve还没执行完 然后走这里\n            if(typeof onFulfilled === \"function\"){\n                this.onFulfilledFunc.push(onFulfilled);//保存回调\n            }\n            if(typeof onRejected === \"function\"){\n                this.onRejectedFunc.push(onFulfilled);//保存回调\n            }\n        }\n    }\n    exector(resolve,reject);\n}\n\nvar p = new Promise(resolve => {\n setTimeout(()=>resolve('Hello'),1000)\n});\np.then((res)=>console.log(res));\n```\n\n#### JavaScript垃圾回收机制\n\n为什么需要垃圾回收？\n\n> 因为字符串、对象、数组没有固定的大小，所以当他们大小已知时，才能对他们进行动态的存储分配。JavaScript程序每次创建字符串、对象、数组时，解释器都必须分配内存来存储那个实体。只要像这样动态地分配了内存，最终都要释放这些内存以便他们能够被再用，否则，JavaScript的解释器将会消耗完系统可用的内存，从而造成奔溃\n\n1. 标记清除法\n\n   这是javascript中最常用的垃圾回收方式。当变量进入执行环境是，就标记这个变量为“进入环境”。从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到他们。当变量离开环境时，则将其标记为“离开环境”。\n\n   垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记。然后，它会去掉环境中的变量以及被环境中的变量引用的标记。而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。最后。垃圾收集器完成内存清除工作，销毁那些带标记的值，并回收他们所占用的内存空间。\n\n2. 引用计数法\n\n   引用计数的含义是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型赋值给该变量时，则这个值的引用次数就是1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数就减1。当这个引用次数变成0时，则说明没有办法再访问这个值了，因而就可以将其所占的内存空间给收回来。这样，垃圾收集器下次再运行时，它就会释放那些引用次数为0的值所占的内存。\n\n#### 闭包为什么造成内存泄漏\n\n内存泄漏是指我们已经无法再通过js代码来引用到某个对象，但垃圾回收器却认为这个对象还在被引用，因此在回收的时候不会释放它\n\n#### 页面输入到加载成功发生了什么\n\n1. 浏览器的地址栏输入URL并按下回车。\n\n2. 浏览器查找当前URL是否存在缓存，并比较缓存是否过期。、\n\n3. DNS解析URL对应的IP。\n\n4. 根据IP建立TCP连接（三次握手）。\n\n   第一次握手： 建立连接时，客户端发送syn包（syn=j）到服务器，并进入SYN_SENT状态，等待服务器确认； \n\n　　第二次握手： 服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；\n\n　　第三次握手： 客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。\n\n1. HTTP发起请求。\n\n2. 服务器处理请求，浏览器接收HTTP响应。\n\n3. 渲染页面，构建DOM树。\n\n4. 关闭TCP连接（四次挥手）。\n\n   ​\t\t第一次挥手是浏览器发完数据后，发送FIN请求断开连接。\n\n   　　第二次挥手是服务器发送ACK表示同意，如果在这一次服务器也发送FIN请求断开连接似乎也没有不妥，但考虑到服务器可能还有数据要发送，所以服务器发送FIN应该放在第三次挥手中。\n\n   　　这样浏览器需要返回ACK表示同意，也就是第四次挥手。\n\n   至此从浏览器地址栏输入URL到页面呈现到你面前的整个过程就分析完了，上面内容如有错误欢迎留言交流。\n\n#### 重绘和重排\n\n​\t\tReflow，也称作Layout，中文叫回流，一般意味着元素的内容、结构、位置或尺寸发生了变化，需要重新计算样式和渲染树，这个过程称为Reflow。\n\n　　Repaint，中文重绘，意味着元素发生的改变只是影响了元素的一些外观之类的时候（例如，背景色，边框颜色，文字颜色等），此时只需要应用新样式绘制这个元素就OK了，这个过程称为Repaint。\n\n　　所以说Reflow的成本比Repaint的成本高得多的多。DOM树里的每个结点都会有reflow方法，一个结点的reflow很有可能导致子结点，甚至父点以及同级结点的reflow。\n\n　　下面这些动作有很大可能会是成本比较高的：\n\n- 增加、删除、修改DOM结点时，会导致Reflow或Repaint\n- 移动DOM的位置，或是搞个动画的时候\n- 内容发生变化\n- 修改CSS样式的时候\n- Resize窗口的时候（移动端没有这个问题），或是滚动的时候\n- 修改网页的默认字体时\n\n　　基本上来说，reflow有如下的几个原因：\n\n- Initial，网页初始化的时候\n- Incremental，一些js在操作DOM树时\n- Resize，其些元件的尺寸变了\n- StyleChange，如果CSS的属性发生变化了\n- Dirty，几个Incremental的reflow发生在同一个frame的子树上\n\n#### https相关原理\n\nHTTPS是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL\n\nSSL用以保障在Internet上数据传输之安全，利用数据加密(Encryption)技术，可确保数据在网络上之 传输过程中不会被截取及窃听。\n\nSSL协议位于TCP/IP协议与各种应用层协议之间，为数据通讯提供安全支持。\n\nSSL协议可分为两层： \n\n1. SSL记录协议（SSL Record Protocol）：它建立在可靠的传输协议（如TCP）之上，为高层协议提供数据封装、压缩、加密等基本功能的支持。\n\n2.  SSL握手协议（SSL Handshake Protocol）：它建立在SSL记录协议之上，用于在实际的数据传输开始前，通讯双方进行身份认证、协商加密算法、交换加密密钥等。\n\nSSL协议提供的服务主要有：\n\n1）认证用户和服务器，确保数据发送到正确的客户机和服务器；\n2）加密数据以防止数据中途被窃取；\n3）维护数据的完整性，确保数据在传输过程中不被改变。\n\n#### cookie与session原理，还有token相关的一些内容\n\ncookie 是一个非常具体的东西，指的就是浏览器里面能永久存储的一种数据，仅仅是浏览器实现的一种数据存储功能。\n\ncookie由服务器生成，发送给浏览器，浏览器把cookie以kv形式保存到某个目录下的文本文件内，下一次请求同一网站时会把该cookie发送给服务器。由于cookie是存在客户端上的，所以浏览器加入了一些限制确保cookie不会被恶意使用，同时不会占据太多磁盘空间，所以每个域的cookie数量是有限的。\n\nsession 从字面上讲，就是会话。这个就类似于你和一个人交谈，你怎么知道当前和你交谈的是张三而不是李四呢？对方肯定有某种特征（长相等）表明他就是张三。\n\nsession 也是类似的道理，服务器要知道当前发请求给自己的是谁。为了做这种区分，服务器就要给每个客户端分配不同的“身份标识”，然后客户端每次向服务器发请求的时候，都带上这个“身份标识”，服务器就知道这个请求来自于谁了。至于客户端怎么保存这个“身份标识”，可以有很多种方式，对于浏览器客户端，大家都默认采用 cookie 的方式。\n\n服务器使用session把用户的信息临时保存在了服务器上，用户离开网站后session会被销毁。这种用户信息存储方式相对cookie来说更安全，可是session有一个缺陷：如果web服务器做了负载均衡，那么下一个操作请求到了另一台服务器的时候session会丢失。\n\n在Web领域基于Token的身份验证随处可见。在大多数使用Web API的互联网公司中，tokens 是多用户下处理认证的最佳方式。\n\n以下几点特性会让你在程序中使用基于Token的身份验证\n\n1. 无状态、可扩展\n\n2. 支持移动设备\n\n3. 跨程序调用\n\n4. 安全\n\ntoken，服务器存储在redis，可以减轻服务器压力\n\n[这个文档讲的很好](https://www.cnblogs.com/moyand/p/9047978.html)\n\n#### 深拷贝\n\n[深拷贝](https://juejin.im/post/5d6aa4f96fb9a06b112ad5b1#heading-6)\n\n#### 算法学习\n\n[算法学习](http://www.conardli.top/docs/dataStructure/)\n\n\n#### react-router的内部原理解释\n\n\n\n#### NodeJs的事件循环怎么理解？事件循环里各个阶段的认识\n\n\n\n#### 说一下对bind，call，apply三个函数的认识，自己实现一下bind方法\n\n\n\n#### 前端的requestAnimationFrame了解吗？有使用过吗？说一下使用场景\n\n\n\n#### nodejs的异步IO原理\n\n\n\n#### TCP三次握手四次挥手的具体细节\n\n\n\n#### React的Dom的diff算法描述一下\n\n\n\n#### 跨域分哪几种类型，如何解决各个跨域的问题\n\n\n\n#### 前端模块化，使用过的打包工具有哪些，打包原理\n\n\n\n#### XSS，CSRF攻击过程，前端怎么去防止这类攻击\n\n\n\n","source":"_posts/面试宝典.md","raw":"---\ntitle: 面试宝典\ndate: 2019-07-16 10:59:54\ntags:\n    - 面试\ncategories: 面试宝典\n---\n\n#### 手写promise的实现\n\nPromise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理和强大\n\nPromise包含三种状态：\n\n1. pending 过渡态\n\n2. fulfilled 完成态\n\n3. rejected 失败态\n\nPromise使用方法：\n\n```javascript\nlet promise = new Promise((resolve, reject) => {\n    //这里放入我们要执行的函数，可能是同步，也可能是异步, 这里我们就来写一个异步的执行\n    setTimeout(() => {\n        resolve('hello');\n    })\n})\npromise.then(data => {\n    console.log(data);\n}, err => {console.log(err)})\n```\n\n由上可见：\n\n当我们在new Promise的时候传入了一个函数，这个函数在规范中叫执行器(exector)，因此，我们可以构建自己的一个构造函数\n\n```javascript\nfunction Promise(exector){\n\n}\n```\n\n第一步已经完成，接着分析原生promise，在执行器中传入了两个参数，第一个参数是让promise状态变为resolve，即为成功，第二个参数则让promise变为reject，失败，并且这两个形参都可以传入参数\n\n```javascript\nfunction Promise(exector){\n    this.state = \"pending\";\n\tthis.result = null;\n    // 以下两行为了解决异步的Promise\n    this.onFulfilledFunc = [];//保存成功回调\n    this.onRejectedFunc = [];//保存失败回调\n    \n    var _this = this;\n    function resolve(value){\n        _this.state = 'FULFILLED';\n        _this.result = value; \n        // 同步数组长度为0，异步数组有长度，执行顺序不一样\n        _this.onFulfilledFunc.forEach(function(callback){\n            callback(value)\n        })\n    }\n    function reject(err){\n        // 异步执行\n        _this.state = 'REJECTED';\n        _this.result = err; \n        _this.onRejectedFunc.forEach(function(callback){\n            callback(err)\n        })\n    }\n    this.then = function(onFulfilled,onRejected){\n        if(this.state === \"FULFILLED\"){\n            onFulfilled(this.result);\n        }else if(this.state === \"REJECTED\"){\n            onRejected(this.result);\n        }else{\n            // 异步执行 存在回调里 resolve还没执行完 然后走这里\n            if(typeof onFulfilled === \"function\"){\n                this.onFulfilledFunc.push(onFulfilled);//保存回调\n            }\n            if(typeof onRejected === \"function\"){\n                this.onRejectedFunc.push(onFulfilled);//保存回调\n            }\n        }\n    }\n    exector(resolve,reject);\n}\n\nvar p = new Promise(resolve => {\n setTimeout(()=>resolve('Hello'),1000)\n});\np.then((res)=>console.log(res));\n```\n\n#### JavaScript垃圾回收机制\n\n为什么需要垃圾回收？\n\n> 因为字符串、对象、数组没有固定的大小，所以当他们大小已知时，才能对他们进行动态的存储分配。JavaScript程序每次创建字符串、对象、数组时，解释器都必须分配内存来存储那个实体。只要像这样动态地分配了内存，最终都要释放这些内存以便他们能够被再用，否则，JavaScript的解释器将会消耗完系统可用的内存，从而造成奔溃\n\n1. 标记清除法\n\n   这是javascript中最常用的垃圾回收方式。当变量进入执行环境是，就标记这个变量为“进入环境”。从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到他们。当变量离开环境时，则将其标记为“离开环境”。\n\n   垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记。然后，它会去掉环境中的变量以及被环境中的变量引用的标记。而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。最后。垃圾收集器完成内存清除工作，销毁那些带标记的值，并回收他们所占用的内存空间。\n\n2. 引用计数法\n\n   引用计数的含义是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型赋值给该变量时，则这个值的引用次数就是1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数就减1。当这个引用次数变成0时，则说明没有办法再访问这个值了，因而就可以将其所占的内存空间给收回来。这样，垃圾收集器下次再运行时，它就会释放那些引用次数为0的值所占的内存。\n\n#### 闭包为什么造成内存泄漏\n\n内存泄漏是指我们已经无法再通过js代码来引用到某个对象，但垃圾回收器却认为这个对象还在被引用，因此在回收的时候不会释放它\n\n#### 页面输入到加载成功发生了什么\n\n1. 浏览器的地址栏输入URL并按下回车。\n\n2. 浏览器查找当前URL是否存在缓存，并比较缓存是否过期。、\n\n3. DNS解析URL对应的IP。\n\n4. 根据IP建立TCP连接（三次握手）。\n\n   第一次握手： 建立连接时，客户端发送syn包（syn=j）到服务器，并进入SYN_SENT状态，等待服务器确认； \n\n　　第二次握手： 服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；\n\n　　第三次握手： 客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。\n\n1. HTTP发起请求。\n\n2. 服务器处理请求，浏览器接收HTTP响应。\n\n3. 渲染页面，构建DOM树。\n\n4. 关闭TCP连接（四次挥手）。\n\n   ​\t\t第一次挥手是浏览器发完数据后，发送FIN请求断开连接。\n\n   　　第二次挥手是服务器发送ACK表示同意，如果在这一次服务器也发送FIN请求断开连接似乎也没有不妥，但考虑到服务器可能还有数据要发送，所以服务器发送FIN应该放在第三次挥手中。\n\n   　　这样浏览器需要返回ACK表示同意，也就是第四次挥手。\n\n   至此从浏览器地址栏输入URL到页面呈现到你面前的整个过程就分析完了，上面内容如有错误欢迎留言交流。\n\n#### 重绘和重排\n\n​\t\tReflow，也称作Layout，中文叫回流，一般意味着元素的内容、结构、位置或尺寸发生了变化，需要重新计算样式和渲染树，这个过程称为Reflow。\n\n　　Repaint，中文重绘，意味着元素发生的改变只是影响了元素的一些外观之类的时候（例如，背景色，边框颜色，文字颜色等），此时只需要应用新样式绘制这个元素就OK了，这个过程称为Repaint。\n\n　　所以说Reflow的成本比Repaint的成本高得多的多。DOM树里的每个结点都会有reflow方法，一个结点的reflow很有可能导致子结点，甚至父点以及同级结点的reflow。\n\n　　下面这些动作有很大可能会是成本比较高的：\n\n- 增加、删除、修改DOM结点时，会导致Reflow或Repaint\n- 移动DOM的位置，或是搞个动画的时候\n- 内容发生变化\n- 修改CSS样式的时候\n- Resize窗口的时候（移动端没有这个问题），或是滚动的时候\n- 修改网页的默认字体时\n\n　　基本上来说，reflow有如下的几个原因：\n\n- Initial，网页初始化的时候\n- Incremental，一些js在操作DOM树时\n- Resize，其些元件的尺寸变了\n- StyleChange，如果CSS的属性发生变化了\n- Dirty，几个Incremental的reflow发生在同一个frame的子树上\n\n#### https相关原理\n\nHTTPS是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL\n\nSSL用以保障在Internet上数据传输之安全，利用数据加密(Encryption)技术，可确保数据在网络上之 传输过程中不会被截取及窃听。\n\nSSL协议位于TCP/IP协议与各种应用层协议之间，为数据通讯提供安全支持。\n\nSSL协议可分为两层： \n\n1. SSL记录协议（SSL Record Protocol）：它建立在可靠的传输协议（如TCP）之上，为高层协议提供数据封装、压缩、加密等基本功能的支持。\n\n2.  SSL握手协议（SSL Handshake Protocol）：它建立在SSL记录协议之上，用于在实际的数据传输开始前，通讯双方进行身份认证、协商加密算法、交换加密密钥等。\n\nSSL协议提供的服务主要有：\n\n1）认证用户和服务器，确保数据发送到正确的客户机和服务器；\n2）加密数据以防止数据中途被窃取；\n3）维护数据的完整性，确保数据在传输过程中不被改变。\n\n#### cookie与session原理，还有token相关的一些内容\n\ncookie 是一个非常具体的东西，指的就是浏览器里面能永久存储的一种数据，仅仅是浏览器实现的一种数据存储功能。\n\ncookie由服务器生成，发送给浏览器，浏览器把cookie以kv形式保存到某个目录下的文本文件内，下一次请求同一网站时会把该cookie发送给服务器。由于cookie是存在客户端上的，所以浏览器加入了一些限制确保cookie不会被恶意使用，同时不会占据太多磁盘空间，所以每个域的cookie数量是有限的。\n\nsession 从字面上讲，就是会话。这个就类似于你和一个人交谈，你怎么知道当前和你交谈的是张三而不是李四呢？对方肯定有某种特征（长相等）表明他就是张三。\n\nsession 也是类似的道理，服务器要知道当前发请求给自己的是谁。为了做这种区分，服务器就要给每个客户端分配不同的“身份标识”，然后客户端每次向服务器发请求的时候，都带上这个“身份标识”，服务器就知道这个请求来自于谁了。至于客户端怎么保存这个“身份标识”，可以有很多种方式，对于浏览器客户端，大家都默认采用 cookie 的方式。\n\n服务器使用session把用户的信息临时保存在了服务器上，用户离开网站后session会被销毁。这种用户信息存储方式相对cookie来说更安全，可是session有一个缺陷：如果web服务器做了负载均衡，那么下一个操作请求到了另一台服务器的时候session会丢失。\n\n在Web领域基于Token的身份验证随处可见。在大多数使用Web API的互联网公司中，tokens 是多用户下处理认证的最佳方式。\n\n以下几点特性会让你在程序中使用基于Token的身份验证\n\n1. 无状态、可扩展\n\n2. 支持移动设备\n\n3. 跨程序调用\n\n4. 安全\n\ntoken，服务器存储在redis，可以减轻服务器压力\n\n[这个文档讲的很好](https://www.cnblogs.com/moyand/p/9047978.html)\n\n#### 深拷贝\n\n[深拷贝](https://juejin.im/post/5d6aa4f96fb9a06b112ad5b1#heading-6)\n\n#### 算法学习\n\n[算法学习](http://www.conardli.top/docs/dataStructure/)\n\n\n#### react-router的内部原理解释\n\n\n\n#### NodeJs的事件循环怎么理解？事件循环里各个阶段的认识\n\n\n\n#### 说一下对bind，call，apply三个函数的认识，自己实现一下bind方法\n\n\n\n#### 前端的requestAnimationFrame了解吗？有使用过吗？说一下使用场景\n\n\n\n#### nodejs的异步IO原理\n\n\n\n#### TCP三次握手四次挥手的具体细节\n\n\n\n#### React的Dom的diff算法描述一下\n\n\n\n#### 跨域分哪几种类型，如何解决各个跨域的问题\n\n\n\n#### 前端模块化，使用过的打包工具有哪些，打包原理\n\n\n\n#### XSS，CSRF攻击过程，前端怎么去防止这类攻击\n\n\n\n","slug":"面试宝典","published":1,"updated":"2020-03-23T11:05:23.948Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgbydgon003pofo9e8gwp1hg","content":"<h4 id=\"手写promise的实现\"><a href=\"#手写promise的实现\" class=\"headerlink\" title=\"手写promise的实现\"></a>手写promise的实现</h4><p>Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理和强大</p>\n<p>Promise包含三种状态：</p>\n<ol>\n<li><p>pending 过渡态</p>\n</li>\n<li><p>fulfilled 完成态</p>\n</li>\n<li><p>rejected 失败态</p>\n</li>\n</ol>\n<p>Promise使用方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里放入我们要执行的函数，可能是同步，也可能是异步, 这里我们就来写一个异步的执行</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(<span class=\"string\">'hello'</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;, err =&gt; &#123;<span class=\"built_in\">console</span>.log(err)&#125;)</span><br></pre></td></tr></table></figure>\n<p>由上可见：</p>\n<p>当我们在new Promise的时候传入了一个函数，这个函数在规范中叫执行器(exector)，因此，我们可以构建自己的一个构造函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">exector</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第一步已经完成，接着分析原生promise，在执行器中传入了两个参数，第一个参数是让promise状态变为resolve，即为成功，第二个参数则让promise变为reject，失败，并且这两个形参都可以传入参数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">exector</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"string\">\"pending\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.result = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 以下两行为了解决异步的Promise</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onFulfilledFunc = [];<span class=\"comment\">//保存成功回调</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onRejectedFunc = [];<span class=\"comment\">//保存失败回调</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">        _this.state = <span class=\"string\">'FULFILLED'</span>;</span><br><span class=\"line\">        _this.result = value; </span><br><span class=\"line\">        <span class=\"comment\">// 同步数组长度为0，异步数组有长度，执行顺序不一样</span></span><br><span class=\"line\">        _this.onFulfilledFunc.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\">            callback(value)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 异步执行</span></span><br><span class=\"line\">        _this.state = <span class=\"string\">'REJECTED'</span>;</span><br><span class=\"line\">        _this.result = err; </span><br><span class=\"line\">        _this.onRejectedFunc.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\">            callback(err)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.then = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">onFulfilled,onRejected</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.state === <span class=\"string\">\"FULFILLED\"</span>)&#123;</span><br><span class=\"line\">            onFulfilled(<span class=\"keyword\">this</span>.result);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.state === <span class=\"string\">\"REJECTED\"</span>)&#123;</span><br><span class=\"line\">            onRejected(<span class=\"keyword\">this</span>.result);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 异步执行 存在回调里 resolve还没执行完 然后走这里</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> onFulfilled === <span class=\"string\">\"function\"</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.onFulfilledFunc.push(onFulfilled);<span class=\"comment\">//保存回调</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> onRejected === <span class=\"string\">\"function\"</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.onRejectedFunc.push(onFulfilled);<span class=\"comment\">//保存回调</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    exector(resolve,reject);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\"> setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>resolve(<span class=\"string\">'Hello'</span>),<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">p.then(<span class=\"function\">(<span class=\"params\">res</span>)=&gt;</span><span class=\"built_in\">console</span>.log(res));</span><br></pre></td></tr></table></figure>\n<h4 id=\"JavaScript垃圾回收机制\"><a href=\"#JavaScript垃圾回收机制\" class=\"headerlink\" title=\"JavaScript垃圾回收机制\"></a>JavaScript垃圾回收机制</h4><p>为什么需要垃圾回收？</p>\n<blockquote>\n<p>因为字符串、对象、数组没有固定的大小，所以当他们大小已知时，才能对他们进行动态的存储分配。JavaScript程序每次创建字符串、对象、数组时，解释器都必须分配内存来存储那个实体。只要像这样动态地分配了内存，最终都要释放这些内存以便他们能够被再用，否则，JavaScript的解释器将会消耗完系统可用的内存，从而造成奔溃</p>\n</blockquote>\n<ol>\n<li><p>标记清除法</p>\n<p>这是javascript中最常用的垃圾回收方式。当变量进入执行环境是，就标记这个变量为“进入环境”。从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到他们。当变量离开环境时，则将其标记为“离开环境”。</p>\n<p>垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记。然后，它会去掉环境中的变量以及被环境中的变量引用的标记。而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。最后。垃圾收集器完成内存清除工作，销毁那些带标记的值，并回收他们所占用的内存空间。</p>\n</li>\n<li><p>引用计数法</p>\n<p>引用计数的含义是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型赋值给该变量时，则这个值的引用次数就是1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数就减1。当这个引用次数变成0时，则说明没有办法再访问这个值了，因而就可以将其所占的内存空间给收回来。这样，垃圾收集器下次再运行时，它就会释放那些引用次数为0的值所占的内存。</p>\n</li>\n</ol>\n<h4 id=\"闭包为什么造成内存泄漏\"><a href=\"#闭包为什么造成内存泄漏\" class=\"headerlink\" title=\"闭包为什么造成内存泄漏\"></a>闭包为什么造成内存泄漏</h4><p>内存泄漏是指我们已经无法再通过js代码来引用到某个对象，但垃圾回收器却认为这个对象还在被引用，因此在回收的时候不会释放它</p>\n<h4 id=\"页面输入到加载成功发生了什么\"><a href=\"#页面输入到加载成功发生了什么\" class=\"headerlink\" title=\"页面输入到加载成功发生了什么\"></a>页面输入到加载成功发生了什么</h4><ol>\n<li><p>浏览器的地址栏输入URL并按下回车。</p>\n</li>\n<li><p>浏览器查找当前URL是否存在缓存，并比较缓存是否过期。、</p>\n</li>\n<li><p>DNS解析URL对应的IP。</p>\n</li>\n<li><p>根据IP建立TCP连接（三次握手）。</p>\n<p>第一次握手： 建立连接时，客户端发送syn包（syn=j）到服务器，并进入SYN_SENT状态，等待服务器确认； </p>\n</li>\n</ol>\n<p>　　第二次握手： 服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；</p>\n<p>　　第三次握手： 客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。</p>\n<ol>\n<li><p>HTTP发起请求。</p>\n</li>\n<li><p>服务器处理请求，浏览器接收HTTP响应。</p>\n</li>\n<li><p>渲染页面，构建DOM树。</p>\n</li>\n<li><p>关闭TCP连接（四次挥手）。</p>\n<p>​        第一次挥手是浏览器发完数据后，发送FIN请求断开连接。</p>\n<p>　　第二次挥手是服务器发送ACK表示同意，如果在这一次服务器也发送FIN请求断开连接似乎也没有不妥，但考虑到服务器可能还有数据要发送，所以服务器发送FIN应该放在第三次挥手中。</p>\n<p>　　这样浏览器需要返回ACK表示同意，也就是第四次挥手。</p>\n<p>至此从浏览器地址栏输入URL到页面呈现到你面前的整个过程就分析完了，上面内容如有错误欢迎留言交流。</p>\n</li>\n</ol>\n<h4 id=\"重绘和重排\"><a href=\"#重绘和重排\" class=\"headerlink\" title=\"重绘和重排\"></a>重绘和重排</h4><p>​        Reflow，也称作Layout，中文叫回流，一般意味着元素的内容、结构、位置或尺寸发生了变化，需要重新计算样式和渲染树，这个过程称为Reflow。</p>\n<p>　　Repaint，中文重绘，意味着元素发生的改变只是影响了元素的一些外观之类的时候（例如，背景色，边框颜色，文字颜色等），此时只需要应用新样式绘制这个元素就OK了，这个过程称为Repaint。</p>\n<p>　　所以说Reflow的成本比Repaint的成本高得多的多。DOM树里的每个结点都会有reflow方法，一个结点的reflow很有可能导致子结点，甚至父点以及同级结点的reflow。</p>\n<p>　　下面这些动作有很大可能会是成本比较高的：</p>\n<ul>\n<li>增加、删除、修改DOM结点时，会导致Reflow或Repaint</li>\n<li>移动DOM的位置，或是搞个动画的时候</li>\n<li>内容发生变化</li>\n<li>修改CSS样式的时候</li>\n<li>Resize窗口的时候（移动端没有这个问题），或是滚动的时候</li>\n<li>修改网页的默认字体时</li>\n</ul>\n<p>　　基本上来说，reflow有如下的几个原因：</p>\n<ul>\n<li>Initial，网页初始化的时候</li>\n<li>Incremental，一些js在操作DOM树时</li>\n<li>Resize，其些元件的尺寸变了</li>\n<li>StyleChange，如果CSS的属性发生变化了</li>\n<li>Dirty，几个Incremental的reflow发生在同一个frame的子树上</li>\n</ul>\n<h4 id=\"https相关原理\"><a href=\"#https相关原理\" class=\"headerlink\" title=\"https相关原理\"></a>https相关原理</h4><p>HTTPS是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL</p>\n<p>SSL用以保障在Internet上数据传输之安全，利用数据加密(Encryption)技术，可确保数据在网络上之 传输过程中不会被截取及窃听。</p>\n<p>SSL协议位于TCP/IP协议与各种应用层协议之间，为数据通讯提供安全支持。</p>\n<p>SSL协议可分为两层： </p>\n<ol>\n<li><p>SSL记录协议（SSL Record Protocol）：它建立在可靠的传输协议（如TCP）之上，为高层协议提供数据封装、压缩、加密等基本功能的支持。</p>\n</li>\n<li><p>SSL握手协议（SSL Handshake Protocol）：它建立在SSL记录协议之上，用于在实际的数据传输开始前，通讯双方进行身份认证、协商加密算法、交换加密密钥等。</p>\n</li>\n</ol>\n<p>SSL协议提供的服务主要有：</p>\n<p>1）认证用户和服务器，确保数据发送到正确的客户机和服务器；<br>2）加密数据以防止数据中途被窃取；<br>3）维护数据的完整性，确保数据在传输过程中不被改变。</p>\n<h4 id=\"cookie与session原理，还有token相关的一些内容\"><a href=\"#cookie与session原理，还有token相关的一些内容\" class=\"headerlink\" title=\"cookie与session原理，还有token相关的一些内容\"></a>cookie与session原理，还有token相关的一些内容</h4><p>cookie 是一个非常具体的东西，指的就是浏览器里面能永久存储的一种数据，仅仅是浏览器实现的一种数据存储功能。</p>\n<p>cookie由服务器生成，发送给浏览器，浏览器把cookie以kv形式保存到某个目录下的文本文件内，下一次请求同一网站时会把该cookie发送给服务器。由于cookie是存在客户端上的，所以浏览器加入了一些限制确保cookie不会被恶意使用，同时不会占据太多磁盘空间，所以每个域的cookie数量是有限的。</p>\n<p>session 从字面上讲，就是会话。这个就类似于你和一个人交谈，你怎么知道当前和你交谈的是张三而不是李四呢？对方肯定有某种特征（长相等）表明他就是张三。</p>\n<p>session 也是类似的道理，服务器要知道当前发请求给自己的是谁。为了做这种区分，服务器就要给每个客户端分配不同的“身份标识”，然后客户端每次向服务器发请求的时候，都带上这个“身份标识”，服务器就知道这个请求来自于谁了。至于客户端怎么保存这个“身份标识”，可以有很多种方式，对于浏览器客户端，大家都默认采用 cookie 的方式。</p>\n<p>服务器使用session把用户的信息临时保存在了服务器上，用户离开网站后session会被销毁。这种用户信息存储方式相对cookie来说更安全，可是session有一个缺陷：如果web服务器做了负载均衡，那么下一个操作请求到了另一台服务器的时候session会丢失。</p>\n<p>在Web领域基于Token的身份验证随处可见。在大多数使用Web API的互联网公司中，tokens 是多用户下处理认证的最佳方式。</p>\n<p>以下几点特性会让你在程序中使用基于Token的身份验证</p>\n<ol>\n<li><p>无状态、可扩展</p>\n</li>\n<li><p>支持移动设备</p>\n</li>\n<li><p>跨程序调用</p>\n</li>\n<li><p>安全</p>\n</li>\n</ol>\n<p>token，服务器存储在redis，可以减轻服务器压力</p>\n<p><a href=\"https://www.cnblogs.com/moyand/p/9047978.html\" target=\"_blank\" rel=\"noopener\">这个文档讲的很好</a></p>\n<h4 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h4><p><a href=\"https://juejin.im/post/5d6aa4f96fb9a06b112ad5b1#heading-6\" target=\"_blank\" rel=\"noopener\">深拷贝</a></p>\n<h4 id=\"算法学习\"><a href=\"#算法学习\" class=\"headerlink\" title=\"算法学习\"></a>算法学习</h4><p><a href=\"http://www.conardli.top/docs/dataStructure/\" target=\"_blank\" rel=\"noopener\">算法学习</a></p>\n<h4 id=\"react-router的内部原理解释\"><a href=\"#react-router的内部原理解释\" class=\"headerlink\" title=\"react-router的内部原理解释\"></a>react-router的内部原理解释</h4><h4 id=\"NodeJs的事件循环怎么理解？事件循环里各个阶段的认识\"><a href=\"#NodeJs的事件循环怎么理解？事件循环里各个阶段的认识\" class=\"headerlink\" title=\"NodeJs的事件循环怎么理解？事件循环里各个阶段的认识\"></a>NodeJs的事件循环怎么理解？事件循环里各个阶段的认识</h4><h4 id=\"说一下对bind，call，apply三个函数的认识，自己实现一下bind方法\"><a href=\"#说一下对bind，call，apply三个函数的认识，自己实现一下bind方法\" class=\"headerlink\" title=\"说一下对bind，call，apply三个函数的认识，自己实现一下bind方法\"></a>说一下对bind，call，apply三个函数的认识，自己实现一下bind方法</h4><h4 id=\"前端的requestAnimationFrame了解吗？有使用过吗？说一下使用场景\"><a href=\"#前端的requestAnimationFrame了解吗？有使用过吗？说一下使用场景\" class=\"headerlink\" title=\"前端的requestAnimationFrame了解吗？有使用过吗？说一下使用场景\"></a>前端的requestAnimationFrame了解吗？有使用过吗？说一下使用场景</h4><h4 id=\"nodejs的异步IO原理\"><a href=\"#nodejs的异步IO原理\" class=\"headerlink\" title=\"nodejs的异步IO原理\"></a>nodejs的异步IO原理</h4><h4 id=\"TCP三次握手四次挥手的具体细节\"><a href=\"#TCP三次握手四次挥手的具体细节\" class=\"headerlink\" title=\"TCP三次握手四次挥手的具体细节\"></a>TCP三次握手四次挥手的具体细节</h4><h4 id=\"React的Dom的diff算法描述一下\"><a href=\"#React的Dom的diff算法描述一下\" class=\"headerlink\" title=\"React的Dom的diff算法描述一下\"></a>React的Dom的diff算法描述一下</h4><h4 id=\"跨域分哪几种类型，如何解决各个跨域的问题\"><a href=\"#跨域分哪几种类型，如何解决各个跨域的问题\" class=\"headerlink\" title=\"跨域分哪几种类型，如何解决各个跨域的问题\"></a>跨域分哪几种类型，如何解决各个跨域的问题</h4><h4 id=\"前端模块化，使用过的打包工具有哪些，打包原理\"><a href=\"#前端模块化，使用过的打包工具有哪些，打包原理\" class=\"headerlink\" title=\"前端模块化，使用过的打包工具有哪些，打包原理\"></a>前端模块化，使用过的打包工具有哪些，打包原理</h4><h4 id=\"XSS，CSRF攻击过程，前端怎么去防止这类攻击\"><a href=\"#XSS，CSRF攻击过程，前端怎么去防止这类攻击\" class=\"headerlink\" title=\"XSS，CSRF攻击过程，前端怎么去防止这类攻击\"></a>XSS，CSRF攻击过程，前端怎么去防止这类攻击</h4>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"手写promise的实现\"><a href=\"#手写promise的实现\" class=\"headerlink\" title=\"手写promise的实现\"></a>手写promise的实现</h4><p>Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理和强大</p>\n<p>Promise包含三种状态：</p>\n<ol>\n<li><p>pending 过渡态</p>\n</li>\n<li><p>fulfilled 完成态</p>\n</li>\n<li><p>rejected 失败态</p>\n</li>\n</ol>\n<p>Promise使用方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里放入我们要执行的函数，可能是同步，也可能是异步, 这里我们就来写一个异步的执行</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(<span class=\"string\">'hello'</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;, err =&gt; &#123;<span class=\"built_in\">console</span>.log(err)&#125;)</span><br></pre></td></tr></table></figure>\n<p>由上可见：</p>\n<p>当我们在new Promise的时候传入了一个函数，这个函数在规范中叫执行器(exector)，因此，我们可以构建自己的一个构造函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">exector</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第一步已经完成，接着分析原生promise，在执行器中传入了两个参数，第一个参数是让promise状态变为resolve，即为成功，第二个参数则让promise变为reject，失败，并且这两个形参都可以传入参数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">exector</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"string\">\"pending\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.result = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 以下两行为了解决异步的Promise</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onFulfilledFunc = [];<span class=\"comment\">//保存成功回调</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onRejectedFunc = [];<span class=\"comment\">//保存失败回调</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">        _this.state = <span class=\"string\">'FULFILLED'</span>;</span><br><span class=\"line\">        _this.result = value; </span><br><span class=\"line\">        <span class=\"comment\">// 同步数组长度为0，异步数组有长度，执行顺序不一样</span></span><br><span class=\"line\">        _this.onFulfilledFunc.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\">            callback(value)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 异步执行</span></span><br><span class=\"line\">        _this.state = <span class=\"string\">'REJECTED'</span>;</span><br><span class=\"line\">        _this.result = err; </span><br><span class=\"line\">        _this.onRejectedFunc.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\">            callback(err)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.then = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">onFulfilled,onRejected</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.state === <span class=\"string\">\"FULFILLED\"</span>)&#123;</span><br><span class=\"line\">            onFulfilled(<span class=\"keyword\">this</span>.result);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.state === <span class=\"string\">\"REJECTED\"</span>)&#123;</span><br><span class=\"line\">            onRejected(<span class=\"keyword\">this</span>.result);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 异步执行 存在回调里 resolve还没执行完 然后走这里</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> onFulfilled === <span class=\"string\">\"function\"</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.onFulfilledFunc.push(onFulfilled);<span class=\"comment\">//保存回调</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> onRejected === <span class=\"string\">\"function\"</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.onRejectedFunc.push(onFulfilled);<span class=\"comment\">//保存回调</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    exector(resolve,reject);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\"> setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>resolve(<span class=\"string\">'Hello'</span>),<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">p.then(<span class=\"function\">(<span class=\"params\">res</span>)=&gt;</span><span class=\"built_in\">console</span>.log(res));</span><br></pre></td></tr></table></figure>\n<h4 id=\"JavaScript垃圾回收机制\"><a href=\"#JavaScript垃圾回收机制\" class=\"headerlink\" title=\"JavaScript垃圾回收机制\"></a>JavaScript垃圾回收机制</h4><p>为什么需要垃圾回收？</p>\n<blockquote>\n<p>因为字符串、对象、数组没有固定的大小，所以当他们大小已知时，才能对他们进行动态的存储分配。JavaScript程序每次创建字符串、对象、数组时，解释器都必须分配内存来存储那个实体。只要像这样动态地分配了内存，最终都要释放这些内存以便他们能够被再用，否则，JavaScript的解释器将会消耗完系统可用的内存，从而造成奔溃</p>\n</blockquote>\n<ol>\n<li><p>标记清除法</p>\n<p>这是javascript中最常用的垃圾回收方式。当变量进入执行环境是，就标记这个变量为“进入环境”。从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到他们。当变量离开环境时，则将其标记为“离开环境”。</p>\n<p>垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记。然后，它会去掉环境中的变量以及被环境中的变量引用的标记。而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。最后。垃圾收集器完成内存清除工作，销毁那些带标记的值，并回收他们所占用的内存空间。</p>\n</li>\n<li><p>引用计数法</p>\n<p>引用计数的含义是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型赋值给该变量时，则这个值的引用次数就是1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数就减1。当这个引用次数变成0时，则说明没有办法再访问这个值了，因而就可以将其所占的内存空间给收回来。这样，垃圾收集器下次再运行时，它就会释放那些引用次数为0的值所占的内存。</p>\n</li>\n</ol>\n<h4 id=\"闭包为什么造成内存泄漏\"><a href=\"#闭包为什么造成内存泄漏\" class=\"headerlink\" title=\"闭包为什么造成内存泄漏\"></a>闭包为什么造成内存泄漏</h4><p>内存泄漏是指我们已经无法再通过js代码来引用到某个对象，但垃圾回收器却认为这个对象还在被引用，因此在回收的时候不会释放它</p>\n<h4 id=\"页面输入到加载成功发生了什么\"><a href=\"#页面输入到加载成功发生了什么\" class=\"headerlink\" title=\"页面输入到加载成功发生了什么\"></a>页面输入到加载成功发生了什么</h4><ol>\n<li><p>浏览器的地址栏输入URL并按下回车。</p>\n</li>\n<li><p>浏览器查找当前URL是否存在缓存，并比较缓存是否过期。、</p>\n</li>\n<li><p>DNS解析URL对应的IP。</p>\n</li>\n<li><p>根据IP建立TCP连接（三次握手）。</p>\n<p>第一次握手： 建立连接时，客户端发送syn包（syn=j）到服务器，并进入SYN_SENT状态，等待服务器确认； </p>\n</li>\n</ol>\n<p>　　第二次握手： 服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；</p>\n<p>　　第三次握手： 客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。</p>\n<ol>\n<li><p>HTTP发起请求。</p>\n</li>\n<li><p>服务器处理请求，浏览器接收HTTP响应。</p>\n</li>\n<li><p>渲染页面，构建DOM树。</p>\n</li>\n<li><p>关闭TCP连接（四次挥手）。</p>\n<p>​        第一次挥手是浏览器发完数据后，发送FIN请求断开连接。</p>\n<p>　　第二次挥手是服务器发送ACK表示同意，如果在这一次服务器也发送FIN请求断开连接似乎也没有不妥，但考虑到服务器可能还有数据要发送，所以服务器发送FIN应该放在第三次挥手中。</p>\n<p>　　这样浏览器需要返回ACK表示同意，也就是第四次挥手。</p>\n<p>至此从浏览器地址栏输入URL到页面呈现到你面前的整个过程就分析完了，上面内容如有错误欢迎留言交流。</p>\n</li>\n</ol>\n<h4 id=\"重绘和重排\"><a href=\"#重绘和重排\" class=\"headerlink\" title=\"重绘和重排\"></a>重绘和重排</h4><p>​        Reflow，也称作Layout，中文叫回流，一般意味着元素的内容、结构、位置或尺寸发生了变化，需要重新计算样式和渲染树，这个过程称为Reflow。</p>\n<p>　　Repaint，中文重绘，意味着元素发生的改变只是影响了元素的一些外观之类的时候（例如，背景色，边框颜色，文字颜色等），此时只需要应用新样式绘制这个元素就OK了，这个过程称为Repaint。</p>\n<p>　　所以说Reflow的成本比Repaint的成本高得多的多。DOM树里的每个结点都会有reflow方法，一个结点的reflow很有可能导致子结点，甚至父点以及同级结点的reflow。</p>\n<p>　　下面这些动作有很大可能会是成本比较高的：</p>\n<ul>\n<li>增加、删除、修改DOM结点时，会导致Reflow或Repaint</li>\n<li>移动DOM的位置，或是搞个动画的时候</li>\n<li>内容发生变化</li>\n<li>修改CSS样式的时候</li>\n<li>Resize窗口的时候（移动端没有这个问题），或是滚动的时候</li>\n<li>修改网页的默认字体时</li>\n</ul>\n<p>　　基本上来说，reflow有如下的几个原因：</p>\n<ul>\n<li>Initial，网页初始化的时候</li>\n<li>Incremental，一些js在操作DOM树时</li>\n<li>Resize，其些元件的尺寸变了</li>\n<li>StyleChange，如果CSS的属性发生变化了</li>\n<li>Dirty，几个Incremental的reflow发生在同一个frame的子树上</li>\n</ul>\n<h4 id=\"https相关原理\"><a href=\"#https相关原理\" class=\"headerlink\" title=\"https相关原理\"></a>https相关原理</h4><p>HTTPS是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL</p>\n<p>SSL用以保障在Internet上数据传输之安全，利用数据加密(Encryption)技术，可确保数据在网络上之 传输过程中不会被截取及窃听。</p>\n<p>SSL协议位于TCP/IP协议与各种应用层协议之间，为数据通讯提供安全支持。</p>\n<p>SSL协议可分为两层： </p>\n<ol>\n<li><p>SSL记录协议（SSL Record Protocol）：它建立在可靠的传输协议（如TCP）之上，为高层协议提供数据封装、压缩、加密等基本功能的支持。</p>\n</li>\n<li><p>SSL握手协议（SSL Handshake Protocol）：它建立在SSL记录协议之上，用于在实际的数据传输开始前，通讯双方进行身份认证、协商加密算法、交换加密密钥等。</p>\n</li>\n</ol>\n<p>SSL协议提供的服务主要有：</p>\n<p>1）认证用户和服务器，确保数据发送到正确的客户机和服务器；<br>2）加密数据以防止数据中途被窃取；<br>3）维护数据的完整性，确保数据在传输过程中不被改变。</p>\n<h4 id=\"cookie与session原理，还有token相关的一些内容\"><a href=\"#cookie与session原理，还有token相关的一些内容\" class=\"headerlink\" title=\"cookie与session原理，还有token相关的一些内容\"></a>cookie与session原理，还有token相关的一些内容</h4><p>cookie 是一个非常具体的东西，指的就是浏览器里面能永久存储的一种数据，仅仅是浏览器实现的一种数据存储功能。</p>\n<p>cookie由服务器生成，发送给浏览器，浏览器把cookie以kv形式保存到某个目录下的文本文件内，下一次请求同一网站时会把该cookie发送给服务器。由于cookie是存在客户端上的，所以浏览器加入了一些限制确保cookie不会被恶意使用，同时不会占据太多磁盘空间，所以每个域的cookie数量是有限的。</p>\n<p>session 从字面上讲，就是会话。这个就类似于你和一个人交谈，你怎么知道当前和你交谈的是张三而不是李四呢？对方肯定有某种特征（长相等）表明他就是张三。</p>\n<p>session 也是类似的道理，服务器要知道当前发请求给自己的是谁。为了做这种区分，服务器就要给每个客户端分配不同的“身份标识”，然后客户端每次向服务器发请求的时候，都带上这个“身份标识”，服务器就知道这个请求来自于谁了。至于客户端怎么保存这个“身份标识”，可以有很多种方式，对于浏览器客户端，大家都默认采用 cookie 的方式。</p>\n<p>服务器使用session把用户的信息临时保存在了服务器上，用户离开网站后session会被销毁。这种用户信息存储方式相对cookie来说更安全，可是session有一个缺陷：如果web服务器做了负载均衡，那么下一个操作请求到了另一台服务器的时候session会丢失。</p>\n<p>在Web领域基于Token的身份验证随处可见。在大多数使用Web API的互联网公司中，tokens 是多用户下处理认证的最佳方式。</p>\n<p>以下几点特性会让你在程序中使用基于Token的身份验证</p>\n<ol>\n<li><p>无状态、可扩展</p>\n</li>\n<li><p>支持移动设备</p>\n</li>\n<li><p>跨程序调用</p>\n</li>\n<li><p>安全</p>\n</li>\n</ol>\n<p>token，服务器存储在redis，可以减轻服务器压力</p>\n<p><a href=\"https://www.cnblogs.com/moyand/p/9047978.html\" target=\"_blank\" rel=\"noopener\">这个文档讲的很好</a></p>\n<h4 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h4><p><a href=\"https://juejin.im/post/5d6aa4f96fb9a06b112ad5b1#heading-6\" target=\"_blank\" rel=\"noopener\">深拷贝</a></p>\n<h4 id=\"算法学习\"><a href=\"#算法学习\" class=\"headerlink\" title=\"算法学习\"></a>算法学习</h4><p><a href=\"http://www.conardli.top/docs/dataStructure/\" target=\"_blank\" rel=\"noopener\">算法学习</a></p>\n<h4 id=\"react-router的内部原理解释\"><a href=\"#react-router的内部原理解释\" class=\"headerlink\" title=\"react-router的内部原理解释\"></a>react-router的内部原理解释</h4><h4 id=\"NodeJs的事件循环怎么理解？事件循环里各个阶段的认识\"><a href=\"#NodeJs的事件循环怎么理解？事件循环里各个阶段的认识\" class=\"headerlink\" title=\"NodeJs的事件循环怎么理解？事件循环里各个阶段的认识\"></a>NodeJs的事件循环怎么理解？事件循环里各个阶段的认识</h4><h4 id=\"说一下对bind，call，apply三个函数的认识，自己实现一下bind方法\"><a href=\"#说一下对bind，call，apply三个函数的认识，自己实现一下bind方法\" class=\"headerlink\" title=\"说一下对bind，call，apply三个函数的认识，自己实现一下bind方法\"></a>说一下对bind，call，apply三个函数的认识，自己实现一下bind方法</h4><h4 id=\"前端的requestAnimationFrame了解吗？有使用过吗？说一下使用场景\"><a href=\"#前端的requestAnimationFrame了解吗？有使用过吗？说一下使用场景\" class=\"headerlink\" title=\"前端的requestAnimationFrame了解吗？有使用过吗？说一下使用场景\"></a>前端的requestAnimationFrame了解吗？有使用过吗？说一下使用场景</h4><h4 id=\"nodejs的异步IO原理\"><a href=\"#nodejs的异步IO原理\" class=\"headerlink\" title=\"nodejs的异步IO原理\"></a>nodejs的异步IO原理</h4><h4 id=\"TCP三次握手四次挥手的具体细节\"><a href=\"#TCP三次握手四次挥手的具体细节\" class=\"headerlink\" title=\"TCP三次握手四次挥手的具体细节\"></a>TCP三次握手四次挥手的具体细节</h4><h4 id=\"React的Dom的diff算法描述一下\"><a href=\"#React的Dom的diff算法描述一下\" class=\"headerlink\" title=\"React的Dom的diff算法描述一下\"></a>React的Dom的diff算法描述一下</h4><h4 id=\"跨域分哪几种类型，如何解决各个跨域的问题\"><a href=\"#跨域分哪几种类型，如何解决各个跨域的问题\" class=\"headerlink\" title=\"跨域分哪几种类型，如何解决各个跨域的问题\"></a>跨域分哪几种类型，如何解决各个跨域的问题</h4><h4 id=\"前端模块化，使用过的打包工具有哪些，打包原理\"><a href=\"#前端模块化，使用过的打包工具有哪些，打包原理\" class=\"headerlink\" title=\"前端模块化，使用过的打包工具有哪些，打包原理\"></a>前端模块化，使用过的打包工具有哪些，打包原理</h4><h4 id=\"XSS，CSRF攻击过程，前端怎么去防止这类攻击\"><a href=\"#XSS，CSRF攻击过程，前端怎么去防止这类攻击\" class=\"headerlink\" title=\"XSS，CSRF攻击过程，前端怎么去防止这类攻击\"></a>XSS，CSRF攻击过程，前端怎么去防止这类攻击</h4>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckgbydgmr0000ofo9xnos41z8","category_id":"ckgbydgmy0004ofo9d3u4u2pr","_id":"ckgbydgn8000fofo980ih46jo"},{"post_id":"ckgbydgmw0002ofo9b3ql3opw","category_id":"ckgbydgn5000aofo9lwqr5j3b","_id":"ckgbydgnd000nofo9z754hh9f"},{"post_id":"ckgbydgn8000eofo9a8vdevcc","category_id":"ckgbydgn5000aofo9lwqr5j3b","_id":"ckgbydgne000rofo999hmkio6"},{"post_id":"ckgbydgna000iofo9d5s2kbgy","category_id":"ckgbydgn5000aofo9lwqr5j3b","_id":"ckgbydgng000uofo9y2m2obnl"},{"post_id":"ckgbydgn00006ofo93g3oiqul","category_id":"ckgbydgn5000aofo9lwqr5j3b","_id":"ckgbydgnh000zofo9wsre18nf"},{"post_id":"ckgbydgnc000kofo92u284qd1","category_id":"ckgbydgn5000aofo9lwqr5j3b","_id":"ckgbydgnj0012ofo9nxwih3uy"},{"post_id":"ckgbydgnd000pofo91rmw9fdd","category_id":"ckgbydgn5000aofo9lwqr5j3b","_id":"ckgbydgnl0017ofo9wjaatd6v"},{"post_id":"ckgbydgn30008ofo9ro9rzta4","category_id":"ckgbydgnd000mofo99hjh38vg","_id":"ckgbydgnm001aofo954i848s7"},{"post_id":"ckgbydgn40009ofo9mcfdtvag","category_id":"ckgbydgng000vofo9pig6wwg6","_id":"ckgbydgnn001eofo902ql68qk"},{"post_id":"ckgbydgnl0018ofo9spghf2re","category_id":"ckgbydgn5000aofo9lwqr5j3b","_id":"ckgbydgnp001jofo9sys7iych"},{"post_id":"ckgbydgnf000sofo9zda3mzbi","category_id":"ckgbydgnj0013ofo9qlq4c9oc","_id":"ckgbydgnr001oofo9avt7ct84"},{"post_id":"ckgbydgnm001bofo91ott02ks","category_id":"ckgbydgn5000aofo9lwqr5j3b","_id":"ckgbydgns001rofo9hrahu9f4"},{"post_id":"ckgbydgnn001gofo98712hhsm","category_id":"ckgbydgn5000aofo9lwqr5j3b","_id":"ckgbydgnv001wofo9cwz55ye9"},{"post_id":"ckgbydgng000xofo9olg2ljgm","category_id":"ckgbydgnn001cofo9yxcv7esm","_id":"ckgbydgnx001zofo9gkjv6fih"},{"post_id":"ckgbydgno001iofo9pj81urop","category_id":"ckgbydgn5000aofo9lwqr5j3b","_id":"ckgbydgo20023ofo97gly0rfi"},{"post_id":"ckgbydgnq001nofo96ykm634c","category_id":"ckgbydgn5000aofo9lwqr5j3b","_id":"ckgbydgo40027ofo9rnq96im4"},{"post_id":"ckgbydgni0010ofo96gs0xxd4","category_id":"ckgbydgnp001kofo9hx3gipyi","_id":"ckgbydgo5002bofo9dklv0qoj"},{"post_id":"ckgbydgnr001qofo9hefjkqyk","category_id":"ckgbydgn5000aofo9lwqr5j3b","_id":"ckgbydgo6002fofo9czkxdx5g"},{"post_id":"ckgbydgnu001vofo9fophgrg0","category_id":"ckgbydgn5000aofo9lwqr5j3b","_id":"ckgbydgo7002iofo995owvz8c"},{"post_id":"ckgbydgnk0015ofo9fekaf939","category_id":"ckgbydgnp001kofo9hx3gipyi","_id":"ckgbydgo8002mofo91i9v6jsa"},{"post_id":"ckgbydgo4002aofo91gmkvfj2","category_id":"ckgbydgn5000aofo9lwqr5j3b","_id":"ckgbydgo9002qofo9julgtbo8"},{"post_id":"ckgbydgnx001yofo9ju01ml85","category_id":"ckgbydgo30024ofo9v7z3m2vb","_id":"ckgbydgoa002uofo9x9p63tx6"},{"post_id":"ckgbydgo20022ofo9ahawh4y4","category_id":"ckgbydgo6002eofo99u634sef","_id":"ckgbydgoc002yofo9jn1uqqv3"},{"post_id":"ckgbydgo30026ofo9tgbhits7","category_id":"ckgbydgo8002nofo9tqdzeqsg","_id":"ckgbydgoe0032ofo9yymz9gkj"},{"post_id":"ckgbydgo5002dofo9gykjt0bw","category_id":"ckgbydgob002vofo94anineou","_id":"ckgbydgoh003aofo9t1enieva"},{"post_id":"ckgbydgo6002hofo95ny80kjx","category_id":"ckgbydgob002vofo94anineou","_id":"ckgbydgok003hofo9qdr2xzhj"},{"post_id":"ckgbydgoh003bofo9rovzi1wp","category_id":"ckgbydgn5000aofo9lwqr5j3b","_id":"ckgbydgol003mofo9gh7td2em"},{"post_id":"ckgbydgo7002lofo94ru4feh9","category_id":"ckgbydgob002vofo94anineou","_id":"ckgbydgon003qofo98l9n0i3q"},{"post_id":"ckgbydgoi003eofo9dbpdy210","category_id":"ckgbydgn5000aofo9lwqr5j3b","_id":"ckgbydgoo003tofo9wg4vduau"},{"post_id":"ckgbydgok003iofo9eu0ldd31","category_id":"ckgbydgn5000aofo9lwqr5j3b","_id":"ckgbydgoq003wofo9hg6wfhaw"},{"post_id":"ckgbydgo9002pofo9jod4kajh","category_id":"ckgbydgob002vofo94anineou","_id":"ckgbydgoq003zofo9c1hkz9gx"},{"post_id":"ckgbydgol003lofo9x17iydvd","category_id":"ckgbydgn5000aofo9lwqr5j3b","_id":"ckgbydgor0041ofo9cyt1u4xl"},{"post_id":"ckgbydgoa002tofo90wpllmia","category_id":"ckgbydgob002vofo94anineou","_id":"ckgbydgor0044ofo98a8boqy3"},{"post_id":"ckgbydgob002xofo9xccuwh5y","category_id":"ckgbydgoq003vofo9yidufdot","_id":"ckgbydgor0047ofo9xl16cc47"},{"post_id":"ckgbydgod0030ofo9hf3923iz","category_id":"ckgbydgor0042ofo9czdk33ql","_id":"ckgbydgos004bofo9c8r07zo7"},{"post_id":"ckgbydgon003pofo9e8gwp1hg","category_id":"ckgbydgor0048ofo99l59dkaa","_id":"ckgbydgos004dofo95fbjvjja"},{"post_id":"ckgbydgof0037ofo9mghytag1","category_id":"ckgbyfs9k004gofo92vy7zs3u","_id":"ckgbyfs9l004hofo9k986m6br"},{"post_id":"ckgbydgn6000dofo9nkniblsj","category_id":"ckgbydgor0042ofo9czdk33ql","_id":"ckgbyg5qv004iofo9hjlzftcy"},{"post_id":"ckgbydgoe0034ofo9cigmy18w","category_id":"ckgbydgor0042ofo9czdk33ql","_id":"ckgbygkts004jofo9dx5b6dre"}],"PostTag":[{"post_id":"ckgbydgmr0000ofo9xnos41z8","tag_id":"ckgbydgn00005ofo93j76m958","_id":"ckgbydgn6000cofo9nwf0nb3c"},{"post_id":"ckgbydgmw0002ofo9b3ql3opw","tag_id":"ckgbydgn5000bofo9zl0ku4yo","_id":"ckgbydgnb000jofo9rioyryac"},{"post_id":"ckgbydgn8000eofo9a8vdevcc","tag_id":"ckgbydgn5000bofo9zl0ku4yo","_id":"ckgbydgnc000lofo9ha8pp3od"},{"post_id":"ckgbydgna000iofo9d5s2kbgy","tag_id":"ckgbydgn5000bofo9zl0ku4yo","_id":"ckgbydgne000qofo9sj7jj9f7"},{"post_id":"ckgbydgn00006ofo93g3oiqul","tag_id":"ckgbydgn5000bofo9zl0ku4yo","_id":"ckgbydgnf000tofo95epqov53"},{"post_id":"ckgbydgnc000kofo92u284qd1","tag_id":"ckgbydgn5000bofo9zl0ku4yo","_id":"ckgbydgnh000yofo91v86w6lx"},{"post_id":"ckgbydgnd000pofo91rmw9fdd","tag_id":"ckgbydgn5000bofo9zl0ku4yo","_id":"ckgbydgnj0011ofo92cpll2dw"},{"post_id":"ckgbydgn30008ofo9ro9rzta4","tag_id":"ckgbydgnd000oofo9ev6vhz5i","_id":"ckgbydgnk0016ofo96o03p94c"},{"post_id":"ckgbydgn40009ofo9mcfdtvag","tag_id":"ckgbydgng000wofo9t8cnrpip","_id":"ckgbydgnl0019ofo9mzjwzbr9"},{"post_id":"ckgbydgnl0018ofo9spghf2re","tag_id":"ckgbydgn5000bofo9zl0ku4yo","_id":"ckgbydgnn001fofo93bw5z7yj"},{"post_id":"ckgbydgnm001bofo91ott02ks","tag_id":"ckgbydgn5000bofo9zl0ku4yo","_id":"ckgbydgnq001mofo9sksyuy9g"},{"post_id":"ckgbydgnn001gofo98712hhsm","tag_id":"ckgbydgn5000bofo9zl0ku4yo","_id":"ckgbydgnr001pofo9ecxac3rs"},{"post_id":"ckgbydgnf000sofo9zda3mzbi","tag_id":"ckgbydgnn001dofo90z2q2ygv","_id":"ckgbydgnu001uofo9y8wmx3p6"},{"post_id":"ckgbydgno001iofo9pj81urop","tag_id":"ckgbydgn5000bofo9zl0ku4yo","_id":"ckgbydgnw001xofo9e10bjh51"},{"post_id":"ckgbydgnq001nofo96ykm634c","tag_id":"ckgbydgn5000bofo9zl0ku4yo","_id":"ckgbydgo10020ofo9mfje8rpu"},{"post_id":"ckgbydgng000xofo9olg2ljgm","tag_id":"ckgbydgnq001lofo9h9u7ufvw","_id":"ckgbydgo30025ofo9hxjcfo17"},{"post_id":"ckgbydgnr001qofo9hefjkqyk","tag_id":"ckgbydgn5000bofo9zl0ku4yo","_id":"ckgbydgo40028ofo9fkgkj692"},{"post_id":"ckgbydgnu001vofo9fophgrg0","tag_id":"ckgbydgn5000bofo9zl0ku4yo","_id":"ckgbydgo5002cofo9biog7cnb"},{"post_id":"ckgbydgni0010ofo96gs0xxd4","tag_id":"ckgbydgnu001tofo9myyiy43u","_id":"ckgbydgo6002gofo9sj76z29x"},{"post_id":"ckgbydgnk0015ofo9fekaf939","tag_id":"ckgbydgnu001tofo9myyiy43u","_id":"ckgbydgo7002kofo9tygdo2by"},{"post_id":"ckgbydgo4002aofo91gmkvfj2","tag_id":"ckgbydgn5000bofo9zl0ku4yo","_id":"ckgbydgo9002oofo9bkbog8iy"},{"post_id":"ckgbydgnx001yofo9ju01ml85","tag_id":"ckgbydgo40029ofo961lvvnna","_id":"ckgbydgoa002sofo96z9y9ziq"},{"post_id":"ckgbydgo20022ofo9ahawh4y4","tag_id":"ckgbydgo7002jofo9lnv8mxoi","_id":"ckgbydgob002wofo9rab0uk0t"},{"post_id":"ckgbydgo30026ofo9tgbhits7","tag_id":"ckgbydgo9002rofo96pkqjuj2","_id":"ckgbydgod0031ofo9jnfnb28d"},{"post_id":"ckgbydgod0030ofo9hf3923iz","tag_id":"ckgbydgnj0014ofo98o53qtin","_id":"ckgbydgof0035ofo9j2859fw3"},{"post_id":"ckgbydgo5002dofo9gykjt0bw","tag_id":"ckgbydgoc002zofo975a3hog5","_id":"ckgbydgoh0038ofo9uotfr452"},{"post_id":"ckgbydgo6002hofo95ny80kjx","tag_id":"ckgbydgoc002zofo975a3hog5","_id":"ckgbydgoj003fofo9ct49lpp7"},{"post_id":"ckgbydgoh003bofo9rovzi1wp","tag_id":"ckgbydgn5000bofo9zl0ku4yo","_id":"ckgbydgol003jofo9i7pbm7in"},{"post_id":"ckgbydgoi003eofo9dbpdy210","tag_id":"ckgbydgn5000bofo9zl0ku4yo","_id":"ckgbydgom003nofo96mgpcwv0"},{"post_id":"ckgbydgo7002lofo94ru4feh9","tag_id":"ckgbydgoc002zofo975a3hog5","_id":"ckgbydgoo003rofo9g5vbxvid"},{"post_id":"ckgbydgok003iofo9eu0ldd31","tag_id":"ckgbydgn5000bofo9zl0ku4yo","_id":"ckgbydgoq003uofo9fhbk83ns"},{"post_id":"ckgbydgol003lofo9x17iydvd","tag_id":"ckgbydgn5000bofo9zl0ku4yo","_id":"ckgbydgoq003xofo98c7bvz4b"},{"post_id":"ckgbydgo9002pofo9jod4kajh","tag_id":"ckgbydgoc002zofo975a3hog5","_id":"ckgbydgor0040ofo99al8sbzw"},{"post_id":"ckgbydgoa002tofo90wpllmia","tag_id":"ckgbydgoc002zofo975a3hog5","_id":"ckgbydgor0043ofo9uuavy409"},{"post_id":"ckgbydgob002xofo9xccuwh5y","tag_id":"ckgbydgoq003yofo9ln3ncyl9","_id":"ckgbydgor0046ofo931ql71ln"},{"post_id":"ckgbydgon003pofo9e8gwp1hg","tag_id":"ckgbydgos0049ofo9hqbaxeqm","_id":"ckgbydgos004cofo9wmhwpfxk"}],"Tag":[{"name":"Django","_id":"ckgbydgn00005ofo93j76m958"},{"name":"Javascript","_id":"ckgbydgn5000bofo9zl0ku4yo"},{"name":"MVC","_id":"ckgbydgnd000oofo9ev6vhz5i"},{"name":"TypeScript","_id":"ckgbydgng000wofo9t8cnrpip"},{"name":"Vue","_id":"ckgbydgnj0014ofo98o53qtin"},{"name":"ES6","_id":"ckgbydgnn001dofo90z2q2ygv"},{"name":"Git","_id":"ckgbydgnq001lofo9h9u7ufvw"},{"name":"hexo","_id":"ckgbydgnu001tofo9myyiy43u"},{"name":"mongoDB","_id":"ckgbydgo40029ofo961lvvnna"},{"name":"Mysql","_id":"ckgbydgo7002jofo9lnv8mxoi"},{"name":"NodeJS","_id":"ckgbydgo9002rofo96pkqjuj2"},{"name":"Sass","_id":"ckgbydgoc002zofo975a3hog5"},{"name":"ubuntu","_id":"ckgbydgoq003yofo9ln3ncyl9"},{"name":"微信小程序","_id":"ckgbydgor0045ofo9u3pgsho7"},{"name":"面试","_id":"ckgbydgos0049ofo9hqbaxeqm"},{"name":"mini","_id":"ckgbyf2w8004eofo9o85acl32"}]}}